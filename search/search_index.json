{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About me Dmitry Ivanov GitHub repo Facebook VK.com LinkedIn Useful links Rob van der Woude's Scripting Page VbsEdit - VBS scripts Morgan's Library - Dan Morgan's Oracle Library Adminer - simple database management php console Global DNS record check - Site to get responce from many DNS servers around the world Unsorted Joining all similarly prefixed files For example, \"_tar.gz.1of2\" and \"_tar.gz.2of2\". # Unix cat \"FileName_tar.gz.1of3\" \"FileName_tar.gz.2of3\" \"FileName_tar.gz.3of3\" > \"FileName.tar.gz\" # Windows copy /b \"FileName_tar.gz.1of3\"+\"FileName_tar.gz.2of3\"+\"FileName_tar.gz.3of3\" \"FileName.tar.gz\" TMUX tmux list-sessions tmux attach -t 2 sudo tmux -2 -S /tmp/tmux-<UID>/default","title":"Home"},{"location":"#about-me","text":"Dmitry Ivanov GitHub repo Facebook VK.com LinkedIn","title":"About me"},{"location":"#useful-links","text":"Rob van der Woude's Scripting Page VbsEdit - VBS scripts Morgan's Library - Dan Morgan's Oracle Library Adminer - simple database management php console Global DNS record check - Site to get responce from many DNS servers around the world","title":"Useful links"},{"location":"#unsorted","text":"","title":"Unsorted"},{"location":"#joining-all-similarly-prefixed-files","text":"For example, \"_tar.gz.1of2\" and \"_tar.gz.2of2\". # Unix cat \"FileName_tar.gz.1of3\" \"FileName_tar.gz.2of3\" \"FileName_tar.gz.3of3\" > \"FileName.tar.gz\" # Windows copy /b \"FileName_tar.gz.1of3\"+\"FileName_tar.gz.2of3\"+\"FileName_tar.gz.3of3\" \"FileName.tar.gz\"","title":"Joining all similarly prefixed files"},{"location":"#tmux","text":"tmux list-sessions tmux attach -t 2 sudo tmux -2 -S /tmp/tmux-<UID>/default","title":"TMUX"},{"location":"Admin/Windows_Administrative_Tools/","text":"Use domain credentials from non domain worksation runas /netonly /user:DOMAIN\\username \"<program>\" # DNS Management #runas /netonly /user:username@domain \"%SystemRoot%\\system32\\mmc.exe %SystemRoot%\\system32\\dnsmgmt.msc\" # AD Users and Computers #runas /netonly /user:username@domain \"%SystemRoot%\\system32\\mmc.exe %SystemRoot%\\system32\\dsa.msc\"","title":"Windows Administrative Tools"},{"location":"Admin/Windows_Administrative_Tools/#use-domain-credentials-from-non-domain-worksation","text":"runas /netonly /user:DOMAIN\\username \"<program>\" # DNS Management #runas /netonly /user:username@domain \"%SystemRoot%\\system32\\mmc.exe %SystemRoot%\\system32\\dnsmgmt.msc\" # AD Users and Computers #runas /netonly /user:username@domain \"%SystemRoot%\\system32\\mmc.exe %SystemRoot%\\system32\\dsa.msc\"","title":"Use domain credentials from non domain worksation"},{"location":"Admin/xFreeRDP/","text":"XfreeRDP xfreerdp [+clipboard]/w:<WIDTH> /h:<HEIGHT> /drive:<cuatom_drive_name>,<path_to_attach> /v:<ip>:<port> /u:<user_name> xfreerdp +clipboard /w:1600 /h:900 /v:10.15.0.10:3389 /u:Administrator xfreerdp +clipboard /w:1800 /h:1000 /u:Adminitatrator /drive:hmc,/home/4T/IT/IBM/HMC/7.9_sp3 /v:10.15.0.10","title":"xFreeRDP"},{"location":"Admin/xFreeRDP/#xfreerdp","text":"xfreerdp [+clipboard]/w:<WIDTH> /h:<HEIGHT> /drive:<cuatom_drive_name>,<path_to_attach> /v:<ip>:<port> /u:<user_name> xfreerdp +clipboard /w:1600 /h:900 /v:10.15.0.10:3389 /u:Administrator xfreerdp +clipboard /w:1800 /h:1000 /u:Adminitatrator /drive:hmc,/home/4T/IT/IBM/HMC/7.9_sp3 /v:10.15.0.10","title":"XfreeRDP"},{"location":"Awesome/Awesome_AWS/","text":"Awesome AWS A curated list of awesome AWS libraries, open source repos, guides, blogs, and other resources. Inspired by the awesome list. awesome-aws Python Module The Python module awesome-aws regularly scans repos on Awesome AWS to maintain the accuracy of the Fiery Meter of AWSome . Index SDKs and Samples Android C++ Clojure Go iOS IoT Java JavaScript Haskell Perl PHP Python Ruby Rust Scala Xamarin Unity .NET Command Line Tools Universal Command Line Interface Windows PowerShell IDE Toolkits Eclipse Toolkit Visual Studio Toolkit Open Source Repos API Gateway CLI CloudFormation CloudSearch CloudTrail CloudWatch Code Deploy Code Pipeline Cognito Data Pipeline Device Farm DynamoDB Elastic Beanstalk Elastic Container Service Elastic File System Elastic MapReduce Elastic Search Elasticache Glacier Kinesis Lambda Machine Learning Mobile Analytics OpsWorks Redshift Route 53 S3 SNS SQS Data DevOps Security Accompanying Miscellaneous Guides, Books, Documentation, and Training Getting Started Guides General Guides Books Whitepapers Documentation Training Case Studies: Powered by AWS Social Blogs Twitter Influencers Facebook Pages YouTube Channels LinkedIn Groups Subreddits Conferences Latest KPIs and Stats Appendix of Core Services Services in Plain English Compute Networking Enterprise Applications Analytics Artificial Intelligence Management Tools Security and Identity Internet of Things Mobile Services Storage and Content Delivery Databases Application Services Developer Tools Miscellaneous Services Contributing Credits Other Awesome Lists Contact Info License SDKs and Samples AWS and community SDKs with samples and docs, grouped by language. Android SDK Repo :fire::fire: Repo with Samples :fire::fire::fire: Install Docs Learn More C++ SDK Repo :fire::fire::fire: Blog with Samples The C++ SDK is a labs project with limited docs and/or samples. Clojure SDK Repo :fire::fire::fire: Install Docs The Clojure SDK is a community project with limited docs and/or samples. ) Go SDK Repo :fire::fire::fire::fire::fire: Install Docs Learn More Related Repos: goamz/goamz :fire::fire: iOS SDK Repo :fire::fire::fire::fire: Repo with Samples :fire::fire::fire: Install Docs Learn More IoT SDK Repo for Arduino Repo for C :fire::fire: Repo for JavaScript :fire::fire::fire: Repo for Arduino Yun :fire: Docs The IoT SDK is a labs project with limited docs and/or samples. Java SDK Repo :fire::fire::fire::fire::fire: Repo with Samples :fire: Install Docs Learn More JavaScript SDK Repo :fire::fire::fire::fire::fire: Repo with Samples :fire::fire: Install Docs Learn More Related Repos: aws/aws-amplify :fire::fire::fire::fire::fire: chilts/awssum :fire::fire: mirkokiefer/aws-lib :fire::fire::fire: SaltwaterC/aws2js :fire::fire: Haskell SDK Repo :fire::fire: Docs Related Repos: aristidb/aws :fire: The Haskell SDK is a community project with limited docs and/or samples. Perl SDK Repo :fire: Repo with Samples :fire: Install Docs Learn More The Perl SDK is a community project. PHP SDK Repo :fire::fire::fire::fire::fire: Repo with Samples Install Docs Learn More Related Repos: aws-sdk-php-laravel :fire::fire::fire::fire: aws-sdk-php-silex aws-sdk-php-zf2 Python SDK Repo :fire::fire::fire::fire::fire: Repo with Samples :fire: Install Docs Learn More Related Repos: boto3 :fire::fire::fire::fire::fire: botocore :fire::fire: Ruby SDK Repo :fire::fire::fire::fire::fire: Repo with S3 Sample Install Docs Samples :fire::fire::fire: Related Repos: aws-sdk-rails :fire::fire: appoxy/aws :fire::fire: rightscale/right_aws :fire::fire: Rust SDK Repo :fire::fire::fire: Install Docs The Rust SDK is a community project with limited docs and/or samples. Scala SDK Repo Related Repos: atlassian/aws-scala seratch/AWScala :fire::fire::fire: The Scala SDK is a labs project with limited docs and/or samples. Unity SDK Repo Repo with Samples Install Docs Xamarin SDK Repo Blog with Samples The Xamarin SDK is a labs project with limited docs and/or samples. .NET SDK Repo :fire::fire::fire: Repo with Samples Install Docs Learn More Samples :fire: Command Line Tools AWS and community command line tools with samples and docs. Universal Command Line Interface Repo :fire::fire::fire::fire::fire: Install Docs Learn More Related Repos: awslabs/aws-shell :fire::fire::fire::fire::fire: donnemartin/saws :fire::fire::fire::fire::fire: Windows PowerShell Install Docs Learn More IDE Toolkits Official IDE toolkits with samples and docs. Eclipse Toolkit Install Docs Learn More Visual Studio Toolkit Install Docs Learn More Open Source Repos AWS and community open source projects, grouped by service. See A Note on Repo AWSomeness for more details. API Gateway AWS Repos: api-gateway-secure-pet-store :fire::fire: - Cognito credentials through Lambda. aws-apigateway-sdk-java - SDK for Java. aws-apigateway-swagger-importer :fire::fire: - Tools to work with Swagger. Community Repos: Contribute CLI AWS Repos: awscli-aliases :fire: - Repository for AWS CLI aliases. amazon-ecs-cli :fire::fire::fire: - ECS CLI using the same Docker Compose file format and familiar Compose commands. aws-cli :fire::fire::fire::fire::fire: - Universal Command Line Interface. aws-shell :fire::fire::fire::fire::fire: awscli-cookbook - Installs the CLI tools and provides a set of LWRPs for use within chef cookbooks. awsmobile-cli :fire: - CLI experience for Frontend developers in the JavaScript ecosystem. Community Repos: achiku/jungle :fire::fire::fire: - Operations by EC2 and ELB cli should be simpler. donnemartin/saws :fire::fire::fire::fire::fire: - A Supercharged AWS Command Line Interface. timkay/aws :fire::fire: - Easy command line access to Amazon EC2, S3, SQS, ELB, and SDB. wallix/awless :fire::fire::fire::fire::fire: - a Powerful CLI for EC2, IAM and S3 in Go. 99designs/aws-vault :fire::fire::fire::fire: - A tool for securely storing AWS credentials, written in Go. CloudFormation AWS Repos: aws-cfn-custom-resource-examples - Custom resource examples. aws-cfn-resource-bridge - Custom resource framework. cfncluster-cookbook - Sample Cookbook. cfncluster :fire::fire: - Framework that deploys and maintains HPC clusters. Community Repos: Appliscale/perun - A CLI tool for linting/validation and managing CloudFormation templates and stacks. bazaarvoice/cloudformation-ruby-dsl :fire: - Ruby DSL for creating templates. beaknit/cform - SublimeText plugin. [cloudreach/sceptre] :fire::fire::fire:](https://github.com/cloudreach/sceptre) - A CLI tool for automating CloudFormation. cloudtools/troposphere :fire::fire::fire::fire::fire: - Python library to create descriptions. peterkh/cumulus :fire::fire: - Manages stacks. envato/stack_master :fire: - A CLI tool to manage CloudFormation stacks. sparkleformation/sfn - CLI for stack management. sparkleformation/sparkle_formation :fire: - Ruby DSL for template creation. CloudSearch AWS Repos: cloudsearchable - An ActiveRecord-style ORM query interface. Community Repos: Contribute CloudTrail AWS Repos: aws-cloudtrail-processing-library - Easily consume and process log files. Community Repos: AppliedTrust/traildash :fire::fire: - Slick dashboard. CloudWatch AWS Repos: cloudwatch-logs-subscription-consumer :fire::fire: - Kinesis stream reader. ecs-cloudwatch-logs - Assets in the blog post on using Amazon ECS and Amazon CloudWatch logs. logstash-output-cloudwatchlogs - A logstash plugin that sends logs to CloudWatch. opsworks-cloudwatch-logs-cookbooks - OpsWorks sample cookbook. Community Repos: jorgebastida/awslogs :fire::fire::fire::fire::fire: - Simple CLI for querying groups, streams and events. newrelic-platform/newrelic_aws_cloudwatch_plugin :fire: - New Relic plugin. Code Deploy AWS Repos: aws-codedeploy-agent :fire: - Sample agent. aws-codedeploy-plugin :fire: - Jenkins plugin. aws-codedeploy-samples :fire::fire: - Samples and template scenarios. Community Repos: Contribute Code Pipeline AWS Repos: aws-codepipeline-custom-job-worker - Develop your own job worker when creating a custom action. aws-codepipeline-jenkins-aws-codedeploy_linux - Four-stage pipeline for Linux. aws-codepipeline-plugin-for-jenkins - Jenkins plugin. aws-codepipeline-s3-aws-codedeploy_linux - Simple pipeline for Linux. AWSCodePipeline-Jenkins-AWSCodeDeploy_Windows - Four-stage pipeline for Windows. AWSCodePipeline-S3-AWSCodeDeploy_Windows - Simple pipeline for Windows. Community Repos: Contribute Cognito AWS Repos: amazon-cognito-android - Sync SDK for Android. amazon-cognito-developer-authentication-sample - Authentication sample. amazon-cognito-dotnet - Sync SDK for .NET. amazon-cognito-ios - Sync SDK for iOS. amazon-cognito-js :fire: - Sync SDK for JavaScript. amazon-cognito-streams-sample - Consuming Streams sample. cognito-sample-nodejs - Sample App for Node.js. Community Repos: capeless/warrant :fire: - Python library for using Cognito. Data Pipeline AWS Repos: data-pipeline-samples :fire::fire: - Sample pipelines. Community Repos: Contribute Device Farm AWS Repos: aws-device-farm-appium-tests-for-sample-app - Appium TestNG Android tests. aws-device-farm-calabash-tests-for-sample-app - Calabash Android tests. aws-device-farm-gradle-plugin - Gradle plugin. aws-device-farm-jenkins-plugin - Jenkins plugin. aws-device-farm-sample-app-for-android - Sample Android app. Community Repos: Contribute DynamoDB AWS Repos: aws-dotnet-session-provider - A session state provider for ASP.NET apps. aws-dotnet-trace-listener - A trace listener for System.Diagnostics that can be used to log events. aws-dynamodb-encryption-java - Encryption Client for Java. aws-dynamodb-examples :fire: - Samples using the Java SDK. aws-dynamodb-mars-json-demo - Stores and indexes NASA JPL Mars images. aws-dynamodb-session-tomcat - Session store for Apache Tomcat. aws-sessionstore-dynamodb-ruby - Handles sessions for Ruby web apps. dynamodb-cross-region-library :fire::fire: - Cross-region replication. dynamodb-geo :fire::fire: - Library to create and query geospatial data. dynamodb-import-export-tool - Import and export examples. dynamodb-online-index-violation-detector - Finds violations on an online GSI's hash key and range key. dynamodb-streams-kinesis-adapter - Kinesis interface to consume and process data from a DynamoDB stream. dynamodb-tictactoe-example-app - Lightweight python app. dynamodb-titan-storage-backend :fire::fire: - Storage Backend for Titan. dynamodb-transactions :fire::fire: - Performs atomic writes and isolated reads across multiple items and tables. logstash-input-dynamodb - Logstash input plugin. Community Repos: channl/dynamodb-lambda-autoscale :fire::fire: - Autoscale DynamoDB provisioned capacity using Lambda. lyft/confidant :fire::fire::fire::fire: - Stores secrets, encrypted at rest. sebdah/dynamic-dynamodb :fire::fire::fire: - Provides auto-scaling. Elastic Beanstalk AWS Repos: aws-eb-glassfish-dockerfiles - GlassFish docker files. aws-eb-python-dockerfiles - Python docker files. eb-demo-php-simple-app :fire: - Simple PHP app. eb-docker-multiple-ports - Simple Node.js and Tomcat apps using Docker images. eb-docker-nginx-proxy - Simple PHP app using the PHP-FPM and Nginx Docker images. eb-docker-virtual-hosting - Simple PHP, Tomcat, and Nginx applications using Docker images. eb-node-express-sample :fire: - Sample express app. eb-node-express-signup - Express framework and Bootstrap Node.js sample app. eb-node-express - Sample app referenced in the Developer Guide. eb-py-flask-signup-worker - Python app that illustrates worker roles. eb-py-flask-signup :fire::fire: - Python signup form app with Flask and Bootstrap. eb-python-flask - Simple Python and Flask app. eb-wif-sample - Sample login app with Web Identity Federation. Community Repos: alienfast/elastic-beanstalk :fire: - Gem with rake configuration and deployment for rails apps. ThoughtWorksStudios/eb_deployer :fire::fire: - Blue-green deployment automation. Elastic Compute Cloud AWS Repos: Contribute Community Repos: alestic/ec2-consistent-snapshot :fire::fire: - Initiate consistent EBS snapshots in EC2. ConradIrwin/aws-name-server :fire::fire::fire: - DNS server that lets you look up instances by name. cristim/autospotting :fire::fire::fire: - Automatically rolling-replace on-demand EC2 instances in AutoScaling groups with compatible spot instances. evannuil/aws-snapshot-tool :fire::fire: - Automates EBS snapshots and rotation. kelseyhightower/kubernetes-the-hard-way :fire::fire::fire::fire::fire: - Bootstrap Kubernetes the hard way on EC2. No scripts. mirakui/ec2ssh :fire::fire: - SSH config manager. openebs/openebs :fire::fire::fire::fire::fire: - Containerized block storage QoS SLAs, tiering and replica policies across AZs and environments, and predictable and scalable performance. skavanagh/EC2Box :fire::fire: - A web-based SSH console to manage multiple instances simultaneously. wbailey/claws :fire: - CLI-driven console with capistrano integration. Elastic Container Service AWS Repos: amazon-ecs-agent :fire::fire::fire::fire: - Agent that runs on and starts containers. amazon-ecs-amazon-efs - Persists Data from containers. amazon-ecs-init :fire: - RPM developed to support the Amazon ECS Container Agent. blox :fire::fire::fire: - Open source tools for building custom schedulers on ECS. ecs-blue-green-deployment :fire: - Blue-green deployment on ECS. ecs-cloudwatch-logs - Assets from the blog using Amazon ECS and Amazon CloudWatch logs. ecs-demo-php-simple-app - Simple PHP app. ecs-mesos-scheduler-driver :fire: - Integrates Apache Mesos. ecs-refarch-continuous-deployment :fire::fire: - Reference Architecture for continuous deployment to ECS using CodePipeline. ecs-task-kite - Simple ambassador container for inter-task communication. lambda-ecs-worker-pattern :fire::fire: - Extends Lambda using SQS and ECS. py-flask-signup-docker - Python sample app. service-discovery-ecs-consul - Assets from the blog Service Discovery via Consul with Amazon ECS. Community Repos: Lumoslabs/broadside - Command line tool for deploying revisions of containerized applications. Elastic File System AWS Repos: amazon-ecs-amazon-efs - Persist data from ECS. Community Repos: Contribute Elastic MapReduce AWS Repos: emr-bootstrap-actions :fire::fire::fire: - Sample bootstrap actions. emr-sample-apps - Sample apps. Community Repos: Yelp/mrjob :fire::fire::fire::fire::fire: - Run MapReduce jobs on Hadoop or EMR. Elastic Search AWS Repos: logstash-output-amazon_es :fire::fire: - Logstash output plugin to sign and export events. opsworks-elasticsearch-cookbook - OpsWorks Elasticsearch sample cookbook. Community Repos: elastic/elasticsearch-cloud-aws :fire::fire::fire: - Plugin for Elasticsearch. Elasticache AWS Repos: aws-elasticache-cluster-client-libmemcached - Libmemcached library support. aws-elasticache-cluster-client-memcached-for-java - Client for Java. aws-elasticache-cluster-client-memcached-for-php - Enhanced PHP library connecting to ElastiCache. elasticache-cluster-config-net - Config object for Enyim's MemcachedClient to enable auto discovery. Community Repos: Contribute Glacier Community Repos: vsespb/mt-aws-glacier :fire::fire: - Perl Multithreaded Multipart sync to Glacier. Kinesis AWS Repos: amazon-kinesis-aggregators :fire: - Provides a simple way to create real time aggregations. amazon-kinesis-client-net - Client Library for .NET. amazon-kinesis-client-nodejs :fire: - Client Library for Node.js. amazon-kinesis-client-python :fire::fire: - Client Library for Python. amazon-kinesis-client-ruby :fire: - Client Library for Ruby. amazon-kinesis-client :fire::fire: Client library for Amazon Kinesis. amazon-kinesis-connectors :fire::fire: - Libary to integrate with other AWS and non-AWS services. amazon-kinesis-data-visualization-sample :fire: - Sample data visualization app. amazon-kinesis-learning - Learning Kinesis Development. amazon-kinesis-producer :fire: - Producer Library. amazon-kinesis-scaling-utils :fire::fire: - Provides the ability to scale streams. aws-fluent-plugin-kinesis :fire: - Fluent Plugin. dynamodb-streams-kinesis-adapter - DynamoDB Streams Adapter. kinesis-log4j-appender - Log4J Appender. kinesis-poster-worker - Simple multi-threaded Python Poster and Worker. kinesis-storm-spout :fire: - Spout for Storm. mqtt-kinesis-bridge - Simple MQTT bridge in Python. Community Repos: Contribute Lambda AWS Repos: amazon-elasticsearch-lambda-samples :fire::fire: - Data ingestion for Elasticsearch from S3 and Kinesis. awslabs/aws-sam-local :fire::fire::fire::fire::fire: - CLI tool for local development and testing of Serverless applications. aws-lambda-go :fire::fire::fire::fire: - Libraries, samples and tools to help Go developers develop Lambda functions. aws-lambda-java-libs :fire: - Official mirror for interface definitions and helper classes. aws-lambda-redshift-loader :fire::fire: - Redshift loader. chalice :fire::fire::fire::fire::fire: - Python Serverless Microframework. create-thumbnails-lambda - Uses the grunt-aws-lambda plugin to help you develop and test. lambda-ecs-worker-pattern :fire::fire: - Extends Lambda using SQS and ECS. lambda-refarch-fileprocessing :fire::fire: - Reference Architecture for Real-time File Processing. lambda-refarch-iotbackend :fire: - Reference Architecture for creating an IoT Backend. lambda-refarch-mobilebackend :fire::fire: - Reference Architecture for creating a Mobile Backend. lambda-refarch-webapp :fire::fire::fire: - Reference Architecture for creating a Web Application. Community Repos: alestic/lambdash :fire::fire: - Lambda shell - Run sh commands inside the Lambda environment. Alephbet/gimel :fire: - Run your own A/B testing backend using Lambda. apex/apex :fire::fire::fire::fire::fire: - Minimal AWS Lambda function manager with Go support. claudiajs/claudia :fire::fire::fire::fire::fire: - Deploy Node.js projects to Lambda and API Gateway easily. cloudnative/lambda-chat :fire::fire: - A chat application without servers. danilop/LambdAuth :fire::fire::fire::fire: - Sample authentication service. eawsy/aws-lambda-go :fire::fire::fire: - A fast and clean way to execute Go on Lambda. garnaat/kappa :fire::fire::fire: - Kappa is a CLI tool that makes it easier to deploy, update, and test functions for AWS Lambda. goadapp/goad :fire::fire:fire::fire::fire: - Lambda powered, highly distributed, load testing tool. graphcool/chromeless :fire::fire::fire::fire::fire: - Automate Chrome through Lambda. jimpick/lambda-comments :fire::fire::fire: - Blog commenting system built with Lambda. jorgebastida/gordon :fire::fire::fire::fire::fire: - \u03bb Gordon is a tool to create, wire and deploy AWS Lambdas using CloudFormation. ks888/LambStatus :fire::fire::fire: - A status page system inspired by StatusPage.io, built on AWS Lambda. kubek2k/lambdoku :fire::fire::fire: - Heroku-like experience when using Lambda. lambci/lambci :fire::fire::fire::fire::fire: - A continuous integration system built on Lambda. littlstar/s3-lambda :fire::fire::fire::fire: - Lambda functions over S3 objects with concurrency control (each, map, reduce, filter). mentum/lambdaws :fire::fire::fire::fire: - Deploy, run and get results in a breeze. Miserlou/Zappa :fire::fire::fire::fire::fire: - Serverless WSGI Python Web Apps with AWS Lambda + API Gateway. nficano/python-lambda :fire::fire::fire: - A toolkit for developing and deploying serverless Python code in Lambda. serverless/serverless :fire::fire::fire::fire::fire: The Serverless Application Framework (formerly JAWS). Tim-B/grunt-aws-lambda :fire::fire: - Grunt plugin. trek10inc/aws-lambda-debugger :fire::fire: - Remote debugging tool for Lambda functions running on Node 6.10 Machine Learning AWS Repos: machine-learning-samples :fire::fire::fire: - Sample apps. Community Repos: Contribute Mobile Analytics AWS Repos: aws-sdk-mobile-analytics-js - JavaScript SDK. Community Repos: Contribute OpsWorks AWS Repos: opsworks-attribute-customization - Attribute customization example. opsworks-capistrano - Capistrano with instances. opsworks-cloudwatch-logs-cookbooks - CloudWatch sample cookbook. opsworks-cookbooks :fire::fire::fire::fire: - Chef Cookbooks. opsworks-demo-php-photo-share-app - Simple PHP photo share app. opsworks-demo-php-simple-app - Simple PHP app. opsworks-demo-rails-photo-share-app - A sample Rails app. opsworks-elasticsearch-cookbook - Elasticsearch sample cookbook. opsworks-example-cookbooks - Cookbooks used with the sample apps. opsworks-first-cookbook - Cookbook used to demonstrate simple recipes. opsworks-windows-demo- - A sample Node.JS app. opsworks-windows-demo-cookbooks - Cookbooks for Windows. todo-sample-app-cookbooks - Custom cookbooks associated with the todo-sample-app. Community Repos: Contribute Redshift AWS Repos: aws-lambda-redshift-loader :fire::fire: - Lambda database loader. amazon-redshift-utils :fire::fire::fire::fire: - Applies optimal Column Encoding to existing Tables. Community Repos: Lumoslabs/aleph - A full featured web application for writing and running Redshift queries. Supports revision tracking of queries and has basic visualization support. getredash/redash :fire::fire::fire::fire::fire: - A web application that allows to easily query an existing database, share the dataset and visualize it in different ways. Initially was developed to work with Redshift, and has great support for it. everythingMe/redshift_console - A simple tool to monitor and manage a Redshift cluster. The first release has basic tools to monitor running queries, WLM queue and your tables/schemas. Route 53 AWS Repos: route53-infima :fire: - Manages service-level fault isolation. Community Repos: barnybug/cli53 :fire::fire::fire::fire: - cli53 is a command line tool for Amazon Route 53 which provides import and export from BIND format and simple command line management of Route 53 domains. winebarrel/roadworker :fire::fire: - Roadworker is a tool to manage Route53. It defines the state of Route53 using DSL, and updates Route53 according to DSL. S3 Community Repos: anomalizer/ngx_aws_auth :fire::fire: - Implements proxying of authenticated requests. bloomreach/s4cmd :fire::fire::fire: - S3 command line tool, faster than S3cmd for large files. CulturalMe/meteor-slingshot :fire::fire::fire: - Upload files in meteor. danilop/yas3fs :fire::fire: - Yet Another S3-backed File System, inspired by s3fs. grippy/node-s3 - Node.js app to manage buckets. jubos/fake-s3 :fire::fire::fire::fire::fire: - Lightweight S3 clone that simulates most commands. kahing/goofys :fire::fire::fire::fire: - a Filey System for Amazon S3 written in Go. littlstar/s3renity :fire::fire::fire::fire: - Batch functions with concurrency control (each, map, reduce, filter, join) marcel/aws-s3 :fire::fire::fire: - Ruby implementation of Amazon's S3 REST API. mardix/flask-cloudy :fire: - Flask extension. MathieuLoutre/grunt-aws-s3 :fire::fire: - Grunt plugin. minio/mc :fire::fire::fire: - Minio Client for filesystem and cloud storage. minio/minio :fire::fire::fire::fire::fire: - Object storage server compatible with S3. mumrah/s3-multipart :fire: - Parallel upload/download to S3 via Python. ncw/rclone :fire::fire::fire::fire::fire: - Rsync for various cloud storage providers such as S3. owocki/s3_disk_util :fire: - S3 Disk usage (du) utility. pgherveou/gulp-awspublish :fire::fire: - Gulp plugin. rlmcpherson/s3gof3r :fire::fire::fire: - Fast, concurrent, streaming access, includes a CLI. s3git/s3git :fire::fire::fire: - CLI tool that allows you to create a distributed, decentralized and versioned repository. s3fs-fuse/s3fs-fuse :fire::fire::fire::fire::fire: - Allows Linux and Mac OS X to mount an S3 bucket via FUSE. s3tools/s3cmd :fire::fire::fire::fire::fire: - CLI for managing S3 and CloudFront. schickling/git-s3 :fire::fire: - Deploy your git repo to a bucket. sorentwo/carrierwave-aws :fire::fire: - Adapter for CarrierWave. spring-projects/aws-maven :fire: - Maven Wagon for S3. tongwang/s3fs-c :fire: - Mounts buckets for use on a local file system. twpayne/s3-parallel-put :fire::fire: - CLI that supports parallel uploads. waynehoover/s3_direct_upload :fire::fire::fire: - Direct Upload to Amazon S3 With CORS weavejester/clj-aws-s3 :fire: - Client library for Clojure. SES Community Repos: drewblas/aws-ses :fire::fire::fire: - Provides an easy ruby DSL & interface. microapps/MoonMail :fire::fire::fire::fire: - Shoot billions of emails using SES and Lambda. Simple Workflow AWS Repos: aws-flow-ruby :fire: - Creates background jobs and multistep workflows. aws-flow-ruby-samples - AWS Flow Framework for Ruby samples. aws-flow-ruby-opsworks-helloworld - Hello World sample. Community Repos: Contribute SimpleDB Community Repos: rjrodger/simpledb :fire: - Node.js library. SNS AWS Repos: aws-php-sns-message-validator - Message validation for PHP. Community Repos: Contribute SQS AWS Repos: amazon-sqs-java-messaging-lib - Holds the Java Message Service to communicate with SQS. Community Repos: phstc/shoryuken :fire::fire::fire::fire: - A super efficient SQS thread based message processor for Ruby. Data Community Repos: donnemartin/data-science-ipython-notebooks :fire::fire::fire::fire::fire: - Big data/data science notebooks. everpeace/vagrant-mesos :fire::fire: - Spin up your Mesos Cluster with Vagrant. jhorey/ferry :fire::fire: - Define, run, and deploy big data apps using Docker. nathanmarz/storm-deploy :fire::fire::fire: - One click deploy for Storm clusters. DevOps Community Repos: capitalone/cloud-custodian :fire::fire::fire::fire: - Rules engine for management, DSL in yaml for query, filter, and actions on resources. chef-cookbooks/aws :fire::fire: - Development repository for aws Chef cookbook. colinbjohnson/aws-missing-tools :fire::fire::fire::fire: - Tools for managing resources including EC2, EBS, RDS and Route53. k1LoW/awspec :fire::fire::fire: - RSpec tests your resources. mitchellh/vagrant-aws :fire::fire::fire::fire::fire: - Use Vagrant to manage your EC2 and VPC instances. NixOS/nixops :fire::fire: - Use NixOS to provision EC2 instances, S3 buckets, and other resources. Security AWS Repos: aws-sha256-agentcs - SHA256 Agent Compatibility Ccanner. aws-tvm-anonymous - Token Vending Machine for Anonymous Registration. aws-tvm-identity - Token Vending Machine for Identity Registration. s2n :fire::fire::fire::fire::fire: - An implementation of the TLS/SSL protocols. Community Repos: AdRoll/hologram :fire::fire::fire: - Easy, painless credentials on developer laptops. alex/letsencrypt-aws :fire::fire::fire: - Automatically provision and update certificates. cloudsploit/scans :fire::fire::fire: - Detects security risks. iSECPartners/Scout2 :fire::fire::fire::fire: - Security auditing tool. jordanpotti/AWSBucketDump :fire::fire::fire: - Security Tool to Look For Interesting Files in S3 Buckets. Netflix/bless :fire::fire::fire::fire: - SSH Certificate Authority that runs as a Lambda function. Netflix/security_monkey :fire::fire::fire::fire::fire: - Monitors policy changes and alerts on insecure configurations. RiotGames/cloud-inquisitor :fire::fire: - Tool to enforce ownership and data security. sebsto/AWSVPN :fire: - Start a private VPN server in the cloud. trailofbits/algo :fire::fire::fire::fire::fire: - Set up a personal IPSEC VPN on EC2 and other cloud services. ttlequals0/autovpn :fire::fire::fire::fire: - Create On Demand Disposable OpenVPN Endpoints. Accompanying Repos AWS Repos: Repos Accompanying Blogs, Training Events, and Conferences. aws-arch-backoff-simulator - Jitter and backoff Simulator for AWS architecture blog. aws-big-data-blog :fire::fire::fire: - Samples from the AWS Big Data Blog. aws-demo-php-simple-app - PHP apps from the AWS Blogs. aws-mobile-sample-wif - Samples from the AWS Mobile SDK blog. aws-mobile-self-paced-labs-samples - Android Snake Game from a self-paced lab. aws-quickstart - Official repository for AWS Quick Start. aws-spot-labs :fire::fire: - Best practices using AWS Spot Instances. aws-training-demo :fire: - Demos from the Technical Trainers community. java-meme-generator-sample - Meme generation app from re:Invent 2012. railsconf2013-tech-demo :fire: - Seahorse demo from RailsConf 2013. reinvent2013-js-blog-demo - Demo blogging app from re:Invent 2013. reinvent2013-mobile-photo-share - Mobile photo share app from re:Invent 2014. reinvent2014-scalable-site-management - Scalable site management sample from re:Invent 2014. reinvent2015-dev309 - Large Scale Metrics Analysis from re:Invent 2015. timely-security-analytics - Security analytics sample from 2015 re:Invent 2015. todo-app-railsconf - Simple \"Todo\" app from RailsConf 2015. todo-sample-app - Simple \"Todo\" app from RailsConf 2014. Community Repos: startup-class/setup :fire::fire: - EC2 setup files for Startup Engineering MOOC. Miscellaneous Repos AWS Repos: amediamanager - Media manager. aws-hal-client-java - Java client for the Hypertext Application Language. aws-model-validators - Tools for validating the AWS service JSON model files. aws-sdk-js-sample-video-transcoder - Sample cross-platform video transcoder app. simplebeerservice :fire::fire: - Cloud-connected kegerator that streams live sensor data to AWS. Community Repos: bcoe/thumbd :fire::fire: - Node.js/ImageMagick-based image thumbnailing service. Comcast/cmb :fire::fire: - Highly available, horizontally scalable queuing and notification service. convox/rack :fire::fire::fire::fire: - Open-source PaaS on AWS. devops-israel/aws-inventory :fire::fire: - Display all your AWS resources on a single web page. donnemartin/dev-setup :fire::fire::fire::fire: - Mac setup of various developer tools and AWS services. dtan4/terraforming :fire::fire::fire::fire::fire: - Export existing resources to Terraform style (tf, tfstate). segmentio/stack :fire::fire::fire::fire: - A set of Terraform modules for configuring production infrastructure. j2labs/microarmy - Deploy micro instances to launch a coordinated siege. jpillora/grunt-aws :fire: - Grunt interface into the Node.JS SDK. jvehent/haproxy-aws :fire::fire: - Documentation on building a HTTPS stack with HAProxy. localstack/localstack - A fully functional local AWS cloud stack. Develop and test your cloud apps offline! meducation/propono :fire::fire: - Easy-to-use pub/sub in Ruby. mozilla/awsbox :fire::fire::fire: - A featherweight PaaS on top of EC2 for deploying node apps. Netflix/aminator :fire::fire::fire: - A tool for creating EBS AMIs. Netflix/archaius :fire::fire::fire::fire: - Library for configuration management API. Netflix/asgard :fire::fire::fire::fire::fire: - Web interface for application deployments and cloud management. Netflix/aws-autoscaling :fire::fire: - Tools for using auto scaling and documentation best practices. Netflix/chaosmonkey :fire::fire::fire::fire::fire: - Resiliency tool that helps applications tolerate random instance failures. Netflix/eureka :fire::fire::fire::fire::fire: - Service registry for resilient mid-tier load balancing and failover. Netflix/EVCache :fire::fire::fire: - A distributed in-memory data store. Netflix/Fenzo :fire::fire::fire: - Extensible Scheduler for Mesos Frameworks. Netflix/ice :fire::fire::fire::fire::fire: - Usage and cost monitoring tool. Netflix/ribbon :fire::fire::fire::fire::fire: - Remote procedure call library with built in software load balancers. Netflix/SimianArmy :fire::fire::fire::fire::fire: - Tools to keep your cloud operating in top form. Netflix/zuul :fire::fire::fire::fire::fire: - Edge service that provides dynamic routing, monitoring, resiliency, security, and more. niftylettuce/gulp-aws-splash :fire::fire: - Open-source LaunchRock alternative. Build beautiful splash pages. puppetlabs/puppetlabs-aws :fire: - Puppet module for managing resources to build out infrastructure. mhart/react-server-routing-example :fire::fire: - Sample universal client/server routing and data in React. snowplow/snowplow :fire::fire::fire::fire::fire: - Enterprise-strength web, mobile and event analytics, powered by Hadoop, Kafka, Kinesis, Redshift and Elasticsearch. Spinnaker/spinnaker :fire::fire::fire::fire::fire: - Successor to asgard supporting pipelines and more. spulec/moto :fire::fire::fire::fire: - Allows your python tests to easily mock out the boto library. Guides, Books, Documentation, and Training How-to's, training, whitepapers, docs, and case studies. Getting Started Guides AWS Guides: Getting Started with AWS Getting Started Tutorials Run a Virtual Server Store Files Share Digital Media Deploy a Website Host a Website (Linux) Host a Website (Windows) Run a Database Analyze Your Data Community Guides: Contribute General Guides AWS Guides: Analyzing Big Data Sentiment Analysis Web Server Log Analysis Working with the AWS Management Console Deploying a Web App Using Elastic Beanstalk Hosting a Web App Hosting a .NET Web App Hosting a Static Website Quick Start Deployment Guides Community Guides: Open Guide to AWS :fire::fire::fire::fire::fire: Books Amazon Web Services in Action Manning or Amazon.com AWS Lambda in Action Manning or Amazon.com - Code Repo :fire: Whitepapers AWS Well-Architected Framework Whitepapers Documentation Documentation AWS Billing and Cost Management AWS Marketplace AWS Support AWS General Reference AWS Glossary Training Training and Certification Webinars Case Studies: Powered by AWS Adobe AdRoll Airbnb Autodesk AWS Citrix Comcast Coursera Docker Dow Jones Dropbox Dropcam Expedia Foursquare IMDb Instrumental - Deep-dive into Kinesis as a queue system Intuit Johnson & Johnson Lionsgate mlbam NASA Netflix Nike Nokia PBS Pfizer Philips Reddit Samsung Siemens Slack Spotify Swiftkey The Weather Company Ticketmaster Time Inc Twilio U.S. Department of State Ubisoft Yelp Zillow Social Blogs, discussion groups, conferences, and social media. Blogs AWS Blogs: Official Blog Brasil China Germany Japan Korea Application Management Architecture Big Data Compute Mobile SES Java PHP Ruby Security Startup .NET Partner Network SAP Startup collection Community Blogs: All Things Distributed - Werner Vogels, AWS CTO. Things I Like... - Jeff Barr, AWS Chief Evangelist. Netflix Tech Blog A Curated List of Engineering Blogs AWS Geek Contribute Twitter Influencers AWS Tweeps: @awscloud - Official Twitter feed. @AWS_Partners @AWSIdentity @AWSMarketplace @AWSreInvent - Official Twitter account for re:Invent. @AWSStartups @ajassy - Andy Jassy: Senior Vice-President. @Ianmmmm - Ian Massingham - Technical Evangelist. @jeffbarr - Jeff Barr: Chief Evangelist. @mndoci - Deepak Singh: GM EC2. @mza - Matt Wood: Product Strategy. @Werner - Werner Vogels: CTO. Community heroes, Evangelists, etc Community Tweeps: @kennwhite @esh @garnaat @quinnypig @awsgeek Facebook Pages AWS Pages: amazonwebservices - Official Facebook page. awsreinvent - Official Facebook page for re:Invent. Community Pages: Contribute YouTube Channels AWS Channels: AmazonWebServices AWSDeutsch AWSJapan AWSKorea AWSLatinAmerica AWSTutorialSeries AWSWebinars Community Channels: Backspace Academy Cloud Academy Linux Academy LinkedIn Groups AWS Page: Amazon Web Services Community Groups: Amazon AWS Architects Amazon AWS Architects, Engineers, Developers, Consultants, Entrepreneurs Experts Amazon Web Services (AWS) for Business Amazon Web Services Architects Amazon Web Services Community Network Amazon Web Services Enthusiasts Amazon Web Services Users Subreddits /r/aws/ /r/AWS_cloud/ Conferences AWS Conferences: re:Invent - Annual user conference. The event features keynote announcements, training and certification opportunities, over 250 technical sessions, a partner expo, after hours activities, and more. Summits - Global one-day events that are designed to educate new customers about the AWS platform and offer existing customers deep technical content to be more successful with AWS. AWSome Day - Global one-day events are delivered by AWS Education's technical instructors and are ideal for IT pros, developers and technical managers who would like to learn about how to get started in the AWS Cloud. Community Conferences: Contribute Latest KPIs and Stats Latest key performance indicators and other interesting stats. Over 1 million customers active in past 30 days. 1 $7B+ annual revenue run-rate business. 1 81% year over year revenue growth. 1 EC2 usage up 95% year over year. 1 S3 data transfer up 120% year over year. 1 S3 holds trillions of objects and regularly peaks at 1.5 million requests per second. 2 Database services usage up 127% year over year. 1 $1B annual revenue run-rate business. 1 2 million new EBS volumes created per day. 4 Customers have launched more than 15 million Hadoop clusters. 3 102Tbps network capacity into a data center. 2 500+ major new features and services launched since 2014. 1 All 14 other cloud providers combined have 1/5th the aggregate capacity of AWS. 2 Every day, AWS adds enough new server capacity to support all of Amazon's global infrastructure when it was a $7B annual revenue enterprise (in 2004). 2 Appendix of Core Services Appendix of official services, grouped by service category. Services in Plain English Amazon Web Services in Plain English - Entertaining and educational, a community contribution. Compute Services Auto Scaling - Launches or terminates EC2 instances based on policies, schedules, and health checks. Batch - Run batch jobs at scale. Blox - Open source projects for building custom schedulers on ECS. EC2 Container Service (ECS) - Supports Docker containers on EC2 instances. EC2 Systems Manager - Easily configure and manage EC2 and on-premises systems. Elastic Beanstalk - Provides quick deployment and management of applications in the cloud. Elastic Compute Cloud (EC2) - Provides scalable virtual private servers using Xen. Elastic GPUs - Attach low-cost GPUs to EC2 instances for graphics acceleration. Elastic Load Balancing (ELB) - Automatically distributes incoming traffic across multiple EC2 instances. Lambda - Runs code in response to events and automatically manages EC2 instances. Lightsail - Launch and manage simple virtual private servers. Virtual Private Cloud (VPC) - Creates a logically isolated set of EC2 instances which can be connected to an existing network using a VPN connection. Networking Services Direct Connect - Provides dedicated connections to AWS for faster and cheaper data throughput. Elastic Load Balancing (ELB) - Automatically distributes incoming traffic across multiple EC2 instances. Route 53 - Provides a highly available and scalable Domain Name System (DNS) web service. Virtual Private Cloud (VPC) - Creates a logically isolated set of EC2 instances which can be connected to an existing network using a VPN connection. Enterprise Applications WorkDocs - Provides a fully managed, secure enterprise storage and sharing service. WorkMail - Provides managed email and calendaring service. WorkSpaces - Provides a cloud-based desktop experience to end-users. Workspaces Application Manager (WAM) - Simplifies deployment and management of WorkSpaces. Analytics Services Athena - Query data on S3 instantly. Data Pipeline - Provides workload management by processing and moving data between services. Elastic MapReduce (EMR) - Hosts a Hadoop and Spark framework running on EC2 and S3. Elasticsearch Service (ES) - Managed Elasticsearch, a popular open-source search and analytics engine. Glue - Prepare and load data to data stores. Kinesis - Provides real-time data processing over large, distributed data streams. Kinesis Analytics - Write standard SQL queries on streaming data without having to learn any new programming skills. Kinesis Firehose - Captures and automatically loads streaming data into S3 and Redshift. Quicksight - Provides cloud-powered business intelligence for 1/10th the cost of traditional BI solutions. Redshift - Provides petabyte-scale data warehousing with columnar storage and multi-node compute. Artificial Intelligence Lex - Build conversational interfaces through voice or text. Machine Learning - Provides managed machine learning technology. Polly - Turn text into lifelike speech. Rekognition - Deep learning-based image analysis. Management Tools CloudFormation - Provides a file-based interface for provisioning other resources. CloudTrail - Provides logs of all activity. CloudWatch - Provides monitoring for AWS cloud resources and applications, starting with EC2. Command Line Interface (CLI) - Provides a CLI to manage all services. Config - Provides a detailed view of all resources. Management Console (AWS Console) - A web-based interface to manage all services. OpsWorks - Provides configuration of EC2 services using Chef. Personal Health Dashboard - Your personalized view of service health. Service Catalog - Service Catalog allows IT administrators to create, manage, and distribute portfolios of approved products to end users, who can then access the products they need in a personalized portal. Security and Identity Services Certificate Manager - Lets you easily provision, manage, and deploy SSL/TLS certificates for use with AWS services. CloudHSM - Helps meet corporate, contractual and regulatory compliance requirements for data security by using dedicated Hardware Security Module (HSM) appliances within the AWS cloud. Directory Service - A managed service that allows you to connect your resources with an existing on-premises Microsoft Active Directory or to set up a new, stand-alone directory in the AWS Cloud. Identity and Access Management (IAM) - An implicit service, the authentication infrastructure used to authenticate access to the various services. Inspector - An automated security assessment service that helps improve the security and compliance of applications deployed on AWS. Key Management Service (KMS) - A managed service that makes it easy for you to create and control the encryption keys used to encrypt your data. Shield - Managed DDoS Protection. WAF - A web application firewall service that monitors and manages CloudFront distributions. Internet of Things Service IoT - Enables secure, bi-directional communication between internet-connected things (such as sensors, actuators, embedded devices, or smart appliances) and the AWS cloud over MQTT and HTTP. Mobile Services API Gateway - Service for publishing, maintaining and securing web service APIs. Cognito - Provides user identity and data synchronization. Device Farm - App testing service for iOS, Android and Fire OS apps on physical devices. Mobile Analytics - Service for collecting, visualizing, and understanding app usage data. Mobile Hub - Provides an integrated console that helps you build, test, and monitor your mobile apps. Pinpoint - Targeted push notifications for mobile apps. Simple Notification Service (SNS) - Provides a hosted multi-protocol \"push\" messaging for applications. Storage and Content Delivery Services CloudFront - A content delivery network (CDN) for distributing objects to locations near the requester. Elastic Block Store (EBS) - Provides persistent block-level storage volumes for EC2. Elastic File System (EFS) - A file storage service for EC2 instances. Glacier - Provides a low-cost, long-term storage option, intended for archiving data. Import/Export - Accelerates moving large amounts of data into and out of AWS using portable storage devices for transport. Simple Storage Service (S3) - Provides Web Service based storage. Storage Gateway - An iSCSI block storage virtual appliance with cloud-based backup. Databases Aurora - MySQL and PostgreSQL compatible relational database with improved performance. DynamoDB - Provides a scalable, low-latency NoSQL online Database Service backed by SSDs. ElastiCache - Provides in-memory caching for web apps (Memcached, Redis). Redshift - Provides petabyte-scale data warehousing with columnar storage and multi-node compute. Relational Database Service (RDS) - Provides a scalable database server with MySQL, Oracle, SQL Server, PostgreSQL, and MariaDB support. Schema Conversion Tool - App that helps you convert your database schema from an Oracle or Microsoft SQL Server database, to an RDS MySQL DB instance or an Aurora DB cluster. SimpleDB - Allows developers to run queries on structured data. Application Services API Gateway - Service for publishing, maintaining and securing web service APIs. AppStream - Flexible, low-latency streaming service for apps and games. CloudSearch - Provides basic full-text search and indexing of textual content. DevPay - Provides billing and account management. Elastic Transcoder (ETS) - Provides video transcoding of S3 hosted videos. Flexible Payments Service (FPS) - Provides an interface for micropayments. Simple Email Service (SES) - Provides bulk and transactional email sending. Simple Notification Service (SNS) - Provides a hosted multi-protocol \"push\" messaging for applications. Simple Queue Service (SQS) - Provides a hosted message queue for web applications. Simple Workflow (SWF) - A workflow service for building scalable, resilient applications. Step Functions - Coordinate components of distributed applications. Developer Tools CodeBuild - Build and test code. CodeCommit - Hosted Git version control service. CodeDeploy - Provides automated code deployment to EC2 instances. CodePipeline - Continuous delivery service. Command Line Interface (CLI) - Provides a CLI to manage all services. X-Ray - Analyze and debug your applications. Miscellaneous Services Fulfillment Web Service - Provides a programmatic web service for sellers to ship items to and from Amazon using Fulfillment by Amazon. Mechanical Turk - Manages small units of work distributed among many persons. Partner Network (APN) - Provides partners with the technical information and sales and marketing support to increase business opportunities. Product Advertising API - Provides access to product data and electronic commerce functionality. Credits Check out the Credits page . Other Awesome Lists Other awesome lists can be found in awesome and awesome-awesomeness . Contact Info Feel free to contact me to discuss any issues, questions, or comments. My contact info can be found on my GitHub page . License Copyright 2017 Donne Martin Creative Commons Attribution 4.0 International License (CC BY 4.0) http://creativecommons.org/licenses/by/4.0/","title":"Awesome AWS"},{"location":"Awesome/Awesome_AWS/#awesome-aws","text":"A curated list of awesome AWS libraries, open source repos, guides, blogs, and other resources. Inspired by the awesome list.","title":"Awesome AWS"},{"location":"Awesome/Awesome_AWS/#awesome-aws-python-module","text":"The Python module awesome-aws regularly scans repos on Awesome AWS to maintain the accuracy of the Fiery Meter of AWSome .","title":"awesome-aws Python Module"},{"location":"Awesome/Awesome_AWS/#index","text":"SDKs and Samples Android C++ Clojure Go iOS IoT Java JavaScript Haskell Perl PHP Python Ruby Rust Scala Xamarin Unity .NET Command Line Tools Universal Command Line Interface Windows PowerShell IDE Toolkits Eclipse Toolkit Visual Studio Toolkit Open Source Repos API Gateway CLI CloudFormation CloudSearch CloudTrail CloudWatch Code Deploy Code Pipeline Cognito Data Pipeline Device Farm DynamoDB Elastic Beanstalk Elastic Container Service Elastic File System Elastic MapReduce Elastic Search Elasticache Glacier Kinesis Lambda Machine Learning Mobile Analytics OpsWorks Redshift Route 53 S3 SNS SQS Data DevOps Security Accompanying Miscellaneous Guides, Books, Documentation, and Training Getting Started Guides General Guides Books Whitepapers Documentation Training Case Studies: Powered by AWS Social Blogs Twitter Influencers Facebook Pages YouTube Channels LinkedIn Groups Subreddits Conferences Latest KPIs and Stats Appendix of Core Services Services in Plain English Compute Networking Enterprise Applications Analytics Artificial Intelligence Management Tools Security and Identity Internet of Things Mobile Services Storage and Content Delivery Databases Application Services Developer Tools Miscellaneous Services Contributing Credits Other Awesome Lists Contact Info License","title":"Index"},{"location":"Awesome/Awesome_AWS/#sdks-and-samples","text":"AWS and community SDKs with samples and docs, grouped by language.","title":"SDKs and Samples"},{"location":"Awesome/Awesome_AWS/#android-sdk","text":"Repo :fire::fire: Repo with Samples :fire::fire::fire: Install Docs Learn More","title":"Android SDK"},{"location":"Awesome/Awesome_AWS/#c-sdk","text":"Repo :fire::fire::fire: Blog with Samples The C++ SDK is a labs project with limited docs and/or samples.","title":"C++ SDK"},{"location":"Awesome/Awesome_AWS/#clojure-sdk","text":"Repo :fire::fire::fire: Install Docs The Clojure SDK is a community project with limited docs and/or samples. )","title":"Clojure SDK"},{"location":"Awesome/Awesome_AWS/#go-sdk","text":"Repo :fire::fire::fire::fire::fire: Install Docs Learn More Related Repos: goamz/goamz :fire::fire:","title":"Go SDK"},{"location":"Awesome/Awesome_AWS/#ios-sdk","text":"Repo :fire::fire::fire::fire: Repo with Samples :fire::fire::fire: Install Docs Learn More","title":"iOS SDK"},{"location":"Awesome/Awesome_AWS/#iot-sdk","text":"Repo for Arduino Repo for C :fire::fire: Repo for JavaScript :fire::fire::fire: Repo for Arduino Yun :fire: Docs The IoT SDK is a labs project with limited docs and/or samples.","title":"IoT SDK"},{"location":"Awesome/Awesome_AWS/#java-sdk","text":"Repo :fire::fire::fire::fire::fire: Repo with Samples :fire: Install Docs Learn More","title":"Java SDK"},{"location":"Awesome/Awesome_AWS/#javascript-sdk","text":"Repo :fire::fire::fire::fire::fire: Repo with Samples :fire::fire: Install Docs Learn More Related Repos: aws/aws-amplify :fire::fire::fire::fire::fire: chilts/awssum :fire::fire: mirkokiefer/aws-lib :fire::fire::fire: SaltwaterC/aws2js :fire::fire:","title":"JavaScript SDK"},{"location":"Awesome/Awesome_AWS/#haskell-sdk","text":"Repo :fire::fire: Docs Related Repos: aristidb/aws :fire: The Haskell SDK is a community project with limited docs and/or samples.","title":"Haskell SDK"},{"location":"Awesome/Awesome_AWS/#perl-sdk","text":"Repo :fire: Repo with Samples :fire: Install Docs Learn More The Perl SDK is a community project.","title":"Perl SDK"},{"location":"Awesome/Awesome_AWS/#php-sdk","text":"Repo :fire::fire::fire::fire::fire: Repo with Samples Install Docs Learn More Related Repos: aws-sdk-php-laravel :fire::fire::fire::fire: aws-sdk-php-silex aws-sdk-php-zf2","title":"PHP SDK"},{"location":"Awesome/Awesome_AWS/#python-sdk","text":"Repo :fire::fire::fire::fire::fire: Repo with Samples :fire: Install Docs Learn More Related Repos: boto3 :fire::fire::fire::fire::fire: botocore :fire::fire:","title":"Python SDK"},{"location":"Awesome/Awesome_AWS/#ruby-sdk","text":"Repo :fire::fire::fire::fire::fire: Repo with S3 Sample Install Docs Samples :fire::fire::fire: Related Repos: aws-sdk-rails :fire::fire: appoxy/aws :fire::fire: rightscale/right_aws :fire::fire:","title":"Ruby SDK"},{"location":"Awesome/Awesome_AWS/#rust-sdk","text":"Repo :fire::fire::fire: Install Docs The Rust SDK is a community project with limited docs and/or samples.","title":"Rust SDK"},{"location":"Awesome/Awesome_AWS/#scala-sdk","text":"Repo Related Repos: atlassian/aws-scala seratch/AWScala :fire::fire::fire: The Scala SDK is a labs project with limited docs and/or samples.","title":"Scala SDK"},{"location":"Awesome/Awesome_AWS/#unity-sdk","text":"Repo Repo with Samples Install Docs","title":"Unity SDK"},{"location":"Awesome/Awesome_AWS/#xamarin-sdk","text":"Repo Blog with Samples The Xamarin SDK is a labs project with limited docs and/or samples.","title":"Xamarin SDK"},{"location":"Awesome/Awesome_AWS/#net-sdk","text":"Repo :fire::fire::fire: Repo with Samples Install Docs Learn More Samples :fire:","title":".NET SDK"},{"location":"Awesome/Awesome_AWS/#command-line-tools","text":"AWS and community command line tools with samples and docs.","title":"Command Line Tools"},{"location":"Awesome/Awesome_AWS/#universal-command-line-interface","text":"Repo :fire::fire::fire::fire::fire: Install Docs Learn More Related Repos: awslabs/aws-shell :fire::fire::fire::fire::fire: donnemartin/saws :fire::fire::fire::fire::fire:","title":"Universal Command Line Interface"},{"location":"Awesome/Awesome_AWS/#windows-powershell","text":"Install Docs Learn More","title":"Windows PowerShell"},{"location":"Awesome/Awesome_AWS/#ide-toolkits","text":"Official IDE toolkits with samples and docs.","title":"IDE Toolkits"},{"location":"Awesome/Awesome_AWS/#eclipse-toolkit","text":"Install Docs Learn More","title":"Eclipse Toolkit"},{"location":"Awesome/Awesome_AWS/#visual-studio-toolkit","text":"Install Docs Learn More","title":"Visual Studio Toolkit"},{"location":"Awesome/Awesome_AWS/#open-source-repos","text":"AWS and community open source projects, grouped by service. See A Note on Repo AWSomeness for more details.","title":"Open Source Repos"},{"location":"Awesome/Awesome_AWS/#api-gateway","text":"AWS Repos: api-gateway-secure-pet-store :fire::fire: - Cognito credentials through Lambda. aws-apigateway-sdk-java - SDK for Java. aws-apigateway-swagger-importer :fire::fire: - Tools to work with Swagger. Community Repos: Contribute","title":"API Gateway"},{"location":"Awesome/Awesome_AWS/#cli","text":"AWS Repos: awscli-aliases :fire: - Repository for AWS CLI aliases. amazon-ecs-cli :fire::fire::fire: - ECS CLI using the same Docker Compose file format and familiar Compose commands. aws-cli :fire::fire::fire::fire::fire: - Universal Command Line Interface. aws-shell :fire::fire::fire::fire::fire: awscli-cookbook - Installs the CLI tools and provides a set of LWRPs for use within chef cookbooks. awsmobile-cli :fire: - CLI experience for Frontend developers in the JavaScript ecosystem. Community Repos: achiku/jungle :fire::fire::fire: - Operations by EC2 and ELB cli should be simpler. donnemartin/saws :fire::fire::fire::fire::fire: - A Supercharged AWS Command Line Interface. timkay/aws :fire::fire: - Easy command line access to Amazon EC2, S3, SQS, ELB, and SDB. wallix/awless :fire::fire::fire::fire::fire: - a Powerful CLI for EC2, IAM and S3 in Go. 99designs/aws-vault :fire::fire::fire::fire: - A tool for securely storing AWS credentials, written in Go.","title":"CLI"},{"location":"Awesome/Awesome_AWS/#cloudformation","text":"AWS Repos: aws-cfn-custom-resource-examples - Custom resource examples. aws-cfn-resource-bridge - Custom resource framework. cfncluster-cookbook - Sample Cookbook. cfncluster :fire::fire: - Framework that deploys and maintains HPC clusters. Community Repos: Appliscale/perun - A CLI tool for linting/validation and managing CloudFormation templates and stacks. bazaarvoice/cloudformation-ruby-dsl :fire: - Ruby DSL for creating templates. beaknit/cform - SublimeText plugin. [cloudreach/sceptre] :fire::fire::fire:](https://github.com/cloudreach/sceptre) - A CLI tool for automating CloudFormation. cloudtools/troposphere :fire::fire::fire::fire::fire: - Python library to create descriptions. peterkh/cumulus :fire::fire: - Manages stacks. envato/stack_master :fire: - A CLI tool to manage CloudFormation stacks. sparkleformation/sfn - CLI for stack management. sparkleformation/sparkle_formation :fire: - Ruby DSL for template creation.","title":"CloudFormation"},{"location":"Awesome/Awesome_AWS/#cloudsearch","text":"AWS Repos: cloudsearchable - An ActiveRecord-style ORM query interface. Community Repos: Contribute","title":"CloudSearch"},{"location":"Awesome/Awesome_AWS/#cloudtrail","text":"AWS Repos: aws-cloudtrail-processing-library - Easily consume and process log files. Community Repos: AppliedTrust/traildash :fire::fire: - Slick dashboard.","title":"CloudTrail"},{"location":"Awesome/Awesome_AWS/#cloudwatch","text":"AWS Repos: cloudwatch-logs-subscription-consumer :fire::fire: - Kinesis stream reader. ecs-cloudwatch-logs - Assets in the blog post on using Amazon ECS and Amazon CloudWatch logs. logstash-output-cloudwatchlogs - A logstash plugin that sends logs to CloudWatch. opsworks-cloudwatch-logs-cookbooks - OpsWorks sample cookbook. Community Repos: jorgebastida/awslogs :fire::fire::fire::fire::fire: - Simple CLI for querying groups, streams and events. newrelic-platform/newrelic_aws_cloudwatch_plugin :fire: - New Relic plugin.","title":"CloudWatch"},{"location":"Awesome/Awesome_AWS/#code-deploy","text":"AWS Repos: aws-codedeploy-agent :fire: - Sample agent. aws-codedeploy-plugin :fire: - Jenkins plugin. aws-codedeploy-samples :fire::fire: - Samples and template scenarios. Community Repos: Contribute","title":"Code Deploy"},{"location":"Awesome/Awesome_AWS/#code-pipeline","text":"AWS Repos: aws-codepipeline-custom-job-worker - Develop your own job worker when creating a custom action. aws-codepipeline-jenkins-aws-codedeploy_linux - Four-stage pipeline for Linux. aws-codepipeline-plugin-for-jenkins - Jenkins plugin. aws-codepipeline-s3-aws-codedeploy_linux - Simple pipeline for Linux. AWSCodePipeline-Jenkins-AWSCodeDeploy_Windows - Four-stage pipeline for Windows. AWSCodePipeline-S3-AWSCodeDeploy_Windows - Simple pipeline for Windows. Community Repos: Contribute","title":"Code Pipeline"},{"location":"Awesome/Awesome_AWS/#cognito","text":"AWS Repos: amazon-cognito-android - Sync SDK for Android. amazon-cognito-developer-authentication-sample - Authentication sample. amazon-cognito-dotnet - Sync SDK for .NET. amazon-cognito-ios - Sync SDK for iOS. amazon-cognito-js :fire: - Sync SDK for JavaScript. amazon-cognito-streams-sample - Consuming Streams sample. cognito-sample-nodejs - Sample App for Node.js. Community Repos: capeless/warrant :fire: - Python library for using Cognito.","title":"Cognito"},{"location":"Awesome/Awesome_AWS/#data-pipeline","text":"AWS Repos: data-pipeline-samples :fire::fire: - Sample pipelines. Community Repos: Contribute","title":"Data Pipeline"},{"location":"Awesome/Awesome_AWS/#device-farm","text":"AWS Repos: aws-device-farm-appium-tests-for-sample-app - Appium TestNG Android tests. aws-device-farm-calabash-tests-for-sample-app - Calabash Android tests. aws-device-farm-gradle-plugin - Gradle plugin. aws-device-farm-jenkins-plugin - Jenkins plugin. aws-device-farm-sample-app-for-android - Sample Android app. Community Repos: Contribute","title":"Device Farm"},{"location":"Awesome/Awesome_AWS/#dynamodb","text":"AWS Repos: aws-dotnet-session-provider - A session state provider for ASP.NET apps. aws-dotnet-trace-listener - A trace listener for System.Diagnostics that can be used to log events. aws-dynamodb-encryption-java - Encryption Client for Java. aws-dynamodb-examples :fire: - Samples using the Java SDK. aws-dynamodb-mars-json-demo - Stores and indexes NASA JPL Mars images. aws-dynamodb-session-tomcat - Session store for Apache Tomcat. aws-sessionstore-dynamodb-ruby - Handles sessions for Ruby web apps. dynamodb-cross-region-library :fire::fire: - Cross-region replication. dynamodb-geo :fire::fire: - Library to create and query geospatial data. dynamodb-import-export-tool - Import and export examples. dynamodb-online-index-violation-detector - Finds violations on an online GSI's hash key and range key. dynamodb-streams-kinesis-adapter - Kinesis interface to consume and process data from a DynamoDB stream. dynamodb-tictactoe-example-app - Lightweight python app. dynamodb-titan-storage-backend :fire::fire: - Storage Backend for Titan. dynamodb-transactions :fire::fire: - Performs atomic writes and isolated reads across multiple items and tables. logstash-input-dynamodb - Logstash input plugin. Community Repos: channl/dynamodb-lambda-autoscale :fire::fire: - Autoscale DynamoDB provisioned capacity using Lambda. lyft/confidant :fire::fire::fire::fire: - Stores secrets, encrypted at rest. sebdah/dynamic-dynamodb :fire::fire::fire: - Provides auto-scaling.","title":"DynamoDB"},{"location":"Awesome/Awesome_AWS/#elastic-beanstalk","text":"AWS Repos: aws-eb-glassfish-dockerfiles - GlassFish docker files. aws-eb-python-dockerfiles - Python docker files. eb-demo-php-simple-app :fire: - Simple PHP app. eb-docker-multiple-ports - Simple Node.js and Tomcat apps using Docker images. eb-docker-nginx-proxy - Simple PHP app using the PHP-FPM and Nginx Docker images. eb-docker-virtual-hosting - Simple PHP, Tomcat, and Nginx applications using Docker images. eb-node-express-sample :fire: - Sample express app. eb-node-express-signup - Express framework and Bootstrap Node.js sample app. eb-node-express - Sample app referenced in the Developer Guide. eb-py-flask-signup-worker - Python app that illustrates worker roles. eb-py-flask-signup :fire::fire: - Python signup form app with Flask and Bootstrap. eb-python-flask - Simple Python and Flask app. eb-wif-sample - Sample login app with Web Identity Federation. Community Repos: alienfast/elastic-beanstalk :fire: - Gem with rake configuration and deployment for rails apps. ThoughtWorksStudios/eb_deployer :fire::fire: - Blue-green deployment automation.","title":"Elastic Beanstalk"},{"location":"Awesome/Awesome_AWS/#elastic-compute-cloud","text":"AWS Repos: Contribute Community Repos: alestic/ec2-consistent-snapshot :fire::fire: - Initiate consistent EBS snapshots in EC2. ConradIrwin/aws-name-server :fire::fire::fire: - DNS server that lets you look up instances by name. cristim/autospotting :fire::fire::fire: - Automatically rolling-replace on-demand EC2 instances in AutoScaling groups with compatible spot instances. evannuil/aws-snapshot-tool :fire::fire: - Automates EBS snapshots and rotation. kelseyhightower/kubernetes-the-hard-way :fire::fire::fire::fire::fire: - Bootstrap Kubernetes the hard way on EC2. No scripts. mirakui/ec2ssh :fire::fire: - SSH config manager. openebs/openebs :fire::fire::fire::fire::fire: - Containerized block storage QoS SLAs, tiering and replica policies across AZs and environments, and predictable and scalable performance. skavanagh/EC2Box :fire::fire: - A web-based SSH console to manage multiple instances simultaneously. wbailey/claws :fire: - CLI-driven console with capistrano integration.","title":"Elastic Compute Cloud"},{"location":"Awesome/Awesome_AWS/#elastic-container-service","text":"AWS Repos: amazon-ecs-agent :fire::fire::fire::fire: - Agent that runs on and starts containers. amazon-ecs-amazon-efs - Persists Data from containers. amazon-ecs-init :fire: - RPM developed to support the Amazon ECS Container Agent. blox :fire::fire::fire: - Open source tools for building custom schedulers on ECS. ecs-blue-green-deployment :fire: - Blue-green deployment on ECS. ecs-cloudwatch-logs - Assets from the blog using Amazon ECS and Amazon CloudWatch logs. ecs-demo-php-simple-app - Simple PHP app. ecs-mesos-scheduler-driver :fire: - Integrates Apache Mesos. ecs-refarch-continuous-deployment :fire::fire: - Reference Architecture for continuous deployment to ECS using CodePipeline. ecs-task-kite - Simple ambassador container for inter-task communication. lambda-ecs-worker-pattern :fire::fire: - Extends Lambda using SQS and ECS. py-flask-signup-docker - Python sample app. service-discovery-ecs-consul - Assets from the blog Service Discovery via Consul with Amazon ECS. Community Repos: Lumoslabs/broadside - Command line tool for deploying revisions of containerized applications.","title":"Elastic Container Service"},{"location":"Awesome/Awesome_AWS/#elastic-file-system","text":"AWS Repos: amazon-ecs-amazon-efs - Persist data from ECS. Community Repos: Contribute","title":"Elastic File System"},{"location":"Awesome/Awesome_AWS/#elastic-mapreduce","text":"AWS Repos: emr-bootstrap-actions :fire::fire::fire: - Sample bootstrap actions. emr-sample-apps - Sample apps. Community Repos: Yelp/mrjob :fire::fire::fire::fire::fire: - Run MapReduce jobs on Hadoop or EMR.","title":"Elastic MapReduce"},{"location":"Awesome/Awesome_AWS/#elastic-search","text":"AWS Repos: logstash-output-amazon_es :fire::fire: - Logstash output plugin to sign and export events. opsworks-elasticsearch-cookbook - OpsWorks Elasticsearch sample cookbook. Community Repos: elastic/elasticsearch-cloud-aws :fire::fire::fire: - Plugin for Elasticsearch.","title":"Elastic Search"},{"location":"Awesome/Awesome_AWS/#elasticache","text":"AWS Repos: aws-elasticache-cluster-client-libmemcached - Libmemcached library support. aws-elasticache-cluster-client-memcached-for-java - Client for Java. aws-elasticache-cluster-client-memcached-for-php - Enhanced PHP library connecting to ElastiCache. elasticache-cluster-config-net - Config object for Enyim's MemcachedClient to enable auto discovery. Community Repos: Contribute","title":"Elasticache"},{"location":"Awesome/Awesome_AWS/#glacier","text":"Community Repos: vsespb/mt-aws-glacier :fire::fire: - Perl Multithreaded Multipart sync to Glacier.","title":"Glacier"},{"location":"Awesome/Awesome_AWS/#kinesis","text":"AWS Repos: amazon-kinesis-aggregators :fire: - Provides a simple way to create real time aggregations. amazon-kinesis-client-net - Client Library for .NET. amazon-kinesis-client-nodejs :fire: - Client Library for Node.js. amazon-kinesis-client-python :fire::fire: - Client Library for Python. amazon-kinesis-client-ruby :fire: - Client Library for Ruby. amazon-kinesis-client :fire::fire: Client library for Amazon Kinesis. amazon-kinesis-connectors :fire::fire: - Libary to integrate with other AWS and non-AWS services. amazon-kinesis-data-visualization-sample :fire: - Sample data visualization app. amazon-kinesis-learning - Learning Kinesis Development. amazon-kinesis-producer :fire: - Producer Library. amazon-kinesis-scaling-utils :fire::fire: - Provides the ability to scale streams. aws-fluent-plugin-kinesis :fire: - Fluent Plugin. dynamodb-streams-kinesis-adapter - DynamoDB Streams Adapter. kinesis-log4j-appender - Log4J Appender. kinesis-poster-worker - Simple multi-threaded Python Poster and Worker. kinesis-storm-spout :fire: - Spout for Storm. mqtt-kinesis-bridge - Simple MQTT bridge in Python. Community Repos: Contribute","title":"Kinesis"},{"location":"Awesome/Awesome_AWS/#lambda","text":"AWS Repos: amazon-elasticsearch-lambda-samples :fire::fire: - Data ingestion for Elasticsearch from S3 and Kinesis. awslabs/aws-sam-local :fire::fire::fire::fire::fire: - CLI tool for local development and testing of Serverless applications. aws-lambda-go :fire::fire::fire::fire: - Libraries, samples and tools to help Go developers develop Lambda functions. aws-lambda-java-libs :fire: - Official mirror for interface definitions and helper classes. aws-lambda-redshift-loader :fire::fire: - Redshift loader. chalice :fire::fire::fire::fire::fire: - Python Serverless Microframework. create-thumbnails-lambda - Uses the grunt-aws-lambda plugin to help you develop and test. lambda-ecs-worker-pattern :fire::fire: - Extends Lambda using SQS and ECS. lambda-refarch-fileprocessing :fire::fire: - Reference Architecture for Real-time File Processing. lambda-refarch-iotbackend :fire: - Reference Architecture for creating an IoT Backend. lambda-refarch-mobilebackend :fire::fire: - Reference Architecture for creating a Mobile Backend. lambda-refarch-webapp :fire::fire::fire: - Reference Architecture for creating a Web Application. Community Repos: alestic/lambdash :fire::fire: - Lambda shell - Run sh commands inside the Lambda environment. Alephbet/gimel :fire: - Run your own A/B testing backend using Lambda. apex/apex :fire::fire::fire::fire::fire: - Minimal AWS Lambda function manager with Go support. claudiajs/claudia :fire::fire::fire::fire::fire: - Deploy Node.js projects to Lambda and API Gateway easily. cloudnative/lambda-chat :fire::fire: - A chat application without servers. danilop/LambdAuth :fire::fire::fire::fire: - Sample authentication service. eawsy/aws-lambda-go :fire::fire::fire: - A fast and clean way to execute Go on Lambda. garnaat/kappa :fire::fire::fire: - Kappa is a CLI tool that makes it easier to deploy, update, and test functions for AWS Lambda. goadapp/goad :fire::fire:fire::fire::fire: - Lambda powered, highly distributed, load testing tool. graphcool/chromeless :fire::fire::fire::fire::fire: - Automate Chrome through Lambda. jimpick/lambda-comments :fire::fire::fire: - Blog commenting system built with Lambda. jorgebastida/gordon :fire::fire::fire::fire::fire: - \u03bb Gordon is a tool to create, wire and deploy AWS Lambdas using CloudFormation. ks888/LambStatus :fire::fire::fire: - A status page system inspired by StatusPage.io, built on AWS Lambda. kubek2k/lambdoku :fire::fire::fire: - Heroku-like experience when using Lambda. lambci/lambci :fire::fire::fire::fire::fire: - A continuous integration system built on Lambda. littlstar/s3-lambda :fire::fire::fire::fire: - Lambda functions over S3 objects with concurrency control (each, map, reduce, filter). mentum/lambdaws :fire::fire::fire::fire: - Deploy, run and get results in a breeze. Miserlou/Zappa :fire::fire::fire::fire::fire: - Serverless WSGI Python Web Apps with AWS Lambda + API Gateway. nficano/python-lambda :fire::fire::fire: - A toolkit for developing and deploying serverless Python code in Lambda. serverless/serverless :fire::fire::fire::fire::fire: The Serverless Application Framework (formerly JAWS). Tim-B/grunt-aws-lambda :fire::fire: - Grunt plugin. trek10inc/aws-lambda-debugger :fire::fire: - Remote debugging tool for Lambda functions running on Node 6.10","title":"Lambda"},{"location":"Awesome/Awesome_AWS/#machine-learning","text":"AWS Repos: machine-learning-samples :fire::fire::fire: - Sample apps. Community Repos: Contribute","title":"Machine Learning"},{"location":"Awesome/Awesome_AWS/#mobile-analytics","text":"AWS Repos: aws-sdk-mobile-analytics-js - JavaScript SDK. Community Repos: Contribute","title":"Mobile Analytics"},{"location":"Awesome/Awesome_AWS/#opsworks","text":"AWS Repos: opsworks-attribute-customization - Attribute customization example. opsworks-capistrano - Capistrano with instances. opsworks-cloudwatch-logs-cookbooks - CloudWatch sample cookbook. opsworks-cookbooks :fire::fire::fire::fire: - Chef Cookbooks. opsworks-demo-php-photo-share-app - Simple PHP photo share app. opsworks-demo-php-simple-app - Simple PHP app. opsworks-demo-rails-photo-share-app - A sample Rails app. opsworks-elasticsearch-cookbook - Elasticsearch sample cookbook. opsworks-example-cookbooks - Cookbooks used with the sample apps. opsworks-first-cookbook - Cookbook used to demonstrate simple recipes. opsworks-windows-demo- - A sample Node.JS app. opsworks-windows-demo-cookbooks - Cookbooks for Windows. todo-sample-app-cookbooks - Custom cookbooks associated with the todo-sample-app. Community Repos: Contribute","title":"OpsWorks"},{"location":"Awesome/Awesome_AWS/#redshift","text":"AWS Repos: aws-lambda-redshift-loader :fire::fire: - Lambda database loader. amazon-redshift-utils :fire::fire::fire::fire: - Applies optimal Column Encoding to existing Tables. Community Repos: Lumoslabs/aleph - A full featured web application for writing and running Redshift queries. Supports revision tracking of queries and has basic visualization support. getredash/redash :fire::fire::fire::fire::fire: - A web application that allows to easily query an existing database, share the dataset and visualize it in different ways. Initially was developed to work with Redshift, and has great support for it. everythingMe/redshift_console - A simple tool to monitor and manage a Redshift cluster. The first release has basic tools to monitor running queries, WLM queue and your tables/schemas.","title":"Redshift"},{"location":"Awesome/Awesome_AWS/#route-53","text":"AWS Repos: route53-infima :fire: - Manages service-level fault isolation. Community Repos: barnybug/cli53 :fire::fire::fire::fire: - cli53 is a command line tool for Amazon Route 53 which provides import and export from BIND format and simple command line management of Route 53 domains. winebarrel/roadworker :fire::fire: - Roadworker is a tool to manage Route53. It defines the state of Route53 using DSL, and updates Route53 according to DSL.","title":"Route 53"},{"location":"Awesome/Awesome_AWS/#s3","text":"Community Repos: anomalizer/ngx_aws_auth :fire::fire: - Implements proxying of authenticated requests. bloomreach/s4cmd :fire::fire::fire: - S3 command line tool, faster than S3cmd for large files. CulturalMe/meteor-slingshot :fire::fire::fire: - Upload files in meteor. danilop/yas3fs :fire::fire: - Yet Another S3-backed File System, inspired by s3fs. grippy/node-s3 - Node.js app to manage buckets. jubos/fake-s3 :fire::fire::fire::fire::fire: - Lightweight S3 clone that simulates most commands. kahing/goofys :fire::fire::fire::fire: - a Filey System for Amazon S3 written in Go. littlstar/s3renity :fire::fire::fire::fire: - Batch functions with concurrency control (each, map, reduce, filter, join) marcel/aws-s3 :fire::fire::fire: - Ruby implementation of Amazon's S3 REST API. mardix/flask-cloudy :fire: - Flask extension. MathieuLoutre/grunt-aws-s3 :fire::fire: - Grunt plugin. minio/mc :fire::fire::fire: - Minio Client for filesystem and cloud storage. minio/minio :fire::fire::fire::fire::fire: - Object storage server compatible with S3. mumrah/s3-multipart :fire: - Parallel upload/download to S3 via Python. ncw/rclone :fire::fire::fire::fire::fire: - Rsync for various cloud storage providers such as S3. owocki/s3_disk_util :fire: - S3 Disk usage (du) utility. pgherveou/gulp-awspublish :fire::fire: - Gulp plugin. rlmcpherson/s3gof3r :fire::fire::fire: - Fast, concurrent, streaming access, includes a CLI. s3git/s3git :fire::fire::fire: - CLI tool that allows you to create a distributed, decentralized and versioned repository. s3fs-fuse/s3fs-fuse :fire::fire::fire::fire::fire: - Allows Linux and Mac OS X to mount an S3 bucket via FUSE. s3tools/s3cmd :fire::fire::fire::fire::fire: - CLI for managing S3 and CloudFront. schickling/git-s3 :fire::fire: - Deploy your git repo to a bucket. sorentwo/carrierwave-aws :fire::fire: - Adapter for CarrierWave. spring-projects/aws-maven :fire: - Maven Wagon for S3. tongwang/s3fs-c :fire: - Mounts buckets for use on a local file system. twpayne/s3-parallel-put :fire::fire: - CLI that supports parallel uploads. waynehoover/s3_direct_upload :fire::fire::fire: - Direct Upload to Amazon S3 With CORS weavejester/clj-aws-s3 :fire: - Client library for Clojure.","title":"S3"},{"location":"Awesome/Awesome_AWS/#ses","text":"Community Repos: drewblas/aws-ses :fire::fire::fire: - Provides an easy ruby DSL & interface. microapps/MoonMail :fire::fire::fire::fire: - Shoot billions of emails using SES and Lambda.","title":"SES"},{"location":"Awesome/Awesome_AWS/#simple-workflow","text":"AWS Repos: aws-flow-ruby :fire: - Creates background jobs and multistep workflows. aws-flow-ruby-samples - AWS Flow Framework for Ruby samples. aws-flow-ruby-opsworks-helloworld - Hello World sample. Community Repos: Contribute","title":"Simple Workflow"},{"location":"Awesome/Awesome_AWS/#simpledb","text":"Community Repos: rjrodger/simpledb :fire: - Node.js library.","title":"SimpleDB"},{"location":"Awesome/Awesome_AWS/#sns","text":"AWS Repos: aws-php-sns-message-validator - Message validation for PHP. Community Repos: Contribute","title":"SNS"},{"location":"Awesome/Awesome_AWS/#sqs","text":"AWS Repos: amazon-sqs-java-messaging-lib - Holds the Java Message Service to communicate with SQS. Community Repos: phstc/shoryuken :fire::fire::fire::fire: - A super efficient SQS thread based message processor for Ruby.","title":"SQS"},{"location":"Awesome/Awesome_AWS/#data","text":"Community Repos: donnemartin/data-science-ipython-notebooks :fire::fire::fire::fire::fire: - Big data/data science notebooks. everpeace/vagrant-mesos :fire::fire: - Spin up your Mesos Cluster with Vagrant. jhorey/ferry :fire::fire: - Define, run, and deploy big data apps using Docker. nathanmarz/storm-deploy :fire::fire::fire: - One click deploy for Storm clusters.","title":"Data"},{"location":"Awesome/Awesome_AWS/#devops","text":"Community Repos: capitalone/cloud-custodian :fire::fire::fire::fire: - Rules engine for management, DSL in yaml for query, filter, and actions on resources. chef-cookbooks/aws :fire::fire: - Development repository for aws Chef cookbook. colinbjohnson/aws-missing-tools :fire::fire::fire::fire: - Tools for managing resources including EC2, EBS, RDS and Route53. k1LoW/awspec :fire::fire::fire: - RSpec tests your resources. mitchellh/vagrant-aws :fire::fire::fire::fire::fire: - Use Vagrant to manage your EC2 and VPC instances. NixOS/nixops :fire::fire: - Use NixOS to provision EC2 instances, S3 buckets, and other resources.","title":"DevOps"},{"location":"Awesome/Awesome_AWS/#security","text":"AWS Repos: aws-sha256-agentcs - SHA256 Agent Compatibility Ccanner. aws-tvm-anonymous - Token Vending Machine for Anonymous Registration. aws-tvm-identity - Token Vending Machine for Identity Registration. s2n :fire::fire::fire::fire::fire: - An implementation of the TLS/SSL protocols. Community Repos: AdRoll/hologram :fire::fire::fire: - Easy, painless credentials on developer laptops. alex/letsencrypt-aws :fire::fire::fire: - Automatically provision and update certificates. cloudsploit/scans :fire::fire::fire: - Detects security risks. iSECPartners/Scout2 :fire::fire::fire::fire: - Security auditing tool. jordanpotti/AWSBucketDump :fire::fire::fire: - Security Tool to Look For Interesting Files in S3 Buckets. Netflix/bless :fire::fire::fire::fire: - SSH Certificate Authority that runs as a Lambda function. Netflix/security_monkey :fire::fire::fire::fire::fire: - Monitors policy changes and alerts on insecure configurations. RiotGames/cloud-inquisitor :fire::fire: - Tool to enforce ownership and data security. sebsto/AWSVPN :fire: - Start a private VPN server in the cloud. trailofbits/algo :fire::fire::fire::fire::fire: - Set up a personal IPSEC VPN on EC2 and other cloud services. ttlequals0/autovpn :fire::fire::fire::fire: - Create On Demand Disposable OpenVPN Endpoints.","title":"Security"},{"location":"Awesome/Awesome_AWS/#accompanying-repos","text":"AWS Repos: Repos Accompanying Blogs, Training Events, and Conferences. aws-arch-backoff-simulator - Jitter and backoff Simulator for AWS architecture blog. aws-big-data-blog :fire::fire::fire: - Samples from the AWS Big Data Blog. aws-demo-php-simple-app - PHP apps from the AWS Blogs. aws-mobile-sample-wif - Samples from the AWS Mobile SDK blog. aws-mobile-self-paced-labs-samples - Android Snake Game from a self-paced lab. aws-quickstart - Official repository for AWS Quick Start. aws-spot-labs :fire::fire: - Best practices using AWS Spot Instances. aws-training-demo :fire: - Demos from the Technical Trainers community. java-meme-generator-sample - Meme generation app from re:Invent 2012. railsconf2013-tech-demo :fire: - Seahorse demo from RailsConf 2013. reinvent2013-js-blog-demo - Demo blogging app from re:Invent 2013. reinvent2013-mobile-photo-share - Mobile photo share app from re:Invent 2014. reinvent2014-scalable-site-management - Scalable site management sample from re:Invent 2014. reinvent2015-dev309 - Large Scale Metrics Analysis from re:Invent 2015. timely-security-analytics - Security analytics sample from 2015 re:Invent 2015. todo-app-railsconf - Simple \"Todo\" app from RailsConf 2015. todo-sample-app - Simple \"Todo\" app from RailsConf 2014. Community Repos: startup-class/setup :fire::fire: - EC2 setup files for Startup Engineering MOOC.","title":"Accompanying Repos"},{"location":"Awesome/Awesome_AWS/#miscellaneous-repos","text":"AWS Repos: amediamanager - Media manager. aws-hal-client-java - Java client for the Hypertext Application Language. aws-model-validators - Tools for validating the AWS service JSON model files. aws-sdk-js-sample-video-transcoder - Sample cross-platform video transcoder app. simplebeerservice :fire::fire: - Cloud-connected kegerator that streams live sensor data to AWS. Community Repos: bcoe/thumbd :fire::fire: - Node.js/ImageMagick-based image thumbnailing service. Comcast/cmb :fire::fire: - Highly available, horizontally scalable queuing and notification service. convox/rack :fire::fire::fire::fire: - Open-source PaaS on AWS. devops-israel/aws-inventory :fire::fire: - Display all your AWS resources on a single web page. donnemartin/dev-setup :fire::fire::fire::fire: - Mac setup of various developer tools and AWS services. dtan4/terraforming :fire::fire::fire::fire::fire: - Export existing resources to Terraform style (tf, tfstate). segmentio/stack :fire::fire::fire::fire: - A set of Terraform modules for configuring production infrastructure. j2labs/microarmy - Deploy micro instances to launch a coordinated siege. jpillora/grunt-aws :fire: - Grunt interface into the Node.JS SDK. jvehent/haproxy-aws :fire::fire: - Documentation on building a HTTPS stack with HAProxy. localstack/localstack - A fully functional local AWS cloud stack. Develop and test your cloud apps offline! meducation/propono :fire::fire: - Easy-to-use pub/sub in Ruby. mozilla/awsbox :fire::fire::fire: - A featherweight PaaS on top of EC2 for deploying node apps. Netflix/aminator :fire::fire::fire: - A tool for creating EBS AMIs. Netflix/archaius :fire::fire::fire::fire: - Library for configuration management API. Netflix/asgard :fire::fire::fire::fire::fire: - Web interface for application deployments and cloud management. Netflix/aws-autoscaling :fire::fire: - Tools for using auto scaling and documentation best practices. Netflix/chaosmonkey :fire::fire::fire::fire::fire: - Resiliency tool that helps applications tolerate random instance failures. Netflix/eureka :fire::fire::fire::fire::fire: - Service registry for resilient mid-tier load balancing and failover. Netflix/EVCache :fire::fire::fire: - A distributed in-memory data store. Netflix/Fenzo :fire::fire::fire: - Extensible Scheduler for Mesos Frameworks. Netflix/ice :fire::fire::fire::fire::fire: - Usage and cost monitoring tool. Netflix/ribbon :fire::fire::fire::fire::fire: - Remote procedure call library with built in software load balancers. Netflix/SimianArmy :fire::fire::fire::fire::fire: - Tools to keep your cloud operating in top form. Netflix/zuul :fire::fire::fire::fire::fire: - Edge service that provides dynamic routing, monitoring, resiliency, security, and more. niftylettuce/gulp-aws-splash :fire::fire: - Open-source LaunchRock alternative. Build beautiful splash pages. puppetlabs/puppetlabs-aws :fire: - Puppet module for managing resources to build out infrastructure. mhart/react-server-routing-example :fire::fire: - Sample universal client/server routing and data in React. snowplow/snowplow :fire::fire::fire::fire::fire: - Enterprise-strength web, mobile and event analytics, powered by Hadoop, Kafka, Kinesis, Redshift and Elasticsearch. Spinnaker/spinnaker :fire::fire::fire::fire::fire: - Successor to asgard supporting pipelines and more. spulec/moto :fire::fire::fire::fire: - Allows your python tests to easily mock out the boto library.","title":"Miscellaneous Repos"},{"location":"Awesome/Awesome_AWS/#guides-books-documentation-and-training","text":"How-to's, training, whitepapers, docs, and case studies.","title":"Guides, Books, Documentation, and Training"},{"location":"Awesome/Awesome_AWS/#getting-started-guides","text":"AWS Guides: Getting Started with AWS Getting Started Tutorials Run a Virtual Server Store Files Share Digital Media Deploy a Website Host a Website (Linux) Host a Website (Windows) Run a Database Analyze Your Data Community Guides: Contribute","title":"Getting Started Guides"},{"location":"Awesome/Awesome_AWS/#general-guides","text":"AWS Guides: Analyzing Big Data Sentiment Analysis Web Server Log Analysis Working with the AWS Management Console Deploying a Web App Using Elastic Beanstalk Hosting a Web App Hosting a .NET Web App Hosting a Static Website Quick Start Deployment Guides Community Guides: Open Guide to AWS :fire::fire::fire::fire::fire:","title":"General Guides"},{"location":"Awesome/Awesome_AWS/#books","text":"Amazon Web Services in Action Manning or Amazon.com AWS Lambda in Action Manning or Amazon.com - Code Repo :fire:","title":"Books"},{"location":"Awesome/Awesome_AWS/#whitepapers","text":"AWS Well-Architected Framework Whitepapers","title":"Whitepapers"},{"location":"Awesome/Awesome_AWS/#documentation","text":"Documentation AWS Billing and Cost Management AWS Marketplace AWS Support AWS General Reference AWS Glossary","title":"Documentation"},{"location":"Awesome/Awesome_AWS/#training","text":"Training and Certification Webinars","title":"Training"},{"location":"Awesome/Awesome_AWS/#case-studies-powered-by-aws","text":"Adobe AdRoll Airbnb Autodesk AWS Citrix Comcast Coursera Docker Dow Jones Dropbox Dropcam Expedia Foursquare IMDb Instrumental - Deep-dive into Kinesis as a queue system Intuit Johnson & Johnson Lionsgate mlbam NASA Netflix Nike Nokia PBS Pfizer Philips Reddit Samsung Siemens Slack Spotify Swiftkey The Weather Company Ticketmaster Time Inc Twilio U.S. Department of State Ubisoft Yelp Zillow","title":"Case Studies: Powered by AWS"},{"location":"Awesome/Awesome_AWS/#social","text":"Blogs, discussion groups, conferences, and social media.","title":"Social"},{"location":"Awesome/Awesome_AWS/#blogs","text":"AWS Blogs: Official Blog Brasil China Germany Japan Korea Application Management Architecture Big Data Compute Mobile SES Java PHP Ruby Security Startup .NET Partner Network SAP Startup collection Community Blogs: All Things Distributed - Werner Vogels, AWS CTO. Things I Like... - Jeff Barr, AWS Chief Evangelist. Netflix Tech Blog A Curated List of Engineering Blogs AWS Geek Contribute","title":"Blogs"},{"location":"Awesome/Awesome_AWS/#twitter-influencers","text":"AWS Tweeps: @awscloud - Official Twitter feed. @AWS_Partners @AWSIdentity @AWSMarketplace @AWSreInvent - Official Twitter account for re:Invent. @AWSStartups @ajassy - Andy Jassy: Senior Vice-President. @Ianmmmm - Ian Massingham - Technical Evangelist. @jeffbarr - Jeff Barr: Chief Evangelist. @mndoci - Deepak Singh: GM EC2. @mza - Matt Wood: Product Strategy. @Werner - Werner Vogels: CTO. Community heroes, Evangelists, etc Community Tweeps: @kennwhite @esh @garnaat @quinnypig @awsgeek","title":"Twitter Influencers"},{"location":"Awesome/Awesome_AWS/#facebook-pages","text":"AWS Pages: amazonwebservices - Official Facebook page. awsreinvent - Official Facebook page for re:Invent. Community Pages: Contribute","title":"Facebook Pages"},{"location":"Awesome/Awesome_AWS/#youtube-channels","text":"AWS Channels: AmazonWebServices AWSDeutsch AWSJapan AWSKorea AWSLatinAmerica AWSTutorialSeries AWSWebinars Community Channels: Backspace Academy Cloud Academy Linux Academy","title":"YouTube Channels"},{"location":"Awesome/Awesome_AWS/#linkedin-groups","text":"AWS Page: Amazon Web Services Community Groups: Amazon AWS Architects Amazon AWS Architects, Engineers, Developers, Consultants, Entrepreneurs Experts Amazon Web Services (AWS) for Business Amazon Web Services Architects Amazon Web Services Community Network Amazon Web Services Enthusiasts Amazon Web Services Users","title":"LinkedIn Groups"},{"location":"Awesome/Awesome_AWS/#subreddits","text":"/r/aws/ /r/AWS_cloud/","title":"Subreddits"},{"location":"Awesome/Awesome_AWS/#conferences","text":"AWS Conferences: re:Invent - Annual user conference. The event features keynote announcements, training and certification opportunities, over 250 technical sessions, a partner expo, after hours activities, and more. Summits - Global one-day events that are designed to educate new customers about the AWS platform and offer existing customers deep technical content to be more successful with AWS. AWSome Day - Global one-day events are delivered by AWS Education's technical instructors and are ideal for IT pros, developers and technical managers who would like to learn about how to get started in the AWS Cloud. Community Conferences: Contribute","title":"Conferences"},{"location":"Awesome/Awesome_AWS/#latest-kpis-and-stats","text":"Latest key performance indicators and other interesting stats. Over 1 million customers active in past 30 days. 1 $7B+ annual revenue run-rate business. 1 81% year over year revenue growth. 1 EC2 usage up 95% year over year. 1 S3 data transfer up 120% year over year. 1 S3 holds trillions of objects and regularly peaks at 1.5 million requests per second. 2 Database services usage up 127% year over year. 1 $1B annual revenue run-rate business. 1 2 million new EBS volumes created per day. 4 Customers have launched more than 15 million Hadoop clusters. 3 102Tbps network capacity into a data center. 2 500+ major new features and services launched since 2014. 1 All 14 other cloud providers combined have 1/5th the aggregate capacity of AWS. 2 Every day, AWS adds enough new server capacity to support all of Amazon's global infrastructure when it was a $7B annual revenue enterprise (in 2004). 2","title":"Latest KPIs and Stats"},{"location":"Awesome/Awesome_AWS/#appendix-of-core-services","text":"Appendix of official services, grouped by service category.","title":"Appendix of Core Services"},{"location":"Awesome/Awesome_AWS/#services-in-plain-english","text":"Amazon Web Services in Plain English - Entertaining and educational, a community contribution.","title":"Services in Plain English"},{"location":"Awesome/Awesome_AWS/#compute-services","text":"Auto Scaling - Launches or terminates EC2 instances based on policies, schedules, and health checks. Batch - Run batch jobs at scale. Blox - Open source projects for building custom schedulers on ECS. EC2 Container Service (ECS) - Supports Docker containers on EC2 instances. EC2 Systems Manager - Easily configure and manage EC2 and on-premises systems. Elastic Beanstalk - Provides quick deployment and management of applications in the cloud. Elastic Compute Cloud (EC2) - Provides scalable virtual private servers using Xen. Elastic GPUs - Attach low-cost GPUs to EC2 instances for graphics acceleration. Elastic Load Balancing (ELB) - Automatically distributes incoming traffic across multiple EC2 instances. Lambda - Runs code in response to events and automatically manages EC2 instances. Lightsail - Launch and manage simple virtual private servers. Virtual Private Cloud (VPC) - Creates a logically isolated set of EC2 instances which can be connected to an existing network using a VPN connection.","title":"Compute Services"},{"location":"Awesome/Awesome_AWS/#networking-services","text":"Direct Connect - Provides dedicated connections to AWS for faster and cheaper data throughput. Elastic Load Balancing (ELB) - Automatically distributes incoming traffic across multiple EC2 instances. Route 53 - Provides a highly available and scalable Domain Name System (DNS) web service. Virtual Private Cloud (VPC) - Creates a logically isolated set of EC2 instances which can be connected to an existing network using a VPN connection.","title":"Networking Services"},{"location":"Awesome/Awesome_AWS/#enterprise-applications","text":"WorkDocs - Provides a fully managed, secure enterprise storage and sharing service. WorkMail - Provides managed email and calendaring service. WorkSpaces - Provides a cloud-based desktop experience to end-users. Workspaces Application Manager (WAM) - Simplifies deployment and management of WorkSpaces.","title":"Enterprise Applications"},{"location":"Awesome/Awesome_AWS/#analytics-services","text":"Athena - Query data on S3 instantly. Data Pipeline - Provides workload management by processing and moving data between services. Elastic MapReduce (EMR) - Hosts a Hadoop and Spark framework running on EC2 and S3. Elasticsearch Service (ES) - Managed Elasticsearch, a popular open-source search and analytics engine. Glue - Prepare and load data to data stores. Kinesis - Provides real-time data processing over large, distributed data streams. Kinesis Analytics - Write standard SQL queries on streaming data without having to learn any new programming skills. Kinesis Firehose - Captures and automatically loads streaming data into S3 and Redshift. Quicksight - Provides cloud-powered business intelligence for 1/10th the cost of traditional BI solutions. Redshift - Provides petabyte-scale data warehousing with columnar storage and multi-node compute.","title":"Analytics Services"},{"location":"Awesome/Awesome_AWS/#artificial-intelligence","text":"Lex - Build conversational interfaces through voice or text. Machine Learning - Provides managed machine learning technology. Polly - Turn text into lifelike speech. Rekognition - Deep learning-based image analysis.","title":"Artificial Intelligence"},{"location":"Awesome/Awesome_AWS/#management-tools","text":"CloudFormation - Provides a file-based interface for provisioning other resources. CloudTrail - Provides logs of all activity. CloudWatch - Provides monitoring for AWS cloud resources and applications, starting with EC2. Command Line Interface (CLI) - Provides a CLI to manage all services. Config - Provides a detailed view of all resources. Management Console (AWS Console) - A web-based interface to manage all services. OpsWorks - Provides configuration of EC2 services using Chef. Personal Health Dashboard - Your personalized view of service health. Service Catalog - Service Catalog allows IT administrators to create, manage, and distribute portfolios of approved products to end users, who can then access the products they need in a personalized portal.","title":"Management Tools"},{"location":"Awesome/Awesome_AWS/#security-and-identity-services","text":"Certificate Manager - Lets you easily provision, manage, and deploy SSL/TLS certificates for use with AWS services. CloudHSM - Helps meet corporate, contractual and regulatory compliance requirements for data security by using dedicated Hardware Security Module (HSM) appliances within the AWS cloud. Directory Service - A managed service that allows you to connect your resources with an existing on-premises Microsoft Active Directory or to set up a new, stand-alone directory in the AWS Cloud. Identity and Access Management (IAM) - An implicit service, the authentication infrastructure used to authenticate access to the various services. Inspector - An automated security assessment service that helps improve the security and compliance of applications deployed on AWS. Key Management Service (KMS) - A managed service that makes it easy for you to create and control the encryption keys used to encrypt your data. Shield - Managed DDoS Protection. WAF - A web application firewall service that monitors and manages CloudFront distributions.","title":"Security and Identity Services"},{"location":"Awesome/Awesome_AWS/#internet-of-things-service","text":"IoT - Enables secure, bi-directional communication between internet-connected things (such as sensors, actuators, embedded devices, or smart appliances) and the AWS cloud over MQTT and HTTP.","title":"Internet of Things Service"},{"location":"Awesome/Awesome_AWS/#mobile-services","text":"API Gateway - Service for publishing, maintaining and securing web service APIs. Cognito - Provides user identity and data synchronization. Device Farm - App testing service for iOS, Android and Fire OS apps on physical devices. Mobile Analytics - Service for collecting, visualizing, and understanding app usage data. Mobile Hub - Provides an integrated console that helps you build, test, and monitor your mobile apps. Pinpoint - Targeted push notifications for mobile apps. Simple Notification Service (SNS) - Provides a hosted multi-protocol \"push\" messaging for applications.","title":"Mobile Services"},{"location":"Awesome/Awesome_AWS/#storage-and-content-delivery-services","text":"CloudFront - A content delivery network (CDN) for distributing objects to locations near the requester. Elastic Block Store (EBS) - Provides persistent block-level storage volumes for EC2. Elastic File System (EFS) - A file storage service for EC2 instances. Glacier - Provides a low-cost, long-term storage option, intended for archiving data. Import/Export - Accelerates moving large amounts of data into and out of AWS using portable storage devices for transport. Simple Storage Service (S3) - Provides Web Service based storage. Storage Gateway - An iSCSI block storage virtual appliance with cloud-based backup.","title":"Storage and Content Delivery Services"},{"location":"Awesome/Awesome_AWS/#databases","text":"Aurora - MySQL and PostgreSQL compatible relational database with improved performance. DynamoDB - Provides a scalable, low-latency NoSQL online Database Service backed by SSDs. ElastiCache - Provides in-memory caching for web apps (Memcached, Redis). Redshift - Provides petabyte-scale data warehousing with columnar storage and multi-node compute. Relational Database Service (RDS) - Provides a scalable database server with MySQL, Oracle, SQL Server, PostgreSQL, and MariaDB support. Schema Conversion Tool - App that helps you convert your database schema from an Oracle or Microsoft SQL Server database, to an RDS MySQL DB instance or an Aurora DB cluster. SimpleDB - Allows developers to run queries on structured data.","title":"Databases"},{"location":"Awesome/Awesome_AWS/#application-services","text":"API Gateway - Service for publishing, maintaining and securing web service APIs. AppStream - Flexible, low-latency streaming service for apps and games. CloudSearch - Provides basic full-text search and indexing of textual content. DevPay - Provides billing and account management. Elastic Transcoder (ETS) - Provides video transcoding of S3 hosted videos. Flexible Payments Service (FPS) - Provides an interface for micropayments. Simple Email Service (SES) - Provides bulk and transactional email sending. Simple Notification Service (SNS) - Provides a hosted multi-protocol \"push\" messaging for applications. Simple Queue Service (SQS) - Provides a hosted message queue for web applications. Simple Workflow (SWF) - A workflow service for building scalable, resilient applications. Step Functions - Coordinate components of distributed applications.","title":"Application Services"},{"location":"Awesome/Awesome_AWS/#developer-tools","text":"CodeBuild - Build and test code. CodeCommit - Hosted Git version control service. CodeDeploy - Provides automated code deployment to EC2 instances. CodePipeline - Continuous delivery service. Command Line Interface (CLI) - Provides a CLI to manage all services. X-Ray - Analyze and debug your applications.","title":"Developer Tools"},{"location":"Awesome/Awesome_AWS/#miscellaneous-services","text":"Fulfillment Web Service - Provides a programmatic web service for sellers to ship items to and from Amazon using Fulfillment by Amazon. Mechanical Turk - Manages small units of work distributed among many persons. Partner Network (APN) - Provides partners with the technical information and sales and marketing support to increase business opportunities. Product Advertising API - Provides access to product data and electronic commerce functionality.","title":"Miscellaneous Services"},{"location":"Awesome/Awesome_AWS/#credits","text":"Check out the Credits page .","title":"Credits"},{"location":"Awesome/Awesome_AWS/#other-awesome-lists","text":"Other awesome lists can be found in awesome and awesome-awesomeness .","title":"Other Awesome Lists"},{"location":"Awesome/Awesome_AWS/#contact-info","text":"Feel free to contact me to discuss any issues, questions, or comments. My contact info can be found on my GitHub page .","title":"Contact Info"},{"location":"Awesome/Awesome_AWS/#license","text":"Copyright 2017 Donne Martin Creative Commons Attribution 4.0 International License (CC BY 4.0) http://creativecommons.org/licenses/by/4.0/","title":"License"},{"location":"Awesome/Awesome_BigData/","text":"Awesome Big Data A curated list of awesome big data frameworks, resources and other awesomeness. Inspired by awesome-php , awesome-python , awesome-ruby , hadoopecosystemtable & big-data . Your contributions are always welcome! Awesome Big Data RDBMS Frameworks Distributed Programming Distributed Filesystem Key-Map Data Model Document Data Model Key-value Data Model Graph Data Model NewSQL Databases Columnar Databases Time-Series Databases SQL-like processing Data Ingestion Service Programming Scheduling Machine Learning Benchmarking Security System Deployment Applications Search engine and framework MySQL forks and evolutions PostgreSQL forks and evolutions Memcached forks and evolutions Embedded Databases Business Intelligence Data Visualization Internet of things and sensor data Interesting Readings Interesting Papers Videos Books Other Awesome Lists RDBMS MySQL The world's most popular open source database. PostgreSQL The world's most advanced open source database. Oracle Database - object-relational database management system. Teradata - high-performance MPP data warehouse platform. Frameworks IBM Streams - platform for distributed processing and real-time analytics. Integrates with many of the popular technologies in the Big Data ecosystem (Kafka, HDFS, Spark, etc.) Apache Hadoop - framework for distributed processing. Integrates MapReduce (parallel processing), YARN (job scheduling) and HDFS (distributed file system). Tigon - High Throughput Real-time Stream Processing Framework. Pachyderm - Pachyderm is a data storage platform built on Docker and Kubernetes to provide reproducible data processing and analysis. Distributed Programming AddThis Hydra - distributed data processing and storage system originally developed at AddThis. AMPLab SIMR - run Spark on Hadoop MapReduce v1. Apache APEX - a unified, enterprise platform for big data stream and batch processing. Apache Beam - an unified model and set of language-specific SDKs for defining and executing data processing workflows. Apache Crunch - a simple Java API for tasks like joining and data aggregation that are tedious to implement on plain MapReduce. Apache DataFu - collection of user-defined functions for Hadoop and Pig developed by LinkedIn. Apache Flink - high-performance runtime, and automatic program optimization. Apache Gearpump - real-time big data streaming engine based on Akka. Apache Gora - framework for in-memory data model and persistence. Apache Hama - BSP (Bulk Synchronous Parallel) computing framework. Apache MapReduce - programming model for processing large data sets with a parallel, distributed algorithm on a cluster. Apache Pig - high level language to express data analysis programs for Hadoop. Apache REEF - retainable evaluator execution framework to simplify and unify the lower layers of big data systems. Apache S4 - framework for stream processing, implementation of S4. Apache Spark - framework for in-memory cluster computing. Apache Spark Streaming - framework for stream processing, part of Spark. Apache Storm - framework for stream processing by Twitter also on YARN. Apache Samza - stream processing framework, based on Kafka and YARN. Apache Tez - application framework for executing a complex DAG (directed acyclic graph) of tasks, built on YARN. Apache Twill - abstraction over YARN that reduces the complexity of developing distributed applications. Baidu Bigflow - an interface that allows for writing distributed computing programs providing lots of simple, flexible, powerful APIs to easily handle data of any scale. Cascalog - data processing and querying library. Cheetah - High Performance, Custom Data Warehouse on Top of MapReduce. Concurrent Cascading - framework for data management/analytics on Hadoop. Damballa Parkour - MapReduce library for Clojure. Datasalt Pangool - alternative MapReduce paradigm. DataTorrent StrAM - real-time engine is designed to enable distributed, asynchronous, real time in-memory big-data computations in as unblocked a way as possible, with minimal overhead and impact on performance. Facebook Corona - Hadoop enhancement which removes single point of failure. Facebook Peregrine - Map Reduce framework. Facebook Scuba - distributed in-memory datastore. Google Dataflow - create data pipelines to help them\u00e6ingest, transform and analyze data. Google MapReduce - map reduce framework. Google MillWheel - fault tolerant stream processing framework. IBM Streams - platform for distributed processing and real-time analytics. Provides toolkits for advanced analytics like geospatial, time series, etc. out of the box. JAQL - declarative programming language for working with structured, semi-structured and unstructured data. Kite - is a set of libraries, tools, examples, and documentation focused on making it easier to build systems on top of the Hadoop ecosystem. Metamarkets Druid - framework for real-time analysis of large datasets. Netflix PigPen - map-reduce for Clojure which compiles to Apache Pig. Nokia Disco - MapReduce framework developed by Nokia. Onyx - Distributed computation for the cloud. Pinterest Pinlater - asynchronous job execution system. Pydoop - Python MapReduce and HDFS API for Hadoop. Rackerlabs Blueflood - multi-tenant distributed metric processing system Skale - High performance distributed data processing in NodeJS. Stratosphere - general purpose cluster computing framework. Streamdrill - useful for counting activities of event streams over different time windows and finding the most active one. streamsx.topology - Libraries to enable building IBM Streams application in Java, Python or Scala. Tuktu - Easy-to-use platform for batch and streaming computation, built using Scala, Akka and Play! Twitter Heron - Heron is a realtime, distributed, fault-tolerant stream processing engine from Twitter replacing Storm. Twitter Scalding - Scala library for Map Reduce jobs, built on Cascading. Twitter Summingbird - Streaming MapReduce with Scalding and Storm, by Twitter. Twitter TSAR - TimeSeries AggregatoR by Twitter. Wallaroo - The ultrafast and elastic data processing engine. Big or fast data - no fuss, no Java needed. Distributed Filesystem Ambry - a distributed object store that supports storage of trillion of small immutable objects as well as billions of large objects. Apache HDFS - a way to store large files across multiple machines. Apache Kudu - Hadoop's storage layer to enable fast analytics on fast data. BeeGFS - formerly FhGFS, parallel distributed file system. Ceph Filesystem - software storage platform designed. Disco DDFS - distributed filesystem. Facebook Haystack - object storage system. Google Colossus - distributed filesystem (GFS2). Google GFS - distributed filesystem. Google Megastore - scalable, highly available storage. GridGain - GGFS, Hadoop compliant in-memory file system. Lustre file system - high-performance distributed filesystem. Microsoft Azure Data Lake Store - HDFS-compatible storage in Azure cloud Quantcast File System QFS - open-source distributed file system. Red Hat GlusterFS - scale-out network-attached storage file system. Seaweed-FS - simple and highly scalable distributed file system. Alluxio - reliable file sharing at memory speed across cluster frameworks. Tahoe-LAFS - decentralized cloud storage system. Baidu File System - distributed filesystem. Distributed Index Pilosa Open source distributed bitmap index that dramatically accelerates queries across multiple, massive data sets. Document Data Model Actian Versant - commercial object-oriented database management systems . Crate Data - is an open source massively scalable data store. It requires zero administration. Facebook Apollo - Facebook\u2019s Paxos-like NoSQL database. jumboDB - document oriented datastore over Hadoop. LinkedIn Espresso - horizontally scalable document-oriented NoSQL data store. MarkLogic - Schema-agnostic Enterprise NoSQL database technology. Microsoft Azure DocumentDB - NoSQL cloud database service with protocol support for MongoDB MongoDB - Document-oriented database system. RavenDB - A transactional, open-source Document Database. RethinkDB - document database that supports queries like table joins and group by. Key Map Data Model Note : There is some term confusion in the industry, and two different things are called \"Columnar Databases\". Some, listed here, are distributed, persistent databases built around the \"key-map\" data model: all data has a (possibly composite) key, with which a map of key-value pairs is associated. In some systems, multiple such value maps can be associated with a key, and these maps are referred to as \"column families\" (with value map keys being referred to as \"columns\"). Another group of technologies that can also be called \"columnar databases\" is distinguished by how it stores data, on disk or in memory -- rather than storing data the traditional way, where all column values for a given key are stored next to each other, \"row by row\", these systems store all column values next to each other. So more work is needed to get all columns for a given key, but less work is needed to get all values for a given column. The former group is referred to as \"key map data model\" here. The line between these and the Key-value Data Model stores is fairly blurry. The latter, being more about the storage format than about the data model, is listed under Columnar Databases . You can read more about this distinction on Prof. Daniel Abadi's blog: Distinguishing two major types of Column Stores . Apache Accumulo - distributed key/value store, built on Hadoop. Apache Cassandra - column-oriented distributed datastore, inspired by BigTable. Apache HBase - column-oriented distributed datastore, inspired by BigTable. Baidu Tera - an Internet-scale database, inspired by BigTable. Facebook HydraBase - evolution of HBase made by Facebook. Google BigTable - column-oriented distributed datastore. Google Cloud Datastore - is a fully managed, schemaless database for storing non-relational data over BigTable. Hypertable - column-oriented distributed datastore, inspired by BigTable. InfiniDB - is accessed through a MySQL interface and use massive parallel processing to parallelize queries. Tephra - Transactions for HBase. Twitter Manhattan - real-time, multi-tenant distributed database for Twitter scale. ScyllaDB - column-oriented distributed datastore written in C++, totally compatible with Apache Cassandra. Key-value Data Model Aerospike - NoSQL flash-optimized, in-memory. Open source and \"Server code in 'C' (not Java or Erlang) precisely tuned to avoid context switching and memory copies.\" Amazon DynamoDB - distributed key/value store, implementation of Dynamo paper. Badger - a fast, simple, efficient, and persistent key-value store written natively in Go. Bolt - an embedded key-value database for Go. BTDB - Key Value Database in .Net with Object DB Layer, RPC, dynamic IL and much more BuntDB - a fast, embeddable, in-memory key/value database for Go with custom indexing and geospatial support. Edis - is a protocol-compatible Server replacement for Redis. ElephantDB - Distributed database specialized in exporting data from Hadoop. EventStore - distributed time series database. GridDB - suitable for sensor data stored in a timeseries. HyperDex - a scalable, next generation key-value and document store with a wide array of features, including consistency, fault tolerance and high performance. Ignite - is an in-memory key-value data store providing full SQL-compliant data access that can optionally be backed by disk storage. LinkedIn Krati - is a simple persistent data store with very low latency and high throughput. Linkedin Voldemort - distributed key/value storage system. Oracle NoSQL Database - distributed key-value database by Oracle Corporation. Redis - in memory key value datastore. Riak - a decentralized datastore. Storehaus - library to work with asynchronous key value stores, by Twitter. SummitDB - an in-memory, NoSQL key/value database, with disk persistance and using the Raft consensus algorithm. Tarantool - an efficient NoSQL database and a Lua application server. TiKV - a distributed key-value database powered by Rust and inspired by Google Spanner and HBase. Tile38 - a geolocation data store, spatial index, and realtime geofence, supporting a variety of object types including latitude/longitude points, bounding boxes, XYZ tiles, Geohashes, and GeoJSON TreodeDB - key-value store that's replicated and sharded and provides atomic multirow writes. Graph Data Model AgensGraph - a new generation multi-model graph database for the modern complex data environment. Apache Giraph - implementation of Pregel, based on Hadoop. Apache Spark Bagel - implementation of Pregel, part of Spark. ArangoDB - multi model distributed database. DGraph - A scalable, distributed, low latency, high throughput graph database aimed at providing Google production level scale and throughput, with low enough latency to be serving real time user queries, over terabytes of structured data. EliasDB - a lightweight graph based database that does not require any third-party libraries. Facebook TAO - TAO is the distributed data store that is widely used at facebook to store and serve the social graph. GCHQ Gaffer - Gaffer by GCHQ is a framework that makes it easy to store large-scale graphs in which the nodes and edges have statistics. Google Cayley - open-source graph database. Google Pregel - graph processing framework. GraphLab PowerGraph - a core C++ GraphLab API and a collection of high-performance machine learning and data mining toolkits built on top of the GraphLab API. GraphX - resilient Distributed Graph System on Spark. Gremlin - graph traversal Language. Infovore - RDF-centric Map/Reduce framework. Intel GraphBuilder - tools to construct large-scale graphs on top of Hadoop. MapGraph - Massively Parallel Graph processing on GPUs. Neo4j - graph database written entirely in Java. OrientDB - document and graph database. Phoebus - framework for large scale graph processing. Titan - distributed graph database, built over Cassandra. Twitter FlockDB - distributed graph database. NodeXL - A free, open-source template for Microsoft\u00ae Excel\u00ae 2007, 2010, 2013 and 2016 that makes it easy to explore network graphs. Columnar Databases Note please read the note on Key-Map Data Model section. Columnar Storage - an explanation of what columnar storage is and when you might want it. Actian Vector - column-oriented analytic database. C-Store - column oriented DBMS. ClickHouse - an open-source column-oriented database management system that allows generating analytical data reports in real time. EventQL - a distributed, column-oriented database built for large-scale event collection and analytics. MonetDB - column store database. Parquet - columnar storage format for Hadoop. Pivotal Greenplum - purpose-built, dedicated analytic data warehouse that offers a columnar engine as well as a traditional row-based one. Vertica - is designed to manage large, fast-growing volumes of data and provide very fast query performance when used for data warehouses. SQream DB - A GPU powered big data database, designed for analytics and data warehousing, with ANSI-92 compliant SQL, suitable for data sets from 10TB to 1PB. Google BigQuery - Google's cloud offering backed by their pioneering work on Dremel. Amazon Redshift - Amazon's cloud offering, also based on a columnar datastore backend. IndexR - an open-source columnar storage format for fast & realtime analytic with big data. LocustDB - an experimental analytics database aiming to set a new standard for query performance on commodity hardware. NewSQL Databases Actian Ingres - commercially supported, open-source SQL relational database management system. Amazon RedShift - data warehouse service, based on PostgreSQL. BayesDB - statistic oriented SQL database. Bedrock - a simple, modular, networked and distributed transaction layer built atop SQLite. CitusDB - scales out PostgreSQL through sharding and replication. Cockroach - Scalable, Geo-Replicated, Transactional Datastore. Comdb2 - a clustered RDBMS built on optimistic concurrency control techniques. Datomic - distributed database designed to enable scalable, flexible and intelligent applications. FoundationDB - distributed database, inspired by F1. Google F1 - distributed SQL database built on Spanner. Google Spanner - globally distributed semi-relational database. H-Store - is an experimental main-memory, parallel database management system that is optimized for on-line transaction processing (OLTP) applications. Haeinsa - linearly scalable multi-row, multi-table transaction library for HBase based on Percolator. HandlerSocket - NoSQL plugin for MySQL/MariaDB. InfiniSQL - infinity scalable RDBMS. MemSQL - in memory SQL database witho optimized columnar storage on flash. NuoDB - SQL/ACID compliant distributed database. Oracle TimesTen in-Memory Database - in-memory, relational database management system with persistence and recoverability. Pivotal GemFire XD - Low-latency, in-memory, distributed SQL data store. Provides SQL interface to in-memory table data, persistable in HDFS. SAP HANA - is an in-memory, column-oriented, relational database management system. SenseiDB - distributed, realtime, semi-structured database. Sky - database used for flexible, high performance analysis of behavioral data. SymmetricDS - open source software for both file and database synchronization. Map-D - GPU in-memory database, big data analysis and visualization platform TiDB - TiDB is a distributed SQL database. Inspired by the design of Google F1. VoltDB - claims to be fastest in-memory database Time-Series Databases Axibase Time Series Database - Integrated time series database on top of HBase with built-in visualization, rule-engine and SQL support. Chronix - a time series storage built to store time series highly compressed and for fast access times. Cube - uses MongoDB to store time series data. Heroic - is a scalable time series database based on Cassandra and Elasticsearch. InfluxDB - distributed time series database. Kairosdb - similar to OpenTSDB but allows for Cassandra. Newts - a time series database based on Apache Cassandra. OpenTSDB - distributed time series database on top of HBase. Prometheus - a time series database and service monitoring system. Beringei - Facebook's in-memory time-series database. TrailDB - an efficient tool for storing and querying series of events. Druid Column oriented distributed data store ideal for powering interactive applications Riak-TS Riak TS is the only enterprise-grade NoSQL time series database optimized specifically for IoT and Time Series data. Akumuli Akumuli is a numeric time-series database. It can be used to capture, store and process time-series data in real-time. The word \"akumuli\" can be translated from esperanto as \"accumulate\". Rhombus A time-series object store for Cassandra that handles all the complexity of building wide row indexes. Dalmatiner DB Fast distributed metrics database Blueflood A distributed system designed to ingest and process time series data Timely Timely is a time series database application that provides secure access to time series data based on Accumulo and Grafana. SiriDB Highly-scalable, robust and fast, open source time series database with cluster functionality. Thanos - Thanos is a set of components to create a highly available metric system with unlimited storage capacity using multiple (existing) Prometheus deployments. SQL-like processing Actian SQL for Hadoop - high performance interactive SQL access to all Hadoop data. Apache Drill - framework for interactive analysis, inspired by Dremel. Apache HCatalog - table and storage management layer for Hadoop. Apache Hive - SQL-like data warehouse system for Hadoop. Apache Calcite - framework that allows efficient translation of queries involving heterogeneous and federated data. Apache Phoenix - SQL skin over HBase. Aster Database - SQL-like analytic processing for MapReduce. Cloudera Impala - framework for interactive analysis, Inspired by Dremel. Concurrent Lingual - SQL-like query language for Cascading. Datasalt Splout SQL - full SQL query engine for big datasets. Facebook PrestoDB - distributed SQL query engine. Google BigQuery - framework for interactive analysis, implementation of Dremel. PipelineDB - an open-source relational database that runs SQL queries continuously on streams, incrementally storing results in tables. Pivotal HDB - SQL-like data warehouse system for Hadoop. RainstorDB - database for storing petabyte-scale volumes of structured and semi-structured data. Spark Catalyst - is a Query Optimization Framework for Spark and Shark. SparkSQL - Manipulating Structured Data Using Spark. Splice Machine - a full-featured SQL-on-Hadoop RDBMS with ACID transactions. Stinger - interactive query for Hive. Tajo - distributed data warehouse system on Hadoop. Trafodion - enterprise-class SQL-on-HBase solution targeting big data transactional or operational workloads. Data Ingestion Amazon Kinesis - real-time processing of streaming data at massive scale. Apache Chukwa - data collection system. Apache Flume - service to manage large amount of log data. Apache Kafka - distributed publish-subscribe messaging system. Apache NiFi - Apache NiFi is an integrated data logistics platform for automating the movement of data between disparate systems. Apache Sqoop - tool to transfer data between Hadoop and a structured datastore. Cloudera Morphlines - framework that help ETL to Solr, HBase and HDFS. Embulk - open-source bulk data loader that helps data transfer between various databases, storages, file formats, and cloud services. Facebook Scribe - streamed log data aggregator. Fluentd - tool to collect events and logs. Google Photon - geographically distributed system for joining multiple continuously flowing streams of data in real-time with high scalability and low latency. Heka - open source stream processing software system. HIHO - framework for connecting disparate data sources with Hadoop. Kestrel - distributed message queue system. LinkedIn Databus - stream of change capture events for a database. LinkedIn Kamikaze - utility package for compressing sorted integer arrays. LinkedIn White Elephant - log aggregator and dashboard. Logstash - a tool for managing events and logs. Netflix Suro - log agregattor like Storm and Samza based on Chukwa. Pinterest Secor - is a service implementing Kafka log persistance. Linkedin Gobblin - linkedin's universal data ingestion framework. Skizze - sketch data store to deal with all problems around counting and sketching using probabilistic data-structures. StreamSets Data Collector - continuous big data ingest infrastructure with a simple to use IDE. Yahoo Pulsar - a distributed pub-sub messaging platform with a very flexible messaging model and an intuitive client API. Alooma - data pipeline as a service enabling moving data sources such as MySQL into data warehouses. Service Programming Akka Toolkit - runtime for distributed, and fault tolerant event-driven applications on the JVM. Apache Avro - data serialization system. Apache Curator - Java libaries for Apache ZooKeeper. Apache Karaf - OSGi runtime that runs on top of any OSGi framework. Apache Thrift - framework to build binary protocols. Apache Zookeeper - centralized service for process management. Google Chubby - a lock service for loosely-coupled distributed systems. Hydrosphere Mist - a service for exposing Apache Spark analytics jobs and machine learning models as realtime, batch or reactive web services. Linkedin Norbert - cluster manager. OpenMPI - message passing framework. Serf - decentralized solution for service discovery and orchestration. Spotify Luigi - a Python package for building complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization, handling failures, command line integration, and much more. Spring XD - distributed and extensible system for data ingestion, real time analytics, batch processing, and data export. Twitter Elephant Bird - libraries for working with LZOP-compressed data. Twitter Finagle - asynchronous network stack for the JVM. Scheduling Apache Airflow - a platform to programmatically author, schedule and monitor workflows. Apache Aurora - is a service scheduler that runs on top of Apache Mesos. Apache Falcon - data management framework. Apache Oozie - workflow job scheduler. Azure Data Factory - cloud-based pipeline orchestration for on-prem, cloud and HDInsight Chronos - distributed and fault-tolerant scheduler. Linkedin Azkaban - batch workflow job scheduler. Schedoscope - Scala DSL for agile scheduling of Hadoop jobs. Sparrow - scheduling platform. Machine Learning Azure ML Studio - Cloud-based AzureML, R, Python Machine Learning platform brain - Neural networks in JavaScript. Cloudera Oryx - real-time large-scale machine learning. Concurrent Pattern - machine learning library for Cascading. convnetjs - Deep Learning in Javascript. Train Convolutional Neural Networks (or ordinary ones) in your browser. DataVec - A vectorization and data preprocessing library for deep learning in Java and Scala. Part of the Deeplearning4j ecosystem. Deeplearning4j - Fast, open deep learning for the JVM (Java, Scala, Clojure). A neural network configuration layer powered by a C++ library. Uses Spark and Hadoop to train nets on multiple GPUs and CPUs. Decider - Flexible and Extensible Machine Learning in Ruby. ENCOG - machine learning framework that supports a variety of advanced algorithms, as well as support classes to normalize and process data. etcML - text classification with machine learning. Etsy Conjecture - scalable Machine Learning in Scalding. GraphLab Create - A machine learning platform in Python with a broad collection of ML toolkits, data engineering, and deployment tools. H2O - statistical, machine learning and math runtime with Hadoop. R and Python. Keras - An intuitive neural net API inspired by Torch that runs atop Theano and Tensorflow. Mahout - An Apache-backed machine learning library for Hadoop. MLbase - distributed machine learning libraries for the BDAS stack. MLPNeuralNet - Fast multilayer perceptron neural network library for iOS and Mac OS X. MOA - MOA performs big data stream mining in real time, and large scale machine learning. MonkeyLearn - Text mining made easy. Extract and classify data from text. ND4J - A matrix library for the JVM. Numpy for Java. nupic - Numenta Platform for Intelligent Computing: a brain-inspired machine intelligence platform, and biologically accurate neural network based on cortical learning algorithms. PredictionIO - machine learning server buit on Hadoop, Mahout and Cascading. RL4J - Reinforcement learning for Java and Scala. Includes Deep-Q learning and A3C algorithms, and integrates with Open AI's Gym. Runs in the Deeplearning4j ecosystem. SAMOA - distributed streaming machine learning framework. scikit-learn - scikit-learn: machine learning in Python. Spark MLlib - a Spark implementation of some common machine learning (ML) functionality. Sibyl - System for Large Scale Machine Learning at Google. TensorFlow - Library from Google for machine learning using data flow graphs. Theano - A Python-focused machine learning library supported by the University of Montreal. Torch - A deep learning library with a Lua API, supported by NYU and Facebook. Velox - System for serving machine learning predictions. Vowpal Wabbit - learning system sponsored by Microsoft and Yahoo!. WEKA - suite of machine learning software. BidMach - CPU and GPU-accelerated Machine Learning Library. Benchmarking Apache Hadoop Benchmarking - micro-benchmarks for testing Hadoop performances. Berkeley SWIM Benchmark - real-world big data workload benchmark. Intel HiBench - a Hadoop benchmark suite. PUMA Benchmarking - benchmark suite for MapReduce applications. Yahoo Gridmix3 - Hadoop cluster benchmarking from Yahoo engineer team. Deeplearning4j Benchmarks Security Apache Ranger - Central security admin & fine-grained authorization for Hadoop Apache Eagle - real time monitoring solution Apache Knox Gateway - single point of secure access for Hadoop clusters. Apache Sentry - security module for data stored in Hadoop. BDA - The vulnerability detector for Hadoop and Spark System Deployment Apache Ambari - operational framework for Hadoop mangement. Apache Bigtop - system deployment framework for the Hadoop ecosystem. Apache Helix - cluster management framework. Apache Mesos - cluster manager. Apache Slider - is a YARN application to deploy existing distributed applications on YARN. Apache Whirr - set of libraries for running cloud services. Apache YARN - Cluster manager. Brooklyn - library that simplifies application deployment and management. Buildoop - Similar to Apache BigTop based on Groovy language. Cloudera HUE - web application for interacting with Hadoop. Facebook Prism - multi datacenters replication system. Google Borg - job scheduling and monitoring system. Google Omega - job scheduling and monitoring system. Hortonworks HOYA - application that can deploy HBase cluster on YARN. Kubernetes - a system for automating deployment, scaling, and management of containerized applications. Marathon - Mesos framework for long-running services. Applications 411 - an web application for alert management resulting from scheduled searches into Elasticsearch. Adobe spindle - Next-generation web analytics processing with Scala, Spark, and Parquet. Apache Kiji - framework to collect and analyze data in real-time, based on HBase. Apache Metron - a platform that integrates a variety of open source big data technologies in order to offer a centralized tool for security monitoring and analysis. Apache Nutch - open source web crawler. Apache OODT - capturing, processing and sharing of data for NASA's scientific archives. Apache Tika - content analysis toolkit. Argus - Time series monitoring and alerting platform. AthenaX - a streaming analytics platform that enables users to run production-quality, large scale streaming analytics using Structured Query Language (SQL). Atlas - a backend for managing dimensional time series data. Countly - open source mobile and web analytics platform, based on Node.js & MongoDB. Domino - Run, scale, share, and deploy models \u2014 without any infrastructure. Eclipse BIRT - Eclipse-based reporting system. ElastAert - ElastAlert is a simple framework for alerting on anomalies, spikes, or other patterns of interest from data in ElasticSearch. Eventhub - open source event analytics platform. Hermes - asynchronous message broker built on top of Kafka. HIPI Library - API for performing image processing tasks on Hadoop's MapReduce. Hunk - Splunk analytics for Hadoop. Imhotep - Large scale analytics platform by indeed. MADlib - data-processing library of an RDBMS to analyze data. Kapacitor - an open source framework for processing, monitoring, and alerting on time series data. Kylin - open source Distributed Analytics Engine from eBay. PivotalR - R on Pivotal HD / HAWQ and PostgreSQL. Rakam - open-source real-time custom analytics platform powered by Postgresql, Kinesis and PrestoDB. Qubole - auto-scaling Hadoop cluster, built-in data connectors. Sense - Cloud Platform for Data Science and Big Data Analytics. SnappyData - a distributed in-memory data store for real-time operational analytics, delivering stream analytics, OLTP (online transaction processing) and OLAP (online analytical processing) built on Spark in a single integrated cluster. Snowplow - enterprise-strength web and event analytics, powered by Hadoop, Kinesis, Redshift and Postgres. SparkR - R frontend for Spark. Splunk - analyzer for machine-generated data. Sumo Logic - cloud based analyzer for machine-generated data. Talend - unified open source environment for YARN, Hadoop, HBASE, Hive, HCatalog & Pig. Warp - query by example tool for big data (OS X app) Search engine and framework Apache Lucene - Search engine library. Apache Solr - Search platform for Apache Lucene. Elassandra - is a fork of Elasticsearch modified to run on top of Apache Cassandra in a scalable and resilient peer-to-peer architecture. ElasticSearch - Search and analytics engine based on Apache Lucene. Enigma.io \u2013 Freemium robust web application for exploring, filtering, analyzing, searching and exporting massive datasets scraped from across the Web. Facebook Unicorn - social graph search platform. Google Caffeine - continuous indexing system. Google Percolator - continuous indexing system. TeraGoogle - large search index. HBase Coprocessor - implementation of Percolator, part of HBase. Lily HBase Indexer - quickly and easily search for any content stored in HBase. LinkedIn Bobo - is a Faceted Search implementation written purely in Java, an extension to Apache Lucene. LinkedIn Cleo - is a flexible software library for enabling rapid development of partial, out-of-order and real-time typeahead search. LinkedIn Galene - search architecture at LinkedIn. LinkedIn Zoie - is a realtime search/indexing system written in Java. MG4J - MG4J (Managing Gigabytes for Java) is a full-text search engine for large document collections written in Java. It is highly customisable, high-performance and provides state-of-the-art features and new research algorithms. Sphinx Search Server - fulltext search engine. Vespa - is an engine for low-latency computation over large data sets. It stores and indexes your data such that queries, selection and processing over the data can be performed at serving time. MySQL forks and evolutions Amazon RDS - MySQL databases in Amazon's cloud. Drizzle - evolution of MySQL 6.0. Google Cloud SQL - MySQL databases in Google's cloud. MariaDB - enhanced, drop-in replacement for MySQL. MySQL Cluster - MySQL implementation using NDB Cluster storage engine. Percona Server - enhanced, drop-in replacement for MySQL. ProxySQL - High Performance Proxy for MySQL. TokuDB - TokuDB is a storage engine for MySQL and MariaDB. WebScaleSQL - is a collaboration among engineers from several companies that face similar challenges in running MySQL at scale. PostgreSQL forks and evolutions HadoopDB - hybrid of MapReduce and DBMS. IBM Netezza - high-performance data warehouse appliances. Postgres-XL - Scalable Open Source PostgreSQL-based Database Cluster. RecDB - Open Source Recommendation Engine Built Entirely Inside PostgreSQL. Stado - open source MPP database system solely targeted at data warehousing and data mart applications. Yahoo Everest - multi-peta-byte database / MPP derived by PostgreSQL. TimescaleDB - An open-source time-series database optimized for fast ingest and complex queries PipelineDB - The Streaming SQL Database. An open-source relational database that runs SQL queries continuously on streams, incrementally storing results in tables Memcached forks and evolutions Facebook McDipper - key/value cache for flash storage. Facebook Memcached - fork of Memcache. Twemproxy - A fast, light-weight proxy for memcached and redis. Twitter Fatcache - key/value cache for flash storage. Twitter Twemcache - fork of Memcache. Embedded Databases Actian PSQL - ACID-compliant DBMS developed by Pervasive Software, optimized for embedding in applications. BerkeleyDB - a software library that provides a high-performance embedded database for key/value data. HanoiDB - Erlang LSM BTree Storage. LevelDB - a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. LMDB - ultra-fast, ultra-compact key-value embedded data store developed by Symas. RocksDB - embeddable persistent key-value store for fast storage based on LevelDB. Business Intelligence BIME Analytics - business intelligence platform in the cloud. Chartio - lean business intelligence platform to visualize and explore your data. datapine - self-service business intelligence tool in the cloud. GoodData - platform for data products and embedded analytics. Jaspersoft - powerful business intelligence suite. Jedox Palo - customisable Business Intelligence platform. Jethrodata - Interactive Big Data Analytics. Microsoft - business intelligence software and platform. Microstrategy - software platforms for business intelligence, mobile intelligence, and network applications. Pentaho - business intelligence platform. Qlik - business intelligence and analytics platform. Redash - Open source business intelligence platform, supporting multiple data sources and planned queries. Saiku - open source analytics platform. SpagoBI - open source business intelligence platform. SparklineData SNAP - modern B.I platform powered by Apache Spark. Tableau - business intelligence platform. Zoomdata - Big Data Analytics. Metabase - The simplest, fastest way to get business intelligence and analytics to everyone in your company Data Visualization Airpal - Web UI for PrestoDB. AnyChart - fast, simple and flexible JavaScript (HTML5) charting library featuring pure JS API. Arbor - graph visualization library using web workers and jQuery. Banana - visualize logs and time-stamped data stored in Solr. Port of Kibana. Bloomery - Web UI for Impala. Bokeh - A powerful Python interactive visualization library that targets modern web browsers for presentation, with the goal of providing elegant, concise construction of novel graphics in the style of D3.js, but also delivering this capability with high-performance interactivity over very large or streaming datasets. C3 - D3-based reusable chart library CartoDB - open-source or freemium hosting for geospatial databases with powerful front-end editing capabilities and a robust API. chartd - responsive, retina-compatible charts with just an img tag. Chart.js - open source HTML5 Charts visualizations. Chartist.js - another open source HTML5 Charts visualization. Crossfilter - JavaScript library for exploring large multivariate datasets in the browser. Works well with dc.js and d3.js. Cubism - JavaScript library for time series visualization. Cytoscape - JavaScript library for visualizing complex networks. DC.js - Dimensional charting built to work natively with crossfilter rendered using d3.js. Excellent for connecting charts/additional metadata to hover events in D3. D3 - javaScript library for manipulating documents. D3.compose - Compose complex, data-driven visualizations from reusable charts and components. D3Plus - A fairly robust set of reusable charts and styles for d3.js. Echarts - Baidus enterprise charts. Envisionjs - dynamic HTML5 visualization. FnordMetric - write SQL queries that return SVG charts rather than tables Freeboard - pen source real-time dashboard builder for IOT and other web mashups. Gephi - An award-winning open-source platform for visualizing and manipulating large graphs and network connections. It's like Photoshop, but for graphs. Available for Windows and Mac OS X. Google Charts - simple charting API. Grafana - graphite dashboard frontend, editor and graph composer. Graphite - scalable Realtime Graphing. Highcharts - simple and flexible charting API. IPython - provides a rich architecture for interactive computing. Kibana - visualize logs and time-stamped data Lumify - open source big data analysis and visualization platform Matplotlib - plotting with Python. Metricsgraphic.js - a library built on top of D3 that is optimized for time-series data NVD3 - chart components for d3.js. Peity - Progressive SVG bar, line and pie charts. Plot.ly - Easy-to-use web service that allows for rapid creation of complex charts, from heatmaps to histograms. Upload data to create and style charts with Plotly's online spreadsheet. Fork others' plots. Plotly.js The open source javascript graphing library that powers plotly. Recline - simple but powerful library for building data applications in pure Javascript and HTML. Redash - open-source platform to query and visualize data. ReCharts - A composable charting library built on React components Shiny - a web application framework for R. Sigma.js - JavaScript library dedicated to graph drawing. Superset - a data exploration platform designed to be visual, intuitive and interactive, making it easy to slice, dice and visualize data and perform analytics at the speed of thought. Vega - a visualization grammar. Zeppelin - a notebook-style collaborative data analysis. Zing Charts - JavaScript charting library for big data. Internet of things and sensor data Apache Edgent (Incubating) - a programming model and micro-kernel style runtime that can be embedded in gateways and small footprint edge devices enabling local, real-time, analytics on the edge devices. Azure IoT Hub - Cloud-based bi-directional monitoring and messaging hub TempoIQ - Cloud-based sensor analytics. 2lemetry - Platform for Internet of things. Pubnub - Data stream network ThingWorx - Rapid development and connection of intelligent systems IFTTT - If this then that Evrything - Making products smart NetLytics - Analytics platform to process network data on Spark. Interesting Readings Big Data Benchmark - Benchmark of Redshift, Hive, Shark, Impala and Stiger/Tez. NoSQL Comparison - Cassandra vs MongoDB vs CouchDB vs Redis vs Riak vs HBase vs Couchbase vs Neo4j vs Hypertable vs ElasticSearch vs Accumulo vs VoltDB vs Scalaris comparison. Monitoring Kafka performance - Guide to monitoring Apache Kafka, including native methods for metrics collection. Monitoring Hadoop performance - Guide to monitoring Hadoop, with an overview of Hadoop architecture, and native methods for metrics collection. Interesting Papers 2015 - 2016 2015 - Facebook - One Trillion Edges: Graph Processing at Facebook-Scale. 2013 - 2014 2014 - Stanford - Mining of Massive Datasets. 2013 - AMPLab - Presto: Distributed Machine Learning and Graph Processing with Sparse Matrices. 2013 - AMPLab - MLbase: A Distributed Machine-learning System. 2013 - AMPLab - Shark: SQL and Rich Analytics at Scale. 2013 - AMPLab - GraphX: A Resilient Distributed Graph System on Spark. 2013 - Google - HyperLogLog in Practice: Algorithmic Engineering of a State of The Art Cardinality Estimation Algorithm. 2013 - Microsoft - Scalable Progressive Analytics on Big Data in the Cloud. 2013 - Metamarkets - Druid: A Real-time Analytical Data Store. 2013 - Google - Online, Asynchronous Schema Change in F1. 2013 - Google - F1: A Distributed SQL Database That Scales. 2013 - Google - MillWheel: Fault-Tolerant Stream Processing at Internet Scale. 2013 - Facebook - Scuba: Diving into Data at Facebook. 2013 - Facebook - Unicorn: A System for Searching the Social Graph. 2013 - Facebook - Scaling Memcache at Facebook. 2011 - 2012 2012 - Twitter - The Unified Logging Infrastructure for Data Analytics at Twitter. 2012 - AMPLab - Blink and It\u2019s Done: Interactive Queries on Very Large Data. 2012 - AMPLab - Fast and Interactive Analytics over Hadoop Data with Spark. 2012 - AMPLab - Shark: Fast Data Analysis Using Coarse-grained Distributed Memory. 2012 - Microsoft - Paxos Replicated State Machines as the Basis of a High-Performance Data Store. 2012 - Microsoft - Paxos Made Parallel. 2012 - AMPLab - BlinkDB: Queries with Bounded Errors and Bounded Response Times on Very Large Data. 2012 - Google - Processing a trillion cells per mouse click. 2012 - Google - Spanner: Google\u2019s Globally-Distributed Database. 2011 - AMPLab - Scarlett: Coping with Skewed Popularity Content in MapReduce Clusters. 2011 - AMPLab - Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center. 2011 - Google - Megastore: Providing Scalable, Highly Available Storage for Interactive Services. 2001 - 2010 2010 - Facebook - Finding a needle in Haystack: Facebook\u2019s photo storage. 2010 - AMPLab - Spark: Cluster Computing with Working Sets. 2010 - Google - Pregel: A System for Large-Scale Graph Processing. 2010 - Google - Large-scale Incremental Processing Using Distributed Transactions and Noti\ufb01cations base of Percolator and Caffeine. 2010 - Google - Dremel: Interactive Analysis of Web-Scale Datasets. 2010 - Yahoo - S4: Distributed Stream Computing Platform. 2009 - HadoopDB: An Architectural Hybrid of MapReduce and DBMS Technologies for Analytical Workloads. 2008 - AMPLab - Chukwa: A large-scale monitoring system. 2007 - Amazon - Dynamo: Amazon\u2019s Highly Available Key-value Store. 2006 - Google - The Chubby lock service for loosely-coupled distributed systems. 2006 - Google - Bigtable: A Distributed Storage System for Structured Data. 2004 - Google - MapReduce: Simplied Data Processing on Large Clusters. 2003 - Google - The Google File System. Videos Spark in Motion - Spark in Motion teaches you how to use Spark for batch and streaming data analytics. Books Streaming Streaming Data - Streaming Data introduces the concepts and requirements of streaming and real-time data systems. Storm Applied - Storm Applied is a practical guide to using Apache Storm for the real-world tasks associated with processing and analyzing real-time data streams. Fundamentals of Stream Processing: Application Design, Systems, and Analytics - This comprehensive, hands-on guide combining the fundamental building blocks and emerging research in stream processing is ideal for application designers, system builders, analytic developers, as well as students and researchers in the field. Stream Data Processing: A Quality of Service Perspective - Presents a new paradigm suitable for stream and complex event processing. Unified Log Processing - Unified Log Processing is a practical guide to implementing a unified log of event streams (Kafka or Kinesis) in your business Kafka Streams in Action - Kafka Streams in Action teaches you everything you need to know to implement stream processing on data flowing into your Kafka platform, allowing you to focus on getting more from your data without sacrificing time or effort. Big Data - Big Data teaches you to build big data systems using an architecture that takes advantage of clustered hardware along with new tools designed specifically to capture and analyze web-scale data. Spark in Action - Spark in Action teaches you the theory and skills you need to effectively handle batch and streaming data using Spark. Fully updated for Spark 2.0. Kafka in Action - Kafka in Action is a fast-paced introduction to every aspect of working with Kafka you need to really reap its benefits. Reactive Data Handling - Reactive Data Handling is a collection of five hand-picked chapters, selected by Manuel Bernhardt, that introduce you to building reactive applications capable of handling real-time processing with large data loads--free eBook! Distributed systems Distributed Systems for fun and profit \u2013 Theory of distributed systems. Include parts about time and ordering, replication and impossibility results. Data Visualization The beauty of data visualization Designing Data Visualizations with Noah Iliinsky Hans Rosling's 200 Countries, 200 Years, 4 Minutes Ice Bucket Challenge Data Visualization Other Awesome Lists Other awesome lists awesome-awesomeness . Even more lists awesome . Another list? list . WTF! awesome-awesome-awesome . Analytics awesome-analytics . Public Datasets awesome-public-datasets .","title":"Awesome Big Data"},{"location":"Awesome/Awesome_BigData/#awesome-big-data","text":"A curated list of awesome big data frameworks, resources and other awesomeness. Inspired by awesome-php , awesome-python , awesome-ruby , hadoopecosystemtable & big-data . Your contributions are always welcome! Awesome Big Data RDBMS Frameworks Distributed Programming Distributed Filesystem Key-Map Data Model Document Data Model Key-value Data Model Graph Data Model NewSQL Databases Columnar Databases Time-Series Databases SQL-like processing Data Ingestion Service Programming Scheduling Machine Learning Benchmarking Security System Deployment Applications Search engine and framework MySQL forks and evolutions PostgreSQL forks and evolutions Memcached forks and evolutions Embedded Databases Business Intelligence Data Visualization Internet of things and sensor data Interesting Readings Interesting Papers Videos Books Other Awesome Lists","title":"Awesome Big Data"},{"location":"Awesome/Awesome_BigData/#rdbms","text":"MySQL The world's most popular open source database. PostgreSQL The world's most advanced open source database. Oracle Database - object-relational database management system. Teradata - high-performance MPP data warehouse platform.","title":"RDBMS"},{"location":"Awesome/Awesome_BigData/#frameworks","text":"IBM Streams - platform for distributed processing and real-time analytics. Integrates with many of the popular technologies in the Big Data ecosystem (Kafka, HDFS, Spark, etc.) Apache Hadoop - framework for distributed processing. Integrates MapReduce (parallel processing), YARN (job scheduling) and HDFS (distributed file system). Tigon - High Throughput Real-time Stream Processing Framework. Pachyderm - Pachyderm is a data storage platform built on Docker and Kubernetes to provide reproducible data processing and analysis.","title":"Frameworks"},{"location":"Awesome/Awesome_BigData/#distributed-programming","text":"AddThis Hydra - distributed data processing and storage system originally developed at AddThis. AMPLab SIMR - run Spark on Hadoop MapReduce v1. Apache APEX - a unified, enterprise platform for big data stream and batch processing. Apache Beam - an unified model and set of language-specific SDKs for defining and executing data processing workflows. Apache Crunch - a simple Java API for tasks like joining and data aggregation that are tedious to implement on plain MapReduce. Apache DataFu - collection of user-defined functions for Hadoop and Pig developed by LinkedIn. Apache Flink - high-performance runtime, and automatic program optimization. Apache Gearpump - real-time big data streaming engine based on Akka. Apache Gora - framework for in-memory data model and persistence. Apache Hama - BSP (Bulk Synchronous Parallel) computing framework. Apache MapReduce - programming model for processing large data sets with a parallel, distributed algorithm on a cluster. Apache Pig - high level language to express data analysis programs for Hadoop. Apache REEF - retainable evaluator execution framework to simplify and unify the lower layers of big data systems. Apache S4 - framework for stream processing, implementation of S4. Apache Spark - framework for in-memory cluster computing. Apache Spark Streaming - framework for stream processing, part of Spark. Apache Storm - framework for stream processing by Twitter also on YARN. Apache Samza - stream processing framework, based on Kafka and YARN. Apache Tez - application framework for executing a complex DAG (directed acyclic graph) of tasks, built on YARN. Apache Twill - abstraction over YARN that reduces the complexity of developing distributed applications. Baidu Bigflow - an interface that allows for writing distributed computing programs providing lots of simple, flexible, powerful APIs to easily handle data of any scale. Cascalog - data processing and querying library. Cheetah - High Performance, Custom Data Warehouse on Top of MapReduce. Concurrent Cascading - framework for data management/analytics on Hadoop. Damballa Parkour - MapReduce library for Clojure. Datasalt Pangool - alternative MapReduce paradigm. DataTorrent StrAM - real-time engine is designed to enable distributed, asynchronous, real time in-memory big-data computations in as unblocked a way as possible, with minimal overhead and impact on performance. Facebook Corona - Hadoop enhancement which removes single point of failure. Facebook Peregrine - Map Reduce framework. Facebook Scuba - distributed in-memory datastore. Google Dataflow - create data pipelines to help them\u00e6ingest, transform and analyze data. Google MapReduce - map reduce framework. Google MillWheel - fault tolerant stream processing framework. IBM Streams - platform for distributed processing and real-time analytics. Provides toolkits for advanced analytics like geospatial, time series, etc. out of the box. JAQL - declarative programming language for working with structured, semi-structured and unstructured data. Kite - is a set of libraries, tools, examples, and documentation focused on making it easier to build systems on top of the Hadoop ecosystem. Metamarkets Druid - framework for real-time analysis of large datasets. Netflix PigPen - map-reduce for Clojure which compiles to Apache Pig. Nokia Disco - MapReduce framework developed by Nokia. Onyx - Distributed computation for the cloud. Pinterest Pinlater - asynchronous job execution system. Pydoop - Python MapReduce and HDFS API for Hadoop. Rackerlabs Blueflood - multi-tenant distributed metric processing system Skale - High performance distributed data processing in NodeJS. Stratosphere - general purpose cluster computing framework. Streamdrill - useful for counting activities of event streams over different time windows and finding the most active one. streamsx.topology - Libraries to enable building IBM Streams application in Java, Python or Scala. Tuktu - Easy-to-use platform for batch and streaming computation, built using Scala, Akka and Play! Twitter Heron - Heron is a realtime, distributed, fault-tolerant stream processing engine from Twitter replacing Storm. Twitter Scalding - Scala library for Map Reduce jobs, built on Cascading. Twitter Summingbird - Streaming MapReduce with Scalding and Storm, by Twitter. Twitter TSAR - TimeSeries AggregatoR by Twitter. Wallaroo - The ultrafast and elastic data processing engine. Big or fast data - no fuss, no Java needed.","title":"Distributed Programming"},{"location":"Awesome/Awesome_BigData/#distributed-filesystem","text":"Ambry - a distributed object store that supports storage of trillion of small immutable objects as well as billions of large objects. Apache HDFS - a way to store large files across multiple machines. Apache Kudu - Hadoop's storage layer to enable fast analytics on fast data. BeeGFS - formerly FhGFS, parallel distributed file system. Ceph Filesystem - software storage platform designed. Disco DDFS - distributed filesystem. Facebook Haystack - object storage system. Google Colossus - distributed filesystem (GFS2). Google GFS - distributed filesystem. Google Megastore - scalable, highly available storage. GridGain - GGFS, Hadoop compliant in-memory file system. Lustre file system - high-performance distributed filesystem. Microsoft Azure Data Lake Store - HDFS-compatible storage in Azure cloud Quantcast File System QFS - open-source distributed file system. Red Hat GlusterFS - scale-out network-attached storage file system. Seaweed-FS - simple and highly scalable distributed file system. Alluxio - reliable file sharing at memory speed across cluster frameworks. Tahoe-LAFS - decentralized cloud storage system. Baidu File System - distributed filesystem.","title":"Distributed Filesystem"},{"location":"Awesome/Awesome_BigData/#distributed-index","text":"Pilosa Open source distributed bitmap index that dramatically accelerates queries across multiple, massive data sets.","title":"Distributed Index"},{"location":"Awesome/Awesome_BigData/#document-data-model","text":"Actian Versant - commercial object-oriented database management systems . Crate Data - is an open source massively scalable data store. It requires zero administration. Facebook Apollo - Facebook\u2019s Paxos-like NoSQL database. jumboDB - document oriented datastore over Hadoop. LinkedIn Espresso - horizontally scalable document-oriented NoSQL data store. MarkLogic - Schema-agnostic Enterprise NoSQL database technology. Microsoft Azure DocumentDB - NoSQL cloud database service with protocol support for MongoDB MongoDB - Document-oriented database system. RavenDB - A transactional, open-source Document Database. RethinkDB - document database that supports queries like table joins and group by.","title":"Document Data Model"},{"location":"Awesome/Awesome_BigData/#key-map-data-model","text":"Note : There is some term confusion in the industry, and two different things are called \"Columnar Databases\". Some, listed here, are distributed, persistent databases built around the \"key-map\" data model: all data has a (possibly composite) key, with which a map of key-value pairs is associated. In some systems, multiple such value maps can be associated with a key, and these maps are referred to as \"column families\" (with value map keys being referred to as \"columns\"). Another group of technologies that can also be called \"columnar databases\" is distinguished by how it stores data, on disk or in memory -- rather than storing data the traditional way, where all column values for a given key are stored next to each other, \"row by row\", these systems store all column values next to each other. So more work is needed to get all columns for a given key, but less work is needed to get all values for a given column. The former group is referred to as \"key map data model\" here. The line between these and the Key-value Data Model stores is fairly blurry. The latter, being more about the storage format than about the data model, is listed under Columnar Databases . You can read more about this distinction on Prof. Daniel Abadi's blog: Distinguishing two major types of Column Stores . Apache Accumulo - distributed key/value store, built on Hadoop. Apache Cassandra - column-oriented distributed datastore, inspired by BigTable. Apache HBase - column-oriented distributed datastore, inspired by BigTable. Baidu Tera - an Internet-scale database, inspired by BigTable. Facebook HydraBase - evolution of HBase made by Facebook. Google BigTable - column-oriented distributed datastore. Google Cloud Datastore - is a fully managed, schemaless database for storing non-relational data over BigTable. Hypertable - column-oriented distributed datastore, inspired by BigTable. InfiniDB - is accessed through a MySQL interface and use massive parallel processing to parallelize queries. Tephra - Transactions for HBase. Twitter Manhattan - real-time, multi-tenant distributed database for Twitter scale. ScyllaDB - column-oriented distributed datastore written in C++, totally compatible with Apache Cassandra.","title":"Key Map Data Model"},{"location":"Awesome/Awesome_BigData/#key-value-data-model","text":"Aerospike - NoSQL flash-optimized, in-memory. Open source and \"Server code in 'C' (not Java or Erlang) precisely tuned to avoid context switching and memory copies.\" Amazon DynamoDB - distributed key/value store, implementation of Dynamo paper. Badger - a fast, simple, efficient, and persistent key-value store written natively in Go. Bolt - an embedded key-value database for Go. BTDB - Key Value Database in .Net with Object DB Layer, RPC, dynamic IL and much more BuntDB - a fast, embeddable, in-memory key/value database for Go with custom indexing and geospatial support. Edis - is a protocol-compatible Server replacement for Redis. ElephantDB - Distributed database specialized in exporting data from Hadoop. EventStore - distributed time series database. GridDB - suitable for sensor data stored in a timeseries. HyperDex - a scalable, next generation key-value and document store with a wide array of features, including consistency, fault tolerance and high performance. Ignite - is an in-memory key-value data store providing full SQL-compliant data access that can optionally be backed by disk storage. LinkedIn Krati - is a simple persistent data store with very low latency and high throughput. Linkedin Voldemort - distributed key/value storage system. Oracle NoSQL Database - distributed key-value database by Oracle Corporation. Redis - in memory key value datastore. Riak - a decentralized datastore. Storehaus - library to work with asynchronous key value stores, by Twitter. SummitDB - an in-memory, NoSQL key/value database, with disk persistance and using the Raft consensus algorithm. Tarantool - an efficient NoSQL database and a Lua application server. TiKV - a distributed key-value database powered by Rust and inspired by Google Spanner and HBase. Tile38 - a geolocation data store, spatial index, and realtime geofence, supporting a variety of object types including latitude/longitude points, bounding boxes, XYZ tiles, Geohashes, and GeoJSON TreodeDB - key-value store that's replicated and sharded and provides atomic multirow writes.","title":"Key-value Data Model"},{"location":"Awesome/Awesome_BigData/#graph-data-model","text":"AgensGraph - a new generation multi-model graph database for the modern complex data environment. Apache Giraph - implementation of Pregel, based on Hadoop. Apache Spark Bagel - implementation of Pregel, part of Spark. ArangoDB - multi model distributed database. DGraph - A scalable, distributed, low latency, high throughput graph database aimed at providing Google production level scale and throughput, with low enough latency to be serving real time user queries, over terabytes of structured data. EliasDB - a lightweight graph based database that does not require any third-party libraries. Facebook TAO - TAO is the distributed data store that is widely used at facebook to store and serve the social graph. GCHQ Gaffer - Gaffer by GCHQ is a framework that makes it easy to store large-scale graphs in which the nodes and edges have statistics. Google Cayley - open-source graph database. Google Pregel - graph processing framework. GraphLab PowerGraph - a core C++ GraphLab API and a collection of high-performance machine learning and data mining toolkits built on top of the GraphLab API. GraphX - resilient Distributed Graph System on Spark. Gremlin - graph traversal Language. Infovore - RDF-centric Map/Reduce framework. Intel GraphBuilder - tools to construct large-scale graphs on top of Hadoop. MapGraph - Massively Parallel Graph processing on GPUs. Neo4j - graph database written entirely in Java. OrientDB - document and graph database. Phoebus - framework for large scale graph processing. Titan - distributed graph database, built over Cassandra. Twitter FlockDB - distributed graph database. NodeXL - A free, open-source template for Microsoft\u00ae Excel\u00ae 2007, 2010, 2013 and 2016 that makes it easy to explore network graphs.","title":"Graph Data Model"},{"location":"Awesome/Awesome_BigData/#columnar-databases","text":"Note please read the note on Key-Map Data Model section. Columnar Storage - an explanation of what columnar storage is and when you might want it. Actian Vector - column-oriented analytic database. C-Store - column oriented DBMS. ClickHouse - an open-source column-oriented database management system that allows generating analytical data reports in real time. EventQL - a distributed, column-oriented database built for large-scale event collection and analytics. MonetDB - column store database. Parquet - columnar storage format for Hadoop. Pivotal Greenplum - purpose-built, dedicated analytic data warehouse that offers a columnar engine as well as a traditional row-based one. Vertica - is designed to manage large, fast-growing volumes of data and provide very fast query performance when used for data warehouses. SQream DB - A GPU powered big data database, designed for analytics and data warehousing, with ANSI-92 compliant SQL, suitable for data sets from 10TB to 1PB. Google BigQuery - Google's cloud offering backed by their pioneering work on Dremel. Amazon Redshift - Amazon's cloud offering, also based on a columnar datastore backend. IndexR - an open-source columnar storage format for fast & realtime analytic with big data. LocustDB - an experimental analytics database aiming to set a new standard for query performance on commodity hardware.","title":"Columnar Databases"},{"location":"Awesome/Awesome_BigData/#newsql-databases","text":"Actian Ingres - commercially supported, open-source SQL relational database management system. Amazon RedShift - data warehouse service, based on PostgreSQL. BayesDB - statistic oriented SQL database. Bedrock - a simple, modular, networked and distributed transaction layer built atop SQLite. CitusDB - scales out PostgreSQL through sharding and replication. Cockroach - Scalable, Geo-Replicated, Transactional Datastore. Comdb2 - a clustered RDBMS built on optimistic concurrency control techniques. Datomic - distributed database designed to enable scalable, flexible and intelligent applications. FoundationDB - distributed database, inspired by F1. Google F1 - distributed SQL database built on Spanner. Google Spanner - globally distributed semi-relational database. H-Store - is an experimental main-memory, parallel database management system that is optimized for on-line transaction processing (OLTP) applications. Haeinsa - linearly scalable multi-row, multi-table transaction library for HBase based on Percolator. HandlerSocket - NoSQL plugin for MySQL/MariaDB. InfiniSQL - infinity scalable RDBMS. MemSQL - in memory SQL database witho optimized columnar storage on flash. NuoDB - SQL/ACID compliant distributed database. Oracle TimesTen in-Memory Database - in-memory, relational database management system with persistence and recoverability. Pivotal GemFire XD - Low-latency, in-memory, distributed SQL data store. Provides SQL interface to in-memory table data, persistable in HDFS. SAP HANA - is an in-memory, column-oriented, relational database management system. SenseiDB - distributed, realtime, semi-structured database. Sky - database used for flexible, high performance analysis of behavioral data. SymmetricDS - open source software for both file and database synchronization. Map-D - GPU in-memory database, big data analysis and visualization platform TiDB - TiDB is a distributed SQL database. Inspired by the design of Google F1. VoltDB - claims to be fastest in-memory database","title":"NewSQL Databases"},{"location":"Awesome/Awesome_BigData/#time-series-databases","text":"Axibase Time Series Database - Integrated time series database on top of HBase with built-in visualization, rule-engine and SQL support. Chronix - a time series storage built to store time series highly compressed and for fast access times. Cube - uses MongoDB to store time series data. Heroic - is a scalable time series database based on Cassandra and Elasticsearch. InfluxDB - distributed time series database. Kairosdb - similar to OpenTSDB but allows for Cassandra. Newts - a time series database based on Apache Cassandra. OpenTSDB - distributed time series database on top of HBase. Prometheus - a time series database and service monitoring system. Beringei - Facebook's in-memory time-series database. TrailDB - an efficient tool for storing and querying series of events. Druid Column oriented distributed data store ideal for powering interactive applications Riak-TS Riak TS is the only enterprise-grade NoSQL time series database optimized specifically for IoT and Time Series data. Akumuli Akumuli is a numeric time-series database. It can be used to capture, store and process time-series data in real-time. The word \"akumuli\" can be translated from esperanto as \"accumulate\". Rhombus A time-series object store for Cassandra that handles all the complexity of building wide row indexes. Dalmatiner DB Fast distributed metrics database Blueflood A distributed system designed to ingest and process time series data Timely Timely is a time series database application that provides secure access to time series data based on Accumulo and Grafana. SiriDB Highly-scalable, robust and fast, open source time series database with cluster functionality. Thanos - Thanos is a set of components to create a highly available metric system with unlimited storage capacity using multiple (existing) Prometheus deployments.","title":"Time-Series Databases"},{"location":"Awesome/Awesome_BigData/#sql-like-processing","text":"Actian SQL for Hadoop - high performance interactive SQL access to all Hadoop data. Apache Drill - framework for interactive analysis, inspired by Dremel. Apache HCatalog - table and storage management layer for Hadoop. Apache Hive - SQL-like data warehouse system for Hadoop. Apache Calcite - framework that allows efficient translation of queries involving heterogeneous and federated data. Apache Phoenix - SQL skin over HBase. Aster Database - SQL-like analytic processing for MapReduce. Cloudera Impala - framework for interactive analysis, Inspired by Dremel. Concurrent Lingual - SQL-like query language for Cascading. Datasalt Splout SQL - full SQL query engine for big datasets. Facebook PrestoDB - distributed SQL query engine. Google BigQuery - framework for interactive analysis, implementation of Dremel. PipelineDB - an open-source relational database that runs SQL queries continuously on streams, incrementally storing results in tables. Pivotal HDB - SQL-like data warehouse system for Hadoop. RainstorDB - database for storing petabyte-scale volumes of structured and semi-structured data. Spark Catalyst - is a Query Optimization Framework for Spark and Shark. SparkSQL - Manipulating Structured Data Using Spark. Splice Machine - a full-featured SQL-on-Hadoop RDBMS with ACID transactions. Stinger - interactive query for Hive. Tajo - distributed data warehouse system on Hadoop. Trafodion - enterprise-class SQL-on-HBase solution targeting big data transactional or operational workloads.","title":"SQL-like processing"},{"location":"Awesome/Awesome_BigData/#data-ingestion","text":"Amazon Kinesis - real-time processing of streaming data at massive scale. Apache Chukwa - data collection system. Apache Flume - service to manage large amount of log data. Apache Kafka - distributed publish-subscribe messaging system. Apache NiFi - Apache NiFi is an integrated data logistics platform for automating the movement of data between disparate systems. Apache Sqoop - tool to transfer data between Hadoop and a structured datastore. Cloudera Morphlines - framework that help ETL to Solr, HBase and HDFS. Embulk - open-source bulk data loader that helps data transfer between various databases, storages, file formats, and cloud services. Facebook Scribe - streamed log data aggregator. Fluentd - tool to collect events and logs. Google Photon - geographically distributed system for joining multiple continuously flowing streams of data in real-time with high scalability and low latency. Heka - open source stream processing software system. HIHO - framework for connecting disparate data sources with Hadoop. Kestrel - distributed message queue system. LinkedIn Databus - stream of change capture events for a database. LinkedIn Kamikaze - utility package for compressing sorted integer arrays. LinkedIn White Elephant - log aggregator and dashboard. Logstash - a tool for managing events and logs. Netflix Suro - log agregattor like Storm and Samza based on Chukwa. Pinterest Secor - is a service implementing Kafka log persistance. Linkedin Gobblin - linkedin's universal data ingestion framework. Skizze - sketch data store to deal with all problems around counting and sketching using probabilistic data-structures. StreamSets Data Collector - continuous big data ingest infrastructure with a simple to use IDE. Yahoo Pulsar - a distributed pub-sub messaging platform with a very flexible messaging model and an intuitive client API. Alooma - data pipeline as a service enabling moving data sources such as MySQL into data warehouses.","title":"Data Ingestion"},{"location":"Awesome/Awesome_BigData/#service-programming","text":"Akka Toolkit - runtime for distributed, and fault tolerant event-driven applications on the JVM. Apache Avro - data serialization system. Apache Curator - Java libaries for Apache ZooKeeper. Apache Karaf - OSGi runtime that runs on top of any OSGi framework. Apache Thrift - framework to build binary protocols. Apache Zookeeper - centralized service for process management. Google Chubby - a lock service for loosely-coupled distributed systems. Hydrosphere Mist - a service for exposing Apache Spark analytics jobs and machine learning models as realtime, batch or reactive web services. Linkedin Norbert - cluster manager. OpenMPI - message passing framework. Serf - decentralized solution for service discovery and orchestration. Spotify Luigi - a Python package for building complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization, handling failures, command line integration, and much more. Spring XD - distributed and extensible system for data ingestion, real time analytics, batch processing, and data export. Twitter Elephant Bird - libraries for working with LZOP-compressed data. Twitter Finagle - asynchronous network stack for the JVM.","title":"Service Programming"},{"location":"Awesome/Awesome_BigData/#scheduling","text":"Apache Airflow - a platform to programmatically author, schedule and monitor workflows. Apache Aurora - is a service scheduler that runs on top of Apache Mesos. Apache Falcon - data management framework. Apache Oozie - workflow job scheduler. Azure Data Factory - cloud-based pipeline orchestration for on-prem, cloud and HDInsight Chronos - distributed and fault-tolerant scheduler. Linkedin Azkaban - batch workflow job scheduler. Schedoscope - Scala DSL for agile scheduling of Hadoop jobs. Sparrow - scheduling platform.","title":"Scheduling"},{"location":"Awesome/Awesome_BigData/#machine-learning","text":"Azure ML Studio - Cloud-based AzureML, R, Python Machine Learning platform brain - Neural networks in JavaScript. Cloudera Oryx - real-time large-scale machine learning. Concurrent Pattern - machine learning library for Cascading. convnetjs - Deep Learning in Javascript. Train Convolutional Neural Networks (or ordinary ones) in your browser. DataVec - A vectorization and data preprocessing library for deep learning in Java and Scala. Part of the Deeplearning4j ecosystem. Deeplearning4j - Fast, open deep learning for the JVM (Java, Scala, Clojure). A neural network configuration layer powered by a C++ library. Uses Spark and Hadoop to train nets on multiple GPUs and CPUs. Decider - Flexible and Extensible Machine Learning in Ruby. ENCOG - machine learning framework that supports a variety of advanced algorithms, as well as support classes to normalize and process data. etcML - text classification with machine learning. Etsy Conjecture - scalable Machine Learning in Scalding. GraphLab Create - A machine learning platform in Python with a broad collection of ML toolkits, data engineering, and deployment tools. H2O - statistical, machine learning and math runtime with Hadoop. R and Python. Keras - An intuitive neural net API inspired by Torch that runs atop Theano and Tensorflow. Mahout - An Apache-backed machine learning library for Hadoop. MLbase - distributed machine learning libraries for the BDAS stack. MLPNeuralNet - Fast multilayer perceptron neural network library for iOS and Mac OS X. MOA - MOA performs big data stream mining in real time, and large scale machine learning. MonkeyLearn - Text mining made easy. Extract and classify data from text. ND4J - A matrix library for the JVM. Numpy for Java. nupic - Numenta Platform for Intelligent Computing: a brain-inspired machine intelligence platform, and biologically accurate neural network based on cortical learning algorithms. PredictionIO - machine learning server buit on Hadoop, Mahout and Cascading. RL4J - Reinforcement learning for Java and Scala. Includes Deep-Q learning and A3C algorithms, and integrates with Open AI's Gym. Runs in the Deeplearning4j ecosystem. SAMOA - distributed streaming machine learning framework. scikit-learn - scikit-learn: machine learning in Python. Spark MLlib - a Spark implementation of some common machine learning (ML) functionality. Sibyl - System for Large Scale Machine Learning at Google. TensorFlow - Library from Google for machine learning using data flow graphs. Theano - A Python-focused machine learning library supported by the University of Montreal. Torch - A deep learning library with a Lua API, supported by NYU and Facebook. Velox - System for serving machine learning predictions. Vowpal Wabbit - learning system sponsored by Microsoft and Yahoo!. WEKA - suite of machine learning software. BidMach - CPU and GPU-accelerated Machine Learning Library.","title":"Machine Learning"},{"location":"Awesome/Awesome_BigData/#benchmarking","text":"Apache Hadoop Benchmarking - micro-benchmarks for testing Hadoop performances. Berkeley SWIM Benchmark - real-world big data workload benchmark. Intel HiBench - a Hadoop benchmark suite. PUMA Benchmarking - benchmark suite for MapReduce applications. Yahoo Gridmix3 - Hadoop cluster benchmarking from Yahoo engineer team. Deeplearning4j Benchmarks","title":"Benchmarking"},{"location":"Awesome/Awesome_BigData/#security","text":"Apache Ranger - Central security admin & fine-grained authorization for Hadoop Apache Eagle - real time monitoring solution Apache Knox Gateway - single point of secure access for Hadoop clusters. Apache Sentry - security module for data stored in Hadoop. BDA - The vulnerability detector for Hadoop and Spark","title":"Security"},{"location":"Awesome/Awesome_BigData/#system-deployment","text":"Apache Ambari - operational framework for Hadoop mangement. Apache Bigtop - system deployment framework for the Hadoop ecosystem. Apache Helix - cluster management framework. Apache Mesos - cluster manager. Apache Slider - is a YARN application to deploy existing distributed applications on YARN. Apache Whirr - set of libraries for running cloud services. Apache YARN - Cluster manager. Brooklyn - library that simplifies application deployment and management. Buildoop - Similar to Apache BigTop based on Groovy language. Cloudera HUE - web application for interacting with Hadoop. Facebook Prism - multi datacenters replication system. Google Borg - job scheduling and monitoring system. Google Omega - job scheduling and monitoring system. Hortonworks HOYA - application that can deploy HBase cluster on YARN. Kubernetes - a system for automating deployment, scaling, and management of containerized applications. Marathon - Mesos framework for long-running services.","title":"System Deployment"},{"location":"Awesome/Awesome_BigData/#applications","text":"411 - an web application for alert management resulting from scheduled searches into Elasticsearch. Adobe spindle - Next-generation web analytics processing with Scala, Spark, and Parquet. Apache Kiji - framework to collect and analyze data in real-time, based on HBase. Apache Metron - a platform that integrates a variety of open source big data technologies in order to offer a centralized tool for security monitoring and analysis. Apache Nutch - open source web crawler. Apache OODT - capturing, processing and sharing of data for NASA's scientific archives. Apache Tika - content analysis toolkit. Argus - Time series monitoring and alerting platform. AthenaX - a streaming analytics platform that enables users to run production-quality, large scale streaming analytics using Structured Query Language (SQL). Atlas - a backend for managing dimensional time series data. Countly - open source mobile and web analytics platform, based on Node.js & MongoDB. Domino - Run, scale, share, and deploy models \u2014 without any infrastructure. Eclipse BIRT - Eclipse-based reporting system. ElastAert - ElastAlert is a simple framework for alerting on anomalies, spikes, or other patterns of interest from data in ElasticSearch. Eventhub - open source event analytics platform. Hermes - asynchronous message broker built on top of Kafka. HIPI Library - API for performing image processing tasks on Hadoop's MapReduce. Hunk - Splunk analytics for Hadoop. Imhotep - Large scale analytics platform by indeed. MADlib - data-processing library of an RDBMS to analyze data. Kapacitor - an open source framework for processing, monitoring, and alerting on time series data. Kylin - open source Distributed Analytics Engine from eBay. PivotalR - R on Pivotal HD / HAWQ and PostgreSQL. Rakam - open-source real-time custom analytics platform powered by Postgresql, Kinesis and PrestoDB. Qubole - auto-scaling Hadoop cluster, built-in data connectors. Sense - Cloud Platform for Data Science and Big Data Analytics. SnappyData - a distributed in-memory data store for real-time operational analytics, delivering stream analytics, OLTP (online transaction processing) and OLAP (online analytical processing) built on Spark in a single integrated cluster. Snowplow - enterprise-strength web and event analytics, powered by Hadoop, Kinesis, Redshift and Postgres. SparkR - R frontend for Spark. Splunk - analyzer for machine-generated data. Sumo Logic - cloud based analyzer for machine-generated data. Talend - unified open source environment for YARN, Hadoop, HBASE, Hive, HCatalog & Pig. Warp - query by example tool for big data (OS X app)","title":"Applications"},{"location":"Awesome/Awesome_BigData/#search-engine-and-framework","text":"Apache Lucene - Search engine library. Apache Solr - Search platform for Apache Lucene. Elassandra - is a fork of Elasticsearch modified to run on top of Apache Cassandra in a scalable and resilient peer-to-peer architecture. ElasticSearch - Search and analytics engine based on Apache Lucene. Enigma.io \u2013 Freemium robust web application for exploring, filtering, analyzing, searching and exporting massive datasets scraped from across the Web. Facebook Unicorn - social graph search platform. Google Caffeine - continuous indexing system. Google Percolator - continuous indexing system. TeraGoogle - large search index. HBase Coprocessor - implementation of Percolator, part of HBase. Lily HBase Indexer - quickly and easily search for any content stored in HBase. LinkedIn Bobo - is a Faceted Search implementation written purely in Java, an extension to Apache Lucene. LinkedIn Cleo - is a flexible software library for enabling rapid development of partial, out-of-order and real-time typeahead search. LinkedIn Galene - search architecture at LinkedIn. LinkedIn Zoie - is a realtime search/indexing system written in Java. MG4J - MG4J (Managing Gigabytes for Java) is a full-text search engine for large document collections written in Java. It is highly customisable, high-performance and provides state-of-the-art features and new research algorithms. Sphinx Search Server - fulltext search engine. Vespa - is an engine for low-latency computation over large data sets. It stores and indexes your data such that queries, selection and processing over the data can be performed at serving time.","title":"Search engine and framework"},{"location":"Awesome/Awesome_BigData/#mysql-forks-and-evolutions","text":"Amazon RDS - MySQL databases in Amazon's cloud. Drizzle - evolution of MySQL 6.0. Google Cloud SQL - MySQL databases in Google's cloud. MariaDB - enhanced, drop-in replacement for MySQL. MySQL Cluster - MySQL implementation using NDB Cluster storage engine. Percona Server - enhanced, drop-in replacement for MySQL. ProxySQL - High Performance Proxy for MySQL. TokuDB - TokuDB is a storage engine for MySQL and MariaDB. WebScaleSQL - is a collaboration among engineers from several companies that face similar challenges in running MySQL at scale.","title":"MySQL forks and evolutions"},{"location":"Awesome/Awesome_BigData/#postgresql-forks-and-evolutions","text":"HadoopDB - hybrid of MapReduce and DBMS. IBM Netezza - high-performance data warehouse appliances. Postgres-XL - Scalable Open Source PostgreSQL-based Database Cluster. RecDB - Open Source Recommendation Engine Built Entirely Inside PostgreSQL. Stado - open source MPP database system solely targeted at data warehousing and data mart applications. Yahoo Everest - multi-peta-byte database / MPP derived by PostgreSQL. TimescaleDB - An open-source time-series database optimized for fast ingest and complex queries PipelineDB - The Streaming SQL Database. An open-source relational database that runs SQL queries continuously on streams, incrementally storing results in tables","title":"PostgreSQL forks and evolutions"},{"location":"Awesome/Awesome_BigData/#memcached-forks-and-evolutions","text":"Facebook McDipper - key/value cache for flash storage. Facebook Memcached - fork of Memcache. Twemproxy - A fast, light-weight proxy for memcached and redis. Twitter Fatcache - key/value cache for flash storage. Twitter Twemcache - fork of Memcache.","title":"Memcached forks and evolutions"},{"location":"Awesome/Awesome_BigData/#embedded-databases","text":"Actian PSQL - ACID-compliant DBMS developed by Pervasive Software, optimized for embedding in applications. BerkeleyDB - a software library that provides a high-performance embedded database for key/value data. HanoiDB - Erlang LSM BTree Storage. LevelDB - a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. LMDB - ultra-fast, ultra-compact key-value embedded data store developed by Symas. RocksDB - embeddable persistent key-value store for fast storage based on LevelDB.","title":"Embedded Databases"},{"location":"Awesome/Awesome_BigData/#business-intelligence","text":"BIME Analytics - business intelligence platform in the cloud. Chartio - lean business intelligence platform to visualize and explore your data. datapine - self-service business intelligence tool in the cloud. GoodData - platform for data products and embedded analytics. Jaspersoft - powerful business intelligence suite. Jedox Palo - customisable Business Intelligence platform. Jethrodata - Interactive Big Data Analytics. Microsoft - business intelligence software and platform. Microstrategy - software platforms for business intelligence, mobile intelligence, and network applications. Pentaho - business intelligence platform. Qlik - business intelligence and analytics platform. Redash - Open source business intelligence platform, supporting multiple data sources and planned queries. Saiku - open source analytics platform. SpagoBI - open source business intelligence platform. SparklineData SNAP - modern B.I platform powered by Apache Spark. Tableau - business intelligence platform. Zoomdata - Big Data Analytics. Metabase - The simplest, fastest way to get business intelligence and analytics to everyone in your company","title":"Business Intelligence"},{"location":"Awesome/Awesome_BigData/#data-visualization","text":"Airpal - Web UI for PrestoDB. AnyChart - fast, simple and flexible JavaScript (HTML5) charting library featuring pure JS API. Arbor - graph visualization library using web workers and jQuery. Banana - visualize logs and time-stamped data stored in Solr. Port of Kibana. Bloomery - Web UI for Impala. Bokeh - A powerful Python interactive visualization library that targets modern web browsers for presentation, with the goal of providing elegant, concise construction of novel graphics in the style of D3.js, but also delivering this capability with high-performance interactivity over very large or streaming datasets. C3 - D3-based reusable chart library CartoDB - open-source or freemium hosting for geospatial databases with powerful front-end editing capabilities and a robust API. chartd - responsive, retina-compatible charts with just an img tag. Chart.js - open source HTML5 Charts visualizations. Chartist.js - another open source HTML5 Charts visualization. Crossfilter - JavaScript library for exploring large multivariate datasets in the browser. Works well with dc.js and d3.js. Cubism - JavaScript library for time series visualization. Cytoscape - JavaScript library for visualizing complex networks. DC.js - Dimensional charting built to work natively with crossfilter rendered using d3.js. Excellent for connecting charts/additional metadata to hover events in D3. D3 - javaScript library for manipulating documents. D3.compose - Compose complex, data-driven visualizations from reusable charts and components. D3Plus - A fairly robust set of reusable charts and styles for d3.js. Echarts - Baidus enterprise charts. Envisionjs - dynamic HTML5 visualization. FnordMetric - write SQL queries that return SVG charts rather than tables Freeboard - pen source real-time dashboard builder for IOT and other web mashups. Gephi - An award-winning open-source platform for visualizing and manipulating large graphs and network connections. It's like Photoshop, but for graphs. Available for Windows and Mac OS X. Google Charts - simple charting API. Grafana - graphite dashboard frontend, editor and graph composer. Graphite - scalable Realtime Graphing. Highcharts - simple and flexible charting API. IPython - provides a rich architecture for interactive computing. Kibana - visualize logs and time-stamped data Lumify - open source big data analysis and visualization platform Matplotlib - plotting with Python. Metricsgraphic.js - a library built on top of D3 that is optimized for time-series data NVD3 - chart components for d3.js. Peity - Progressive SVG bar, line and pie charts. Plot.ly - Easy-to-use web service that allows for rapid creation of complex charts, from heatmaps to histograms. Upload data to create and style charts with Plotly's online spreadsheet. Fork others' plots. Plotly.js The open source javascript graphing library that powers plotly. Recline - simple but powerful library for building data applications in pure Javascript and HTML. Redash - open-source platform to query and visualize data. ReCharts - A composable charting library built on React components Shiny - a web application framework for R. Sigma.js - JavaScript library dedicated to graph drawing. Superset - a data exploration platform designed to be visual, intuitive and interactive, making it easy to slice, dice and visualize data and perform analytics at the speed of thought. Vega - a visualization grammar. Zeppelin - a notebook-style collaborative data analysis. Zing Charts - JavaScript charting library for big data.","title":"Data Visualization"},{"location":"Awesome/Awesome_BigData/#internet-of-things-and-sensor-data","text":"Apache Edgent (Incubating) - a programming model and micro-kernel style runtime that can be embedded in gateways and small footprint edge devices enabling local, real-time, analytics on the edge devices. Azure IoT Hub - Cloud-based bi-directional monitoring and messaging hub TempoIQ - Cloud-based sensor analytics. 2lemetry - Platform for Internet of things. Pubnub - Data stream network ThingWorx - Rapid development and connection of intelligent systems IFTTT - If this then that Evrything - Making products smart NetLytics - Analytics platform to process network data on Spark.","title":"Internet of things and sensor data"},{"location":"Awesome/Awesome_BigData/#interesting-readings","text":"Big Data Benchmark - Benchmark of Redshift, Hive, Shark, Impala and Stiger/Tez. NoSQL Comparison - Cassandra vs MongoDB vs CouchDB vs Redis vs Riak vs HBase vs Couchbase vs Neo4j vs Hypertable vs ElasticSearch vs Accumulo vs VoltDB vs Scalaris comparison. Monitoring Kafka performance - Guide to monitoring Apache Kafka, including native methods for metrics collection. Monitoring Hadoop performance - Guide to monitoring Hadoop, with an overview of Hadoop architecture, and native methods for metrics collection.","title":"Interesting Readings"},{"location":"Awesome/Awesome_BigData/#interesting-papers","text":"","title":"Interesting Papers"},{"location":"Awesome/Awesome_BigData/#2015-2016","text":"2015 - Facebook - One Trillion Edges: Graph Processing at Facebook-Scale.","title":"2015 - 2016"},{"location":"Awesome/Awesome_BigData/#2013-2014","text":"2014 - Stanford - Mining of Massive Datasets. 2013 - AMPLab - Presto: Distributed Machine Learning and Graph Processing with Sparse Matrices. 2013 - AMPLab - MLbase: A Distributed Machine-learning System. 2013 - AMPLab - Shark: SQL and Rich Analytics at Scale. 2013 - AMPLab - GraphX: A Resilient Distributed Graph System on Spark. 2013 - Google - HyperLogLog in Practice: Algorithmic Engineering of a State of The Art Cardinality Estimation Algorithm. 2013 - Microsoft - Scalable Progressive Analytics on Big Data in the Cloud. 2013 - Metamarkets - Druid: A Real-time Analytical Data Store. 2013 - Google - Online, Asynchronous Schema Change in F1. 2013 - Google - F1: A Distributed SQL Database That Scales. 2013 - Google - MillWheel: Fault-Tolerant Stream Processing at Internet Scale. 2013 - Facebook - Scuba: Diving into Data at Facebook. 2013 - Facebook - Unicorn: A System for Searching the Social Graph. 2013 - Facebook - Scaling Memcache at Facebook.","title":"2013 - 2014"},{"location":"Awesome/Awesome_BigData/#2011-2012","text":"2012 - Twitter - The Unified Logging Infrastructure for Data Analytics at Twitter. 2012 - AMPLab - Blink and It\u2019s Done: Interactive Queries on Very Large Data. 2012 - AMPLab - Fast and Interactive Analytics over Hadoop Data with Spark. 2012 - AMPLab - Shark: Fast Data Analysis Using Coarse-grained Distributed Memory. 2012 - Microsoft - Paxos Replicated State Machines as the Basis of a High-Performance Data Store. 2012 - Microsoft - Paxos Made Parallel. 2012 - AMPLab - BlinkDB: Queries with Bounded Errors and Bounded Response Times on Very Large Data. 2012 - Google - Processing a trillion cells per mouse click. 2012 - Google - Spanner: Google\u2019s Globally-Distributed Database. 2011 - AMPLab - Scarlett: Coping with Skewed Popularity Content in MapReduce Clusters. 2011 - AMPLab - Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center. 2011 - Google - Megastore: Providing Scalable, Highly Available Storage for Interactive Services.","title":"2011 - 2012"},{"location":"Awesome/Awesome_BigData/#2001-2010","text":"2010 - Facebook - Finding a needle in Haystack: Facebook\u2019s photo storage. 2010 - AMPLab - Spark: Cluster Computing with Working Sets. 2010 - Google - Pregel: A System for Large-Scale Graph Processing. 2010 - Google - Large-scale Incremental Processing Using Distributed Transactions and Noti\ufb01cations base of Percolator and Caffeine. 2010 - Google - Dremel: Interactive Analysis of Web-Scale Datasets. 2010 - Yahoo - S4: Distributed Stream Computing Platform. 2009 - HadoopDB: An Architectural Hybrid of MapReduce and DBMS Technologies for Analytical Workloads. 2008 - AMPLab - Chukwa: A large-scale monitoring system. 2007 - Amazon - Dynamo: Amazon\u2019s Highly Available Key-value Store. 2006 - Google - The Chubby lock service for loosely-coupled distributed systems. 2006 - Google - Bigtable: A Distributed Storage System for Structured Data. 2004 - Google - MapReduce: Simplied Data Processing on Large Clusters. 2003 - Google - The Google File System.","title":"2001 - 2010"},{"location":"Awesome/Awesome_BigData/#videos","text":"Spark in Motion - Spark in Motion teaches you how to use Spark for batch and streaming data analytics.","title":"Videos"},{"location":"Awesome/Awesome_BigData/#books","text":"","title":"Books"},{"location":"Awesome/Awesome_BigData/#streaming","text":"Streaming Data - Streaming Data introduces the concepts and requirements of streaming and real-time data systems. Storm Applied - Storm Applied is a practical guide to using Apache Storm for the real-world tasks associated with processing and analyzing real-time data streams. Fundamentals of Stream Processing: Application Design, Systems, and Analytics - This comprehensive, hands-on guide combining the fundamental building blocks and emerging research in stream processing is ideal for application designers, system builders, analytic developers, as well as students and researchers in the field. Stream Data Processing: A Quality of Service Perspective - Presents a new paradigm suitable for stream and complex event processing. Unified Log Processing - Unified Log Processing is a practical guide to implementing a unified log of event streams (Kafka or Kinesis) in your business Kafka Streams in Action - Kafka Streams in Action teaches you everything you need to know to implement stream processing on data flowing into your Kafka platform, allowing you to focus on getting more from your data without sacrificing time or effort. Big Data - Big Data teaches you to build big data systems using an architecture that takes advantage of clustered hardware along with new tools designed specifically to capture and analyze web-scale data. Spark in Action - Spark in Action teaches you the theory and skills you need to effectively handle batch and streaming data using Spark. Fully updated for Spark 2.0. Kafka in Action - Kafka in Action is a fast-paced introduction to every aspect of working with Kafka you need to really reap its benefits. Reactive Data Handling - Reactive Data Handling is a collection of five hand-picked chapters, selected by Manuel Bernhardt, that introduce you to building reactive applications capable of handling real-time processing with large data loads--free eBook!","title":"Streaming"},{"location":"Awesome/Awesome_BigData/#distributed-systems","text":"Distributed Systems for fun and profit \u2013 Theory of distributed systems. Include parts about time and ordering, replication and impossibility results.","title":"Distributed systems"},{"location":"Awesome/Awesome_BigData/#data-visualization_1","text":"The beauty of data visualization Designing Data Visualizations with Noah Iliinsky Hans Rosling's 200 Countries, 200 Years, 4 Minutes Ice Bucket Challenge Data Visualization","title":"Data Visualization"},{"location":"Awesome/Awesome_BigData/#other-awesome-lists","text":"Other awesome lists awesome-awesomeness . Even more lists awesome . Another list? list . WTF! awesome-awesome-awesome . Analytics awesome-analytics . Public Datasets awesome-public-datasets .","title":"Other Awesome Lists"},{"location":"Awesome/Awesome_OpenGL/","text":"Awesome OpenGL A curated list of awesome OpenGL libraries, debuggers and resources. Contents Articles Books Debug GLSL Editors Libraries Profile Loaders References Talks Videos Websites Articles OpenGL articles (non-tutorials) (2014) Ray tracing with OpenGL Compute Shaders by Kai Burjack - Detailed tutorial series about ray tracing using OpenGL (LWJGL). (2014) Things that drive me nuts about OpenGL by Rich Geldreich - Constructive (or not) criticism of GL API. (2011) A trip through the graphics pipeline by Fabian Giesen - Compreheensive and rich series about the D3D/OpenGL graphics pipeline. (2010) What is OpenGL? by Joe Groff - Brief introduction to the building blocks of OpenGL. Books Popular books about OpenGL A Trip Down the Graphics Pipeline by Jim Blinn - Popular book that contains wealth information about the graphics pipeline, and of the best sources to learn the core concepts of Computer Graphics. Computer Graphics by John F. Hughes, et al. - Computer Graphics is indeed a must for anyone being involved in the design and implementation of Computer Graphics algorithms. However, this is not a OpenGL focused book, but contains valuable demonstrations of the technology. Interactive Computer Graphics by Edward Angel and Dave Shreiner - It provides several examples using OpenGL and it covers several aspects at once, but if you are trying to learn OpenGL on your own you might not find this helpful. OpenGL ES 3.0 Programming Guide by Dan Ginsburg, et al. - It presents all the necessary information to use the OpenGL ES 3.0 API in a clear manner. OpenGL Insights by Patrick Cozzi, Christophe Riccio - Rich and comprehensive resource to learn techniques and tips, covering several advanced topics of OpenGL. OpenGL Programming Guide by Dave Shreiner, et al. - It does a good job covering the basics and providing clear reference of the API. OpenGL Shading Language by Randi J. Rost, et al. - Very clear and well written book about Shading Language. Also, it provides several explanations of writing shaders. OpenGL SuperBible by Richard S. Wright, et al. - It covers the basic concepts of computer graphics and provides clear examples using OpenGL. Definitely, it is a must for beginners. Real-Time Rendering by Tomas Akenine-Moller, Eric Haines and Naty Hoffman - It does a good job at explaining concepts for game engine, basis for game client programming as well as the necessary knowledge for understanding DirectX and OpenGL. Debug Debugging and profiling libraries apitrace - Tools for tracing OpenGL, Direct3D, and other graphics APIs. CodeXL - AMD's tool suite that includes debugger, profiler and frame/shader analysis. GL-SL Debugger - Tool for debugging OpenGL programs. GLIntercept - OpenGL function call interceptor for Windows. Intel-GPA - Intel's OpenGL Graphics Performance Analyzer. NVIDIA\u00ae Nsight\u2122 - Development platform for graphics applications. RenderDoc - RenderDoc is a stand-alone graphics debugging tool. vogl - OpenGL capture and playback debugger developed by Valve. GLSL Editors Online GLSL Editors GLSL Sandbox - Online live editor for fragment shaders. GLSLbin - Fragment shader sandbox supporting glslify . SHDR Editor - Live GLSL shader editor, viewer and validator. Shader Toy - Most popular live editor for fragment shaders. ShaderFrog - WebGL Shader Editor and Composer Libraries Useful libraries for OpenGL applications assimp - Portable library to import 3D models in a uniform manner. Bullet - It provides state of the art collision detection, soft body and rigid body dynamics. freeGLUT - Mature library that allows to create/manage windows containing OpenGL contexts. GLFW - Modern library for creating/interact windows with OpenGL contexts. GLFM - Supplies an OpenGL ES context and input events for mobile devices and the web. glm - Mathematics library for graphics software based on the GLSL specifications. Magnum - It is a 2D/3D graphics engine for modern OpenGL. MathFu - C++ math library developed primarily for games focused on simplicity and efficiency. Newton - It is a cross-platform life-like physics. OGLplus - Collection of libraries which implement an object-oriented facade over OpenGL. SDL - Designed to provide low level access to multimedia and graphics hardware. SFML - Simple interface to ease the development of games and multimedia applications. SOIL - Tiny C library used primarily for uploading textures into OpenGL. (see SOIL2 ) Pangolin - Lightweight portable rapid development library for managing OpenGL display / interaction and abstracting video input. Profile Loaders Profile loaders for OpenGL gl3w - Simple OpenGL core profile loader. glad - Multi profile loader-generator based on the official specs. glbindify - Commmand line tool to generate C bindings for OpenGL, wgl, and glX. glbinding - Profile loader leveraging C++11 features to provide type safety. GLEW - Mature cross-platform library to load OpenGL extensions. glLoadGen - Multi profile loader-generator written in Lua. References OpenGL references docs.GL - It is an alternative documentation for OpenGL. OpenGL API Tables - Quick reference of API's for several OpenGL and GLSL versions. OpenGL Cheat Sheet - Quick reference card of OpenGL 4.3 commands and syntax. OpenGL Docs - Official documentation website. OpenGL Wiki - Official OpenGL wiki. Talks OpenGL related talks Approaching Zero Driver Overhead in OpenGL - Slides - AMA Reddit by Cass Everitt, Tim Foley, John McDonald, Graham Sellers [1:15:54] How Modern OpenGL Can Radically Reduce Driver Overhead by Cass Everitt, John McDonald [51:13] * Moving Your Games to OpenGL by Rich Geldreich, Dan Ginsburg, Peter Lohrmann, Jason Mitchell [54:45] Videos OpenGL video tutorials Jamie King - Compreheensive tutorials about modern OpenGL and Qt. MakingGamesWithBen - Video tutorials (step-by-step) about OpenGL and game development. SIGGRAPH - Popular conference about computer graphics. TheChernoProject - Introduction to OpenGL in C++ thebennybox - Videos tutorials about OpenGL and game development. ThinMatrix - Video tutorials about OpenGL and game development using Java. sentdex - Videos tutorials about OpenGL (immediate mode) using Python. Sonar Systems - Learn about the new and modern OpenGL 3.0+. Websites OpenGL tutorial websites Learn OpenGL by Joey de Vries Learning Modern 3D Graphics Programming by Jason L. McKesson Light House 3D by Light House 3D Modern OpenGL by Tom Dalling OpenGL Examples by Norbert Nopper OpenGL Step by Step by Etay Meiri OpenGL Tutorial by Alexander Overvoorde OpenGL Tutorial by Anton Gerdelan OpenGL Tutorial by Bonder Wu OpenGL Tutorial by Song Ho Ahn Related lists Similar awesome lists awesome - A curated list of awesome lists. awesome-computer-vision - A curated list of awesome computer vision resources. awesome-webgl - A curated list of awesome WebGL libraries, resources and much more. awesome-vulkan - A curated list of awesome Vulkan projects and ecosystem. gamedev - A awesome list about game development. graphics-resources - A list of graphic programming resources. License This work is licensed under a Creative Commons Attribution 4.0 International License . Contributing Please see CONTRIBUTING for details.","title":"Awesome OpenGL"},{"location":"Awesome/Awesome_OpenGL/#awesome-opengl","text":"A curated list of awesome OpenGL libraries, debuggers and resources.","title":"Awesome OpenGL"},{"location":"Awesome/Awesome_OpenGL/#contents","text":"Articles Books Debug GLSL Editors Libraries Profile Loaders References Talks Videos Websites","title":"Contents"},{"location":"Awesome/Awesome_OpenGL/#articles","text":"OpenGL articles (non-tutorials) (2014) Ray tracing with OpenGL Compute Shaders by Kai Burjack - Detailed tutorial series about ray tracing using OpenGL (LWJGL). (2014) Things that drive me nuts about OpenGL by Rich Geldreich - Constructive (or not) criticism of GL API. (2011) A trip through the graphics pipeline by Fabian Giesen - Compreheensive and rich series about the D3D/OpenGL graphics pipeline. (2010) What is OpenGL? by Joe Groff - Brief introduction to the building blocks of OpenGL.","title":"Articles"},{"location":"Awesome/Awesome_OpenGL/#books","text":"Popular books about OpenGL A Trip Down the Graphics Pipeline by Jim Blinn - Popular book that contains wealth information about the graphics pipeline, and of the best sources to learn the core concepts of Computer Graphics. Computer Graphics by John F. Hughes, et al. - Computer Graphics is indeed a must for anyone being involved in the design and implementation of Computer Graphics algorithms. However, this is not a OpenGL focused book, but contains valuable demonstrations of the technology. Interactive Computer Graphics by Edward Angel and Dave Shreiner - It provides several examples using OpenGL and it covers several aspects at once, but if you are trying to learn OpenGL on your own you might not find this helpful. OpenGL ES 3.0 Programming Guide by Dan Ginsburg, et al. - It presents all the necessary information to use the OpenGL ES 3.0 API in a clear manner. OpenGL Insights by Patrick Cozzi, Christophe Riccio - Rich and comprehensive resource to learn techniques and tips, covering several advanced topics of OpenGL. OpenGL Programming Guide by Dave Shreiner, et al. - It does a good job covering the basics and providing clear reference of the API. OpenGL Shading Language by Randi J. Rost, et al. - Very clear and well written book about Shading Language. Also, it provides several explanations of writing shaders. OpenGL SuperBible by Richard S. Wright, et al. - It covers the basic concepts of computer graphics and provides clear examples using OpenGL. Definitely, it is a must for beginners. Real-Time Rendering by Tomas Akenine-Moller, Eric Haines and Naty Hoffman - It does a good job at explaining concepts for game engine, basis for game client programming as well as the necessary knowledge for understanding DirectX and OpenGL.","title":"Books"},{"location":"Awesome/Awesome_OpenGL/#debug","text":"Debugging and profiling libraries apitrace - Tools for tracing OpenGL, Direct3D, and other graphics APIs. CodeXL - AMD's tool suite that includes debugger, profiler and frame/shader analysis. GL-SL Debugger - Tool for debugging OpenGL programs. GLIntercept - OpenGL function call interceptor for Windows. Intel-GPA - Intel's OpenGL Graphics Performance Analyzer. NVIDIA\u00ae Nsight\u2122 - Development platform for graphics applications. RenderDoc - RenderDoc is a stand-alone graphics debugging tool. vogl - OpenGL capture and playback debugger developed by Valve.","title":"Debug"},{"location":"Awesome/Awesome_OpenGL/#glsl-editors","text":"Online GLSL Editors GLSL Sandbox - Online live editor for fragment shaders. GLSLbin - Fragment shader sandbox supporting glslify . SHDR Editor - Live GLSL shader editor, viewer and validator. Shader Toy - Most popular live editor for fragment shaders. ShaderFrog - WebGL Shader Editor and Composer","title":"GLSL Editors"},{"location":"Awesome/Awesome_OpenGL/#libraries","text":"Useful libraries for OpenGL applications assimp - Portable library to import 3D models in a uniform manner. Bullet - It provides state of the art collision detection, soft body and rigid body dynamics. freeGLUT - Mature library that allows to create/manage windows containing OpenGL contexts. GLFW - Modern library for creating/interact windows with OpenGL contexts. GLFM - Supplies an OpenGL ES context and input events for mobile devices and the web. glm - Mathematics library for graphics software based on the GLSL specifications. Magnum - It is a 2D/3D graphics engine for modern OpenGL. MathFu - C++ math library developed primarily for games focused on simplicity and efficiency. Newton - It is a cross-platform life-like physics. OGLplus - Collection of libraries which implement an object-oriented facade over OpenGL. SDL - Designed to provide low level access to multimedia and graphics hardware. SFML - Simple interface to ease the development of games and multimedia applications. SOIL - Tiny C library used primarily for uploading textures into OpenGL. (see SOIL2 ) Pangolin - Lightweight portable rapid development library for managing OpenGL display / interaction and abstracting video input.","title":"Libraries"},{"location":"Awesome/Awesome_OpenGL/#profile-loaders","text":"Profile loaders for OpenGL gl3w - Simple OpenGL core profile loader. glad - Multi profile loader-generator based on the official specs. glbindify - Commmand line tool to generate C bindings for OpenGL, wgl, and glX. glbinding - Profile loader leveraging C++11 features to provide type safety. GLEW - Mature cross-platform library to load OpenGL extensions. glLoadGen - Multi profile loader-generator written in Lua.","title":"Profile Loaders"},{"location":"Awesome/Awesome_OpenGL/#references","text":"OpenGL references docs.GL - It is an alternative documentation for OpenGL. OpenGL API Tables - Quick reference of API's for several OpenGL and GLSL versions. OpenGL Cheat Sheet - Quick reference card of OpenGL 4.3 commands and syntax. OpenGL Docs - Official documentation website. OpenGL Wiki - Official OpenGL wiki.","title":"References"},{"location":"Awesome/Awesome_OpenGL/#talks","text":"OpenGL related talks Approaching Zero Driver Overhead in OpenGL - Slides - AMA Reddit by Cass Everitt, Tim Foley, John McDonald, Graham Sellers [1:15:54] How Modern OpenGL Can Radically Reduce Driver Overhead by Cass Everitt, John McDonald [51:13] * Moving Your Games to OpenGL by Rich Geldreich, Dan Ginsburg, Peter Lohrmann, Jason Mitchell [54:45]","title":"Talks"},{"location":"Awesome/Awesome_OpenGL/#videos","text":"OpenGL video tutorials Jamie King - Compreheensive tutorials about modern OpenGL and Qt. MakingGamesWithBen - Video tutorials (step-by-step) about OpenGL and game development. SIGGRAPH - Popular conference about computer graphics. TheChernoProject - Introduction to OpenGL in C++ thebennybox - Videos tutorials about OpenGL and game development. ThinMatrix - Video tutorials about OpenGL and game development using Java. sentdex - Videos tutorials about OpenGL (immediate mode) using Python. Sonar Systems - Learn about the new and modern OpenGL 3.0+.","title":"Videos"},{"location":"Awesome/Awesome_OpenGL/#websites","text":"OpenGL tutorial websites Learn OpenGL by Joey de Vries Learning Modern 3D Graphics Programming by Jason L. McKesson Light House 3D by Light House 3D Modern OpenGL by Tom Dalling OpenGL Examples by Norbert Nopper OpenGL Step by Step by Etay Meiri OpenGL Tutorial by Alexander Overvoorde OpenGL Tutorial by Anton Gerdelan OpenGL Tutorial by Bonder Wu OpenGL Tutorial by Song Ho Ahn","title":"Websites"},{"location":"Awesome/Awesome_OpenGL/#related-lists","text":"Similar awesome lists awesome - A curated list of awesome lists. awesome-computer-vision - A curated list of awesome computer vision resources. awesome-webgl - A curated list of awesome WebGL libraries, resources and much more. awesome-vulkan - A curated list of awesome Vulkan projects and ecosystem. gamedev - A awesome list about game development. graphics-resources - A list of graphic programming resources.","title":"Related lists"},{"location":"Awesome/Awesome_OpenGL/#license","text":"This work is licensed under a Creative Commons Attribution 4.0 International License .","title":"License"},{"location":"Awesome/Awesome_OpenGL/#contributing","text":"Please see CONTRIBUTING for details.","title":"Contributing"},{"location":"Awesome/Awesome_Vulkan/","text":"Awesome Vulkan A curated list of awesome Vulkan libraries, debuggers and resources. Inspired by awesome-opengl and other awesome-... stuff. Hardware Support SDK IHV Document Tutorial Apps Samples Libraries Bindings Tools Books Community Hardware Support gpuinfo - Vulkan Hardware Database by Sascha Willems Khronos NVIDIA Driver for Desktop Driver for Android Driver for Linux for Tegra (L4T) AMD Open-source Driver Imagination Intel Open-source Driver Driver for Windows Qualcomm ARM SDK For Windows & Linux For Android Document AMD Vulkan barriers explained Vulkan Fast Paths Let Your Game Shine \u2013 Optimizing DirectX 12 and Vulkan Performance with AMD CodeXL D3D12 & Vulkan: Lessons Learned Say Hello to a New Rendering API in Town! Vulkan Renderpasses Performance tweets series: Barriers, fences, synchronization Using the Vulkan\u2122 Validation Layers Most common mistakes in Vulkan apps Vulkan Device Memory NVIDIA Vulkan Device-Generated Commands Getting Vulkan Ready For VR GPU-Driven Rendering GDC 16 - High-performance, Low-Overhead Rendering with OpenGL and Vulkan GDC 16 - Vulkan and NVIDIA \u2013 The Essentials Engaging the Voyage to Vulkan Vulkan Shader Resource Binding Vulkan Memory Management OpenGL like Vulkan Transitioning from OpenGL to Vulkan Siggraph 15 talk - Vulkan on NVIDIA GPUs ARM Porting a Graphics Engine to the Vulkan API Multi-Threading in Vulkan Vulkan's Key Features on ARM Architecture Get Your Engine Ready for Vulkan on Mobile Mali Vulkan Tutorials and Slides Vulkan tutorials from the Mali Vulkan SDK Intel API without Secrets: Introduction to Vulkan [ LICENSE ] Part 1: The Beginning Part 2: Swap Chain Part 3: First Triangle Part 4: Vertex Attributes Imagination Efficient Rendering with Vulkan on PowerVR Migrating to Vulkan with the New PowerVR Graphics Framework Samgsung Siggraph 2016 - Best Practices for Mobile Vulkan Usage Recommencation (for mobile) Epic Efficient use of Vulkan on UE4 Mobile Tutorial How to Learn Vulkan - Meta post on how to learn Vulkan I Am Graphics And So Can You - Blog post style tutorial for those new to graphics learning Vulkan. jhenriques's tutorial Khronos Vulkan 1.0 Quick Reference Vulkan 1.0 Specification GDC 2016 Presentations Moving to Vulkan Khronos UK May16 SIGGRPAH 2016 3D BOF Lunarg's tutorial Qualcomm Video Tutorial Series - Leans more towards Vulkan for mobile devices. Raw Vulkan - Overview on how to program a Vulkan application from the ground up. Siggraph An overview of next-generation graphics APIs - covers Vulkan, D3D12 etc. Tutorial by Overv and its github repository . [CC BY-SA 4.0] vulkan-sxs - explain the Vulkan API step by step and vulkan-sync - rephrase Vulkan's requirements on execution dependencies in a more precise form. [MIT] Vulkan in 30 minutes - by baldurk. Vulkan Demos and Tutorials [MIT]. Vulkan Basic Graphics Samples - Collection of simple graphics samples that are written using Magma library. Apps The Talos Principle - by Croteam. Dota2 - by Valve. Basemark - by Basemark. GFXBench 5 - by Kishonti. ProtoStar - by Epic, built with Unreal Engine 4 technology. Doom - by id Software. vkQuake - Vulkan Quake port based on QuakeSpasm. [GPL] Linux port of SteamVR - SteamVR is built on top of the Vulkan API. 3DMark - 3DMark API Overhead test. Samples Sascha Willems's samples and Deferred rendering of Sponza and his talk of Khronos_meetup_munich . Sascha Willems's Vulkan-glTF-PBR - physical based rendering with Vulkan using glTF 2.0 models. [MIT] KhronosGroup Samples Conformance Tests (CTS) Google Android port of LunarG samples . android tutorials . nvpro-samples - NVIDIA DesignWorks Samples. [ LICENSE ] gl_vk_chopper - Simple vulkan rendering example. gl_vk_threaded_cadscene - OpenGL and Vulkan comparison on rendering a CAD scene using veraious techniques and the blog about it. gl_vk_bk3dthreaded - Vulkan sample rendering 3D with 'worker-threads'. gl_vk_supersampled - Vulkan sample showing a high quality super-sampled rendering. NVIDIA GameWorks Samples - GameWorks cross-platform graphics API samples. [ LICENSE ] LunarG's samples vkcube - 'vkcube' sample from krh, works under X, wayland and VT console with drm/kms. Stardust from Intel - The Stardust sample application uses the Vulkan graphics API to efficiently render a cloud of animated particles. [ LICENSE ] Vulkan Quake port based on QuakeSpasm . C# Samples - Port of Overv's tutorials to SharpVk [MIT] Vulkan-Forward-Plus-Renderer - VFPR - a Vulkan Forward Plus Renderer. [MIT] Laugh Engine - Vulkan implementation of real-time PBR renderer. tinyrenderers - Single header implemenations of Vulkan and D3D12 renderers. TLVulkanRenderer - Simple Vulkan-based renderer for my master thesis on real-time transparency. [CC BY-SA 4.0] Vulkan-Hpp Samples - Fork of Sascha Willems excellent Vulkan examples that uses Vulkan-Hpp. SDF Font Demo - Text rendering in Vulkan by estimating signed distance. [MIT] vulkantoy - Shadertoy image shader test app with Vulkan. [MIT] GL_vs_VK - Comparison of OpenGL and Vulkan API in terms of performance. [MIT] Libraries Cinder and the story behind . [BSD] Diligent Engine - a modern cross-platform low-level graphics library that supports OpenGL/GLES, Direct3D11/12 and Vulkan. [Apache License 2.0] SDL - added cross-platform Vulkan graphics support in SDL_vulkan.h. [zlib] DemoFramework - NXP GTEC C++11 cross-platform demo framework including lots of samples for Vulkan, OpenGL ES, OpenVX, OpenCL, OpenVG and OpenCV. [ BSD-3-clause ] openFrameworks - the most famouse C++ creative coding framework. [MIT] bgfx - Cross-platform rendering library, bgfx backend is WIP. [ LICENSE ] PowerVR SDK - C++ cross-platform 3D graphics SDK to speed up development of Vulkan and GLES. [ LICENSE ] glfw and the guide . [ LICENSE ] MoltenVK - run Vulkan on iOS and macOS. [Apache-2.0] imgui - Immediate Mode Graphical User interface. [MIT] vuh - Vulkan-based C++ GPGPU computing framework. [MIT] libvc - Vulkan Compute for C++. [ LICENSE ] AMD's Anvil - cross-platform framework for Vulkan. [ LICENSE ] Introductory Vulkan sample . [MIT] Vulkan Memory Allocator - Easy to integrate Vulkan memory allocation library from AMD. [MIT] V-EZ - light-weight middleware layer for the Vulkan API targeting Professional Workstation ISVs. [MIT] Google's vulkan-cpp-library - Vulkan abstraction library using C++11 for memory, resource management, type and thread safety as well as system independency. [Apache] Vookoo - Vookoo is a set of dependency-free utilities to assist in the construction and updating of Vulkan graphics data structres. [MIT] vpp - Modern C++ Vulkan Abstraction focused on performance and a straightforward interface. [MIT] Intrinsic Engine - Intrinsic is a Vulkan based cross-platform graphics and game engine. [Apache License 2.0] glo / OpenGL Overload - OpenGL implementation on top of Vulkan. Skia - Google's 2D graphics library has a Vulkan backend , demonstrated in a cross-platform sample application with its own window library . [BSD 3-clause] website Spectrum - Work-in-progress framework and abstraction layer around Vulkan. VkHLF - Vulkan High Level Framework. [LICENSE] VulkanOnD3D12 - Vulkan API for D3D12. [Apache License 2.0] visor - Vulkan Ignoble Software Rasterizer. [MIT] Lugdunum - Modern cross-platform 3D rendering engine built with Vulkan and modern C++14. [MIT] Vulkan-WSIWindow - Multi-platform library to create a Vulkan window, and handle input events. [Apache License 2.0] Falcor - Real-time rendering framework from NVIDIA, supporting DX12 and Vulkan. [BSD 3-clause] The-Forge - DirectX 12, Vulkan, macOS Metal 2 rendering framework. [Apache License 2.0] VK9 - Direct3D 9 compatibility layer using Vulkan gfx-rs - High-performance, bindless graphics API for Rust. [Apache License 2.0] satellite-oem - Vulkan API (>=1.1) based ray tracing engine for geeks, enthusiasts and developers, is not final production for end users rostkatze - C++ implementation of Vulkan sitting on D3D12 \ud83d\udc08[Apache License 2.0] Fossilize - serialization format for various persistent Vulkan object types. [MIT] VulkanSceneGraph - next-gen OpenSceneGraph. clspv - prototype compiler for a subset of OpenCL C to Vulkan compute shaders. [Apache License 2.0] Pumex - cross-platform Vulkan renderer implementing frame graph and simple scene graph. Able to render on many surfaces at once [MIT] Bindings libvulkan.lua - Lua bindings for Vulkan. dvulkan - Auto-generated D bindings for Vulkan. ErupteD - Another Auto-generated D bindings for Vulkan. Haskell bindings for Vulkan - [ LICENSE ] Vulkan-hpp Open-Source Vulkan C++ API originated from NVIDIA and the blog about it. VulkanSharp - C# bindings for Vulkan. [MIT] Vulkano - Safe and rich Rust wrapper around the Vulkan API. [MIT] LWJGL - Lightweight Java Game Library 3 has Vulkan bindings. [BSD] SharpVk - C# bindings for Vulkan with Linq-to-SPIR-V & NuGet package . [MIT] vulkan - Ultimate Python bindings for Vulkan generated with CFFI. [Apache Licence 2.0] Tools Nsight\u2122 Visual Studio Edition 5.2+ . LoaderAndValidationLayers - from KhronosGroup. [Apache Licence 2.0] renderdoc - by baldurk, a stand-alone graphics debugging tool. [MIT] VulkanTools - LunarG's tools including layers, vktrace and vkreplay . [Apache Licence 2.0] CodeXL - CodeXL goes open source. [MIT] Qualcomm GPU Tools . Mali Graphics Debugger . Open Capture and Analytics Tool (OCAT) - rovides an FPS overlay and performance measurement for D3D11, D3D12, and Vulkan. [MIT] gapid - Graphics API Debugger, can trace and replay Android OpenGL ES and Vulkan applications. [Apache License 2.0] ARM - PerfDoc - a validation layer against the Mali Application Developer Best Practices document. [MIT] Books Introduction to Computer Graphics and the Vulkan API by Kenwright - Introduce the reader to the exciting topic of computer graphics from a grounds-up practical perspective with the Vulkan API. Learning Vulkan - by Parminder Singh - Get started with the Vulkan API and its programming techniques using the easy-to-follow examples. Book's Examples Vulkan Cookbook - by Pawel Lapinski - Explores a wide range of graphics programming and GPU compute methods to make the best use of the Vulkan API. Book's Examples Vulkan Programming Guide - by Graham Sellers and John Kessenich - Introduces powerful 3D development techniques for many fields. Community Freenode IRC Google Plus Khronos Forum Reddit Stack Overflow Discord Related lists awesome - Curated list of awesome lists. awesome-opengl - Curated list of awesome OpenGL libraries, debuggers and resources. gamedev - Awesome list about game development. graphics-resources - List of graphic programming resources. awesome-d3d12 - Curated list of awesome D3D12 libraries, debuggers and resources. License This work is licensed under a Creative Commons Attribution 4.0 International License . Contributing Please see CONTRIBUTING for details.","title":"Awesome Vulkan"},{"location":"Awesome/Awesome_Vulkan/#awesome-vulkan","text":"A curated list of awesome Vulkan libraries, debuggers and resources. Inspired by awesome-opengl and other awesome-... stuff. Hardware Support SDK IHV Document Tutorial Apps Samples Libraries Bindings Tools Books Community","title":"Awesome Vulkan"},{"location":"Awesome/Awesome_Vulkan/#hardware-support","text":"gpuinfo - Vulkan Hardware Database by Sascha Willems Khronos NVIDIA Driver for Desktop Driver for Android Driver for Linux for Tegra (L4T) AMD Open-source Driver Imagination Intel Open-source Driver Driver for Windows Qualcomm ARM","title":"Hardware Support"},{"location":"Awesome/Awesome_Vulkan/#sdk","text":"For Windows & Linux For Android","title":"SDK"},{"location":"Awesome/Awesome_Vulkan/#document","text":"AMD Vulkan barriers explained Vulkan Fast Paths Let Your Game Shine \u2013 Optimizing DirectX 12 and Vulkan Performance with AMD CodeXL D3D12 & Vulkan: Lessons Learned Say Hello to a New Rendering API in Town! Vulkan Renderpasses Performance tweets series: Barriers, fences, synchronization Using the Vulkan\u2122 Validation Layers Most common mistakes in Vulkan apps Vulkan Device Memory NVIDIA Vulkan Device-Generated Commands Getting Vulkan Ready For VR GPU-Driven Rendering GDC 16 - High-performance, Low-Overhead Rendering with OpenGL and Vulkan GDC 16 - Vulkan and NVIDIA \u2013 The Essentials Engaging the Voyage to Vulkan Vulkan Shader Resource Binding Vulkan Memory Management OpenGL like Vulkan Transitioning from OpenGL to Vulkan Siggraph 15 talk - Vulkan on NVIDIA GPUs ARM Porting a Graphics Engine to the Vulkan API Multi-Threading in Vulkan Vulkan's Key Features on ARM Architecture Get Your Engine Ready for Vulkan on Mobile Mali Vulkan Tutorials and Slides Vulkan tutorials from the Mali Vulkan SDK Intel API without Secrets: Introduction to Vulkan [ LICENSE ] Part 1: The Beginning Part 2: Swap Chain Part 3: First Triangle Part 4: Vertex Attributes Imagination Efficient Rendering with Vulkan on PowerVR Migrating to Vulkan with the New PowerVR Graphics Framework Samgsung Siggraph 2016 - Best Practices for Mobile Vulkan Usage Recommencation (for mobile) Epic Efficient use of Vulkan on UE4 Mobile","title":"Document"},{"location":"Awesome/Awesome_Vulkan/#tutorial","text":"How to Learn Vulkan - Meta post on how to learn Vulkan I Am Graphics And So Can You - Blog post style tutorial for those new to graphics learning Vulkan. jhenriques's tutorial Khronos Vulkan 1.0 Quick Reference Vulkan 1.0 Specification GDC 2016 Presentations Moving to Vulkan Khronos UK May16 SIGGRPAH 2016 3D BOF Lunarg's tutorial Qualcomm Video Tutorial Series - Leans more towards Vulkan for mobile devices. Raw Vulkan - Overview on how to program a Vulkan application from the ground up. Siggraph An overview of next-generation graphics APIs - covers Vulkan, D3D12 etc. Tutorial by Overv and its github repository . [CC BY-SA 4.0] vulkan-sxs - explain the Vulkan API step by step and vulkan-sync - rephrase Vulkan's requirements on execution dependencies in a more precise form. [MIT] Vulkan in 30 minutes - by baldurk. Vulkan Demos and Tutorials [MIT]. Vulkan Basic Graphics Samples - Collection of simple graphics samples that are written using Magma library.","title":"Tutorial"},{"location":"Awesome/Awesome_Vulkan/#apps","text":"The Talos Principle - by Croteam. Dota2 - by Valve. Basemark - by Basemark. GFXBench 5 - by Kishonti. ProtoStar - by Epic, built with Unreal Engine 4 technology. Doom - by id Software. vkQuake - Vulkan Quake port based on QuakeSpasm. [GPL] Linux port of SteamVR - SteamVR is built on top of the Vulkan API. 3DMark - 3DMark API Overhead test.","title":"Apps"},{"location":"Awesome/Awesome_Vulkan/#samples","text":"Sascha Willems's samples and Deferred rendering of Sponza and his talk of Khronos_meetup_munich . Sascha Willems's Vulkan-glTF-PBR - physical based rendering with Vulkan using glTF 2.0 models. [MIT] KhronosGroup Samples Conformance Tests (CTS) Google Android port of LunarG samples . android tutorials . nvpro-samples - NVIDIA DesignWorks Samples. [ LICENSE ] gl_vk_chopper - Simple vulkan rendering example. gl_vk_threaded_cadscene - OpenGL and Vulkan comparison on rendering a CAD scene using veraious techniques and the blog about it. gl_vk_bk3dthreaded - Vulkan sample rendering 3D with 'worker-threads'. gl_vk_supersampled - Vulkan sample showing a high quality super-sampled rendering. NVIDIA GameWorks Samples - GameWorks cross-platform graphics API samples. [ LICENSE ] LunarG's samples vkcube - 'vkcube' sample from krh, works under X, wayland and VT console with drm/kms. Stardust from Intel - The Stardust sample application uses the Vulkan graphics API to efficiently render a cloud of animated particles. [ LICENSE ] Vulkan Quake port based on QuakeSpasm . C# Samples - Port of Overv's tutorials to SharpVk [MIT] Vulkan-Forward-Plus-Renderer - VFPR - a Vulkan Forward Plus Renderer. [MIT] Laugh Engine - Vulkan implementation of real-time PBR renderer. tinyrenderers - Single header implemenations of Vulkan and D3D12 renderers. TLVulkanRenderer - Simple Vulkan-based renderer for my master thesis on real-time transparency. [CC BY-SA 4.0] Vulkan-Hpp Samples - Fork of Sascha Willems excellent Vulkan examples that uses Vulkan-Hpp. SDF Font Demo - Text rendering in Vulkan by estimating signed distance. [MIT] vulkantoy - Shadertoy image shader test app with Vulkan. [MIT] GL_vs_VK - Comparison of OpenGL and Vulkan API in terms of performance. [MIT]","title":"Samples"},{"location":"Awesome/Awesome_Vulkan/#libraries","text":"Cinder and the story behind . [BSD] Diligent Engine - a modern cross-platform low-level graphics library that supports OpenGL/GLES, Direct3D11/12 and Vulkan. [Apache License 2.0] SDL - added cross-platform Vulkan graphics support in SDL_vulkan.h. [zlib] DemoFramework - NXP GTEC C++11 cross-platform demo framework including lots of samples for Vulkan, OpenGL ES, OpenVX, OpenCL, OpenVG and OpenCV. [ BSD-3-clause ] openFrameworks - the most famouse C++ creative coding framework. [MIT] bgfx - Cross-platform rendering library, bgfx backend is WIP. [ LICENSE ] PowerVR SDK - C++ cross-platform 3D graphics SDK to speed up development of Vulkan and GLES. [ LICENSE ] glfw and the guide . [ LICENSE ] MoltenVK - run Vulkan on iOS and macOS. [Apache-2.0] imgui - Immediate Mode Graphical User interface. [MIT] vuh - Vulkan-based C++ GPGPU computing framework. [MIT] libvc - Vulkan Compute for C++. [ LICENSE ] AMD's Anvil - cross-platform framework for Vulkan. [ LICENSE ] Introductory Vulkan sample . [MIT] Vulkan Memory Allocator - Easy to integrate Vulkan memory allocation library from AMD. [MIT] V-EZ - light-weight middleware layer for the Vulkan API targeting Professional Workstation ISVs. [MIT] Google's vulkan-cpp-library - Vulkan abstraction library using C++11 for memory, resource management, type and thread safety as well as system independency. [Apache] Vookoo - Vookoo is a set of dependency-free utilities to assist in the construction and updating of Vulkan graphics data structres. [MIT] vpp - Modern C++ Vulkan Abstraction focused on performance and a straightforward interface. [MIT] Intrinsic Engine - Intrinsic is a Vulkan based cross-platform graphics and game engine. [Apache License 2.0] glo / OpenGL Overload - OpenGL implementation on top of Vulkan. Skia - Google's 2D graphics library has a Vulkan backend , demonstrated in a cross-platform sample application with its own window library . [BSD 3-clause] website Spectrum - Work-in-progress framework and abstraction layer around Vulkan. VkHLF - Vulkan High Level Framework. [LICENSE] VulkanOnD3D12 - Vulkan API for D3D12. [Apache License 2.0] visor - Vulkan Ignoble Software Rasterizer. [MIT] Lugdunum - Modern cross-platform 3D rendering engine built with Vulkan and modern C++14. [MIT] Vulkan-WSIWindow - Multi-platform library to create a Vulkan window, and handle input events. [Apache License 2.0] Falcor - Real-time rendering framework from NVIDIA, supporting DX12 and Vulkan. [BSD 3-clause] The-Forge - DirectX 12, Vulkan, macOS Metal 2 rendering framework. [Apache License 2.0] VK9 - Direct3D 9 compatibility layer using Vulkan gfx-rs - High-performance, bindless graphics API for Rust. [Apache License 2.0] satellite-oem - Vulkan API (>=1.1) based ray tracing engine for geeks, enthusiasts and developers, is not final production for end users rostkatze - C++ implementation of Vulkan sitting on D3D12 \ud83d\udc08[Apache License 2.0] Fossilize - serialization format for various persistent Vulkan object types. [MIT] VulkanSceneGraph - next-gen OpenSceneGraph. clspv - prototype compiler for a subset of OpenCL C to Vulkan compute shaders. [Apache License 2.0] Pumex - cross-platform Vulkan renderer implementing frame graph and simple scene graph. Able to render on many surfaces at once [MIT]","title":"Libraries"},{"location":"Awesome/Awesome_Vulkan/#bindings","text":"libvulkan.lua - Lua bindings for Vulkan. dvulkan - Auto-generated D bindings for Vulkan. ErupteD - Another Auto-generated D bindings for Vulkan. Haskell bindings for Vulkan - [ LICENSE ] Vulkan-hpp Open-Source Vulkan C++ API originated from NVIDIA and the blog about it. VulkanSharp - C# bindings for Vulkan. [MIT] Vulkano - Safe and rich Rust wrapper around the Vulkan API. [MIT] LWJGL - Lightweight Java Game Library 3 has Vulkan bindings. [BSD] SharpVk - C# bindings for Vulkan with Linq-to-SPIR-V & NuGet package . [MIT] vulkan - Ultimate Python bindings for Vulkan generated with CFFI. [Apache Licence 2.0]","title":"Bindings"},{"location":"Awesome/Awesome_Vulkan/#tools","text":"Nsight\u2122 Visual Studio Edition 5.2+ . LoaderAndValidationLayers - from KhronosGroup. [Apache Licence 2.0] renderdoc - by baldurk, a stand-alone graphics debugging tool. [MIT] VulkanTools - LunarG's tools including layers, vktrace and vkreplay . [Apache Licence 2.0] CodeXL - CodeXL goes open source. [MIT] Qualcomm GPU Tools . Mali Graphics Debugger . Open Capture and Analytics Tool (OCAT) - rovides an FPS overlay and performance measurement for D3D11, D3D12, and Vulkan. [MIT] gapid - Graphics API Debugger, can trace and replay Android OpenGL ES and Vulkan applications. [Apache License 2.0] ARM - PerfDoc - a validation layer against the Mali Application Developer Best Practices document. [MIT]","title":"Tools"},{"location":"Awesome/Awesome_Vulkan/#books","text":"Introduction to Computer Graphics and the Vulkan API by Kenwright - Introduce the reader to the exciting topic of computer graphics from a grounds-up practical perspective with the Vulkan API. Learning Vulkan - by Parminder Singh - Get started with the Vulkan API and its programming techniques using the easy-to-follow examples. Book's Examples Vulkan Cookbook - by Pawel Lapinski - Explores a wide range of graphics programming and GPU compute methods to make the best use of the Vulkan API. Book's Examples Vulkan Programming Guide - by Graham Sellers and John Kessenich - Introduces powerful 3D development techniques for many fields.","title":"Books"},{"location":"Awesome/Awesome_Vulkan/#community","text":"Freenode IRC Google Plus Khronos Forum Reddit Stack Overflow Discord","title":"Community"},{"location":"Awesome/Awesome_Vulkan/#related-lists","text":"awesome - Curated list of awesome lists. awesome-opengl - Curated list of awesome OpenGL libraries, debuggers and resources. gamedev - Awesome list about game development. graphics-resources - List of graphic programming resources. awesome-d3d12 - Curated list of awesome D3D12 libraries, debuggers and resources.","title":"Related lists"},{"location":"Awesome/Awesome_Vulkan/#license","text":"This work is licensed under a Creative Commons Attribution 4.0 International License .","title":"License"},{"location":"Awesome/Awesome_Vulkan/#contributing","text":"Please see CONTRIBUTING for details.","title":"Contributing"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/","text":"Awesome C++ A curated list of awesome C++ (or C) frameworks, libraries, resources, and shiny things. Inspired by awesome-... stuff. Awesome C++ Standard Libraries Frameworks Artificial Intelligence Asynchronous Event Loop Audio Biology BitTorrent CLI Compression Concurrency Containers Cryptography Database Debug Game Engine GUI Graphics Image Processing Internationalization Inter-process communication JSON Logging Machine Learning Math Multimedia Networking PDF Physics Regular Expression Robotics Scientific Computing Scripting Serialization Sorting Video Virtual Machines Web Application Framework XML Miscellaneous Software Compiler Online Compiler Debugger Integrated Development Environment Build Systems Static Code Analysis Coding Style Tools Resources API Design Articles Books Coding Style Videos Websites Other Awesome Lists Contributing Standard Libraries C++ Standard Library - including STL Containers, STL Aglorithm, STL Functional, etc. C++ Standard Library - A collection of classes and functions, which are written in the core language and part of the C++ ISO Standard itself. Standard Template Library - The Standard Template Library (STL). C POSIX library - A specification of a C standard library for POSIX systems. ISO C++ Standards Committee - ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee. website The GNU C Library - The purpose of this manual is to tell you how to use the facilities of the GNU C Library. Frameworks C++ generic frameworks and libraries. abseil-cpp - Abseil C++ Common Libraries. [Apache2] Apache C++ Standard Library - STDCXX, A collection of algorithms, containers, iterators, and other fundamental components. [retired] [Apache2] APR - Apache Portable Runtime. Another library of cross-platform utility functions. [Apache2] ASL - Adobe Source Libraries provides peer-reviewed and portable C++ source libraries. [MIT] Boost :zap: - A large collection of generic C++ libraries. [Boost] website BDE - The BDE Development Environment from Bloomberg Labs. [Apache2] Cinder - A community-developed, free and open source library for professional-quality creative coding. [BSD] Cxxomfort - A small, header-only library that backports to C++03 some of the nifty C++11 goodies. [MIT] Dlib :zap: - A general purpose cross-platform C++ library designed using contract programming and modern C++ techniques. [Boost] website EASTL - Electronic Arts Standard Template Library. [BSD] ffead-cpp - Framework for Enterprise Application Development. [Apache2] Folly - An open-source C++ library developed and used at Facebook. [Apache2] FunctionalPlus - Functional Programming Library for C++. Write concise and readable C++ code. [MIT] GLib - GLib provides the core application building blocks for libraries and applications written in C. [LGPL] JUCE - An all-encompassing C++ class library for developing cross-platform software. [Core-Module: ISC, Rest: GPL2/GPL3/Commercial] website libPhenom - libPhenom is an eventing framework for building high performance and high scalability systems in C. [Apache2] LibSourcey - C++11 evented IO for real-time video streaming and high performance networking applications. [LGPL] LibU - A multiplatform utility library written in C. [BSD] Loki - A C++ library of designs, containing flexible implementations of common design patterns and idioms. [MIT] MiLi - Minimal headers-only C++ Library. [Boost] OpenFrameworks - A cross platform open source toolkit for creative coding in C++. [MIT] website Qt :zap: - A cross-platform application and UI framework. [GPL/LGPL/Commercial] Reason - A cross platform framework designed to bring the ease of use of Java, .Net, or Python to developers who require the performance and strength of C++. [GPL2] ROOT - A set of OO frameworks with all the functionality needed to handle and analyze large amounts of data in a very efficient way. Used at CERN. [LGPL] STLport - An exemplary version of STL. [Free] STXXL - Standard Template Library for Extra Large Data Sets. [Boost] tbox - A glib-like multi-platform c library. [Apache2] website Ultimate++ - A C++ cross-platform rapid application development framework. [BSD] uSTL - The small STL library. [MIT] Windows Template Library - A C++ library for developing Windows applications and UI components. [Public] Yomm2 - Fast, Orthogonal, Open multi-methods. Supersedes Yomm11 [Boost] Artificial Intelligence ANNetGPGPU - A GPU (CUDA) based Artificial Neural Network library. [LGPL] btsk - Game Behavior Tree Starter Kit. [zlib] Evolving Objects - A template-based, ANSI-C++ evolutionary computation library which helps you to write your own stochastic optimization algorithms insanely fast. [LGPL] frugally-deep - Header-only library for using Keras models in C++. [MIT] Recast/Detour - (3D) Navigation mesh generator and pathfinder, mostly for games. [zlib] TensorFlow - An open source software library for numerical computation using data flow graphs [Apache] CNTK - Microsoft Cognitive Toolkit (CNTK), an open source deep-learning toolkit. [Boost] tiny-dnn - A header only, dependency-free deep learning framework in C++11. [BSD] Veles - Distributed platform for rapid Deep learning application development. [Apache] Kaldi - Toolkit for speech recognition. [Apache] Asynchronous Event Loop Asio - A cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach. [Boost] website Boost.Asio - A cross-platform C++ library for network and low-level I/O programming. [Boost] C++ Actor Framework - An Open Source Implementation of the Actor Model in C++. [BSD-3-Clause] website libev - A full-featured and high-performance event loop that is loosely modelled after libevent, but without its limitations and bugs. [BSD and GPL] libevent - An event notification library. [BSD] libuv - Cross-platform asychronous I/O. [BSD] uvw - C++ wrapper for libuv. [MIT] Audio Audio, Sound, Music, Digitized Voice Libraries FMOD - An easy to use crossplatform audio engine and audio content creation tool for games. [Free for non-commercial/Commercial] KFR - Fast, modern C++ DSP framework, FFT, FIR/IIR filters, Sample Rate Conversion. [GPL/Commercial] Maximilian - C++ Audio and Music DSP Library. [MIT] mini_al - Single file audio playback and capture library. [Unlicense] OpenAL - Open Audio Library - A crossplatform audio API. [BSD/LGPL/Commercial] Opus - A totally open, royalty-free, highly versatile audio codec. [BSD] SELA - SimplE Lossless Audio. [MIT] SoLoud - Easy, portable audio engine for games. [zlib] Speex - A free codec for free speech. Obsoleted by Opus. [BSD] Tonic - Easy and efficient audio synthesis in C++. [Unlicense] Vorbis - Ogg Vorbis is a fully open, non-proprietary, patent-and-royalty-free, general-purpose compressed audio format. [BSD] minimp3 - Public domain, header-only MP3 decoder with clean-room implementation. [CC0] Biology Bioinformatics, Genomics, Biotech libsequence - A C++ library for representing and analyzing population genetics data. [GPL] SeqAn - Algorithms and data structures for the analysis of sequences with the focus on biological data. [BSD/3-clause] Vcflib - A C++ library for parsing and manipulating VCF files. [MIT] Wham - Structural variants (SVs) in Genomes by directly applying association tests to BAM files. [MIT] BitTorrent jech/dht - BitTorrent DHT library in C. [MIT] libtorrent (a.k.a. libtorrent-rasterbar) - An efficient feature complete C++ bittorrent implementation. [BSD] LibTorrent (a.k.a. libtorrent-rakshasa) - BitTorrent library. [GPL] libutp - uTorrent Transport Protocol library. [MIT] CLI Console/Terminal User Interface, Command Line Interface Argh! - A minimalist, frustration-free, header-only argument handler. [BSD] Taywee/args - A simple header-only C++ argument parser library. [MIT] Boost.Program_options - A library to obtain program options via conventional methods such as command line and config file. [Boost] CLI11 - Header only single or multi-file C++11 library for simple and advanced CLI parsing. [BSD] jarro2783/cxxopts - Lightweight C++ command line option parser. [MIT] docopt.cpp - A library to generate option parser from docstring. [MIT/Boost] gflags - Commandline flags module for C++. [BSD] Ncurses - A terminal user interfaces. [MIT] PDCurses - Public domain curses library with both source code and pre-compiled library available. [PublicDomain] replxx - A readline and libedit replacement that supports UTF-8, syntax highlighting, hints, works on Unix and Windows. [BSD] TCLAP - A mature, stable and feature-rich library for defining and accessing command line arguments in ANSI C++. [MIT] termbox - A C library for writing text-based user interfaces. [BSD] Compression Compression and Archiving Libraries Brotli - Brotli compression format. Developed by Google. [MIT] bzip2 - A freely available, patent free, high-quality data compressor. [BSD] FiniteStateEntropy - New generation entropy codecs : Finite State Entropy and Huff0. PhysicsFS - A library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3's file subsystem. [zlib] KArchive - A library for creating, reading, writing and manipulating file archives like zip and tar. It also provides transparent compression and decompression of data, using formats like gzip, via a subclass of QIODevice. [LGPL] LZ4 - Extremely Fast Compression algorithm. [BSD] LZFSE - LZFSE compression library and command line tool. Developed by Apple. LZHAM - Lossless data compression library with a compression ratio similar to LZMA but with much faster decompression. [BSD] LZMA :zap: - The default and general compression method of 7z format. [PublicDomain] LZMAT - An extremely fast real-time lossless data compression library. [GPL] miniz - Single C source file Deflate/Inflate compression library with zlib-compatible API, ZIP archive reading/writing, PNG writing. [Unlicense] Minizip - Zlib with latest bug fixes that supports PKWARE disk spanning, AES encryption, and IO buffering. [zlib] smaz - Small strings compression library. [BSD] Snappy - A fast compressor/decompressor. [BSD] ZLib - A very compact compression library for data streams. [zlib] zlib-ng - zlib for the \"next generation\" systems. Drop-In replacement with some serious optimizations. [zlib] zstd - Zstandard - Fast real-time compression algorithm. Developed by Facebook. [BSD] ZZIPlib - Provides read access on ZIP-archives. [MPL/LGPL] Concurrency Concurrency and Multithreading alpaka - Abstraction library for parallel kernel acceleration. [LGPLv3+] ArrayFire - A general purpose GPU library. [BSD] Boost.Compute - A C++ GPU Computing Library for OpenCL. [Boost] Bolt - A C++ template library optimized for GPUs. [Apache2] ck - Concurrency primitives, safe memory reclamation mechanisms and non-blocking data structures. [BSD] concurrentqueue - A fast multi-producer, multi-consumer lock-free concurrent queue for C++11. [BSD,Boost] Cpp-Taskflow - Fast C++ Parallel Programming with Task Dependencies. [MIT] CUB - CUB provides state-of-the-art, reusable software components for every layer of the CUDA programming mode. [New BSD] cupla - C++ API to run CUDA/C++ on OpenMP, Threads, TBB, ... through Alpaka. [LGPLv3+] C++React - A reactive programming library for C++11. [Boost] Intel Parallel STL - Intel\u00ae implementation of C++17 STL for C++11 and above. [Apache2] Intel TBB - Intel\u00ae Threading Building Blocks. [Apache2] junction - A library of concurrent data structures in C++. [BSD] libcds - A C++ library of Concurrent Data Structures. [BSD] Libclsph - An OpenCL based GPU accelerated SPH fluid simulation library. [MIT] libdill - Introduces structured concurrency in C. [MIT] libmill - Introduces Go-style concurrency in C. [MIT] moderngpu - moderngpu is a productivity library for general-purpose computing on GPUs. It is a header-only C++ library written for CUDA. The unique value of the library is in its accelerated primitives for solving irregularly parallel problems. [FreeBSD & Copyright, Sean Baxter] NCCL - Optimized primitives for collective multi-GPU communication. [BSD] OpenCL - The open standard for parallel programming of heterogeneous systems. OpenMP - The OpenMP API. RaftLib - The RaftLib C++ library, streaming/dataflow concurrency via C++ iostream-like operators [Apache2] readerwriterqueue - A fast single-producer, single-consumer lock-free queue for C++. [BSD] Thrust - A parallel algorithms library which resembles the C++ Standard Template Library (STL). [Apache2] transwarp - A header-only C++ library for task concurrency. [MIT] HPX - A general purpose C++ runtime system for parallel and distributed applications of any scale. [Boost] VexCL - A C++ vector expression template library for OpenCL/CUDA. [MIT] Containers C++ B-tree - A template library that implements ordered in-memory containers based on a B-tree data structure. [Apache2] Colony - An unordered \"bag\"-type container which outperforms std containers in high-modification scenarios while maintaining permanent pointers to non-erased elements regardless of insertion/erasure. [zLib] website Hashmaps - Implementation of open addressing hash table algorithms in C++. [MIT] Hopscotch map - A fast header-only hash map which uses hopscotch hashing for collisions resolution. [MIT] LSHBOX - A c++ toolbox of locality-sensitive hashing (LSH), provides several popular LSH algorithms, also support Python and MATLAB. [GPL] plf::list - A std::list implementation which removes range splicing in order to enable cache-friendlier structure, yielding significant performance gains. [zLib] website plf::stack - A replacement container for the std::stack container adaptor, with better performance than any std container in a stack context. [zLib] website ring_span lite - A simplified implementation of Arthur O'Dwyer's ring_span implementation ie. a circular buffer view. [MIT] sparsepp - A fast, memory efficient hash map for C++. [BSD 3-clause] Cryptography Cryptography and Encryption Libraries Bcrypt - A cross platform file encryption utility. Encrypted files are portable across all supported operating systems and processors. [BSD] BeeCrypt - A portable and fast cryptography library. [LGPLv2.1+] Botan - A crypto library for C++. [BSD-2] Crypto++ - A free C++ class library of cryptographic schemes. [Boost] website digestpp - C++11 header-only message digest (hash) library. [PublicDomain] GnuPG - A complete and free implementation of the OpenPGP standard. [GPL] GnuTLS - A secure communications library implementing the SSL, TLS and DTLS protocols. [LGPL2.1] Libgcrypt - A general purpose cryptographic library originally based on code from GnuPG. [LGPLv2.1+] libhydrogen - A lightweight, secure, easy-to-use crypto library for constrained environments. [ISC] LibreSSL - A free version of the SSL/TLS protocol forked from OpenSSL in 2014. [?] libsodium - P(ortable|ackageable) NaCl-based crypto library, opinionated and easy to use. [ISC] LibTomCrypt - A fairly comprehensive, modular and portable cryptographic toolkit. [WTFPL] mbedTLS - An open source, portable, easy to use, readable and flexible SSL library, previously known as PolarSSL. [Apache2] website Nettle - A low-level cryptographic library. [LGPL] OpenSSL - A robust, commercial-grade, full-featured, and Open Source cryptography library. [Apache] website retter - A collection of hash functions, ciphers, tools, libraries, and materials related to cryptography. s2n - An implementation of the TLS/SSL protocols. [Apache] Tiny AES in C - Small portable AES128/192/256 in C. [PublicDomain] Themis - crypto library for painless data security, providing symmetric and asymmetric encryption, secure sockets with forward secrecy, for mobile and server platforms. [Apache2] Database Database Libraries, SQL Servers, ODBC Drivers, and Tools hiberlite - C++ Object-relational mapping for sqlite3. [BSD] Hiredis - A minimalistic C client library for the Redis database. [BSD] LevelDB - A fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. [BSD] LMDB - Very fast embedded key/value store with full ACID semantics. [OpenLDAP] LMDB++ - C++11 wrapper for the LMDB embedded database library. [PublicDomain] MongoDB C Driver - MongoDB client library for C. [Apache2] MongoDB C++ Driver - C++ driver for MongoDB. [Apache2] MongoDB Libbson - A BSON utility library. [Apache2] MySQL++ - A C++ wrapper for MySQL's C API. [LGPL] redis3m - Wrapper of hiredis with clean C++ interface, supporting sentinel and ready to use patterns. [Apache2] RocksDB - Embedded key-value store for fast storage from facebook. [BSD] SimDB - High performance, shared memory, lock free, cross platform, single file, minimal dependencies, C++11 key-value store [Apache2] SQLite - A completely embedded, full-featured relational database in a few 100k that you can include right into your project. [PublicDomain] SQLiteC++ - SQLiteC++ (SQLiteCpp) is a smart and easy to use C++ SQLite3 wrapper. [MIT] sqlite_modern_cpp - Header only C++14 wrapper around sqlite library. [MIT] sqlite_orm - SQLite ORM light header only library for modern C++. [BSD-3-Clause] TileDB - Fast Dense and Sparse Multidimensional Array DBMS. [MIT] website upscaledb - An embedded \"typed\" key/value store with a built-in query interface. [GPLv3] Debug Debugging Libraries, Memory Leak and Resource Leak Detection, Unit Testing backward-cpp - A beautiful stack trace pretty printer for C++. [MIT] benchmark - Google provided small microbenchmark support library. [Apache2] Boost.Test - Boost Test Library. [Boost] doctest - The lightest feature rich C++ single header testing framework. [MIT] Catch - A modern, C++-native, header-only, framework for unit-tests, TDD and BDD. [Boost] Catch2 - A modern, C++-native, header-only, test framework for unit-tests, TDD and BDD. [BSL-1.0] Celero - C++ Benchmarking Framework. [Apache2] CppUTest - Unit testing and mocking framework for C/C++. [BSD-3-clause] CUTE - C++ Unit Testing Easier. [LGPL3] CMocka - unit testing framework for C with support for mock objects. [Apache2] CppUnit - C++ port of JUnit. [LGPL2] CTest - The CMake test driver program. [BSD] Deleaker - A tool for resource leak detection, including memory, GDI and handle leaks. fff - A micro-framework for creating fake C functions. [MIT] Google Mock - A library for writing and using C++ mock classes. [BSD] Google Test - Google C++ Testing Framework. [BSD] ig-debugheap - Multiplatform debug heap useful for tracking down memory errors. [BSD] libtap - Write tests in C. [GPL2] MemTrack - Tracking memory allocations in C++. microprofile - Profiler with web-view for multiple platforms. [PublicDomain] MinUnit - A minimal unit testing framework for C self-contained in a single header file. [MIT] Mockator - Eclipse CDT plug-in for C++ Seams and Mock Objects. Nanotimer - A simple low-overhead cross-platform timer class for benchmarking. [zLib] website Remotery - Single C File Profiler with Web Viewer. [Apache2] UnitTest++ - A lightweight unit testing framework for C++. [MIT/X Consortium license] utest.h - Single header unit testing framework for C and C++. [Unlicense] VLD - Visual Leak Detector. A free, robust, open-source memory leak detection system for Visual C++. Game Engine Allegro - A cross-platform library mainly aimed for video games and multimedia programming. [zlib] Banshee 3D - Modern C++14 game engine with Vulkan support, fully featured editor and C# scripting. [LGPL3/Commercial] Cocos2d-x - A multi-platform framework for building 2d games, interactive books, demos and other graphical applications. [MIT] delta3d - A robust simulation platform. [LGPL2] EnTT - Gaming meets modern C++. [MIT] Flounder - A high speed C++17 Vulkan game engine. [MIT] GamePlay - A cross-platform native C++ game framework for creating 2D/3D mobile and desktop games. [Apache2] Godot - A fully featured, open source, MIT licensed, game engine. [MIT] Grit - Community project to build a free game engine for implementing open world 3D games. [MIT] KlayGE - a cross-platform open source game engine with plugin-based architecture. [GPLv2] website Oxygine - A cross-platform 2D C++ game engine. [MIT] Panda3D - A game engine, a framework for 3D rendering and game development for Python and C++ programs. [Modified BSD] website Polycode - A cross-platform framework for creative code in C++ (with Lua bindings). [MIT] website Torque2D - An open-source and cross-platform C++ engine built for 2D game development. [MIT] website Torque3D - An open-source C++ engine built for 3D game development. [MIT] website toy engine - toy is a thin and modular c++ game engine and offers simple expressive c++ idioms to design full featured 2D or 3D games in fast iterations. Urho3D - A free lightweight, cross-platform 2D and 3D game engine implemented in C++. Greatly inspired by OGRE and Horde3D. [MIT] GUI Graphic User Interface CEGUI - Flexible, cross-platform GUI library. FLTK - Fast, light, cross-platform C++ GUI toolkit. [GPL2] GacUI - GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features. [Ms-PL] GTK+ - A multi-platform toolkit for creating graphical user interfaces. [LGPL] gtkmm - The official C++ interface for the popular GUI library GTK+. [LGPL] imgui - Immediate Mode Graphical User Interface with minimal dependencies. [MIT] libRocket - libRocket is a C++ HTML/CSS game interface middleware. [MIT] libui - Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports. [MIT] MyGUI - Fast, flexible and simple GUI. [MIT] nana - Nana is a cross-platform library for GUI programming in modern C++ style. [Boost] NanoGui - A minimalistic cross-platform widget library for OpenGL 3.x or higher. [BSD] nuklear - A single-header ANSI C gui library. [PublicDomain] QCustomPlot - Qt plotting widget without further dependencies. [GPLv3] Qwt - Qt Widgets for Technical Applications. [Own based on LGPL] QwtPlot3D - A feature-rich Qt/OpenGL-based C++ programming library, providing essentially a bunch of 3D-widgets. [zlib] Sciter - Sciter is an embeddable HTML/CSS/scripting engine aimed to be used as an UI layer of modern desktop applications. [Free/Commercial] wxWidgets - A C++ library that lets developers create applications for Windows, Mac OS X, Linux and other platforms with a single code base. [Own LGPL] Yue - A library for creating native cross-platform GUI apps. [LGPLv2] Graphics bgfx - A cross-platform rendering library. [BSD] bs::framework - Modern C++14 library for the development of real-time graphical applications. [MIT] Cairo - A 2D graphics library with support for multiple output devices. [LGPL2 or Mozilla MPL] Diligent Engine - A modern cross-platform low-level 3D graphics library. [Apache2] DirectXTK - A collection of helper classes for writing DirectX 11.x code in C++. [MIT] GLFW - A simple, cross-platform OpenGL wrangling library. [zlib/libpng] herebedragons - A basic 3D scene implemented with various engines, frameworks or APIs. [MIT] website Horde3D - A small 3D rendering and animation engine. [EPL] Ion - A small and efficient set of libraries for building cross-platform client or server applications that use 3D graphics. [Apache2] website Irrlicht - A high performance realtime 3D engine written in C++. [zlib] libigl - Simple C++ geometry processing library. [MPL2] magnum - Lightweight and modular C++11/C++14 graphics middleware for games and data visualization. [MIT] website NanoVG - Antialiased 2D vector drawing library on top of OpenGL for UI and visualizations. [Zlib] Ogre 3D :zap: - A scene-oriented, real-time, flexible 3D rendering engine (as opposed to a game engine) written in C++. [MIT] OpenSceneGraph - An open source high performance 3D graphics toolkit. [OSGPL] OpenSubdiv - Pixar's library for evaluating and rendering subdivision surfaces on CPU and GPU. [Modified Apache2] OpenVDB - Library and tools for storing, editing, and rendering volumetric datasets. [MPL2] Panda3D - A framework for 3D rendering and game development for Python and C++. [BSD] Partio - Library for wrangling particle data, with support for most common file formats. [Modified BSD] Skia - A complete 2D graphic library for drawing Text, Geometries, and Images. [BSD] webpage urho3d - Cross-platform rendering and game engine. [Many different, mostly MIT] Image Processing Boost.GIL - Generic Image Library. CImg - A small, open source, C++ toolkit for image processing. [Own LGPL or GPL] CxImage - An image processing and conversion library to load, save, display, transform BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K images. [zlib] FreeImage - An open source library that supports popular graphics image formats and others as needed by today's multimedia applications. [GPL2 or GPL3] GD - GD Graphics Library, famously used in PHP for image loading/manipulation & thumbnail generation. [custom permissive license, requires mention in user docs] website DCMTK - DICOM Toolkit. GDCM - Grassroots DICOM library. ITK - An open-source, cross-platform system for image analysis. [Apache2 from ITK 4.0] libvips - A fast image processing library with low memory needs. [LGPL] website Magick++ - ImageMagick program interfaces for C++. [Apache2] MagickWnd - ImageMagick program interfaces for C. [Apache2] OpenCV :zap: - Open source computer vision. [BSD] OpenEXR - Cross-platform library for high dynamic range imaging. [Modified BSDF] OpenImageIO - Powerful image and texture wrangling library with support for a wide number of common lossy and RAW formats. [Modified BSD] tesseract-ocr - An OCR engine. [Apache2] TinyEXIF - Tiny ISO-compliant C++ EXIF and XMP parsing library for JPEG. [MIT] Video++ - A C++14 high performance video and image processing library. [MIT] VIGRA - A generic C++ computer vision library for image analysis. [MIT X11] VTK - Open-source, freely available software system for 3D computer graphics, image processing and visualization. [BSD] Internationalization gettext - GNU `gettext'. [GPL2] IBM ICU - A set of C/C++ and Java libraries providing Unicode and Globalization support. [ICU] libiconv - An encoding conversion library between different character encodings. [GPL] utf8.h - Single header utf8 string functions for C and C++. [Unlicense] Inter-process communication Apache Thrift - Efficient cross-language IPC/RPC, works between C++, Java, Python, PHP, C#, and many more other languages. Originally developed by Facebook. [Apache2] Cap'n Proto - Fast data interchange format and capability-based RPC system. [MIT] gRPC - A high performance, open source, general-purpose RPC framework. [BSD] website libjson-rpc-cpp - JSON-RPC framework for C++ servers and clients. [MIT] nanomsg - A simple high-performance implementation of several \"scalability protocols\". [MIT] website simple-rpc-cpp - A simple RPC wrapper generator to C/C++ functions. [BSD] WAMP - Provides RPC and pub/sub messaging patterns. (various implementations, various languages) xmlrpc-c - A lightweight RPC library based on XML and HTTP. [BSD] ZeroMQ - High-speed, modular asynchronous communication library. [LGPL] JSON Boost.PropertyTree - A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost] frozen - JSON parser and generator for C/C++. [GPL & GPL2] Jansson - C library for encoding, decoding and manipulating JSON data. [MIT] jbson - jbson is a library for building & iterating BSON data, and JSON documents in C++14. [Boost] JeayeSON - A very sane (header only) C++ JSON library. [BSD] json :zap: - JSON for Modern C++. [MIT] JSON++ - A JSON parser in C++. [MIT] json.h - A simple one header/one source solution to parsing JSON in C and C++. [Unlicense] json-c - A JSON implementation in C. [MIT] JsonCpp - A C++ library for interacting with JSON. [MIT] json-parser - Very low footprint JSON parser written in portable ANSI C. [BSD] json11 - A tiny JSON library for C++11. [MIT] json-voorhees - JSON library for C++. Support for C++11. No dependencies, fast and dev-friendly. [Apache2] jute - Very simple C++ JSON Parser. [PublicDomain] libjson - A JSON parser and printer library in C. easy to integrate with any model. [LGPL] libjson - Lightweight JSON library. [?] LIBUCL :zap: - Universal configuration library parser [?] PicoJSON - A header-file-only, JSON parser serializer in C++. [BSD] qt-json - A simple class for parsing JSON data into a QVariant hierarchy and vice versa. [GPLv3] QJson - A qt-based library that maps JSON data to QVariant objects. [LGPL2] RapidJSON :zap: - A fast JSON parser/generator for C++ with both SAX/DOM style API. [MIT] ujson - \u00b5json is a a small, C++11, UTF-8, JSON library. [MIT] YAJL - A fast streaming JSON parsing library in C. [ISC] Logging Blackhole - Attribute-based logging framework, which is designed to be fast, modular and highly customizable. [MIT] Boost.Log - Designed to be very modular and extensible. [Boost] Easylogging++ - Single header only, extremely light-weight high performance logging library for C++11 (or higher) applications. [MIT] website G3log - Asynchronous logger with Dynamic Sinks. [PublicDomain] glog - C++ implementation of the Google logging module. Log4cpp - A library of C++ classes for flexible logging to files, syslog, IDSA and other destinations. [LGPL] log4cplus - A simple to use C++ logging API providing thread-safe, flexible, and arbitrarily granular control over log management and configuration. [BSD & Apache2] loguru - A lightweight C++ logging library. [PublicDomain] plog - Portable and simple C++ logging library. [MPL2] reckless - Low-latency, high-throughput, asynchronous logging library for C++. [MIT] spdlog - Super fast, header only, C++ logging library. templog - A very small and lightweight C++ library which you can use to add logging to your C++ applications. [Boost] Machine Learning Caffe - A fast framework for neural networks. [BSD] Caffe2 - A lightweight, modular, and scalable deep learning framework. [Apache2] website CCV - C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library. [BSD] Fido - A highly-modular C++ machine learning library for embedded electronics and robotics. [MIT] website MeTA - A modern C++ data sciences toolkit. [MIT] website Minerva - A fast and flexible system for deep learning. [Apache2] mlpack - A scalable c++ machine learning library. [LGPLv3] website OpenCV :zap: - Open Source Computer Vision Library. [BSD] website Recommender - C library for product recommendations/suggestions using collaborative filtering (CF). [BSD] RNNLIB - RNNLIB is a recurrent neural network library for sequence learning problems. [GPLv3] SHOGUN - The Shogun Machine Learning Toolbox. [GPLv3] sofia-ml - The suite of fast incremental algorithms for machine learning. [Apache2] VLFeat - The VLFeat open source library implements popular computer vision algorithms specialising in image understanding and local featurexs extraction and matching. [BSD-2-Clause] website xgboost - Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library, for Python, R, Java, Scala, C++ and more. Runs on single machine, Hadoop, Spark, Flink and DataFlow. [Apache2] Math Apophenia - A C library for statistical and scientific computing [GPL2] Armadillo - A high quality linear algebra library (matrix maths) for the C++ language, aiming towards a good balance between speed and ease of use. The syntax (API) is deliberately similar to Matlab. [MPL2] website blaze - high-performance C++ math library for dense and sparse arithmetic. [BSD] Boost.Multiprecision - provides higher-range/precision integer, rational and floating-point types in C++, header-only or with GMP/MPFR/LibTomMath backends. [Boost] ceres-solver - C++ library for modeling and solving large complicated nonlinear least squares problems from google. [BSD] CGAL - Collection of efficient and reliable geometric algorithms. [LGPL&GPL] website cml - free C++ math library for games and graphics. [Boost] Eigen - A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms. [MPL2] ExprTK - The C++ Mathematical Expression Toolkit Library (ExprTk) is a simple to use, easy to integrate and extremely efficient run-time mathematical expression parser and evaluation engine. [MIT] Geometric Tools - C++ library for computing in the fields of mathematics, graphics, image analysis and physics. [Boost] website GLM - Header-only C++ math library that matches and inter-operates with OpenGL's GLSL math. [MIT] GMTL - Graphics Math Template Library is a collection of tools implementing Graphics primitives in generalized ways. [GPL2] GMP - A C library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers. [LGPL3 & GPL2] MIRACL - A Multiprecision Integer and Rational Arithmetic Cryptographic Library. [AGPL] muparser - muParser is an extensible high performance math expression parser library written in C++. [MIT] NT2 - A SIMD-optimized numerical template library that provides an interface with MATLAB-like syntax. [Boost] LibTomMath - A free open source portable number theoretic multiple-precision integer library written entirely in C. [PublicDomain & WTFPL] website linmath.h - A lean linear math library, aimed at graphics programming. [WTFPL] OpenBLAS - An optimized BLAS library based on GotoBLAS2 1.13 BSD version. [BSD 3-clause] website QuantLib - A free/open-source library for quantitative finance. [Modified BSD] website StatsLib - A C++ header-only library of statistical distribution functions. [Apache2] website Vc - SIMD Vector Classes for C++. [BSD] Versor - A (fast) Generic C++ library for Geometric Algebras, including Euclidean, Projective, Conformal, Spacetime (etc). Wykobi - A C++ library of efficient, robust and simple to use C++ 2D/3D oriented computational geometry routines. [MIT] Multimedia GStreamer - A library for constructing graphs of media-handling components. [LGPL] LIVE555 Streaming Media - Multimedia streaming library using open standard protocols (RTP/RTCP, RTSP, SIP). [LGPL] libVLC - libVLC (VLC SDK) media framework. [GPL] MediaInfoLib - Convenient unified display of the most relevant technical and tag data for video and audio files. [BSD] QtAv - A multimedia playback framework based on Qt and FFmpeg to write a player easily. [LGPL] website SDL :zap: - Simple DirectMedia Layer. [zlib] SFML :zap: - Simple and Fast Multimedia Library. [zlib] website Networking ACE - An OO Network Programming Toolkit in C++. [?MIT?] Boost.Asio :zap: - A cross-platform C++ library for network and low-level I/O programming. [Boost] Breep - Event based, high-level C++14 peer-to-peer library. [EUPL-1.1 (OSI approved)] C++ REST SDK - C++ REST SDK (previously named Casablanca). [Apache2] Restbed - C++11 Asynchronous RESTful framework. [AGPL] cpp-netlib - A collection of open-source libraries for high level network programming. [Boost] cpr - A modern C++ HTTP requests library with a simple but powerful interface. Modeled after the Python Requests module. [MIT] website curlcpp - An object oriented C++ wrapper for CURL(libcurl). [MIT] Dyad.c - Asynchronous networking for C. [MIT] ENet - Reliable UDP networking library. [MIT] website evpp - C++ high performance networking with TCP/UDP/HTTP protocols. [BSD] HTTP Parser :zap: - A http request/response parser for C. [MIT] libcurl - Multiprotocol file transfer library. [MIT/X derivate license] libjingle - Google talk voice and P2P interoperability library. [BSD] libquic - A QUIC protocol library extracted from Chromium's QUIC Implementation. [BSD] libwebsockets - A lightweight pure C WebSocket implementation that provides both client and server libraries. [LGPL2.1 + static link exception] website Mongoose - Extremely lightweight webserver. [GPL2] Muduo - A C++ non-blocking network library for multi-threaded server in Linux. [BSD] nghttp2 - HTTP/2 C Library. [MIT] website nope.c - A C language-based ultra-light software platform for scalable server-side and networking applications. Think node.js for C programmers. [GPL2] Onion - HTTP server library in C designed to be lightweight and easy to use. [Apache2/GPL2] POCO :zap: - C++ class libraries and frameworks for building network- and internet-based applications that run on desktop, server, mobile and embedded systems. [Boost] website Proxygen - Facebook's collection of C++ HTTP libraries including an easy to use HTTP server. [BSD] RakNet - A cross platform, open source, C++ networking engine for game programmers. [BSD] Seasocks - Simple, small, C++ embeddable webserver with WebSockets support. [BSD] Silicon - A high performance, middleware oriented C++14 http web framework. [MIT] Tuf\u00e3o - An asynchronous web framework for C++ built on top of Qt. [LGPL2] uWebSockets - \u00b5WS is one of the most lightweight, efficient & scalable WebSocket & HTTP server implementations available. [Zlib] wdt - An embeddedable library (and command line tool) aiming to transfer data between 2 systems as fast as possible over multiple TCP paths. [BSD-3-Clause] WebSocket++ - C++/Boost Asio based websocket client/server library. [BSD] PDF Libraries for parsing and manipulating PDF documents. libharu - A free, cross platform, open-sourced software library for generating PDF. [zlib] MuPDF - A lightweight PDF, XPS, and E-book viewer. [AGPL/Commercial] Poppler - Open-source multi-backend PDF rendering library based on the xpdf-3.0 code base. [GPLv2/GPLv3] Physics Dynamics simulation engines Box2D - A 2D physics engine for games. [BSD-like] Bullet - A 3D physics engine for games. [zlib] website Chipmunk - A fast and lightweight 2D game physics library. [MIT] website LiquidFun - A 2D physics engine for games. [BSD-like] Newton Dynamics - An integrated solution for real time simulation of physics environments. [zlib] ODE - Open Dynamics Engine - An open source, high performance library for simulating rigid body dynamics. [BSD&LGPL] ofxBox2d - openFrameworks wrapper for Box2D. [BSD-like] Simbody - High-performance C++ multibody dynamics/physics library for simulating articulated biomechanical and mechanical systems like vehicles, robots, and the human skeleton. [Apache2] Regular Expression CppVerbalExpressions - C++ regular expressions made easy. [MIT] PCRE - A regular expression C library inspired by the regular expression capabilities in Perl. [BSD] RE2 - A software library for regular expressions via a finite-state machine using automata theory. [BSD-3-Clause] SLRE - Super Light Regexp engine for C/C++. [GPLv2/Commercial] Robotics MOOS-IvP - A set of open source C++ modules for providing autonomy on robotic platforms, in particular autonomous marine vehicles. MRPT - Mobile Robot Programming Toolkit. [BSD] PCL - Point Cloud Library is a standalone, large scale, open project for 2D/3D image and point cloud processing [BSD] website Robotics Library (RL) - A self-contained C++ library for robot kinematics, motion planning and control. [BSD] RobWork - A collection of C++ libraries for simulation and control of robot systems. [Apache2] ROS - Robot Operating System provides libraries and tools to help software developers create robot applications. [BSD] Scientific Computing FFTW - A C library for computing the DFT in one or more dimensions. [GPL] GSL - GNU scientific library. [GPL] TileDB - Fast Dense and Sparse Multidimensional Array DBMS. [MIT] website Trilinos - High performance PDE solvers. [BSD] Torch - A scientific computing framework with wide support for machine learning algorithms that puts GPUs first. [BSD-3-Clause] website Scripting Boost.Python - A C++ library which enables seamless interoperability between C++ and the Python programming language. [Boost] cppimport - Import C++ files directly from Python! [MIT] CppSharp - Tools and libraries to glue C/C++ APIs to high-level languages. [MIT] ChaiScript - An easy to use embedded scripting language for C++. [BSD] website ctypes.sh - A foreign function interface for bash. [MIT] Cython - Cython is an optimising static compiler for both the Python programming language and the extended Cython programming language (based on Pyrex). It makes writing C extensions for Python as easy as Python itself. [Apache] website djinni - A tool for generating cross-language type declarations and interface bindings. [Apache2] Duktape - An embeddable Javascript engine with compact footprint. [MIT] website JavaCpp - The missing bridge between Java and native C++. [Apache2] libffi - A portable foreign-function interface library. [MIT] website Lua - A minimal and fast scripting engine for configuration files and basic application scripting. [MIT] luacxx - C++11 API for creating Lua bindings. [MIT] nbind - Magical headers that make your C++ library accessible from JavaScript. [MIT] pybind11 - Seamless operability between C++11 and Python. [BSD] SIP - C or C++ Bindings Generator for Python v2 and v3. [GPL] SWIG - A wrapper/interface Generator that let you link your c++ code to Javascript, Perl, PHP, Python, Tcl and Ruby. [GPL/Output not licensed] website V7 - An embedded JavaScript engine. [GPL2] V8 - A fast JavaScript engine by Google that can be embedded into any C++ application. [BSD] ChakraCore -A JavaScript engine by Microsoft that can be embedded into nodejs. [MIT] Serialization cereal - A C++11 library for serialization. [BSD] cppcodec - Header-only C++11 library to encode/decode base64, base32 and hex with consistent, flexible API. [MIT] FlatBuffers - A Memory efficient serialization library. [Apache2] MessagePack - Efficient binary serialization format \"like JSON\" for C and C++. [Apache2] website protobuf - Protocol Buffers - Google's data interchange format. [BSD] protobuf-c - Protocol Buffers implementation in C. [BSD] SimpleBinaryEncoding - encoding and decoding application messages in binary format for low-latency applications. [Apache2] Sorting Timsort - A templated stable sorting function which outperforms quicksort-based algorithms including std::sort, for reversed or semi-sorted data. [MIT] Video libvpx - VP8/VP9 Codec SDK. [BSD] FFmpeg - A complete, cross-platform solution to record, convert and stream audio and video. [LGPL2/GPL2] libde265 - Open h.265 video codec implementation. [LGPL] website OpenH264 - Open Source H.264 Codec. [BSD] website Theora - A free and open video compression format. [BSD] Vireo - A lightweight and versatile video processing library by Twitter. [MIT] Virtual Machines CarpVM - \"interesting\" VM in C. Let's see how this goes. [GPLv3] MicroPython - Aims to put an implementation of Python 3.x on a microcontroller. [MIT] TinyVM - A small, fast, lightweight virtual machine written in pure ANSI C. [MIT] Web Application Framework Civetweb - Provides easy to use, powerful, C/C++ embeddable web server with optional CGI, SSL and Lua support. [MIT] CppCMS - A Free High Performance Web Development Framework (not a CMS). [LGPLv3] Crow - Crow is C++ micro web framework (inspired by Python Flask). [BSD] Cutelyst - A C++ Web Framework built on top of Qt, using the simple approach of Catalyst (Perl) framework. [LGPLv2.1+] website Kore - ultra fast and flexible web server / framework for web applications developed in C. [ISC] libOnion - lightweight library to help you create webservers in C programming language. [LGPLv3] lwan - Experimental, scalable, high performance HTTP server. [GPL2] Pistache - Pistache is a C++ REST framework written in pure C++11 with no external dependency. [Apache2] QDjango - A web framework written in C++ and built on top of the Qt library. Where possible it tries to follow django's API, hence its name. [LGPL] TreeFrog Framework - High-speed and full-stack web application framework based on C++ and Qt, which supports HTTP and WebSocket protocol (with O/R mapping). [BSD] website Wt - A C++ library for developing web applications. [GPL/Commercial] XML XML is crap. Really. There are no excuses. XML is nasty to parse for humans, and it's a disaster to parse even for computers. There's just no reason for that horrible crap to exist. - Linus Torvalds Boost.PropertyTree - A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost] Expat - An XML parser library written in C. [MIT] Libxml2 - The XML C parser and toolkit of Gnome. [MIT] libxml++ - An XML Parser for C++. [LGPL2] PugiXML - A light-weight, simple and fast XML parser for C++ with XPath support. [MIT] RapidXml - An attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. [Boost] TinyXML - A simple, small, minimal, C++ XML parser that can be easily integrating into other programs. [zlib] TinyXML2 - A simple, small, efficient, C++ XML parser that can be easily integrating into other programs. [zlib] TinyXML++ - A completely new interface to TinyXML that uses MANY of the C++ strengths. Templates, exceptions, and much better error handling. [MIT] Xerces-C++ - A validating XML parser written in a portable subset of C++. [Apache2] Miscellaneous Useful libraries or tools that don't fit in the categories above or maybe just not categorised yet access_profiler - A tool to count accesses to member variables in c++ programs. [GPL3] American fuzzy lop a.k.a. afl-fuzz - Crazy fuzzing tool that automatically discovers bugs given time and minimal example input. [Apache2] Better Enums - Reflective enums (to string, iteration). Single header. [BSD] website Better String - An alternative to the string library for C which is more functional and does not have buffer overflow overrun problems. Also includes a C++ wrapper. [BSD, GPL2] Boost.Signals - An implementation of a managed signals and slots system. [Boost] {fmt} :zap: - Small, safe and fast formatting library for C++. [Simplified BSD] FastFormat - Fast, Safe C++ Formatting inspired by log4j and Pantheios [Simplified BSD] casacore - A set of c++ core libraries derived from aips++. [LGPL] QtVerbalExpressions - This Qt lib is based off of the C++ VerbalExpressions library. [MIT] c-smart-pointers - Smart pointers for the (GNU) C programming language. [MIT] cxx-prettyprint - A pretty printing library for C++ containers. [Boost] DynaPDF - An easy-to-use PDF generation library. [Commercial] gcc-poison - A simple header file for developers to ban unsafe C/C++ functions from applications. Kangaru - A dependency injection container for C++11 and C++14. [MIT] Klib - Small and lightweight implementations of common algorithms and data structures. [MIT] libsigc++ - A typesafe callback system for standard C++. [LGPL] libcpuid - A small C library for x86 CPU detection and feature extraction. [BSD] libevil - The Evil License Manager. [GPLv3] libnih - A lightweight library of C functions and structures. [GPL2.1] libusb - A universal USB library which allows for portable access to USB devices. [LGPL2] Mach7 - A Pattern-matching library for C++. [BSD] pdqsort - Pattern-defeating quicksort. [zlib] PHP-CPP - A library to build PHP extensions with C++. [Apache2] website Remote Call Framework - Inter-process communication framework for C++. [GPL2/Commercial] Scintilla - A free source code editing component. [MIT] SDS - Simple Dynamic Strings library for C. [BSD] semver.c - A semver parser and render in ANSI C. [MIT] Serial Communication Library - Cross-platform, Serial Port library written in C++. [MIT] sigslot - C++ Signal/Slot Library. [PublicDomain] Stage - Mobile robot simulator. [GPL2] stdman Formatted C++11/14 stdlib man pages (from cppreference). [MIT] stb :zap: - A range of single-file libraries for C/C++. [PublicDomain] StrTk - A C++ library consisting of high performance string processing routines. [MIT] ub-canaries - A collection of C/C++ programs that try to get compilers to exploit undefined behavior. value-category-cheatsheet A PDF cheatsheet for lvalues, rvalues, and the like. [Jank copyleft] VarTypes - A feature-rich, object-oriented framework for managing variables in C++ / Qt4. [LGPL] ZBar - A barcode scanner library, which allows to scan photos/images/video streams for barcodes and return their value. [LGPL2] ZXing - An open-source, multi-format 1D/2D barcode image processing library implemented in Java, with ports to other languages. [Apache] Software Software for creating a development environment. Compiler List of C or C++ compilers 8cc - A Small C Compiler. c - Compile and execute C \"scripts\" in one go! [MIT] Clang - A C compiler for LLVM. Supports C++11/14/1z C11. Developed by LLVM Team. [NCSA] GCC - GNU Compiler Collection. Supports C++11/14/1z C11 and OpenMP. [GNU GPL3] PCC - A very old C compiler. Supports C99. Intel C++ Compiler - Developed by Intel. LLVM - Collection of modular and reusable compiler and toolchain technologies. Microsoft Visual C++ - MSVC, developed by Microsoft. Open WatCom - Watcom C, C++, and Fortran cross compilers and tools. [Sybase Open Watcom Public License] Oracle Solaris Studio - C, C++ and Fortran compiler for SPARC and x86. Supports C++11. Available on Linux and Solaris. [OTN Developer License] TCC - Tiny C Compiler. [LGPL] Online Compiler List of online C or C++ compilers codepad - An online compiler/interpreter, and a simple collaboration tool. CodeTwist - A simple online compiler/interpreter, where you can paste your C, C++ or Java code and execute it online and see results. coliru - Online compiler/shell with support for various C++ compilers. Compiler Explorer - An interactive compiler with assembly output available. CompileOnline - Compile and Execute C++ online on Linux. Ideone - An online compiler and debugging tool which allows you to compile source code and execute it online in more than 60 programming languages. repl.it - A powerful yet simple tools and platforms for educators, learners, and developers. Rextester - Online compiler which provides several compilers(Clang, GCC, MSVC) and several editors. Rise4Fun - Online Visual C++ compiler. Wandbox - An online Clang/GCC compiler with Boost available. Debugger List of C or C++ debuggers Comparison of debuggers - A list of Debuggers from Wikipedia. GDB - GNU Debugger. LLDB - The LLDB Debugger. Metashell - An interactive template metaprogramming shell which includes the MDB metadebugger. Valgrind - A tool for memory debugging, memory leak detection, and profiling. x64dbg - An open-source x64/x32 debugger for windows. Integrated Development Environment List of C or C++ nominal IDEs. Anjuta DevStudio - The GNOME IDE. [GPL3] AppCode - an IDE for Objective-C, C, C++, and JavaScript development built on JetBrains\u2019 IntelliJ IDEA platform. Cevelop - Cross-platform C and C++ IDE based on Eclipse CDT with additional plug-ins. CLion - Cross-platform C and C++ IDE from JetBrains. Code::Blocks - A free C, C++ and Fortran IDE. CodeLite - Another cross-plaform, free C and C++ IDE. [GPL2 with an exception for plugins] color_coded - A vim plugin for libclang-based highlighting. [MIT] Dev-C++ - A portable C/C++/C++11 IDE. Eclipse CDT - A fully functional C and C++ IDE based on the Eclipse platform. Geany - Small, fast, cross-platform IDE. [GPL] IBM VisualAge - A family of computer integrated development environments from IBM. Irony-mode - A C/C++ minor mode for Emacs powered by libclang. juCi++ - Cross-platform, lightweight C++ IDE with libclang integration. [MIT] KDevelop - A free, open source IDE. Microsoft Visual Studio - An IDE from Microsoft. NetBeans - An IDE for developing primarily with Java, but also with other languages, in particular PHP, C/C++, and HTML5. Qt Creator :zap: - A cross-platform C++, JavaScript and QML IDE which is part of the SDK for Qt. rtags - A c/c++ client/server indexer with for integration with emacs based on clang. Xcode - Developed by Apple. YouCompleteMe - YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim. cquery - A C++ code completion engine for vscode, emacs, vim, etc. Build Systems Bazel - A multi-language, fast and scalable build system from Google. [Apache] Bear - A tool to generate compilation database for clang tooling. [GPLv3] cget - Cmake package retrieval used to download and install cmake packages. [Boost] clib - Package manager for the C programming language. [MIT] CMake - Cross-platform free and open-source software for managing the build process of software using a compiler-independent method. [BSD] C++ Archive Network - Cross-platform C++ Dependency Manager with a lot of packages available. Conan - C/C++ Package Manager, open sourced. [MIT] CPM - A C++ Package Manager based on CMake and Git. FASTBuild - High performance, open-source build system supporting highly scalable compilation, caching and network distribution. Hunter - CMake driven cross-platform package manager for C++. [BSD-2] MesonBuild - An open source build system meant to be both extremely fast, and, even more importantly, as user friendly as possible. Ninja - A small build system with a focus on speed. Scons - A software construction tool configured with a Python script. Sconsolidator - Scons build system integration for Eclipse CDT. Spack - A flexible package manager that supports multiple versions, configurations, platforms, and compilers. [LGPLv2.1] tundra - High-performance code build system designed to give the best possible incremental build times even for very large software projects. tup - File-based build system that monitors in the background for changed files. Premake - A tool configured with a Lua script to generate project files for Visual Studio, GNU Make, Xcode, Code::Blocks, and more across Windows, Mac OS X, and Linux. Vcpkg - VC++ Packaging Tool for Windows. waf - Python-based framework for configuring, compiling and installing applications. [BSD] website Static Code Analysis List of tools for improving quality and reducing defects by code analysis Cppcheck - A tool for static C/C++ code analysis. - source CppDepend - Simplifies managing a complex C/C++ code base by analyzing and visualizing code dependencies, by defining design rules, by doing impact analysis, and comparing different versions of the code. PVS-Studio - A tool for bug detection in the source code of programs, written in C, C++ and C#. cpp-dependencies - Tool to check C++ #include dependencies (dependency graphs created in .dot format). [Apache] include-what-you-use - A tool for use with clang to analyze includes in C and C++ source files. website Infer - A static analyzer for Java, C and Objective-C. [BSD] OCLint - A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C. - source Clang Static Analyzer - A source code analysis tool that finds bugs in C, C++, and Objective-C programs. Linticator - Eclipse CDT integration of Pc-/FlexeLint. List of tools for static code analysis - A list of tools for static code analysis from Wikipedia. Coding Style Tools ClangFormat - A tool to format C/C++/Obj-C code. Clang-Tidy - Clang-based C++ linter tool. Uncrustify - Code beautifier. Resources Various resources, such as books, websites, and articles for improving your C++ development skills and knowledge. API Design Beautiful Native Libraries Designing Qt-Style C++ APIs Articles Fantastic C++ related articles. CppCon 2017 Presentation Materials - CppCon 2017 Presentation Materials. CppCon 2016 Presentation Materials - CppCon 2016 Presentation Materials. CppCon 2015 Presentation Materials - CppCon 2015 Presentation Materials. CppCon 2014 Presentation Materials - CppCon 2014 Presentation Materials. C++Now 2017 Presentations - Presentation materials presented at C++Now 2017. C++Now 2016 Presentations - Presentation materials presented at C++Now 2016. C++Now 2015 Presentations - Presentation materials presented at C++Now 2015. C++Now 2014 Presentations - Presentation materials presented at C++Now 2014. C++Now 2013 Presentations - Presentation materials presented at C++Now 2013. C++Now 2012 Presentations - Presentation materials presented at C++Now 2012. Books Fantastic C or C++ related books. List of Free C or C++ Books Free C Books - vhf/free-programming-books/C. Free C++ Books - vhf/free-programming-books/C++. cppbestpractices - Collaborative Collection of C++ Best Practices. Coding Style C++ Core Guidelines - \"Official\" set of C++ guidelines, reviewed by the author of C++. C++ Dos and Don'ts - The Chromium Projects > For Developers > Coding Style > C++ Dos and Don'ts. google-styleguide - Style guides for Google-originated open-source projects. Google C++ Style Guide GNU Coding Standard Linux kernel coding style LLVM Coding Standards Talks CppCon Talks :zap: - The C++ conference. Quick game development with C++11/C++14 - CppCon 2014 talk by Vittorio Romeo. Presentation on Hana for C++Now 2015 Videos Fantastic C or C++ related videos. List of C or C++ YouTube Videos Awesome C Programming Tutorials in Hi Def [HD] - A collection of detailed C Programming Language Tutorials for Beginners and New Programmers. C++ - by VoidRealms. C++ Qt Programming - by VoidRealms. C++ Programming Tutorials Playlist - TheNewBoston Official Buckys C++ Programming Tutorials Playlist. C++ Programming Tutorials from thenewboston - These are all of thenewboston's C++ programming tutorials. C++ GUI with Qt Playlist - Official Playlist for thenewboston C++ GUI with Qt tutorials. C Programming Tutorials - All of TheNewBoston's C programming tutorials are right here. Bo Qian's playlist - Boost Library, C++ Standard Library, Modern C++, Advanced C++, Advanced STL, ... Websites Useful C or C++ related websites. Standard C++ :zap: - News, Status & Discussion about Standard C++. CppCon - The C++ Conference. C++ reference - C++98, C++03, C++11, C++14 reference. cplusplus.com - The C++ Resources Network. C FAQ - C frequently asked questions. C++ FAQ - C++ frequently asked questions. C++ FQA Lite - C++ frequently questioned answers. Guru of the Week - A regular series of C++ programming problems created and written by Herb Sutter. Meeting C++ C++ Quiz - C++ quiz in which you propose to find errors in code fragments of open source projects. Udemy C++ Courses and Tutorials C++ Hints - Every business day hints about most often C++ mistakes and ways to solve them from PVS-Studio Team. C++ tutorial - A user ranked online tutorial bank site displaying multiple courses to learn C++ from. Weblogs Useful C or C++ related weblogs. Coding For Speed - Coding For Speed DOT COM, Less Execution Time. Eric Niebler Sticky Bits Paul Fultz II's Blog ridiculousfish - Will It Optimize? Embedded in Academia Other Awesome Projects Collection of useful codes, snippets, ... algorithms - Algorithms & Data Structures in C++. c-algorithms - C algorithms library. C++ Awesome Pack - Contains some awesome c++ codes, packed in one. Other Awesome Lists Other amazingly awesome lists lists - List of (awesome) lists curated on GitHub. awesome-awesomeness - A curated list of awesome awesomeness. awesome :zap: - A curated list of awesome lists. C++ links - A categorized list of C++ resources. Awesome C++ - getAwesomeness()'s mirror. Awesome C++ - LibHunt's mirror. Awesome C 1 Awesome C 2 AwesomePerfCpp - A curated list of awesome C/C++ performance optimization resources. free-programming-books - List of Freely Available Programming Books. Inqlude - The Qt library archive. papers-we-love - Papers from the computer science community to read and discuss. awesome-algorithms - A curated list of awesome places to learn and/or practice algorithms. awesome-talks - A lot of screencasts, recordings of user group gatherings and conference talks. Projects - A list of practical projects that anyone can solve in any programming language. Awesome interview questions - A list of lists of interview questions for the most popular technologies, including C and C++. nothings/single_file_libs :zap: - List of single-file C/C++ libraries. Contributing Please see CONTRIBUTING for details.","title":"Awesome C++"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#awesome-c","text":"A curated list of awesome C++ (or C) frameworks, libraries, resources, and shiny things. Inspired by awesome-... stuff. Awesome C++ Standard Libraries Frameworks Artificial Intelligence Asynchronous Event Loop Audio Biology BitTorrent CLI Compression Concurrency Containers Cryptography Database Debug Game Engine GUI Graphics Image Processing Internationalization Inter-process communication JSON Logging Machine Learning Math Multimedia Networking PDF Physics Regular Expression Robotics Scientific Computing Scripting Serialization Sorting Video Virtual Machines Web Application Framework XML Miscellaneous Software Compiler Online Compiler Debugger Integrated Development Environment Build Systems Static Code Analysis Coding Style Tools Resources API Design Articles Books Coding Style Videos Websites Other Awesome Lists Contributing","title":"Awesome C++"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#standard-libraries","text":"C++ Standard Library - including STL Containers, STL Aglorithm, STL Functional, etc. C++ Standard Library - A collection of classes and functions, which are written in the core language and part of the C++ ISO Standard itself. Standard Template Library - The Standard Template Library (STL). C POSIX library - A specification of a C standard library for POSIX systems. ISO C++ Standards Committee - ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee. website The GNU C Library - The purpose of this manual is to tell you how to use the facilities of the GNU C Library.","title":"Standard Libraries"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#frameworks","text":"C++ generic frameworks and libraries. abseil-cpp - Abseil C++ Common Libraries. [Apache2] Apache C++ Standard Library - STDCXX, A collection of algorithms, containers, iterators, and other fundamental components. [retired] [Apache2] APR - Apache Portable Runtime. Another library of cross-platform utility functions. [Apache2] ASL - Adobe Source Libraries provides peer-reviewed and portable C++ source libraries. [MIT] Boost :zap: - A large collection of generic C++ libraries. [Boost] website BDE - The BDE Development Environment from Bloomberg Labs. [Apache2] Cinder - A community-developed, free and open source library for professional-quality creative coding. [BSD] Cxxomfort - A small, header-only library that backports to C++03 some of the nifty C++11 goodies. [MIT] Dlib :zap: - A general purpose cross-platform C++ library designed using contract programming and modern C++ techniques. [Boost] website EASTL - Electronic Arts Standard Template Library. [BSD] ffead-cpp - Framework for Enterprise Application Development. [Apache2] Folly - An open-source C++ library developed and used at Facebook. [Apache2] FunctionalPlus - Functional Programming Library for C++. Write concise and readable C++ code. [MIT] GLib - GLib provides the core application building blocks for libraries and applications written in C. [LGPL] JUCE - An all-encompassing C++ class library for developing cross-platform software. [Core-Module: ISC, Rest: GPL2/GPL3/Commercial] website libPhenom - libPhenom is an eventing framework for building high performance and high scalability systems in C. [Apache2] LibSourcey - C++11 evented IO for real-time video streaming and high performance networking applications. [LGPL] LibU - A multiplatform utility library written in C. [BSD] Loki - A C++ library of designs, containing flexible implementations of common design patterns and idioms. [MIT] MiLi - Minimal headers-only C++ Library. [Boost] OpenFrameworks - A cross platform open source toolkit for creative coding in C++. [MIT] website Qt :zap: - A cross-platform application and UI framework. [GPL/LGPL/Commercial] Reason - A cross platform framework designed to bring the ease of use of Java, .Net, or Python to developers who require the performance and strength of C++. [GPL2] ROOT - A set of OO frameworks with all the functionality needed to handle and analyze large amounts of data in a very efficient way. Used at CERN. [LGPL] STLport - An exemplary version of STL. [Free] STXXL - Standard Template Library for Extra Large Data Sets. [Boost] tbox - A glib-like multi-platform c library. [Apache2] website Ultimate++ - A C++ cross-platform rapid application development framework. [BSD] uSTL - The small STL library. [MIT] Windows Template Library - A C++ library for developing Windows applications and UI components. [Public] Yomm2 - Fast, Orthogonal, Open multi-methods. Supersedes Yomm11 [Boost]","title":"Frameworks"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#artificial-intelligence","text":"ANNetGPGPU - A GPU (CUDA) based Artificial Neural Network library. [LGPL] btsk - Game Behavior Tree Starter Kit. [zlib] Evolving Objects - A template-based, ANSI-C++ evolutionary computation library which helps you to write your own stochastic optimization algorithms insanely fast. [LGPL] frugally-deep - Header-only library for using Keras models in C++. [MIT] Recast/Detour - (3D) Navigation mesh generator and pathfinder, mostly for games. [zlib] TensorFlow - An open source software library for numerical computation using data flow graphs [Apache] CNTK - Microsoft Cognitive Toolkit (CNTK), an open source deep-learning toolkit. [Boost] tiny-dnn - A header only, dependency-free deep learning framework in C++11. [BSD] Veles - Distributed platform for rapid Deep learning application development. [Apache] Kaldi - Toolkit for speech recognition. [Apache]","title":"Artificial Intelligence"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#asynchronous-event-loop","text":"Asio - A cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach. [Boost] website Boost.Asio - A cross-platform C++ library for network and low-level I/O programming. [Boost] C++ Actor Framework - An Open Source Implementation of the Actor Model in C++. [BSD-3-Clause] website libev - A full-featured and high-performance event loop that is loosely modelled after libevent, but without its limitations and bugs. [BSD and GPL] libevent - An event notification library. [BSD] libuv - Cross-platform asychronous I/O. [BSD] uvw - C++ wrapper for libuv. [MIT]","title":"Asynchronous Event Loop"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#audio","text":"Audio, Sound, Music, Digitized Voice Libraries FMOD - An easy to use crossplatform audio engine and audio content creation tool for games. [Free for non-commercial/Commercial] KFR - Fast, modern C++ DSP framework, FFT, FIR/IIR filters, Sample Rate Conversion. [GPL/Commercial] Maximilian - C++ Audio and Music DSP Library. [MIT] mini_al - Single file audio playback and capture library. [Unlicense] OpenAL - Open Audio Library - A crossplatform audio API. [BSD/LGPL/Commercial] Opus - A totally open, royalty-free, highly versatile audio codec. [BSD] SELA - SimplE Lossless Audio. [MIT] SoLoud - Easy, portable audio engine for games. [zlib] Speex - A free codec for free speech. Obsoleted by Opus. [BSD] Tonic - Easy and efficient audio synthesis in C++. [Unlicense] Vorbis - Ogg Vorbis is a fully open, non-proprietary, patent-and-royalty-free, general-purpose compressed audio format. [BSD] minimp3 - Public domain, header-only MP3 decoder with clean-room implementation. [CC0]","title":"Audio"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#biology","text":"Bioinformatics, Genomics, Biotech libsequence - A C++ library for representing and analyzing population genetics data. [GPL] SeqAn - Algorithms and data structures for the analysis of sequences with the focus on biological data. [BSD/3-clause] Vcflib - A C++ library for parsing and manipulating VCF files. [MIT] Wham - Structural variants (SVs) in Genomes by directly applying association tests to BAM files. [MIT]","title":"Biology"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#bittorrent","text":"jech/dht - BitTorrent DHT library in C. [MIT] libtorrent (a.k.a. libtorrent-rasterbar) - An efficient feature complete C++ bittorrent implementation. [BSD] LibTorrent (a.k.a. libtorrent-rakshasa) - BitTorrent library. [GPL] libutp - uTorrent Transport Protocol library. [MIT]","title":"BitTorrent"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#cli","text":"Console/Terminal User Interface, Command Line Interface Argh! - A minimalist, frustration-free, header-only argument handler. [BSD] Taywee/args - A simple header-only C++ argument parser library. [MIT] Boost.Program_options - A library to obtain program options via conventional methods such as command line and config file. [Boost] CLI11 - Header only single or multi-file C++11 library for simple and advanced CLI parsing. [BSD] jarro2783/cxxopts - Lightweight C++ command line option parser. [MIT] docopt.cpp - A library to generate option parser from docstring. [MIT/Boost] gflags - Commandline flags module for C++. [BSD] Ncurses - A terminal user interfaces. [MIT] PDCurses - Public domain curses library with both source code and pre-compiled library available. [PublicDomain] replxx - A readline and libedit replacement that supports UTF-8, syntax highlighting, hints, works on Unix and Windows. [BSD] TCLAP - A mature, stable and feature-rich library for defining and accessing command line arguments in ANSI C++. [MIT] termbox - A C library for writing text-based user interfaces. [BSD]","title":"CLI"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#compression","text":"Compression and Archiving Libraries Brotli - Brotli compression format. Developed by Google. [MIT] bzip2 - A freely available, patent free, high-quality data compressor. [BSD] FiniteStateEntropy - New generation entropy codecs : Finite State Entropy and Huff0. PhysicsFS - A library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3's file subsystem. [zlib] KArchive - A library for creating, reading, writing and manipulating file archives like zip and tar. It also provides transparent compression and decompression of data, using formats like gzip, via a subclass of QIODevice. [LGPL] LZ4 - Extremely Fast Compression algorithm. [BSD] LZFSE - LZFSE compression library and command line tool. Developed by Apple. LZHAM - Lossless data compression library with a compression ratio similar to LZMA but with much faster decompression. [BSD] LZMA :zap: - The default and general compression method of 7z format. [PublicDomain] LZMAT - An extremely fast real-time lossless data compression library. [GPL] miniz - Single C source file Deflate/Inflate compression library with zlib-compatible API, ZIP archive reading/writing, PNG writing. [Unlicense] Minizip - Zlib with latest bug fixes that supports PKWARE disk spanning, AES encryption, and IO buffering. [zlib] smaz - Small strings compression library. [BSD] Snappy - A fast compressor/decompressor. [BSD] ZLib - A very compact compression library for data streams. [zlib] zlib-ng - zlib for the \"next generation\" systems. Drop-In replacement with some serious optimizations. [zlib] zstd - Zstandard - Fast real-time compression algorithm. Developed by Facebook. [BSD] ZZIPlib - Provides read access on ZIP-archives. [MPL/LGPL]","title":"Compression"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#concurrency","text":"Concurrency and Multithreading alpaka - Abstraction library for parallel kernel acceleration. [LGPLv3+] ArrayFire - A general purpose GPU library. [BSD] Boost.Compute - A C++ GPU Computing Library for OpenCL. [Boost] Bolt - A C++ template library optimized for GPUs. [Apache2] ck - Concurrency primitives, safe memory reclamation mechanisms and non-blocking data structures. [BSD] concurrentqueue - A fast multi-producer, multi-consumer lock-free concurrent queue for C++11. [BSD,Boost] Cpp-Taskflow - Fast C++ Parallel Programming with Task Dependencies. [MIT] CUB - CUB provides state-of-the-art, reusable software components for every layer of the CUDA programming mode. [New BSD] cupla - C++ API to run CUDA/C++ on OpenMP, Threads, TBB, ... through Alpaka. [LGPLv3+] C++React - A reactive programming library for C++11. [Boost] Intel Parallel STL - Intel\u00ae implementation of C++17 STL for C++11 and above. [Apache2] Intel TBB - Intel\u00ae Threading Building Blocks. [Apache2] junction - A library of concurrent data structures in C++. [BSD] libcds - A C++ library of Concurrent Data Structures. [BSD] Libclsph - An OpenCL based GPU accelerated SPH fluid simulation library. [MIT] libdill - Introduces structured concurrency in C. [MIT] libmill - Introduces Go-style concurrency in C. [MIT] moderngpu - moderngpu is a productivity library for general-purpose computing on GPUs. It is a header-only C++ library written for CUDA. The unique value of the library is in its accelerated primitives for solving irregularly parallel problems. [FreeBSD & Copyright, Sean Baxter] NCCL - Optimized primitives for collective multi-GPU communication. [BSD] OpenCL - The open standard for parallel programming of heterogeneous systems. OpenMP - The OpenMP API. RaftLib - The RaftLib C++ library, streaming/dataflow concurrency via C++ iostream-like operators [Apache2] readerwriterqueue - A fast single-producer, single-consumer lock-free queue for C++. [BSD] Thrust - A parallel algorithms library which resembles the C++ Standard Template Library (STL). [Apache2] transwarp - A header-only C++ library for task concurrency. [MIT] HPX - A general purpose C++ runtime system for parallel and distributed applications of any scale. [Boost] VexCL - A C++ vector expression template library for OpenCL/CUDA. [MIT]","title":"Concurrency"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#containers","text":"C++ B-tree - A template library that implements ordered in-memory containers based on a B-tree data structure. [Apache2] Colony - An unordered \"bag\"-type container which outperforms std containers in high-modification scenarios while maintaining permanent pointers to non-erased elements regardless of insertion/erasure. [zLib] website Hashmaps - Implementation of open addressing hash table algorithms in C++. [MIT] Hopscotch map - A fast header-only hash map which uses hopscotch hashing for collisions resolution. [MIT] LSHBOX - A c++ toolbox of locality-sensitive hashing (LSH), provides several popular LSH algorithms, also support Python and MATLAB. [GPL] plf::list - A std::list implementation which removes range splicing in order to enable cache-friendlier structure, yielding significant performance gains. [zLib] website plf::stack - A replacement container for the std::stack container adaptor, with better performance than any std container in a stack context. [zLib] website ring_span lite - A simplified implementation of Arthur O'Dwyer's ring_span implementation ie. a circular buffer view. [MIT] sparsepp - A fast, memory efficient hash map for C++. [BSD 3-clause]","title":"Containers"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#cryptography","text":"Cryptography and Encryption Libraries Bcrypt - A cross platform file encryption utility. Encrypted files are portable across all supported operating systems and processors. [BSD] BeeCrypt - A portable and fast cryptography library. [LGPLv2.1+] Botan - A crypto library for C++. [BSD-2] Crypto++ - A free C++ class library of cryptographic schemes. [Boost] website digestpp - C++11 header-only message digest (hash) library. [PublicDomain] GnuPG - A complete and free implementation of the OpenPGP standard. [GPL] GnuTLS - A secure communications library implementing the SSL, TLS and DTLS protocols. [LGPL2.1] Libgcrypt - A general purpose cryptographic library originally based on code from GnuPG. [LGPLv2.1+] libhydrogen - A lightweight, secure, easy-to-use crypto library for constrained environments. [ISC] LibreSSL - A free version of the SSL/TLS protocol forked from OpenSSL in 2014. [?] libsodium - P(ortable|ackageable) NaCl-based crypto library, opinionated and easy to use. [ISC] LibTomCrypt - A fairly comprehensive, modular and portable cryptographic toolkit. [WTFPL] mbedTLS - An open source, portable, easy to use, readable and flexible SSL library, previously known as PolarSSL. [Apache2] website Nettle - A low-level cryptographic library. [LGPL] OpenSSL - A robust, commercial-grade, full-featured, and Open Source cryptography library. [Apache] website retter - A collection of hash functions, ciphers, tools, libraries, and materials related to cryptography. s2n - An implementation of the TLS/SSL protocols. [Apache] Tiny AES in C - Small portable AES128/192/256 in C. [PublicDomain] Themis - crypto library for painless data security, providing symmetric and asymmetric encryption, secure sockets with forward secrecy, for mobile and server platforms. [Apache2]","title":"Cryptography"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#database","text":"Database Libraries, SQL Servers, ODBC Drivers, and Tools hiberlite - C++ Object-relational mapping for sqlite3. [BSD] Hiredis - A minimalistic C client library for the Redis database. [BSD] LevelDB - A fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. [BSD] LMDB - Very fast embedded key/value store with full ACID semantics. [OpenLDAP] LMDB++ - C++11 wrapper for the LMDB embedded database library. [PublicDomain] MongoDB C Driver - MongoDB client library for C. [Apache2] MongoDB C++ Driver - C++ driver for MongoDB. [Apache2] MongoDB Libbson - A BSON utility library. [Apache2] MySQL++ - A C++ wrapper for MySQL's C API. [LGPL] redis3m - Wrapper of hiredis with clean C++ interface, supporting sentinel and ready to use patterns. [Apache2] RocksDB - Embedded key-value store for fast storage from facebook. [BSD] SimDB - High performance, shared memory, lock free, cross platform, single file, minimal dependencies, C++11 key-value store [Apache2] SQLite - A completely embedded, full-featured relational database in a few 100k that you can include right into your project. [PublicDomain] SQLiteC++ - SQLiteC++ (SQLiteCpp) is a smart and easy to use C++ SQLite3 wrapper. [MIT] sqlite_modern_cpp - Header only C++14 wrapper around sqlite library. [MIT] sqlite_orm - SQLite ORM light header only library for modern C++. [BSD-3-Clause] TileDB - Fast Dense and Sparse Multidimensional Array DBMS. [MIT] website upscaledb - An embedded \"typed\" key/value store with a built-in query interface. [GPLv3]","title":"Database"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#debug","text":"Debugging Libraries, Memory Leak and Resource Leak Detection, Unit Testing backward-cpp - A beautiful stack trace pretty printer for C++. [MIT] benchmark - Google provided small microbenchmark support library. [Apache2] Boost.Test - Boost Test Library. [Boost] doctest - The lightest feature rich C++ single header testing framework. [MIT] Catch - A modern, C++-native, header-only, framework for unit-tests, TDD and BDD. [Boost] Catch2 - A modern, C++-native, header-only, test framework for unit-tests, TDD and BDD. [BSL-1.0] Celero - C++ Benchmarking Framework. [Apache2] CppUTest - Unit testing and mocking framework for C/C++. [BSD-3-clause] CUTE - C++ Unit Testing Easier. [LGPL3] CMocka - unit testing framework for C with support for mock objects. [Apache2] CppUnit - C++ port of JUnit. [LGPL2] CTest - The CMake test driver program. [BSD] Deleaker - A tool for resource leak detection, including memory, GDI and handle leaks. fff - A micro-framework for creating fake C functions. [MIT] Google Mock - A library for writing and using C++ mock classes. [BSD] Google Test - Google C++ Testing Framework. [BSD] ig-debugheap - Multiplatform debug heap useful for tracking down memory errors. [BSD] libtap - Write tests in C. [GPL2] MemTrack - Tracking memory allocations in C++. microprofile - Profiler with web-view for multiple platforms. [PublicDomain] MinUnit - A minimal unit testing framework for C self-contained in a single header file. [MIT] Mockator - Eclipse CDT plug-in for C++ Seams and Mock Objects. Nanotimer - A simple low-overhead cross-platform timer class for benchmarking. [zLib] website Remotery - Single C File Profiler with Web Viewer. [Apache2] UnitTest++ - A lightweight unit testing framework for C++. [MIT/X Consortium license] utest.h - Single header unit testing framework for C and C++. [Unlicense] VLD - Visual Leak Detector. A free, robust, open-source memory leak detection system for Visual C++.","title":"Debug"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#game-engine","text":"Allegro - A cross-platform library mainly aimed for video games and multimedia programming. [zlib] Banshee 3D - Modern C++14 game engine with Vulkan support, fully featured editor and C# scripting. [LGPL3/Commercial] Cocos2d-x - A multi-platform framework for building 2d games, interactive books, demos and other graphical applications. [MIT] delta3d - A robust simulation platform. [LGPL2] EnTT - Gaming meets modern C++. [MIT] Flounder - A high speed C++17 Vulkan game engine. [MIT] GamePlay - A cross-platform native C++ game framework for creating 2D/3D mobile and desktop games. [Apache2] Godot - A fully featured, open source, MIT licensed, game engine. [MIT] Grit - Community project to build a free game engine for implementing open world 3D games. [MIT] KlayGE - a cross-platform open source game engine with plugin-based architecture. [GPLv2] website Oxygine - A cross-platform 2D C++ game engine. [MIT] Panda3D - A game engine, a framework for 3D rendering and game development for Python and C++ programs. [Modified BSD] website Polycode - A cross-platform framework for creative code in C++ (with Lua bindings). [MIT] website Torque2D - An open-source and cross-platform C++ engine built for 2D game development. [MIT] website Torque3D - An open-source C++ engine built for 3D game development. [MIT] website toy engine - toy is a thin and modular c++ game engine and offers simple expressive c++ idioms to design full featured 2D or 3D games in fast iterations. Urho3D - A free lightweight, cross-platform 2D and 3D game engine implemented in C++. Greatly inspired by OGRE and Horde3D. [MIT]","title":"Game Engine"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#gui","text":"Graphic User Interface CEGUI - Flexible, cross-platform GUI library. FLTK - Fast, light, cross-platform C++ GUI toolkit. [GPL2] GacUI - GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features. [Ms-PL] GTK+ - A multi-platform toolkit for creating graphical user interfaces. [LGPL] gtkmm - The official C++ interface for the popular GUI library GTK+. [LGPL] imgui - Immediate Mode Graphical User Interface with minimal dependencies. [MIT] libRocket - libRocket is a C++ HTML/CSS game interface middleware. [MIT] libui - Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports. [MIT] MyGUI - Fast, flexible and simple GUI. [MIT] nana - Nana is a cross-platform library for GUI programming in modern C++ style. [Boost] NanoGui - A minimalistic cross-platform widget library for OpenGL 3.x or higher. [BSD] nuklear - A single-header ANSI C gui library. [PublicDomain] QCustomPlot - Qt plotting widget without further dependencies. [GPLv3] Qwt - Qt Widgets for Technical Applications. [Own based on LGPL] QwtPlot3D - A feature-rich Qt/OpenGL-based C++ programming library, providing essentially a bunch of 3D-widgets. [zlib] Sciter - Sciter is an embeddable HTML/CSS/scripting engine aimed to be used as an UI layer of modern desktop applications. [Free/Commercial] wxWidgets - A C++ library that lets developers create applications for Windows, Mac OS X, Linux and other platforms with a single code base. [Own LGPL] Yue - A library for creating native cross-platform GUI apps. [LGPLv2]","title":"GUI"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#graphics","text":"bgfx - A cross-platform rendering library. [BSD] bs::framework - Modern C++14 library for the development of real-time graphical applications. [MIT] Cairo - A 2D graphics library with support for multiple output devices. [LGPL2 or Mozilla MPL] Diligent Engine - A modern cross-platform low-level 3D graphics library. [Apache2] DirectXTK - A collection of helper classes for writing DirectX 11.x code in C++. [MIT] GLFW - A simple, cross-platform OpenGL wrangling library. [zlib/libpng] herebedragons - A basic 3D scene implemented with various engines, frameworks or APIs. [MIT] website Horde3D - A small 3D rendering and animation engine. [EPL] Ion - A small and efficient set of libraries for building cross-platform client or server applications that use 3D graphics. [Apache2] website Irrlicht - A high performance realtime 3D engine written in C++. [zlib] libigl - Simple C++ geometry processing library. [MPL2] magnum - Lightweight and modular C++11/C++14 graphics middleware for games and data visualization. [MIT] website NanoVG - Antialiased 2D vector drawing library on top of OpenGL for UI and visualizations. [Zlib] Ogre 3D :zap: - A scene-oriented, real-time, flexible 3D rendering engine (as opposed to a game engine) written in C++. [MIT] OpenSceneGraph - An open source high performance 3D graphics toolkit. [OSGPL] OpenSubdiv - Pixar's library for evaluating and rendering subdivision surfaces on CPU and GPU. [Modified Apache2] OpenVDB - Library and tools for storing, editing, and rendering volumetric datasets. [MPL2] Panda3D - A framework for 3D rendering and game development for Python and C++. [BSD] Partio - Library for wrangling particle data, with support for most common file formats. [Modified BSD] Skia - A complete 2D graphic library for drawing Text, Geometries, and Images. [BSD] webpage urho3d - Cross-platform rendering and game engine. [Many different, mostly MIT]","title":"Graphics"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#image-processing","text":"Boost.GIL - Generic Image Library. CImg - A small, open source, C++ toolkit for image processing. [Own LGPL or GPL] CxImage - An image processing and conversion library to load, save, display, transform BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K images. [zlib] FreeImage - An open source library that supports popular graphics image formats and others as needed by today's multimedia applications. [GPL2 or GPL3] GD - GD Graphics Library, famously used in PHP for image loading/manipulation & thumbnail generation. [custom permissive license, requires mention in user docs] website DCMTK - DICOM Toolkit. GDCM - Grassroots DICOM library. ITK - An open-source, cross-platform system for image analysis. [Apache2 from ITK 4.0] libvips - A fast image processing library with low memory needs. [LGPL] website Magick++ - ImageMagick program interfaces for C++. [Apache2] MagickWnd - ImageMagick program interfaces for C. [Apache2] OpenCV :zap: - Open source computer vision. [BSD] OpenEXR - Cross-platform library for high dynamic range imaging. [Modified BSDF] OpenImageIO - Powerful image and texture wrangling library with support for a wide number of common lossy and RAW formats. [Modified BSD] tesseract-ocr - An OCR engine. [Apache2] TinyEXIF - Tiny ISO-compliant C++ EXIF and XMP parsing library for JPEG. [MIT] Video++ - A C++14 high performance video and image processing library. [MIT] VIGRA - A generic C++ computer vision library for image analysis. [MIT X11] VTK - Open-source, freely available software system for 3D computer graphics, image processing and visualization. [BSD]","title":"Image Processing"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#internationalization","text":"gettext - GNU `gettext'. [GPL2] IBM ICU - A set of C/C++ and Java libraries providing Unicode and Globalization support. [ICU] libiconv - An encoding conversion library between different character encodings. [GPL] utf8.h - Single header utf8 string functions for C and C++. [Unlicense]","title":"Internationalization"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#inter-process-communication","text":"Apache Thrift - Efficient cross-language IPC/RPC, works between C++, Java, Python, PHP, C#, and many more other languages. Originally developed by Facebook. [Apache2] Cap'n Proto - Fast data interchange format and capability-based RPC system. [MIT] gRPC - A high performance, open source, general-purpose RPC framework. [BSD] website libjson-rpc-cpp - JSON-RPC framework for C++ servers and clients. [MIT] nanomsg - A simple high-performance implementation of several \"scalability protocols\". [MIT] website simple-rpc-cpp - A simple RPC wrapper generator to C/C++ functions. [BSD] WAMP - Provides RPC and pub/sub messaging patterns. (various implementations, various languages) xmlrpc-c - A lightweight RPC library based on XML and HTTP. [BSD] ZeroMQ - High-speed, modular asynchronous communication library. [LGPL]","title":"Inter-process communication"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#json","text":"Boost.PropertyTree - A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost] frozen - JSON parser and generator for C/C++. [GPL & GPL2] Jansson - C library for encoding, decoding and manipulating JSON data. [MIT] jbson - jbson is a library for building & iterating BSON data, and JSON documents in C++14. [Boost] JeayeSON - A very sane (header only) C++ JSON library. [BSD] json :zap: - JSON for Modern C++. [MIT] JSON++ - A JSON parser in C++. [MIT] json.h - A simple one header/one source solution to parsing JSON in C and C++. [Unlicense] json-c - A JSON implementation in C. [MIT] JsonCpp - A C++ library for interacting with JSON. [MIT] json-parser - Very low footprint JSON parser written in portable ANSI C. [BSD] json11 - A tiny JSON library for C++11. [MIT] json-voorhees - JSON library for C++. Support for C++11. No dependencies, fast and dev-friendly. [Apache2] jute - Very simple C++ JSON Parser. [PublicDomain] libjson - A JSON parser and printer library in C. easy to integrate with any model. [LGPL] libjson - Lightweight JSON library. [?] LIBUCL :zap: - Universal configuration library parser [?] PicoJSON - A header-file-only, JSON parser serializer in C++. [BSD] qt-json - A simple class for parsing JSON data into a QVariant hierarchy and vice versa. [GPLv3] QJson - A qt-based library that maps JSON data to QVariant objects. [LGPL2] RapidJSON :zap: - A fast JSON parser/generator for C++ with both SAX/DOM style API. [MIT] ujson - \u00b5json is a a small, C++11, UTF-8, JSON library. [MIT] YAJL - A fast streaming JSON parsing library in C. [ISC]","title":"JSON"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#logging","text":"Blackhole - Attribute-based logging framework, which is designed to be fast, modular and highly customizable. [MIT] Boost.Log - Designed to be very modular and extensible. [Boost] Easylogging++ - Single header only, extremely light-weight high performance logging library for C++11 (or higher) applications. [MIT] website G3log - Asynchronous logger with Dynamic Sinks. [PublicDomain] glog - C++ implementation of the Google logging module. Log4cpp - A library of C++ classes for flexible logging to files, syslog, IDSA and other destinations. [LGPL] log4cplus - A simple to use C++ logging API providing thread-safe, flexible, and arbitrarily granular control over log management and configuration. [BSD & Apache2] loguru - A lightweight C++ logging library. [PublicDomain] plog - Portable and simple C++ logging library. [MPL2] reckless - Low-latency, high-throughput, asynchronous logging library for C++. [MIT] spdlog - Super fast, header only, C++ logging library. templog - A very small and lightweight C++ library which you can use to add logging to your C++ applications. [Boost]","title":"Logging"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#machine-learning","text":"Caffe - A fast framework for neural networks. [BSD] Caffe2 - A lightweight, modular, and scalable deep learning framework. [Apache2] website CCV - C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library. [BSD] Fido - A highly-modular C++ machine learning library for embedded electronics and robotics. [MIT] website MeTA - A modern C++ data sciences toolkit. [MIT] website Minerva - A fast and flexible system for deep learning. [Apache2] mlpack - A scalable c++ machine learning library. [LGPLv3] website OpenCV :zap: - Open Source Computer Vision Library. [BSD] website Recommender - C library for product recommendations/suggestions using collaborative filtering (CF). [BSD] RNNLIB - RNNLIB is a recurrent neural network library for sequence learning problems. [GPLv3] SHOGUN - The Shogun Machine Learning Toolbox. [GPLv3] sofia-ml - The suite of fast incremental algorithms for machine learning. [Apache2] VLFeat - The VLFeat open source library implements popular computer vision algorithms specialising in image understanding and local featurexs extraction and matching. [BSD-2-Clause] website xgboost - Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library, for Python, R, Java, Scala, C++ and more. Runs on single machine, Hadoop, Spark, Flink and DataFlow. [Apache2]","title":"Machine Learning"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#math","text":"Apophenia - A C library for statistical and scientific computing [GPL2] Armadillo - A high quality linear algebra library (matrix maths) for the C++ language, aiming towards a good balance between speed and ease of use. The syntax (API) is deliberately similar to Matlab. [MPL2] website blaze - high-performance C++ math library for dense and sparse arithmetic. [BSD] Boost.Multiprecision - provides higher-range/precision integer, rational and floating-point types in C++, header-only or with GMP/MPFR/LibTomMath backends. [Boost] ceres-solver - C++ library for modeling and solving large complicated nonlinear least squares problems from google. [BSD] CGAL - Collection of efficient and reliable geometric algorithms. [LGPL&GPL] website cml - free C++ math library for games and graphics. [Boost] Eigen - A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms. [MPL2] ExprTK - The C++ Mathematical Expression Toolkit Library (ExprTk) is a simple to use, easy to integrate and extremely efficient run-time mathematical expression parser and evaluation engine. [MIT] Geometric Tools - C++ library for computing in the fields of mathematics, graphics, image analysis and physics. [Boost] website GLM - Header-only C++ math library that matches and inter-operates with OpenGL's GLSL math. [MIT] GMTL - Graphics Math Template Library is a collection of tools implementing Graphics primitives in generalized ways. [GPL2] GMP - A C library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers. [LGPL3 & GPL2] MIRACL - A Multiprecision Integer and Rational Arithmetic Cryptographic Library. [AGPL] muparser - muParser is an extensible high performance math expression parser library written in C++. [MIT] NT2 - A SIMD-optimized numerical template library that provides an interface with MATLAB-like syntax. [Boost] LibTomMath - A free open source portable number theoretic multiple-precision integer library written entirely in C. [PublicDomain & WTFPL] website linmath.h - A lean linear math library, aimed at graphics programming. [WTFPL] OpenBLAS - An optimized BLAS library based on GotoBLAS2 1.13 BSD version. [BSD 3-clause] website QuantLib - A free/open-source library for quantitative finance. [Modified BSD] website StatsLib - A C++ header-only library of statistical distribution functions. [Apache2] website Vc - SIMD Vector Classes for C++. [BSD] Versor - A (fast) Generic C++ library for Geometric Algebras, including Euclidean, Projective, Conformal, Spacetime (etc). Wykobi - A C++ library of efficient, robust and simple to use C++ 2D/3D oriented computational geometry routines. [MIT]","title":"Math"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#multimedia","text":"GStreamer - A library for constructing graphs of media-handling components. [LGPL] LIVE555 Streaming Media - Multimedia streaming library using open standard protocols (RTP/RTCP, RTSP, SIP). [LGPL] libVLC - libVLC (VLC SDK) media framework. [GPL] MediaInfoLib - Convenient unified display of the most relevant technical and tag data for video and audio files. [BSD] QtAv - A multimedia playback framework based on Qt and FFmpeg to write a player easily. [LGPL] website SDL :zap: - Simple DirectMedia Layer. [zlib] SFML :zap: - Simple and Fast Multimedia Library. [zlib] website","title":"Multimedia"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#networking","text":"ACE - An OO Network Programming Toolkit in C++. [?MIT?] Boost.Asio :zap: - A cross-platform C++ library for network and low-level I/O programming. [Boost] Breep - Event based, high-level C++14 peer-to-peer library. [EUPL-1.1 (OSI approved)] C++ REST SDK - C++ REST SDK (previously named Casablanca). [Apache2] Restbed - C++11 Asynchronous RESTful framework. [AGPL] cpp-netlib - A collection of open-source libraries for high level network programming. [Boost] cpr - A modern C++ HTTP requests library with a simple but powerful interface. Modeled after the Python Requests module. [MIT] website curlcpp - An object oriented C++ wrapper for CURL(libcurl). [MIT] Dyad.c - Asynchronous networking for C. [MIT] ENet - Reliable UDP networking library. [MIT] website evpp - C++ high performance networking with TCP/UDP/HTTP protocols. [BSD] HTTP Parser :zap: - A http request/response parser for C. [MIT] libcurl - Multiprotocol file transfer library. [MIT/X derivate license] libjingle - Google talk voice and P2P interoperability library. [BSD] libquic - A QUIC protocol library extracted from Chromium's QUIC Implementation. [BSD] libwebsockets - A lightweight pure C WebSocket implementation that provides both client and server libraries. [LGPL2.1 + static link exception] website Mongoose - Extremely lightweight webserver. [GPL2] Muduo - A C++ non-blocking network library for multi-threaded server in Linux. [BSD] nghttp2 - HTTP/2 C Library. [MIT] website nope.c - A C language-based ultra-light software platform for scalable server-side and networking applications. Think node.js for C programmers. [GPL2] Onion - HTTP server library in C designed to be lightweight and easy to use. [Apache2/GPL2] POCO :zap: - C++ class libraries and frameworks for building network- and internet-based applications that run on desktop, server, mobile and embedded systems. [Boost] website Proxygen - Facebook's collection of C++ HTTP libraries including an easy to use HTTP server. [BSD] RakNet - A cross platform, open source, C++ networking engine for game programmers. [BSD] Seasocks - Simple, small, C++ embeddable webserver with WebSockets support. [BSD] Silicon - A high performance, middleware oriented C++14 http web framework. [MIT] Tuf\u00e3o - An asynchronous web framework for C++ built on top of Qt. [LGPL2] uWebSockets - \u00b5WS is one of the most lightweight, efficient & scalable WebSocket & HTTP server implementations available. [Zlib] wdt - An embeddedable library (and command line tool) aiming to transfer data between 2 systems as fast as possible over multiple TCP paths. [BSD-3-Clause] WebSocket++ - C++/Boost Asio based websocket client/server library. [BSD]","title":"Networking"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#pdf","text":"Libraries for parsing and manipulating PDF documents. libharu - A free, cross platform, open-sourced software library for generating PDF. [zlib] MuPDF - A lightweight PDF, XPS, and E-book viewer. [AGPL/Commercial] Poppler - Open-source multi-backend PDF rendering library based on the xpdf-3.0 code base. [GPLv2/GPLv3]","title":"PDF"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#physics","text":"Dynamics simulation engines Box2D - A 2D physics engine for games. [BSD-like] Bullet - A 3D physics engine for games. [zlib] website Chipmunk - A fast and lightweight 2D game physics library. [MIT] website LiquidFun - A 2D physics engine for games. [BSD-like] Newton Dynamics - An integrated solution for real time simulation of physics environments. [zlib] ODE - Open Dynamics Engine - An open source, high performance library for simulating rigid body dynamics. [BSD&LGPL] ofxBox2d - openFrameworks wrapper for Box2D. [BSD-like] Simbody - High-performance C++ multibody dynamics/physics library for simulating articulated biomechanical and mechanical systems like vehicles, robots, and the human skeleton. [Apache2]","title":"Physics"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#regular-expression","text":"CppVerbalExpressions - C++ regular expressions made easy. [MIT] PCRE - A regular expression C library inspired by the regular expression capabilities in Perl. [BSD] RE2 - A software library for regular expressions via a finite-state machine using automata theory. [BSD-3-Clause] SLRE - Super Light Regexp engine for C/C++. [GPLv2/Commercial]","title":"Regular Expression"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#robotics","text":"MOOS-IvP - A set of open source C++ modules for providing autonomy on robotic platforms, in particular autonomous marine vehicles. MRPT - Mobile Robot Programming Toolkit. [BSD] PCL - Point Cloud Library is a standalone, large scale, open project for 2D/3D image and point cloud processing [BSD] website Robotics Library (RL) - A self-contained C++ library for robot kinematics, motion planning and control. [BSD] RobWork - A collection of C++ libraries for simulation and control of robot systems. [Apache2] ROS - Robot Operating System provides libraries and tools to help software developers create robot applications. [BSD]","title":"Robotics"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#scientific-computing","text":"FFTW - A C library for computing the DFT in one or more dimensions. [GPL] GSL - GNU scientific library. [GPL] TileDB - Fast Dense and Sparse Multidimensional Array DBMS. [MIT] website Trilinos - High performance PDE solvers. [BSD] Torch - A scientific computing framework with wide support for machine learning algorithms that puts GPUs first. [BSD-3-Clause] website","title":"Scientific Computing"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#scripting","text":"Boost.Python - A C++ library which enables seamless interoperability between C++ and the Python programming language. [Boost] cppimport - Import C++ files directly from Python! [MIT] CppSharp - Tools and libraries to glue C/C++ APIs to high-level languages. [MIT] ChaiScript - An easy to use embedded scripting language for C++. [BSD] website ctypes.sh - A foreign function interface for bash. [MIT] Cython - Cython is an optimising static compiler for both the Python programming language and the extended Cython programming language (based on Pyrex). It makes writing C extensions for Python as easy as Python itself. [Apache] website djinni - A tool for generating cross-language type declarations and interface bindings. [Apache2] Duktape - An embeddable Javascript engine with compact footprint. [MIT] website JavaCpp - The missing bridge between Java and native C++. [Apache2] libffi - A portable foreign-function interface library. [MIT] website Lua - A minimal and fast scripting engine for configuration files and basic application scripting. [MIT] luacxx - C++11 API for creating Lua bindings. [MIT] nbind - Magical headers that make your C++ library accessible from JavaScript. [MIT] pybind11 - Seamless operability between C++11 and Python. [BSD] SIP - C or C++ Bindings Generator for Python v2 and v3. [GPL] SWIG - A wrapper/interface Generator that let you link your c++ code to Javascript, Perl, PHP, Python, Tcl and Ruby. [GPL/Output not licensed] website V7 - An embedded JavaScript engine. [GPL2] V8 - A fast JavaScript engine by Google that can be embedded into any C++ application. [BSD] ChakraCore -A JavaScript engine by Microsoft that can be embedded into nodejs. [MIT]","title":"Scripting"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#serialization","text":"cereal - A C++11 library for serialization. [BSD] cppcodec - Header-only C++11 library to encode/decode base64, base32 and hex with consistent, flexible API. [MIT] FlatBuffers - A Memory efficient serialization library. [Apache2] MessagePack - Efficient binary serialization format \"like JSON\" for C and C++. [Apache2] website protobuf - Protocol Buffers - Google's data interchange format. [BSD] protobuf-c - Protocol Buffers implementation in C. [BSD] SimpleBinaryEncoding - encoding and decoding application messages in binary format for low-latency applications. [Apache2]","title":"Serialization"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#sorting","text":"Timsort - A templated stable sorting function which outperforms quicksort-based algorithms including std::sort, for reversed or semi-sorted data. [MIT]","title":"Sorting"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#video","text":"libvpx - VP8/VP9 Codec SDK. [BSD] FFmpeg - A complete, cross-platform solution to record, convert and stream audio and video. [LGPL2/GPL2] libde265 - Open h.265 video codec implementation. [LGPL] website OpenH264 - Open Source H.264 Codec. [BSD] website Theora - A free and open video compression format. [BSD] Vireo - A lightweight and versatile video processing library by Twitter. [MIT]","title":"Video"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#virtual-machines","text":"CarpVM - \"interesting\" VM in C. Let's see how this goes. [GPLv3] MicroPython - Aims to put an implementation of Python 3.x on a microcontroller. [MIT] TinyVM - A small, fast, lightweight virtual machine written in pure ANSI C. [MIT]","title":"Virtual Machines"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#web-application-framework","text":"Civetweb - Provides easy to use, powerful, C/C++ embeddable web server with optional CGI, SSL and Lua support. [MIT] CppCMS - A Free High Performance Web Development Framework (not a CMS). [LGPLv3] Crow - Crow is C++ micro web framework (inspired by Python Flask). [BSD] Cutelyst - A C++ Web Framework built on top of Qt, using the simple approach of Catalyst (Perl) framework. [LGPLv2.1+] website Kore - ultra fast and flexible web server / framework for web applications developed in C. [ISC] libOnion - lightweight library to help you create webservers in C programming language. [LGPLv3] lwan - Experimental, scalable, high performance HTTP server. [GPL2] Pistache - Pistache is a C++ REST framework written in pure C++11 with no external dependency. [Apache2] QDjango - A web framework written in C++ and built on top of the Qt library. Where possible it tries to follow django's API, hence its name. [LGPL] TreeFrog Framework - High-speed and full-stack web application framework based on C++ and Qt, which supports HTTP and WebSocket protocol (with O/R mapping). [BSD] website Wt - A C++ library for developing web applications. [GPL/Commercial]","title":"Web Application Framework"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#xml","text":"XML is crap. Really. There are no excuses. XML is nasty to parse for humans, and it's a disaster to parse even for computers. There's just no reason for that horrible crap to exist. - Linus Torvalds Boost.PropertyTree - A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost] Expat - An XML parser library written in C. [MIT] Libxml2 - The XML C parser and toolkit of Gnome. [MIT] libxml++ - An XML Parser for C++. [LGPL2] PugiXML - A light-weight, simple and fast XML parser for C++ with XPath support. [MIT] RapidXml - An attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. [Boost] TinyXML - A simple, small, minimal, C++ XML parser that can be easily integrating into other programs. [zlib] TinyXML2 - A simple, small, efficient, C++ XML parser that can be easily integrating into other programs. [zlib] TinyXML++ - A completely new interface to TinyXML that uses MANY of the C++ strengths. Templates, exceptions, and much better error handling. [MIT] Xerces-C++ - A validating XML parser written in a portable subset of C++. [Apache2]","title":"XML"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#miscellaneous","text":"Useful libraries or tools that don't fit in the categories above or maybe just not categorised yet access_profiler - A tool to count accesses to member variables in c++ programs. [GPL3] American fuzzy lop a.k.a. afl-fuzz - Crazy fuzzing tool that automatically discovers bugs given time and minimal example input. [Apache2] Better Enums - Reflective enums (to string, iteration). Single header. [BSD] website Better String - An alternative to the string library for C which is more functional and does not have buffer overflow overrun problems. Also includes a C++ wrapper. [BSD, GPL2] Boost.Signals - An implementation of a managed signals and slots system. [Boost] {fmt} :zap: - Small, safe and fast formatting library for C++. [Simplified BSD] FastFormat - Fast, Safe C++ Formatting inspired by log4j and Pantheios [Simplified BSD] casacore - A set of c++ core libraries derived from aips++. [LGPL] QtVerbalExpressions - This Qt lib is based off of the C++ VerbalExpressions library. [MIT] c-smart-pointers - Smart pointers for the (GNU) C programming language. [MIT] cxx-prettyprint - A pretty printing library for C++ containers. [Boost] DynaPDF - An easy-to-use PDF generation library. [Commercial] gcc-poison - A simple header file for developers to ban unsafe C/C++ functions from applications. Kangaru - A dependency injection container for C++11 and C++14. [MIT] Klib - Small and lightweight implementations of common algorithms and data structures. [MIT] libsigc++ - A typesafe callback system for standard C++. [LGPL] libcpuid - A small C library for x86 CPU detection and feature extraction. [BSD] libevil - The Evil License Manager. [GPLv3] libnih - A lightweight library of C functions and structures. [GPL2.1] libusb - A universal USB library which allows for portable access to USB devices. [LGPL2] Mach7 - A Pattern-matching library for C++. [BSD] pdqsort - Pattern-defeating quicksort. [zlib] PHP-CPP - A library to build PHP extensions with C++. [Apache2] website Remote Call Framework - Inter-process communication framework for C++. [GPL2/Commercial] Scintilla - A free source code editing component. [MIT] SDS - Simple Dynamic Strings library for C. [BSD] semver.c - A semver parser and render in ANSI C. [MIT] Serial Communication Library - Cross-platform, Serial Port library written in C++. [MIT] sigslot - C++ Signal/Slot Library. [PublicDomain] Stage - Mobile robot simulator. [GPL2] stdman Formatted C++11/14 stdlib man pages (from cppreference). [MIT] stb :zap: - A range of single-file libraries for C/C++. [PublicDomain] StrTk - A C++ library consisting of high performance string processing routines. [MIT] ub-canaries - A collection of C/C++ programs that try to get compilers to exploit undefined behavior. value-category-cheatsheet A PDF cheatsheet for lvalues, rvalues, and the like. [Jank copyleft] VarTypes - A feature-rich, object-oriented framework for managing variables in C++ / Qt4. [LGPL] ZBar - A barcode scanner library, which allows to scan photos/images/video streams for barcodes and return their value. [LGPL2] ZXing - An open-source, multi-format 1D/2D barcode image processing library implemented in Java, with ports to other languages. [Apache]","title":"Miscellaneous"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#software","text":"Software for creating a development environment.","title":"Software"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#compiler","text":"List of C or C++ compilers 8cc - A Small C Compiler. c - Compile and execute C \"scripts\" in one go! [MIT] Clang - A C compiler for LLVM. Supports C++11/14/1z C11. Developed by LLVM Team. [NCSA] GCC - GNU Compiler Collection. Supports C++11/14/1z C11 and OpenMP. [GNU GPL3] PCC - A very old C compiler. Supports C99. Intel C++ Compiler - Developed by Intel. LLVM - Collection of modular and reusable compiler and toolchain technologies. Microsoft Visual C++ - MSVC, developed by Microsoft. Open WatCom - Watcom C, C++, and Fortran cross compilers and tools. [Sybase Open Watcom Public License] Oracle Solaris Studio - C, C++ and Fortran compiler for SPARC and x86. Supports C++11. Available on Linux and Solaris. [OTN Developer License] TCC - Tiny C Compiler. [LGPL]","title":"Compiler"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#online-compiler","text":"List of online C or C++ compilers codepad - An online compiler/interpreter, and a simple collaboration tool. CodeTwist - A simple online compiler/interpreter, where you can paste your C, C++ or Java code and execute it online and see results. coliru - Online compiler/shell with support for various C++ compilers. Compiler Explorer - An interactive compiler with assembly output available. CompileOnline - Compile and Execute C++ online on Linux. Ideone - An online compiler and debugging tool which allows you to compile source code and execute it online in more than 60 programming languages. repl.it - A powerful yet simple tools and platforms for educators, learners, and developers. Rextester - Online compiler which provides several compilers(Clang, GCC, MSVC) and several editors. Rise4Fun - Online Visual C++ compiler. Wandbox - An online Clang/GCC compiler with Boost available.","title":"Online Compiler"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#debugger","text":"List of C or C++ debuggers Comparison of debuggers - A list of Debuggers from Wikipedia. GDB - GNU Debugger. LLDB - The LLDB Debugger. Metashell - An interactive template metaprogramming shell which includes the MDB metadebugger. Valgrind - A tool for memory debugging, memory leak detection, and profiling. x64dbg - An open-source x64/x32 debugger for windows.","title":"Debugger"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#integrated-development-environment","text":"List of C or C++ nominal IDEs. Anjuta DevStudio - The GNOME IDE. [GPL3] AppCode - an IDE for Objective-C, C, C++, and JavaScript development built on JetBrains\u2019 IntelliJ IDEA platform. Cevelop - Cross-platform C and C++ IDE based on Eclipse CDT with additional plug-ins. CLion - Cross-platform C and C++ IDE from JetBrains. Code::Blocks - A free C, C++ and Fortran IDE. CodeLite - Another cross-plaform, free C and C++ IDE. [GPL2 with an exception for plugins] color_coded - A vim plugin for libclang-based highlighting. [MIT] Dev-C++ - A portable C/C++/C++11 IDE. Eclipse CDT - A fully functional C and C++ IDE based on the Eclipse platform. Geany - Small, fast, cross-platform IDE. [GPL] IBM VisualAge - A family of computer integrated development environments from IBM. Irony-mode - A C/C++ minor mode for Emacs powered by libclang. juCi++ - Cross-platform, lightweight C++ IDE with libclang integration. [MIT] KDevelop - A free, open source IDE. Microsoft Visual Studio - An IDE from Microsoft. NetBeans - An IDE for developing primarily with Java, but also with other languages, in particular PHP, C/C++, and HTML5. Qt Creator :zap: - A cross-platform C++, JavaScript and QML IDE which is part of the SDK for Qt. rtags - A c/c++ client/server indexer with for integration with emacs based on clang. Xcode - Developed by Apple. YouCompleteMe - YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim. cquery - A C++ code completion engine for vscode, emacs, vim, etc.","title":"Integrated Development Environment"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#build-systems","text":"Bazel - A multi-language, fast and scalable build system from Google. [Apache] Bear - A tool to generate compilation database for clang tooling. [GPLv3] cget - Cmake package retrieval used to download and install cmake packages. [Boost] clib - Package manager for the C programming language. [MIT] CMake - Cross-platform free and open-source software for managing the build process of software using a compiler-independent method. [BSD] C++ Archive Network - Cross-platform C++ Dependency Manager with a lot of packages available. Conan - C/C++ Package Manager, open sourced. [MIT] CPM - A C++ Package Manager based on CMake and Git. FASTBuild - High performance, open-source build system supporting highly scalable compilation, caching and network distribution. Hunter - CMake driven cross-platform package manager for C++. [BSD-2] MesonBuild - An open source build system meant to be both extremely fast, and, even more importantly, as user friendly as possible. Ninja - A small build system with a focus on speed. Scons - A software construction tool configured with a Python script. Sconsolidator - Scons build system integration for Eclipse CDT. Spack - A flexible package manager that supports multiple versions, configurations, platforms, and compilers. [LGPLv2.1] tundra - High-performance code build system designed to give the best possible incremental build times even for very large software projects. tup - File-based build system that monitors in the background for changed files. Premake - A tool configured with a Lua script to generate project files for Visual Studio, GNU Make, Xcode, Code::Blocks, and more across Windows, Mac OS X, and Linux. Vcpkg - VC++ Packaging Tool for Windows. waf - Python-based framework for configuring, compiling and installing applications. [BSD] website","title":"Build Systems"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#static-code-analysis","text":"List of tools for improving quality and reducing defects by code analysis Cppcheck - A tool for static C/C++ code analysis. - source CppDepend - Simplifies managing a complex C/C++ code base by analyzing and visualizing code dependencies, by defining design rules, by doing impact analysis, and comparing different versions of the code. PVS-Studio - A tool for bug detection in the source code of programs, written in C, C++ and C#. cpp-dependencies - Tool to check C++ #include dependencies (dependency graphs created in .dot format). [Apache] include-what-you-use - A tool for use with clang to analyze includes in C and C++ source files. website Infer - A static analyzer for Java, C and Objective-C. [BSD] OCLint - A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C. - source Clang Static Analyzer - A source code analysis tool that finds bugs in C, C++, and Objective-C programs. Linticator - Eclipse CDT integration of Pc-/FlexeLint. List of tools for static code analysis - A list of tools for static code analysis from Wikipedia.","title":"Static Code Analysis"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#coding-style-tools","text":"ClangFormat - A tool to format C/C++/Obj-C code. Clang-Tidy - Clang-based C++ linter tool. Uncrustify - Code beautifier.","title":"Coding Style Tools"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#resources","text":"Various resources, such as books, websites, and articles for improving your C++ development skills and knowledge.","title":"Resources"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#api-design","text":"Beautiful Native Libraries Designing Qt-Style C++ APIs","title":"API Design"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#articles","text":"Fantastic C++ related articles. CppCon 2017 Presentation Materials - CppCon 2017 Presentation Materials. CppCon 2016 Presentation Materials - CppCon 2016 Presentation Materials. CppCon 2015 Presentation Materials - CppCon 2015 Presentation Materials. CppCon 2014 Presentation Materials - CppCon 2014 Presentation Materials. C++Now 2017 Presentations - Presentation materials presented at C++Now 2017. C++Now 2016 Presentations - Presentation materials presented at C++Now 2016. C++Now 2015 Presentations - Presentation materials presented at C++Now 2015. C++Now 2014 Presentations - Presentation materials presented at C++Now 2014. C++Now 2013 Presentations - Presentation materials presented at C++Now 2013. C++Now 2012 Presentations - Presentation materials presented at C++Now 2012.","title":"Articles"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#books","text":"Fantastic C or C++ related books. List of Free C or C++ Books Free C Books - vhf/free-programming-books/C. Free C++ Books - vhf/free-programming-books/C++. cppbestpractices - Collaborative Collection of C++ Best Practices.","title":"Books"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#coding-style","text":"C++ Core Guidelines - \"Official\" set of C++ guidelines, reviewed by the author of C++. C++ Dos and Don'ts - The Chromium Projects > For Developers > Coding Style > C++ Dos and Don'ts. google-styleguide - Style guides for Google-originated open-source projects. Google C++ Style Guide GNU Coding Standard Linux kernel coding style LLVM Coding Standards","title":"Coding Style"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#talks","text":"CppCon Talks :zap: - The C++ conference. Quick game development with C++11/C++14 - CppCon 2014 talk by Vittorio Romeo. Presentation on Hana for C++Now 2015","title":"Talks"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#videos","text":"Fantastic C or C++ related videos. List of C or C++ YouTube Videos Awesome C Programming Tutorials in Hi Def [HD] - A collection of detailed C Programming Language Tutorials for Beginners and New Programmers. C++ - by VoidRealms. C++ Qt Programming - by VoidRealms. C++ Programming Tutorials Playlist - TheNewBoston Official Buckys C++ Programming Tutorials Playlist. C++ Programming Tutorials from thenewboston - These are all of thenewboston's C++ programming tutorials. C++ GUI with Qt Playlist - Official Playlist for thenewboston C++ GUI with Qt tutorials. C Programming Tutorials - All of TheNewBoston's C programming tutorials are right here. Bo Qian's playlist - Boost Library, C++ Standard Library, Modern C++, Advanced C++, Advanced STL, ...","title":"Videos"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#websites","text":"Useful C or C++ related websites. Standard C++ :zap: - News, Status & Discussion about Standard C++. CppCon - The C++ Conference. C++ reference - C++98, C++03, C++11, C++14 reference. cplusplus.com - The C++ Resources Network. C FAQ - C frequently asked questions. C++ FAQ - C++ frequently asked questions. C++ FQA Lite - C++ frequently questioned answers. Guru of the Week - A regular series of C++ programming problems created and written by Herb Sutter. Meeting C++ C++ Quiz - C++ quiz in which you propose to find errors in code fragments of open source projects. Udemy C++ Courses and Tutorials C++ Hints - Every business day hints about most often C++ mistakes and ways to solve them from PVS-Studio Team. C++ tutorial - A user ranked online tutorial bank site displaying multiple courses to learn C++ from.","title":"Websites"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#weblogs","text":"Useful C or C++ related weblogs. Coding For Speed - Coding For Speed DOT COM, Less Execution Time. Eric Niebler Sticky Bits Paul Fultz II's Blog ridiculousfish - Will It Optimize? Embedded in Academia","title":"Weblogs"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#other-awesome-projects","text":"Collection of useful codes, snippets, ... algorithms - Algorithms & Data Structures in C++. c-algorithms - C algorithms library. C++ Awesome Pack - Contains some awesome c++ codes, packed in one.","title":"Other Awesome Projects"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#other-awesome-lists","text":"Other amazingly awesome lists lists - List of (awesome) lists curated on GitHub. awesome-awesomeness - A curated list of awesome awesomeness. awesome :zap: - A curated list of awesome lists. C++ links - A categorized list of C++ resources. Awesome C++ - getAwesomeness()'s mirror. Awesome C++ - LibHunt's mirror. Awesome C 1 Awesome C 2 AwesomePerfCpp - A curated list of awesome C/C++ performance optimization resources. free-programming-books - List of Freely Available Programming Books. Inqlude - The Qt library archive. papers-we-love - Papers from the computer science community to read and discuss. awesome-algorithms - A curated list of awesome places to learn and/or practice algorithms. awesome-talks - A lot of screencasts, recordings of user group gatherings and conference talks. Projects - A list of practical projects that anyone can solve in any programming language. Awesome interview questions - A list of lists of interview questions for the most popular technologies, including C and C++. nothings/single_file_libs :zap: - List of single-file C/C++ libraries.","title":"Other Awesome Lists"},{"location":"Awesome/Awesome_CPP/Awesome_CPP/#contributing","text":"Please see CONTRIBUTING for details.","title":"Contributing"},{"location":"Awesome/Awesome_CPP/Books/","text":"C A Tutorial on Pointers and Arrays in C Advanced Linux Programming Beej's Guide to C Programming Beej's Guide to Network Programming Build Your Own Lisp C Programming - Wikibooks Deep C Essential C (PDF) Learn C the hard way Object Oriented Programming in C (PDF) The C book The Craft of Text Editing or A Cookbook for an Emacs - Craig A. Finseth The GNU C Programming Tutorial The New C Standard - An Annotated Reference TONC GBA Programming - Game Boy Advance Development Using C on the UNIX System - David A. Curry C++ C++ Annotations C++ Cookbook (PDF) C++ GUI Programming With Qt 3 C++ Succinctly, Syncfusion (PDF, Kindle) (Just fill the fields with any values) CS106X Programming Abstractions in C++ Data Structures and Algorithms with Object-Oriented Design Patterns in C++ Financial Numerical Recipes in C++ - Bernt Arne \u00d8degaard Game Programming Patterns Google's C++ Style Guide How To Think Like a Computer Scientist: C++ Version - Allen B. Downey Introduction to Design Patterns in C++ with Qt Learn C++. (PDF, Online) Matters Computational: Ideas, Algorithms, Source Code, by Jorg Arndt (PDF) Open Data Structures (In C++) (PDF) Software Design Using C++ - Br. David Carlson and Br. Isidore Minerd Software optimization resources by Agner Fog The Boost C++ libraries The Rook's Guide to C++ (PDF) Thinking in C++, Second Edition, Vol. 1. (Vol. 2) - Bruce Eckel Also see: The Definitive C++ Book Guide and List","title":"Books"},{"location":"Awesome/Awesome_CPP/Books/#c","text":"A Tutorial on Pointers and Arrays in C Advanced Linux Programming Beej's Guide to C Programming Beej's Guide to Network Programming Build Your Own Lisp C Programming - Wikibooks Deep C Essential C (PDF) Learn C the hard way Object Oriented Programming in C (PDF) The C book The Craft of Text Editing or A Cookbook for an Emacs - Craig A. Finseth The GNU C Programming Tutorial The New C Standard - An Annotated Reference TONC GBA Programming - Game Boy Advance Development Using C on the UNIX System - David A. Curry","title":"C"},{"location":"Awesome/Awesome_CPP/Books/#c_1","text":"C++ Annotations C++ Cookbook (PDF) C++ GUI Programming With Qt 3 C++ Succinctly, Syncfusion (PDF, Kindle) (Just fill the fields with any values) CS106X Programming Abstractions in C++ Data Structures and Algorithms with Object-Oriented Design Patterns in C++ Financial Numerical Recipes in C++ - Bernt Arne \u00d8degaard Game Programming Patterns Google's C++ Style Guide How To Think Like a Computer Scientist: C++ Version - Allen B. Downey Introduction to Design Patterns in C++ with Qt Learn C++. (PDF, Online) Matters Computational: Ideas, Algorithms, Source Code, by Jorg Arndt (PDF) Open Data Structures (In C++) (PDF) Software Design Using C++ - Br. David Carlson and Br. Isidore Minerd Software optimization resources by Agner Fog The Boost C++ libraries The Rook's Guide to C++ (PDF) Thinking in C++, Second Edition, Vol. 1. (Vol. 2) - Bruce Eckel Also see: The Definitive C++ Book Guide and List","title":"C++"},{"location":"Awesome/Awesome_CPP/Minor/","text":"Minor projects A list of lesser-known C or C++ libraries, tools, and resources. jest - A sane and minimal C++14 unit test framework. [MIT] libfixmath - A Cross Platform Fixed Point (Q16.16) Maths Library. [MIT] CallableTraits - Traits and metafunctions for callable types. [Boost]","title":"Minor"},{"location":"Awesome/Awesome_CPP/Minor/#minor-projects","text":"A list of lesser-known C or C++ libraries, tools, and resources. jest - A sane and minimal C++14 unit test framework. [MIT] libfixmath - A Cross Platform Fixed Point (Q16.16) Maths Library. [MIT] CallableTraits - Traits and metafunctions for callable types. [Boost]","title":"Minor projects"},{"location":"Awesome/Awesome_CPP/Videos/","text":"Modern C++: What You Need to Know - This talk will give an update on recent progress and near-future directions for C++, both at Microsoft and across the industry. This is a great introduction to the current state of the language, including a glimpse into the future of general purpose, performance-intensive, power-friendly, powerful native programming. [Apr 7, 2014] Bjarne Stroustrup - The Essence of C++ - Bjarne Stroustrup, creator and developer of C++, delivers his talk entitled, The Essence of C++. Stroustrup has held distinguished posts at Texas A&M University and spent significant time in the Computer Science Departments of Cambridge, Columbia and Princeton. [May 6, 2014]","title":"Videos"},{"location":"Clouds/Bastion/SSH-Proxy-nix/","text":"Connect through Bastion host on Nix To connect via Bastion host which work as SSH Proxy you need simple ssh config on your nix client machine: Config 1: Masked subnet vim ~/.ssh/config Host <bastion_name> Hostname <bastion_ip_addrese> Port 22 # ec2-user is standard for bastion host, of course it can be different User ec2-user IdentityFile ~/.ssh/<your-key> # Masked subnet which accessible through bastion only # Host 10.* # Host 172.16.0.* Host 192.168.* ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null Config 2: Host aliases Host <bastion_name> Hostname <bastion_ip_addrese> Port 22 User ec2-user IdentityFile ~/.ssh/<your-key> Host node0 Hostname 192.168.0.1 ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null Host node1 Hostname 192.168.0.2 ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null Host router0 Hostname 192.168.0.3 ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null Host router1 Hostname 192.168.0.4 ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null","title":"Connect through Bastion host on Nix"},{"location":"Clouds/Bastion/SSH-Proxy-nix/#connect-through-bastion-host-on-nix","text":"To connect via Bastion host which work as SSH Proxy you need simple ssh config on your nix client machine:","title":"Connect through Bastion host on Nix"},{"location":"Clouds/Bastion/SSH-Proxy-nix/#config-1-masked-subnet","text":"vim ~/.ssh/config Host <bastion_name> Hostname <bastion_ip_addrese> Port 22 # ec2-user is standard for bastion host, of course it can be different User ec2-user IdentityFile ~/.ssh/<your-key> # Masked subnet which accessible through bastion only # Host 10.* # Host 172.16.0.* Host 192.168.* ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null","title":"Config 1: Masked subnet"},{"location":"Clouds/Bastion/SSH-Proxy-nix/#config-2-host-aliases","text":"Host <bastion_name> Hostname <bastion_ip_addrese> Port 22 User ec2-user IdentityFile ~/.ssh/<your-key> Host node0 Hostname 192.168.0.1 ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null Host node1 Hostname 192.168.0.2 ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null Host router0 Hostname 192.168.0.3 ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null Host router1 Hostname 192.168.0.4 ProxyCommand ssh -W %h:%p <bastion_name> User <username> IdentityFile ~/.ssh/<your-key> StrictHostKeyChecking no UserKnownHostsFile=/dev/null","title":"Config 2: Host aliases"},{"location":"Clouds/Bastion/SSH-Proxy-win/","text":"Connect through Bastion host on Windows On Windows OpenSSH works as fine as on Linux hosts, but most of people using PyTTY as SSH client. So to connect via Bastion host which work as SSH Proxy with PuTTY, you need a litle bit complicated config. PyTTY config Create new session Go to Connection -> Data and set Auto-Login username to your remote username on hosts behind bastion Go to Connection -> Proxy and set up local proxy: Proxy type: Local Proxy hostname: sshproxy.example.com Port: 22 Username: ec2-user Telnet command: plink.exe -i \"<path_to_your_key>\" %user@%proxyhost -nc %host:%port Go to Connection -> SSH -> Auth and set up ssh key and auth params: Allow agen forwarding = True Allow attemted changes of username in SSH-2 = Tue Private key = <path_to_your_key> Thats all. Now you could use this session as template to your connections","title":"Connect through Bastion host on Windows"},{"location":"Clouds/Bastion/SSH-Proxy-win/#connect-through-bastion-host-on-windows","text":"On Windows OpenSSH works as fine as on Linux hosts, but most of people using PyTTY as SSH client. So to connect via Bastion host which work as SSH Proxy with PuTTY, you need a litle bit complicated config.","title":"Connect through Bastion host on Windows"},{"location":"Clouds/Bastion/SSH-Proxy-win/#pytty-config","text":"Create new session Go to Connection -> Data and set Auto-Login username to your remote username on hosts behind bastion Go to Connection -> Proxy and set up local proxy: Proxy type: Local Proxy hostname: sshproxy.example.com Port: 22 Username: ec2-user Telnet command: plink.exe -i \"<path_to_your_key>\" %user@%proxyhost -nc %host:%port Go to Connection -> SSH -> Auth and set up ssh key and auth params: Allow agen forwarding = True Allow attemted changes of username in SSH-2 = Tue Private key = <path_to_your_key> Thats all. Now you could use this session as template to your connections","title":"PyTTY config"},{"location":"Databases/MariaDB/Backup_and_Restore/","text":"Dump mysqldump db_name > backup-file.sql Restore mysql db_name < backup-file.sql","title":"Backup and Restore"},{"location":"Databases/MariaDB/Backup_and_Restore/#dump","text":"mysqldump db_name > backup-file.sql","title":"Dump"},{"location":"Databases/MariaDB/Backup_and_Restore/#restore","text":"mysql db_name < backup-file.sql","title":"Restore"},{"location":"Databases/MariaDB/Installation/","text":"MariaDB server 5.5 yum install mariadb-server vim /etc/my.cnf --- [mysqld] character-set-server=utf8 --- systemctl start mariadb systemctl enable mariadb mysql_secure_installation MariaDB server 10.1 yum install centos-release-scl yum --enablerepo=centos-sclo-rh install rh-mariadb101-mariadb-server scl enable rh-mariadb101 bash vim /etc/profile.d/rh-mariadb101.sh --- #!/bin/bash source /opt/rh/rh-mariadb101/enable export X_SCLS=\"`scl enable rh-mariadb101 'echo $X_SCLS'`\" --- vim /etc/opt/rh/rh-mariadb101/my.cnf.d/mariadb-server.cnf --- [mysqld] character-set-server=utf8 --- systemctl start rh-mariadb101-mariadb systemctl enable rh-mariadb101-mariadb mysql_secure_installation","title":"Installation"},{"location":"Databases/MariaDB/Installation/#mariadb-server-55","text":"yum install mariadb-server vim /etc/my.cnf --- [mysqld] character-set-server=utf8 --- systemctl start mariadb systemctl enable mariadb mysql_secure_installation","title":"MariaDB server 5.5"},{"location":"Databases/MariaDB/Installation/#mariadb-server-101","text":"yum install centos-release-scl yum --enablerepo=centos-sclo-rh install rh-mariadb101-mariadb-server scl enable rh-mariadb101 bash vim /etc/profile.d/rh-mariadb101.sh --- #!/bin/bash source /opt/rh/rh-mariadb101/enable export X_SCLS=\"`scl enable rh-mariadb101 'echo $X_SCLS'`\" --- vim /etc/opt/rh/rh-mariadb101/my.cnf.d/mariadb-server.cnf --- [mysqld] character-set-server=utf8 --- systemctl start rh-mariadb101-mariadb systemctl enable rh-mariadb101-mariadb mysql_secure_installation","title":"MariaDB server 10.1"},{"location":"Databases/MongoDB/Backup_and_restore/","text":"Backup # Gzipped archive mongodump --host \"ip_address_or_replicaset:port\" --db dataBaseName --gzip --archive=/path/to/archive/file.agz # BSON Folder mongodump --host \"ip_address_or_replicaset:port\" --db dataBaseName --out /path/to/backup/folder # With oplog mongodump --host \"ip_address_or_replicaset:port\" --oplog --gzip --archive=/path/to/archive/file.agz mongodump --host \"ip_address_or_replicaset:port\" --oplog --out /path/to/backup/folder Restore # Gzipped archive mongorestore --host \"ip_address_or_replicaset:port\" --db dataBaseName --drop --gzip --archive=/path/to/archive/file.agz # BSON Folder mongorestore --host \"ip_address_or_replicaset:port\" --db dataBaseName --drop /path/to/backup/folder # With oplog mongorestore --host \"ip_address_or_replicaset:port\" --oplogReplay --drop --gzip --archive=/path/to/archive/file.agz mongorestore --host \"ip_address_or_replicaset:port\" --oplogReplay --drop /path/to/backup/folder","title":"Backup and restore"},{"location":"Databases/MongoDB/Backup_and_restore/#backup","text":"# Gzipped archive mongodump --host \"ip_address_or_replicaset:port\" --db dataBaseName --gzip --archive=/path/to/archive/file.agz # BSON Folder mongodump --host \"ip_address_or_replicaset:port\" --db dataBaseName --out /path/to/backup/folder # With oplog mongodump --host \"ip_address_or_replicaset:port\" --oplog --gzip --archive=/path/to/archive/file.agz mongodump --host \"ip_address_or_replicaset:port\" --oplog --out /path/to/backup/folder","title":"Backup"},{"location":"Databases/MongoDB/Backup_and_restore/#restore","text":"# Gzipped archive mongorestore --host \"ip_address_or_replicaset:port\" --db dataBaseName --drop --gzip --archive=/path/to/archive/file.agz # BSON Folder mongorestore --host \"ip_address_or_replicaset:port\" --db dataBaseName --drop /path/to/backup/folder # With oplog mongorestore --host \"ip_address_or_replicaset:port\" --oplogReplay --drop --gzip --archive=/path/to/archive/file.agz mongorestore --host \"ip_address_or_replicaset:port\" --oplogReplay --drop /path/to/backup/folder","title":"Restore"},{"location":"Databases/MongoDB/Queries/","text":"Find by _id db.ticket.find({ \"field_name_with_id\" : ObjectId(\"--_id--\") });","title":"Queries"},{"location":"Databases/MongoDB/Queries/#find-by-_id","text":"db.ticket.find({ \"field_name_with_id\" : ObjectId(\"--_id--\") });","title":"Find by _id"},{"location":"Databases/MongoDB/Quick_Reference/","text":"Quick reference help db.help() show dbs show databases use <db> show collections db.<collection>.help() show users show roles show profile db.collection.find() db.collection.insert() db.collection.update() db.collection.save() db.collection.remove() db.collection.drop() db.collection.createIndex() db.getSiblingDB() Dump to JSON mongo --host <db_server> <db_name> -u <username> -p <password> << EOF > out.json db.File.files.find().pretty() EOF Connect mongo --host <db_server> <db_name> -u <username> -p <password>","title":"Quick Reference"},{"location":"Databases/MongoDB/Quick_Reference/#quick-reference","text":"help db.help() show dbs show databases use <db> show collections db.<collection>.help() show users show roles show profile db.collection.find() db.collection.insert() db.collection.update() db.collection.save() db.collection.remove() db.collection.drop() db.collection.createIndex() db.getSiblingDB()","title":"Quick reference"},{"location":"Databases/MongoDB/Quick_Reference/#dump-to-json","text":"mongo --host <db_server> <db_name> -u <username> -p <password> << EOF > out.json db.File.files.find().pretty() EOF","title":"Dump to JSON"},{"location":"Databases/MongoDB/Quick_Reference/#connect","text":"mongo --host <db_server> <db_name> -u <username> -p <password>","title":"Connect"},{"location":"Databases/MySQL/Replication/","text":"Replication # On Master: vim /etc/mysql/my.cnf: server-id = 2 log_bin = /var/lib/mysql-binlog/mysql-bin.log # SQL on master: mysql> grant replication slave on *.* to replica@'%' identified by '<password>'; mysql> flush privileges; mysql> exit # On Slave: vim /etc/mysql/my.cnf: server-id = 3 log_bin = /var/lib/mysql-binlog/mysql-bin.log # SQL on Slave mysql> change master to -> master_host='<master_server>', -> master_user='replica', -> master_password='<password>', -> master_log_file='<bin_log>', -> master_log_pos=<bin_log_position>;","title":"Replication"},{"location":"Databases/MySQL/Replication/#replication","text":"# On Master: vim /etc/mysql/my.cnf: server-id = 2 log_bin = /var/lib/mysql-binlog/mysql-bin.log # SQL on master: mysql> grant replication slave on *.* to replica@'%' identified by '<password>'; mysql> flush privileges; mysql> exit # On Slave: vim /etc/mysql/my.cnf: server-id = 3 log_bin = /var/lib/mysql-binlog/mysql-bin.log # SQL on Slave mysql> change master to -> master_host='<master_server>', -> master_user='replica', -> master_password='<password>', -> master_log_file='<bin_log>', -> master_log_pos=<bin_log_position>;","title":"Replication"},{"location":"Databases/Oracle/Blocking_sessions/","text":"Find all locking sessions SELECT * FROM v$lock; View all blocking sessions ver.1 SELECT s.blocking_session, s.sid, s.serial#, s.seconds_in_wait FROM v$session s WHERE blocking_session IS NOT NULL; View all blocking sessions ver.2 SELECT s1.username || '@' || s1.machine || ' ( SID=' || s1.sid || ' ) is blocking ' || s2.username || '@' || s2.machine || ' ( SID=' || s2.sid || ' ) ' AS blocking_status FROM v$lock l1, v$session s1, v$lock l2, v$session s2 WHERE s1.sid=l1.sid AND s2.sid=l2.sid AND l1.BLOCK=1 AND l2.request > 0 AND l1.id1 = l2.id1 AND l1.id2 = l2.id2; View SID and ID of blocking sessions SELECT sid, id1 FROM v$lock WHERE TYPE='TM'; View the name of blocking session SELECT object_name FROM dba_objects WHERE object_id=101482; Kill session: \" ALTER SYSTEM KILL SESSION 'SID,ID' \" ALTER SYSTEM KILL SESSION '1621,24543'; View all active sessions SELECT s.inst_id, s.sid, s.serial#, p.spid, s.username, s.program FROM gv$session s JOIN gv$process p ON p.addr = s.paddr AND p.inst_id = s.inst_id WHERE s.type != 'BACKGROUND';","title":"Blocking sessions"},{"location":"Databases/Oracle/Blocking_sessions/#find-all-locking-sessions","text":"SELECT * FROM v$lock;","title":"Find all locking sessions"},{"location":"Databases/Oracle/Blocking_sessions/#view-all-blocking-sessions-ver1","text":"SELECT s.blocking_session, s.sid, s.serial#, s.seconds_in_wait FROM v$session s WHERE blocking_session IS NOT NULL;","title":"View all blocking sessions ver.1"},{"location":"Databases/Oracle/Blocking_sessions/#view-all-blocking-sessions-ver2","text":"SELECT s1.username || '@' || s1.machine || ' ( SID=' || s1.sid || ' ) is blocking ' || s2.username || '@' || s2.machine || ' ( SID=' || s2.sid || ' ) ' AS blocking_status FROM v$lock l1, v$session s1, v$lock l2, v$session s2 WHERE s1.sid=l1.sid AND s2.sid=l2.sid AND l1.BLOCK=1 AND l2.request > 0 AND l1.id1 = l2.id1 AND l1.id2 = l2.id2;","title":"View all blocking sessions ver.2"},{"location":"Databases/Oracle/Blocking_sessions/#view-sid-and-id-of-blocking-sessions","text":"SELECT sid, id1 FROM v$lock WHERE TYPE='TM';","title":"View SID and ID of blocking sessions"},{"location":"Databases/Oracle/Blocking_sessions/#view-the-name-of-blocking-session","text":"SELECT object_name FROM dba_objects WHERE object_id=101482;","title":"View the name of blocking session"},{"location":"Databases/Oracle/Blocking_sessions/#kill-session-alter-system-kill-session-sidid","text":"ALTER SYSTEM KILL SESSION '1621,24543';","title":"Kill session: \" ALTER SYSTEM KILL SESSION 'SID,ID' \""},{"location":"Databases/Oracle/Blocking_sessions/#view-all-active-sessions","text":"SELECT s.inst_id, s.sid, s.serial#, p.spid, s.username, s.program FROM gv$session s JOIN gv$process p ON p.addr = s.paddr AND p.inst_id = s.inst_id WHERE s.type != 'BACKGROUND';","title":"View all active sessions"},{"location":"Databases/Oracle/CentOS_7_Installation/","text":"GUI yum groups install \"GNOME Desktop\" startx Database pre-requirements # Dependencies yum install binutils compat-libcap1 gcc gcc-c++ glibc glibc.i686 glibc-devel glibc.i686 ksh libaio libaio.i686 libaio-devel libaio-devel.i686 libgcc libgcc.i686 libstdc++ libstdc++l7.i686 libstdc++-devel libstdc++-devel.i686 compat-libstdc++-33 compat-libstdc++-33.i686 libXi libXi.i686 libXtst libXtst.i686 make sysstat # Kernel MEMTOTAL=$(free -b | sed -n '2p' | awk '{print $2}') SHMMAX=$(expr $MEMTOTAL / 2) PAGESIZE=$(getconf PAGE_SIZE) cat >> /etc/sysctl.conf << EOF fs.aio-max-nr = 1048576 fs.file-max = 6815744 kernel.shmmax = $SHMMAX kernel.shmall = `expr \\( $SHMMAX / $PAGESIZE \\) \\* \\( 4096 / 16 \\)` kernel.shmmni = 4096 kernel.sem = 250 32000 100 128 net.ipv4.ip_local_port_range = 9000 65500 net.core.rmem_default = 262144 net.core.rmem_max = 4194304 net.core.wmem_default = 262144 net.core.wmem_max = 1048576 EOF sysctl -p # Users and groups i=54321; for group in oinstall dba backupdba oper dgdba kmdba; do groupadd -g $i $group; i=`expr $i + 1` done useradd -u 1200 -g oinstall -G dba,oper,backupdba,dgdba,kmdba -d /home/oracle oracle passwd oracle # Folders mkdir -p /u01/app/oracle chown -R oracle:oinstall /u01/app chmod -R 775 /u01 vim /etc/pam.d/login # Insert after \"session required pam_namespace.so\": session required pam_limits.so vim /etc/security/limits.conf # Add to the end of file: oracle soft nproc 2047 oracle hard nproc 16384 oracle soft nofile 1024 oracle hard nofile 65536 oracle soft stack 10240 oracle hard stack 32768 su - oracle vim ~/.bash_profile # Add to the end umask 022 export ORACLE_BASE=/u01/app/oracle Database software installation # Upload installation software to /tmp: scp linuxamd64_12102_database_se2_1of2.zip oracle@db_server:/tmp/ scp linuxamd64_12102_database_se2_2of2.zip oracle@db_server:/tmp/ # Login to DB server with X-Forwarding enabled: ssh -Y oracle@db_server # Unpack archives: unzip linuxamd64_12102_database_se2_1of2.zip unzip linuxamd64_12102_database_se2_2of2.zip # Run Oracle universal installer cd database/ ./runInstaller Just follow installation steps in GUI: Step 01. Enter your E-Mail and Oracle Enterproise support password , if you have one Step 02. (.) Install database software only (we'll install database later) Step 03. Select parovriate type of installation. In simple case choose \"Single instance database installation\" Step 04. Choose prefered language. But English is recommended in all cases. Step 05. Select edidtion. It depends of distribution package. In this case Standard Edition Two Step 06. Choose path for oracle home directory. In our case everything will filled up by default. Step 07. Choose path for oracle inventory. In our case everything will filled up by default. Step 08. Choose oracle grroups. In our case everything will filled up by default. Step 09. On this step you'll face swap error in most cases. Just ignore it. In any other errors look at oracle forum. DO NOT IGNORE ANY ERRORS EXCEPT OF SWAP Step 10. Install oracle database software Step 11. On this step installater demand you to execute 2 spripts from root user. Just run them. Step 12. Finish vim ~/.bash_profile # Add to the end of file: export ORACLE_HOME=/u01/app/oracle/product/12.1.0/dbhome_1 export PATH=$PATH:$ORACLE_HOME/bin Net listener Just run netca from oracle user and follow steps of configuration wizard # Login to DB server with X-Forwarding enabled: ssh -Y oracle@db_server # Run Network listener configuration wizard: netca Database # Login to DB server with X-Forwarding enabled: ssh -Y oracle@db_server # Run Database configuration wizard: dbca Follow installation steps for fat installation: Step 01. Choose (.) Create database Step 02. (.) Create a database with default configuration Global Database name: input what name you like Storage type: File System (if you don't have ASM) Database character set: AL32UTF8 - Unicode UTF-8 Universal character set Choose password for sysdba account. Uncheck []Create As Container Database** Step 03. Look for any errors Step 04. Next Step 05. Finish vim /etc/oratab #Set last synbol from \"N\" to \"Y\" <database_SID>:/u01/app/oracle/product/12.1.0/dbhome_1:Y vim ~/.bash_profile # Add to the end of file: export ORACLE_SID=<database_SID> Autostart Oracle environemnt: vim /etc/sysconfig/<SID>.oracledb # Contents ORACLE_BASE=/u01/app/oracle ORACLE_HOME=/u01/app/oracle/product/12.1.0/dbhome_1 ORACLE_SID=<your_SID> Net listner service: vim /usr/lib/systemd/system/<SID>@lsnrctl.service # Contents [Unit] Description=Oracle Net Listener After=network.target [Service] Type=forking EnvironmentFile=/etc/sysconfig/<SID>.oracledb ExecStart=/u01/app/oracle/product/12.1.0/dbhome_1/bin/lsnrctl start ExecStop=/u01/app/oracle/product/12.1.0/dbhome_1/bin/lsnrctl stop User=oracle [Install] WantedBy=multi-user.target Database service: vim /usr/lib/systemd/system/<SID>@oracledb.service # Contents [Unit] Description=Oracle Database service After=network.target lsnrctl.service [Service] Type=forking EnvironmentFile=/etc/sysconfig/<SID>.oracledb ExecStart=/u01/app/oracle/product/12.1.0/dbhome_1/bin/dbstart /u01/app/oracle/product/12.1.0/dbhome_1 ExecStop=/u01/app/oracle/product/12.1.0/dbhome_1/bin/dbshut /u01/app/oracle/product/12.1.0/dbhome_1 User=oracle [Install] WantedBy=multi-user.target Systemd reload and enable: systemctl daemon-reload systemctl enable <SID>@lsnrctl systemctl enable <SID>@oracledb","title":"CentOS 7 Installation"},{"location":"Databases/Oracle/CentOS_7_Installation/#gui","text":"yum groups install \"GNOME Desktop\" startx","title":"GUI"},{"location":"Databases/Oracle/CentOS_7_Installation/#database-pre-requirements","text":"# Dependencies yum install binutils compat-libcap1 gcc gcc-c++ glibc glibc.i686 glibc-devel glibc.i686 ksh libaio libaio.i686 libaio-devel libaio-devel.i686 libgcc libgcc.i686 libstdc++ libstdc++l7.i686 libstdc++-devel libstdc++-devel.i686 compat-libstdc++-33 compat-libstdc++-33.i686 libXi libXi.i686 libXtst libXtst.i686 make sysstat # Kernel MEMTOTAL=$(free -b | sed -n '2p' | awk '{print $2}') SHMMAX=$(expr $MEMTOTAL / 2) PAGESIZE=$(getconf PAGE_SIZE) cat >> /etc/sysctl.conf << EOF fs.aio-max-nr = 1048576 fs.file-max = 6815744 kernel.shmmax = $SHMMAX kernel.shmall = `expr \\( $SHMMAX / $PAGESIZE \\) \\* \\( 4096 / 16 \\)` kernel.shmmni = 4096 kernel.sem = 250 32000 100 128 net.ipv4.ip_local_port_range = 9000 65500 net.core.rmem_default = 262144 net.core.rmem_max = 4194304 net.core.wmem_default = 262144 net.core.wmem_max = 1048576 EOF sysctl -p # Users and groups i=54321; for group in oinstall dba backupdba oper dgdba kmdba; do groupadd -g $i $group; i=`expr $i + 1` done useradd -u 1200 -g oinstall -G dba,oper,backupdba,dgdba,kmdba -d /home/oracle oracle passwd oracle # Folders mkdir -p /u01/app/oracle chown -R oracle:oinstall /u01/app chmod -R 775 /u01 vim /etc/pam.d/login # Insert after \"session required pam_namespace.so\": session required pam_limits.so vim /etc/security/limits.conf # Add to the end of file: oracle soft nproc 2047 oracle hard nproc 16384 oracle soft nofile 1024 oracle hard nofile 65536 oracle soft stack 10240 oracle hard stack 32768 su - oracle vim ~/.bash_profile # Add to the end umask 022 export ORACLE_BASE=/u01/app/oracle","title":"Database pre-requirements"},{"location":"Databases/Oracle/CentOS_7_Installation/#database-software-installation","text":"# Upload installation software to /tmp: scp linuxamd64_12102_database_se2_1of2.zip oracle@db_server:/tmp/ scp linuxamd64_12102_database_se2_2of2.zip oracle@db_server:/tmp/ # Login to DB server with X-Forwarding enabled: ssh -Y oracle@db_server # Unpack archives: unzip linuxamd64_12102_database_se2_1of2.zip unzip linuxamd64_12102_database_se2_2of2.zip # Run Oracle universal installer cd database/ ./runInstaller Just follow installation steps in GUI: Step 01. Enter your E-Mail and Oracle Enterproise support password , if you have one Step 02. (.) Install database software only (we'll install database later) Step 03. Select parovriate type of installation. In simple case choose \"Single instance database installation\" Step 04. Choose prefered language. But English is recommended in all cases. Step 05. Select edidtion. It depends of distribution package. In this case Standard Edition Two Step 06. Choose path for oracle home directory. In our case everything will filled up by default. Step 07. Choose path for oracle inventory. In our case everything will filled up by default. Step 08. Choose oracle grroups. In our case everything will filled up by default. Step 09. On this step you'll face swap error in most cases. Just ignore it. In any other errors look at oracle forum. DO NOT IGNORE ANY ERRORS EXCEPT OF SWAP Step 10. Install oracle database software Step 11. On this step installater demand you to execute 2 spripts from root user. Just run them. Step 12. Finish vim ~/.bash_profile # Add to the end of file: export ORACLE_HOME=/u01/app/oracle/product/12.1.0/dbhome_1 export PATH=$PATH:$ORACLE_HOME/bin","title":"Database software installation"},{"location":"Databases/Oracle/CentOS_7_Installation/#net-listener","text":"Just run netca from oracle user and follow steps of configuration wizard # Login to DB server with X-Forwarding enabled: ssh -Y oracle@db_server # Run Network listener configuration wizard: netca","title":"Net listener"},{"location":"Databases/Oracle/CentOS_7_Installation/#database","text":"# Login to DB server with X-Forwarding enabled: ssh -Y oracle@db_server # Run Database configuration wizard: dbca Follow installation steps for fat installation: Step 01. Choose (.) Create database Step 02. (.) Create a database with default configuration Global Database name: input what name you like Storage type: File System (if you don't have ASM) Database character set: AL32UTF8 - Unicode UTF-8 Universal character set Choose password for sysdba account. Uncheck []Create As Container Database** Step 03. Look for any errors Step 04. Next Step 05. Finish vim /etc/oratab #Set last synbol from \"N\" to \"Y\" <database_SID>:/u01/app/oracle/product/12.1.0/dbhome_1:Y vim ~/.bash_profile # Add to the end of file: export ORACLE_SID=<database_SID>","title":"Database"},{"location":"Databases/Oracle/CentOS_7_Installation/#autostart","text":"Oracle environemnt: vim /etc/sysconfig/<SID>.oracledb # Contents ORACLE_BASE=/u01/app/oracle ORACLE_HOME=/u01/app/oracle/product/12.1.0/dbhome_1 ORACLE_SID=<your_SID> Net listner service: vim /usr/lib/systemd/system/<SID>@lsnrctl.service # Contents [Unit] Description=Oracle Net Listener After=network.target [Service] Type=forking EnvironmentFile=/etc/sysconfig/<SID>.oracledb ExecStart=/u01/app/oracle/product/12.1.0/dbhome_1/bin/lsnrctl start ExecStop=/u01/app/oracle/product/12.1.0/dbhome_1/bin/lsnrctl stop User=oracle [Install] WantedBy=multi-user.target Database service: vim /usr/lib/systemd/system/<SID>@oracledb.service # Contents [Unit] Description=Oracle Database service After=network.target lsnrctl.service [Service] Type=forking EnvironmentFile=/etc/sysconfig/<SID>.oracledb ExecStart=/u01/app/oracle/product/12.1.0/dbhome_1/bin/dbstart /u01/app/oracle/product/12.1.0/dbhome_1 ExecStop=/u01/app/oracle/product/12.1.0/dbhome_1/bin/dbshut /u01/app/oracle/product/12.1.0/dbhome_1 User=oracle [Install] WantedBy=multi-user.target Systemd reload and enable: systemctl daemon-reload systemctl enable <SID>@lsnrctl systemctl enable <SID>@oracledb","title":"Autostart"},{"location":"Databases/Oracle/Common/","text":"Show tables SELECT owner, table_name FROM dba_tables; SELECT owner, table_name FROM all_tables; SELECT table_name FROM user_tables; Show filterd tables SELECT table_name FROM user_tables WHERE table_name LIKE '%<any_pattern>%'; # Example: SELECT table_name FROM user_tables WHERE table_name LIKE '%BLACK_LIST%'; Login to database # First of all you can just use clean 'sqlplus' and it request user and password sqlplus <username>/<password>@<oracle_database_hostname> Run SQL script # Unix @/path/to/sql_script.sql START /path/to/sql_script.sql # Windows @c:\\path\\to\\sql_script.sql START c:\\path\\to\\sql_script.sql Show table information DESCRIBE <table_name>","title":"Common"},{"location":"Databases/Oracle/Common/#show-tables","text":"SELECT owner, table_name FROM dba_tables; SELECT owner, table_name FROM all_tables; SELECT table_name FROM user_tables;","title":"Show tables"},{"location":"Databases/Oracle/Common/#show-filterd-tables","text":"SELECT table_name FROM user_tables WHERE table_name LIKE '%<any_pattern>%'; # Example: SELECT table_name FROM user_tables WHERE table_name LIKE '%BLACK_LIST%';","title":"Show filterd tables"},{"location":"Databases/Oracle/Common/#login-to-database","text":"# First of all you can just use clean 'sqlplus' and it request user and password sqlplus <username>/<password>@<oracle_database_hostname>","title":"Login to database"},{"location":"Databases/Oracle/Common/#run-sql-script","text":"# Unix @/path/to/sql_script.sql START /path/to/sql_script.sql # Windows @c:\\path\\to\\sql_script.sql START c:\\path\\to\\sql_script.sql","title":"Run SQL script"},{"location":"Databases/Oracle/Common/#show-table-information","text":"DESCRIBE <table_name>","title":"Show table information"},{"location":"Databases/Oracle/Dump/","text":"Fast oracle database dump creation This way of making dump isn't safe, but convenient within clean or dev environment. # Export expdp / full=Y dumpfile=<DBNAME>.dmp logfile=expdp<DBNAME>.log expdp 'DBNAME'/DBPASSWORD@SID dumpfile=<dumpfile>.dmp nologfile=Y # Import impdp / full=Y dumpfile=<DBNAME>.dmp logfile=impdp<DBNAME>.log impdp 'DBNAME'/DBPASSWORD@SID dumpfile=<dumpfile>.dmp nologfile=Y","title":"Dump"},{"location":"Databases/Oracle/Dump/#fast-oracle-database-dump-creation","text":"This way of making dump isn't safe, but convenient within clean or dev environment. # Export expdp / full=Y dumpfile=<DBNAME>.dmp logfile=expdp<DBNAME>.log expdp 'DBNAME'/DBPASSWORD@SID dumpfile=<dumpfile>.dmp nologfile=Y # Import impdp / full=Y dumpfile=<DBNAME>.dmp logfile=impdp<DBNAME>.log impdp 'DBNAME'/DBPASSWORD@SID dumpfile=<dumpfile>.dmp nologfile=Y","title":"Fast oracle database dump creation"},{"location":"Databases/Oracle/Memory/","text":"ORA-00845: MEMORY_TARGET not supported Not enough of shared memory umount tmpfs mount -t tmpfs shmfs -o size=1024m /dev/shm","title":"Memory"},{"location":"Databases/Oracle/Memory/#ora-00845-memory_target-not-supported","text":"Not enough of shared memory umount tmpfs mount -t tmpfs shmfs -o size=1024m /dev/shm","title":"ORA-00845: MEMORY_TARGET not supported"},{"location":"Databases/Oracle/OJDBC/","text":"BUG: 9632480 OJDBC 12.1.0.2 - BUG: ORA-01000: maximum open cursors exceeded We need: ojdbc7.jar p19632480_121020_Generic.zip JRE We need to update OracleDatabaseMetaData.class in our ojdbc7.jar archive unzip p19632480_121020_Generic.zip Get folder ./p19632480_121020_Generic/19632480/files/jdbc/lib/ojdbc7.jar from archvive and place it to ojdbc7.jar file location Make sure that your JAVA_HOME is exported Change working directory to ojdbc7.jar location and run: $JAVA_HOME/jar -uf ojdbc7.jar","title":"OJDBC"},{"location":"Databases/Oracle/OJDBC/#bug-9632480","text":"OJDBC 12.1.0.2 - BUG: ORA-01000: maximum open cursors exceeded We need: ojdbc7.jar p19632480_121020_Generic.zip JRE We need to update OracleDatabaseMetaData.class in our ojdbc7.jar archive unzip p19632480_121020_Generic.zip Get folder ./p19632480_121020_Generic/19632480/files/jdbc/lib/ojdbc7.jar from archvive and place it to ojdbc7.jar file location Make sure that your JAVA_HOME is exported Change working directory to ojdbc7.jar location and run: $JAVA_HOME/jar -uf ojdbc7.jar","title":"BUG: 9632480"},{"location":"Databases/Oracle/Tablespace/","text":"Create CREATE TABLESPACE tablespace_name DATAFILE 'tablespace_name.ora' SIZE 20M AUTOEXTEND ON; ### You need this line only for Oracle 12 ALTER SESSION SET \"_ORACLE_SCRIPT\"=true; CREATE USER tablespace_username IDENTIFIED BY tablespace_username_password DEFAULT TABLESPACE tablespace_name; GRANT ALL PRIVILEGES TO tablespabe+username ;","title":"Tablespace"},{"location":"Databases/Oracle/Tablespace/#create","text":"CREATE TABLESPACE tablespace_name DATAFILE 'tablespace_name.ora' SIZE 20M AUTOEXTEND ON; ### You need this line only for Oracle 12 ALTER SESSION SET \"_ORACLE_SCRIPT\"=true; CREATE USER tablespace_username IDENTIFIED BY tablespace_username_password DEFAULT TABLESPACE tablespace_name; GRANT ALL PRIVILEGES TO tablespabe+username ;","title":"Create"},{"location":"Databases/Oracle/Useful_Queries/","text":"View tablespaces by user select distinct p.tablespace_name from dba_tablespaces p, dba_xml_tables x, dba_users u, all_all_tables t where t.table_name=x.table_name and t.tablespace_name=p.tablespace_name and x.owner=u.username; View all tablespaces: run by sysdba select * from dba_tablespaces; View charset SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ; Get status of instances select instance_name, status, database_status from v$instance; select status from v$instance; select logins from v$instance; Mount and open DB ALTER DATABASE Mount; ALTER DATABASE OPEN; Backup via RMAN run { shutdown immediate; startup mount; backup database; alter database open; } Enabling archivelog SHUTDOWN; STARTUP MOUNT EXCLUSIVE; ALTER DATABASE ARCHIVELOG; ALTER DATABASE OPEN; SELECT log_mode FROM v$database; Open cursors select * from v$parameter where name = 'open_cursors'; select value from v$parameter where name = 'open_cursors'; alter system set open_cursors=4000 scope=both; -- Top list select a.value, s.username, s.sid, s.serial# from v$sesstat a, v$statname b, v$session s where a.statistic# = b.statistic# and s.sid=a.sid and b.name = 'opened cursors current' and s.username is not null order by value desc; select * from ( select ss.value, sn.name, ss.sid from v$sesstat ss, v$statname sn where ss.statistic# = sn.statistic# and sn.name like '%opened cursors current%' order by value desc) where rownum < 11 ; select USERNAME, OSUSER, PROCESS, MACHINE, PROGRAM, EVENT, STATE from v$session where sid in (select SID from ( select ss.value, sn.name, ss.sid from v$sesstat ss, v$statname sn where ss.statistic# = sn.statistic# and sn.name like '%opened cursors current%' order by value desc)); select SID,USERNAME, OSUSER, PROCESS, MACHINE, PROGRAM, EVENT, STATE from v$session where sid in (select SID from ( select ss.value, sn.name, ss.sid from v$sesstat ss, v$statname sn where ss.statistic# = sn.statistic# and sn.name like '%opened cursors current%' order by value desc) where rownum < 20); select user_name, status, osuser, machine, a.sql_text from v$session b, v$open_cursor a where a.sid = b.sid and MACHINE='SERVER_NAME'; select * from v$session b, v$open_cursor a where a.sid = b.sid and MACHINE='SERVER_NAME'; select a.value, s.username, s.sid, s.serial# from v$sesstat a, v$statname b, v$session s where b.name = 'opened cursors current' order by value desc;","title":"Useful Queries"},{"location":"Databases/Oracle/Useful_Queries/#view-tablespaces-by-user","text":"select distinct p.tablespace_name from dba_tablespaces p, dba_xml_tables x, dba_users u, all_all_tables t where t.table_name=x.table_name and t.tablespace_name=p.tablespace_name and x.owner=u.username;","title":"View tablespaces by user"},{"location":"Databases/Oracle/Useful_Queries/#view-all-tablespaces-run-by-sysdba","text":"select * from dba_tablespaces;","title":"View all tablespaces: run by sysdba"},{"location":"Databases/Oracle/Useful_Queries/#view-charset","text":"SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;","title":"View charset"},{"location":"Databases/Oracle/Useful_Queries/#get-status-of-instances","text":"select instance_name, status, database_status from v$instance; select status from v$instance; select logins from v$instance;","title":"Get status of instances"},{"location":"Databases/Oracle/Useful_Queries/#mount-and-open-db","text":"ALTER DATABASE Mount; ALTER DATABASE OPEN;","title":"Mount and open DB"},{"location":"Databases/Oracle/Useful_Queries/#backup-via-rman","text":"run { shutdown immediate; startup mount; backup database; alter database open; }","title":"Backup via RMAN"},{"location":"Databases/Oracle/Useful_Queries/#enabling-archivelog","text":"SHUTDOWN; STARTUP MOUNT EXCLUSIVE; ALTER DATABASE ARCHIVELOG; ALTER DATABASE OPEN; SELECT log_mode FROM v$database;","title":"Enabling archivelog"},{"location":"Databases/Oracle/Useful_Queries/#open-cursors","text":"select * from v$parameter where name = 'open_cursors'; select value from v$parameter where name = 'open_cursors'; alter system set open_cursors=4000 scope=both; -- Top list select a.value, s.username, s.sid, s.serial# from v$sesstat a, v$statname b, v$session s where a.statistic# = b.statistic# and s.sid=a.sid and b.name = 'opened cursors current' and s.username is not null order by value desc; select * from ( select ss.value, sn.name, ss.sid from v$sesstat ss, v$statname sn where ss.statistic# = sn.statistic# and sn.name like '%opened cursors current%' order by value desc) where rownum < 11 ; select USERNAME, OSUSER, PROCESS, MACHINE, PROGRAM, EVENT, STATE from v$session where sid in (select SID from ( select ss.value, sn.name, ss.sid from v$sesstat ss, v$statname sn where ss.statistic# = sn.statistic# and sn.name like '%opened cursors current%' order by value desc)); select SID,USERNAME, OSUSER, PROCESS, MACHINE, PROGRAM, EVENT, STATE from v$session where sid in (select SID from ( select ss.value, sn.name, ss.sid from v$sesstat ss, v$statname sn where ss.statistic# = sn.statistic# and sn.name like '%opened cursors current%' order by value desc) where rownum < 20); select user_name, status, osuser, machine, a.sql_text from v$session b, v$open_cursor a where a.sid = b.sid and MACHINE='SERVER_NAME'; select * from v$session b, v$open_cursor a where a.sid = b.sid and MACHINE='SERVER_NAME'; select a.value, s.username, s.sid, s.serial# from v$sesstat a, v$statname b, v$session s where b.name = 'opened cursors current' order by value desc;","title":"Open cursors"},{"location":"Dev/Android/Adb/","text":"Upload file to android device adb push <path_to>/<file> <remote_path_to>/<file> # adb push ~/dev/armenianalphabet/armenianalphabet.apk /mnt/sdcard/Download/armenianalphabet.apk Download file from android device adb pull <path_to_remote>/<file> <path_to_local>/<file> # adb pull /mnt/sdcard/Download/armenianalphabet.apk ~/tmp/armenianalphabet.apk","title":"Adb"},{"location":"Dev/Android/Adb/#upload-file-to-android-device","text":"adb push <path_to>/<file> <remote_path_to>/<file> # adb push ~/dev/armenianalphabet/armenianalphabet.apk /mnt/sdcard/Download/armenianalphabet.apk","title":"Upload file to android device"},{"location":"Dev/Android/Adb/#download-file-from-android-device","text":"adb pull <path_to_remote>/<file> <path_to_local>/<file> # adb pull /mnt/sdcard/Download/armenianalphabet.apk ~/tmp/armenianalphabet.apk","title":"Download file from android device"},{"location":"Dev/Android/Android_Studio/","text":"libGL error: unable to load driver: i965_dri.so # Arch Linux mv ~/Android/Sdk/tools/lib64/libstdc++/libstdc++.so.6{,.bak} mv ~/Android/Sdk/tools/lib64/libstdc++/libstdc++.so.6.0.18{,.bak} ln -s /usr/lib/libstdc++.so ~/Android/Sdk/tools/lib64/libstdc++/","title":"Android Studio"},{"location":"Dev/Android/Android_Studio/#libgl-error-unable-to-load-driver-i965_driso","text":"# Arch Linux mv ~/Android/Sdk/tools/lib64/libstdc++/libstdc++.so.6{,.bak} mv ~/Android/Sdk/tools/lib64/libstdc++/libstdc++.so.6.0.18{,.bak} ln -s /usr/lib/libstdc++.so ~/Android/Sdk/tools/lib64/libstdc++/","title":"libGL error: unable to load driver: i965_dri.so"},{"location":"Dev/Android/Apk/","text":"APK Unable to install signed apk If you trying to install release apk on device which was used to debug, you need to uninstall previous build because application signature is changed ~/Android/Sdk/platform-tools/adb uninstall <full_application_name> # ~/Android/Sdk/platform-tools/adb uninstall com.google.market","title":"APK"},{"location":"Dev/Android/Apk/#apk","text":"","title":"APK"},{"location":"Dev/Android/Apk/#unable-to-install-signed-apk","text":"If you trying to install release apk on device which was used to debug, you need to uninstall previous build because application signature is changed ~/Android/Sdk/platform-tools/adb uninstall <full_application_name> # ~/Android/Sdk/platform-tools/adb uninstall com.google.market","title":"Unable to install signed apk"},{"location":"Dev/Android/udev_rules/","text":"UDEV Rules Instalaltion # Clone this repository git clone https://github.com/M0Rf30/android-udev-rules.git cd android-udev-rules # Copy rules file sudo cp -v 51-android.rules /etc/udev/rules.d/51-android.rules # OR create a sym-link to the rules file - choose this option if you'd like to update your udev rules using git. sudo ln -sf \"$PWD\"/51-android.rules /etc/udev/rules.d/51-android.rules # Change file permissions sudo chmod a+r /etc/udev/rules.d/51-android.rules # If adbusers group already exists remove old adbusers group groupdel adbusers # add the adbusers group if it's doesn't already exist sudo mkdir -p /usr/lib/sysusers.d/ && sudo cp android-udev.conf /usr/lib/sysusers.d/ sudo systemd-sysusers # (1) # OR on Fedora: groupadd adbusers # Add your user to the adbusers group sudo usermod -a -G adbusers $(whoami) # Restart UDEV sudo udevadm control --reload-rules sudo service udev restart # OR on Fedora: sudo systemctl restart systemd-udevd.service # Restart the ADB server adb kill-server # Replug your Android device and verify that USB debugging is enabled in developer options adb devices # You should now see your device android-udev.conf g adbusers - - 51-android.rules # These rules refer: https://developer.android.com/studio/run/device.html # and include many suggestions from Arch Linux, GitHub and other Communities. # Latest version can be found at: https://github.com/M0Rf30/android-udev-rules # Skip this section below if this device is not connected by USB SUBSYSTEM!=\"usb\", GOTO=\"android_usb_rules_end\" LABEL=\"android_universal_rule\" ENV{ID_USB_INTERFACES}!=\"*:ff420?:*\", GOTO=\"android_usb_rules_begin\" ACTION==\"add\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{ID_USB_INTERFACES}==\"*:ff420?:*\", MODE=\"0666\", GROUP=\"plugdev\", SYMLINK+=\"android/$env{ID_SERIAL_SHORT}\" LABEL=\"android_usb_rules_begin\" # Devices listed here in android_usb_rules_{begin...end} are connected by USB # Acer ATTR{idVendor}!=\"0502\", GOTO=\"not_Acer\" ENV{adb_user}=\"yes\" # Iconia Tab A1-830 ATTR{idProduct}==\"3604\", ENV{adb_adbfast}=\"yes\" # Iconia Tab A500 ATTR{idProduct}==\"3325\", ENV{adb_adbfast}=\"yes\" # Liquid (3202=normal,3203=debug) ATTR{idProduct}==\"3203\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Acer\" # Actions Semiconductor Co., Ltd ATTR{idVendor}==\"10d6\", ENV{adb_user}=\"yes\" # Denver TAD 70111 ATTR{idProduct}==\"0c02\", SYMLINK+=\"android_adb\" # ADVANCE ATTR{idVendor}==\"0a5c\", ENV{adb_user}=\"yes\" # S5 ATTR{idProduct}==\"e681\", SYMLINK+=\"android_adb\" # Amazon Lab126 ATTR{idVendor}==\"1949\", ENV{adb_user}=\"yes\" # Amazon Kindle Fire ATTR{idProduct}==\"0006\", ENV{adb_adbfast}=\"yes\" # Archos ATTR{idVendor}!=\"0e79\", GOTO=\"not_Archos\" ENV{adb_user}=\"yes\" # 43 ATTR{idProduct}==\"1417\", ENV{adb_adbfast}=\"yes\" # 101 ATTR{idProduct}==\"1411\", ENV{adb_adbfast}=\"yes\" # 101 xs ATTR{idProduct}==\"1549\", ENV{adb_adbfast}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Archos\" # ASUSTeK ATTR{idVendor}!=\"0b05\", GOTO=\"not_Asus\" # False positive - accessory ATTR{idProduct}==\"1???\", GOTO=\"android_usb_rules_end\" ENV{adb_user}=\"yes\" # Zenphone 2 (ZE500CL) (7770=adb 7773=mtp,adb 7777=ptp,adb 7775=rndis,adb,mass_storage 5F03=mtp,adb,pclink,mass_storage 5F07=ptp,adb,pclink 5F05=rndis,adb,pclink,mass_storage ATTR{idProduct}==\"7770\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"7773\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"7777\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"7775\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"5F03\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"5F07\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"5F05\", SYMLINK+=\"android_adb\" # Zenphone 4 (581f=mtp,adb 583f=rndis,adb) ATTR{idProduct}==\"581f\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"583f\", SYMLINK+=\"android_adb\" # Zenphone 5 (4c90=normal,4c91=debug,4daf=Fastboot) ATTR{idProduct}==\"4c91\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4daf\", SYMLINK+=\"android_fastboot\" # Tegra APX ATTR{idProduct}==\"7030\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Asus\" # Azpen Onda ATTR{idVendor}==\"1f3a\", ENV{adb_user}=\"yes\" # BQ ATTR{idVendor}!=\"2a47\", GOTO=\"not_BQ\" ENV{adb_user}=\"yes\" # Aquaris 4.5 ATTR{idProduct}==\"0c02\", ENV{adb_adbfast}=\"yes\" ATTR{idProduct}==\"2008\", ENV{adb_adbfast}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_BQ\" # Dell ATTR{idVendor}==\"413c\", ENV{adb_user}=\"yes\" # Essential ATTR{idVendor}!=\"2e17\", GOTO=\"not_Essential\" ENV{adb_user}=\"yes\" # Essential PH-1 ATTR{idProduct}==\"c009\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"c030\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Essential\" # Fairphone 2 ATTR{idVendor}==\"2ae5\", ENV{adb_user}=\"yes\" # Foxconn ATTR{idVendor}==\"0489\", ENV{adb_user}=\"yes\" # Commtiva Z71, Geeksphone One ATTR{idVendor}==\"0489\", ATTR{idProduct}==\"c001\", SYMLINK+=\"android_adb\" # Fujitsu/Fujitsu Toshiba ATTR{idVendor}==\"04c5\", ENV{adb_user}=\"yes\" # Fuzhou Rockchip Electronics ATTR{idVendor}==\"2207\", ENV{adb_user}=\"yes\" # Mediacom Smartpad 715i ATTR{idVendor}==\"2207\", ATTR{idProduct}==\"0000\", SYMLINK+=\"android_adb\" # Ubislate 7Ci ATTR{idVendor}==\"2207\", ATTR{idProduct}==\"0010\", SYMLINK+=\"android_adb\" # Garmin-Asus ATTR{idVendor}==\"091e\", ENV{adb_user}=\"yes\" # Google ATTR{idVendor}!=\"18d1\", GOTO=\"not_Google\" ENV{adb_user}=\"yes\" # Nexus, Pixel, Pixel XL, Pixel 2, Pixel 2XL (4ee2=mtp,adb 4ee4=rndis,adb 4ee6=ptp,adb 4ee7=adb 4ee9=midi,adb 2d01=accessory,adb 2d03=audio_source,adb 2d05=accessory,audio_source,adb) # See https://android.googlesource.com/device/google/wahoo/+/master/init.hardware.usb.rc ATTR{idProduct}==\"4ee2\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee4\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee6\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee7\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee9\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"2d01\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"2d03\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"2d05\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee0\", SYMLINK+=\"android_fastboot\" # Nexus 7 ATTR{idProduct}==\"4e42\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4e40\", SYMLINK+=\"android_fastboot\" # Nexus 5, Nexus 10 ATTR{idProduct}==\"4ee1\", ENV{adb_adbfast}=\"yes\" # Nexus S (4e22=mass_storage,adb 4e24=rndis,adb) # See https://android.googlesource.com/device/samsung/crespo/+/android-4.1.2_r2.1/init.herring.usb.rc ATTR{idProduct}==\"4e22\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4e24\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4e20\", SYMLINK+=\"android_fastboot\" # Galaxy Nexus ATTR{idProduct}==\"4e30\", ENV{adb_adbfast}=\"yes\" # Nexus One (4e11=normal,4e12=debug,0fff=debug) ATTR{idProduct}==\"4e12\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"0fff\", SYMLINK+=\"android_fastboot\" # Generic and unspecified debug interface ATTR{idProduct}==\"d00d\", SYMLINK+=\"android_fastboot\" # Pico i.MX7 Dual Development Board ATTR{idProduct}==\"4ee7\", SYMLINK+=\"android_adb\" # Include: Samsung Galaxy Nexus (GSM) ATTR{idProduct}==\"4e30\", SYMLINK+=\"android_fastboot\" # Recovery adb entry for Nexus Family (orig d001, OP3 has 18d1:d002) ATTR{idProduct}==\"d00?\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Google\" # Haier ATTR{idVendor}==\"201e\", ENV{adb_user}=\"yes\" # Hisense ATTR{idVendor}==\"109b\", ENV{adb_user}=\"yes\" # Honeywell/Foxconn ATTR{idVendor}!=\"0c2e\", GOTO=\"not_Honeywell\" ENV{adb_user}=\"yes\" # D70e ATTR{idProduct}==\"0ba3\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Honeywell\" # HTC ATTR{idVendor}!=\"0bb4\", GOTO=\"not_HTC\" ENV{adb_user}=\"yes\" # fastboot mode enabled ATTR{idProduct}==\"0fff\", ENV{adb_adbfast}=\"yes\", GOTO=\"android_usb_rule_match\" # ChaCha ATTR{idProduct}==\"0cb2\", ENV{adb_adbfast}=\"yes\" # Desire (Bravo) ATTR{idProduct}==\"0c87\", SYMLINK+=\"android_adb\" # Desire HD ATTR{idProduct}==\"0ca2\", SYMLINK+=\"android_adb\" # Desire S (Saga) ATTR{idProduct}==\"0cab\", SYMLINK+=\"android_adb\" # Desire Z ATTR{idProduct}==\"0c91\", ENV{adb_adbfast}=\"yes\" # Evo Shift ATTR{idProduct}==\"0ca5\", SYMLINK+=\"android_adb\" # G1 ATTR{idProduct}==\"0c01\", ENV{adb_adbfast}=\"yes\" # HD2 ATTR{idProduct}==\"0c02\", ENV{adb_adbfast}=\"yes\" # Hero H2000 ATTR{idProduct}==\"0001\", ENV{adb_adbfast}=\"yes\" # Hero (GSM), Desire ATTR{idProduct}==\"0c99\", SYMLINK+=\"android_adb\" # Hero (CDMA) ATTR{idProduct}==\"0c9a\", SYMLINK+=\"android_adb\" # Incredible ATTR{idProduct}==\"0c9e\", SYMLINK+=\"android_adb\" # Incredible rev 0002 ATTR{idProduct}==\"0c8d\", SYMLINK+=\"android_adb\" # MyTouch 4G ATTR{idProduct}==\"0c96\", SYMLINK+=\"android_adb\" # One (m7) && One (m8) ATTR{idProduct}==\"0c93\" # Sensation ATTR{idProduct}==\"0f87\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"0ff0\", SYMLINK+=\"android_fastboot\" # One V ATTR{idProduct}==\"0ce5\", SYMLINK+=\"android_adb\" # Slide ATTR{idProduct}==\"0e03\", SYMLINK+=\"android_adb\" # Tatoo, Dream, ADP1, G1, Magic ATTR{idProduct}==\"0c01\" ATTR{idProduct}==\"0c02\", ENV{adb_adbfast}=\"yes\" # Vision ATTR{idProduct}==\"0c91\", SYMLINK+=\"android_adb\" # Wildfire ATTR{idProduct}==\"0c8b\", ENV{adb_adbfast}=\"yes\" # Wildfire S ATTR{idProduct}==\"0c86\", ENV{adb_adbfast}=\"yes\" # Zopo ZP900, Fairphone ATTR{idProduct}==\"0c03\", ENV{adb_adbfast}=\"yes\" # Zopo C2 ATTR{idProduct}==\"2008\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" GOTO=\"android_usb_rule_match\" LABEL=\"not_HTC\" # Huawei ATTR{idVendor}!=\"12d1\", GOTO=\"not_Huawei\" ENV{adb_user}=\"yes\" # IDEOS ATTR{idProduct}==\"1038\", ENV{adb_adbfast}=\"yes\" # U8850 Vision ATTR{idProduct}==\"1021\", ENV{adb_adbfast}=\"yes\" # HiKey adb ATTR{idProduct}==\"1057\", SYMLINK+=\"android_adb\" # HiKey usbnet ATTR{idProduct}==\"1050\", SYMLINK+=\"android_adb\" # Honor 6 ATTR{idProduct}==\"103a\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"1051\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # MediaPad M2-A01L ATTR{idProduct}==\"1052\", SYMLINK+=\"android_adb\" # Huawei Watch ATTR{idProduct}==\"1c2c\", SYMLINK+=\"android_adb\" # Mate 9 ATTR{idProduct}==\"107e\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Huawei\" # Intel # Geeksphone Revolution ATTR{idVendor}==\"8087\", ATTR{idProduct}==\"0a16\", SYMLINK+=\"android_adb\", ENV{adb_user}=\"yes\" # Chuwi Hi 10 Pro (HQ64) ATTR{idVendor}==\"8087\", ATTR{idProduct}==\"2a65\", SYMLINK+=\"android_adb\", ENV{adb_user}=\"yes\" ATTR{idVendor}==\"8087\", ATTR{idProduct}==\"07ef\", SYMLINK+=\"android_adb\", ENV{adb_user}=\"yes\" # Reference Boards using kernelflinger # See https://github.com/intel/kernelflinger/blob/master/libefiusb/usb.c#L56 ATTR{idProduct}==\"09ef\", ENV{adb_adbfast}=\"yes\" # IUNI ATTR{idVendor}!=\"271d\", GOTO=\"not_IUNI\" ENV{adb_user}=\"yes\" # U3 ATTR{idProduct}==\"bf39\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_IUNI\" # K-Touch ATTR{idVendor}==\"24e3\", ENV{adb_user}=\"yes\" # KT Tech ATTR{idVendor}==\"2116\", ENV{adb_user}=\"yes\" # Kyocera #ATTR{idVendor}==\"0482\", ENV{adb_user}=\"yes\" # Lenovo ATTR{idVendor}==\"17ef\", ENV{adb_user}=\"yes\" # LeTv ATTR{idVendor}!=\"2b0e\", GOTO=\"not_letv\" ENV{adb_user}=\"yes\" # LEX720 LeEco Pro3 6GB (610c=normal,610d=debug, 610b=camera) ATTR{idProduct}==\"610d\", ENV{adb_fastboot}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_letv\" # LG ATTR{idVendor}!=\"1004\", GOTO=\"not_LG\" ENV{adb_user}=\"yes\" # Ally, Vortex, P500, P500h ATTR{idProduct}==\"618f\" ATTR{idProduct}==\"618e\", SYMLINK+=\"android_adb\" # G2 D802 ATTR{idProduct}==\"61f1\", SYMLINK+=\"android_adb\" # G2 D803 ATTR{idProduct}==\"618c\", SYMLINK+=\"android_adb\" # G2 D803 rogers ATTR{idProduct}==\"631f\", SYMLINK+=\"android_adb\" # G2 mini D620r (PTP) ATTR{idProduct}==\"631d\", SYMLINK+=\"android_adb\" # G3 D855 ATTR{idProduct}==\"633e\", SYMLINK+=\"android_adb\" # Optimus LTE ATTR{idProduct}==\"6315\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"61f9\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # Optimus One ATTR{idProduct}==\"61c5\", SYMLINK+=\"android_adb\" # Swift GT540 ATTR{idProduct}==\"61b4\", SYMLINK+=\"android_adb\" # P500 CM10 ATTR{idProduct}==\"61a6\", SYMLINK+=\"android_adb\" # 4X HD P880 ATTR{idProduct}==\"61f9\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_LG\" # Meizu ATTR{idVendor}!=\"2a45\", GOTO=\"not_Meizu\" ENV{adb_user}=\"yes\" # MX6 ATTR{idProduct}==\"0c02\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Meizu\" # Micromax ATTR{idVendor}!=\"2a96\", GOTO=\"not_Micromax\" ENV{adb_user}=\"yes\" # P702 ATTR{idProduct}==\"201d\", SYMLINK+=\"android_adb\", SYMLINK+=\"android_fastboot\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Micromax\" # Motorola ATTR{idVendor}!=\"22b8\", GOTO=\"not_Motorola\" ENV{adb_user}=\"yes\" # CLIQ XT/Quench ATTR{idProduct}==\"2d66\" # Defy/MB525 ATTR{idProduct}==\"428c\" # Droid ATTR{idProduct}==\"41db\" # Xoom ID 1 ATTR{idProduct}==\"70a8\", ENV{adb_adbfast}=\"yes\" # Xoom ID 2 ATTR{idProduct}==\"70a9\", ENV{adb_adbfast}=\"yes\" # Razr XT912 ATTR{idProduct}==\"4362\", ENV{adb_adbfast}=\"yes\" # Moto XT1052 ATTR{idProduct}==\"2e83\", ENV{adb_adbfast}=\"yes\" # Moto E/G ATTR{idProduct}==\"2e76\", ENV{adb_adbfast}=\"yes\" # Moto E/G (Dual SIM) ATTR{idProduct}==\"2e80\", ENV{adb_adbfast}=\"yes\" # Moto E/G (Global GSM) ATTR{idProduct}==\"2e82\", ENV{adb_adbfast}=\"yes\" # Droid Turbo 2) ATTR{idProduct}==\"2ea4\", ENV{adb_adbfast}=\"yes\", SYMLINK+=\"android%n\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Motorola\" # MTK ATTR{idVendor}==\"0e8d\", ENV{adb_user}=\"yes\" # NEC ATTR{idVendor}==\"0409\", ENV{adb_user}=\"yes\" # Nextbit ATTR{idVendor}==\"2c3f\", ENV{adb_user}=\"yes\" # Nokia X ATTR{idVendor}==\"0421\", ENV{adb_user}=\"yes\" # Nokia 3 ATTR{idVendor}==\"2e04\", ENV{adb_user}=\"yes\" # Nook ATTR{idVendor}==\"2080\", ENV{adb_user}=\"yes\" # Nvidia ATTR{idVendor}==\"0955\", ENV{adb_user}=\"yes\" # Audi SDIS Rear Seat Entertainment Tablet ATTR{idProduct}==\"7000\", SYMLINK+=\"android_fastboot\" # OnePlus(Oreo) ATTR{idVendor}!=\"2a70\", GOTO=\"not_OnePlus\" ENV{adb_user}=\"yes\" # Charging mode ATTR{idProduct}==\"4ee7\", SYMLINK+=\"android_adb\" # MTP mode ATTR{idProduct}==\"9011\", SYMLINK+=\"android_adb\" # PTP mode ATTR{idProduct}==\"904e\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_OnePlus\" # OnePlus 3T w/ Oreo MIDI mode ATTR{idVendor}!=\"05c6\", GOTO=\"not_OnePlus_MIDI\" ATTR{idProduct}==\"90bb\", SYMLINK+=\"android_adb\" LABEL=\"not_OnePlus_MIDI\" # Oppo ATTR{idVendor}==\"22d9\", ENV{adb_user}=\"yes\" # Find 5 ATTR{idProduct}==\"2767\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"2764\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # OTGV ATTR{idVendor}==\"2257\", ENV{adb_user}=\"yes\" # Pantech ATTR{idVendor}==\"10a9\", ENV{adb_user}=\"yes\" # Pegatron ATTR{idVendor}==\"1d4d\", ENV{adb_user}=\"yes\" # Philips ATTR{idVendor}==\"0471\", ENV{adb_user}=\"yes\" # PMC-Sierra ATTR{idVendor}==\"04da\", ENV{adb_user}=\"yes\" # Qualcomm ATTR{idVendor}!=\"05c6\", GOTO=\"not_Qualcomm\" ENV{adb_user}=\"yes\" # Geeksphone Zero ATTR{idProduct}==\"9025\", SYMLINK+=\"android_adb\" # OnePlus One ATTR{idProduct}==\"676?\", SYMLINK+=\"android_adb\" # OnePlus Two ATTR{idProduct}==\"9011\", SYMLINK+=\"android_adb\" # OnePlus 3 ATTR{idProduct}==\"900e\", SYMLINK+=\"android_adb\" # OnePlus 3T ATTR{idProduct}==\"676c\", SYMLINK+=\"android_adb\" # OnePlus 5 ATTR{idProduct}==\"9011\", SYMLINK+=\"android_adb\" # Xiaomi A1 (90bb=midi+adb) ATTR{idProduct}==\"90bb\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Qualcomm\" # Research In Motion, Ltd. ATTR{idVendor}!=\"0fca\", GOTO=\"not_RIM\" ENV{adb_user}=\"yes\" # BlackBerry DTEK60 ATTR{idProduct}==\"8042\", ENV{adb_fastboot}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_RIM\" # SK Telesys ATTR{idVendor}==\"1f53\", ENV{adb_user}=\"yes\" # Samsung ATTR{idVendor}!=\"04e8\", GOTO=\"not_Samsung\" # False positive printer ATTR{idProduct}==\"3???\", GOTO=\"android_usb_rules_end\" ENV{adb_user}=\"yes\" # Galaxy i5700 ATTR{idProduct}==\"681c\", ENV{adb_adbfast}=\"yes\" # Galaxy i5800 (681c=debug,6601=fastboot,68a0=mediaplayer) ATTR{idProduct}==\"681c\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"6601\", SYMLINK+=\"android_fastboot\" ATTR{idProduct}==\"68a9\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # Galaxy i7500 ATTR{idProduct}==\"6640\", ENV{adb_adbfast}=\"yes\" # Galaxy i9000 S, i9300 S3 ATTR{idProduct}==\"6601\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"685d\", MODE=\"0660\" ATTR{idProduct}==\"68c3\", MODE=\"0660\" # Galaxy Ace (S5830) \"Cooper\" ATTR{idProduct}==\"689e\", ENV{adb_adbfast}=\"yes\" # Galaxy Tab ATTR{idProduct}==\"6877\", ENV{adb_adbfast}=\"yes\" # Galaxy Nexus (GSM) (6860=mtp,adb 6864=rndis,adb 6866=ptp,adb) ATTR{idProduct}==\"6860\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"6864\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"6866\", SYMLINK+=\"android_adb\" # Galaxy Core, Tab 10.1, i9100 S2, i9300 S3, N5100 Note (8.0), Galaxy S3 SHW-M440S 3G (Korea only) ATTR{idProduct}==\"6860\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"685e\", ENV{adb_adbfast}=\"yes\" # Galaxy i9300 S3 ATTR{idProduct}==\"6866\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # Galaxy S4 GT-I9500 ATTR{idProduct}==\"685d\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Samsung\" # Sharp ATTR{idVendor}==\"04dd\", ENV{adb_user}=\"yes\" # Sony ATTR{idVendor}==\"054c\", ENV{adb_user}=\"yes\" # Sony Ericsson ATTR{idVendor}!=\"0fce\", GOTO=\"not_Sony_Ericsson\" ENV{adb_user}=\"yes\" # Xperia X10 mini ATTR{idProduct}==\"3137\" ATTR{idProduct}==\"2137\", SYMLINK+=\"android_adb\" # Xperia X10 mini pro ATTR{idProduct}==\"3138\" ATTR{idProduct}==\"2138\", SYMLINK+=\"android_adb\" # Xperia X8 ATTR{idProduct}==\"3149\" ATTR{idProduct}==\"2149\", SYMLINK+=\"android_adb\" # Xperia X12 ATTR{idProduct}==\"e14f\" ATTR{idProduct}==\"614f\", SYMLINK+=\"android_adb\" # Xperia Arc S ATTR{idProduct}==\"414f\", ENV{adb_adbfast}=\"yes\" # Xperia Neo V (6156=debug,0dde=fastboot) ATTR{idProduct}==\"6156\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"0dde\", SYMLINK+=\"android_fastboot\" # Xperia S ATTR{idProduct}==\"5169\", ENV{adb_adbfast}=\"yes\" # Xperia SP ATTR{idProduct}==\"6195\", ENV{adb_adbfast}=\"yes\" # Xperia L ATTR{idProduct}==\"5192\", ENV{adb_adbfast}=\"yes\" # Xperia Mini Pro ATTR{idProduct}==\"0166\", ENV{adb_adbfast}=\"yes\" # Xperia V ATTR{idProduct}==\"0186\", ENV{adb_adbfast}=\"yes\" # Xperia Acro S ATTR{idProduct}==\"5176\", ENV{adb_adbfast}=\"yes\" # Xperia Z1 Compact ATTR{idProduct}==\"51a7\", ENV{adb_adbfast}=\"yes\" # Xperia Z2 ATTR{idProduct}==\"51ba\", ENV{adb_adbfast}=\"yes\" # Xperia Z3 ATTR{idProduct}==\"01af\", ENV{adb_adbfast}=\"yes\" # Xperia Z3 Compact ATTR{idProduct}==\"01bb\", ENV{adb_adbfast}=\"yes\" # Xperia Z3+ Dual ATTR{idProduct}==\"51c9\", ENV{adb_adbfast}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Sony_Ericsson\" # Spreadtrum ATTR{idVendor}==\"1782\", ENV{adb_user}=\"yes\" # T & A Mobile Phones ATTR{idVendor}==\"1bbb\", ENV{adb_user}=\"yes\" # Alcatel OT991D ATTR{idProduct}==\"00f2\", SYMLINK+=\"android_adb\" # Alcatel OT6012A ATTR{idProduct}==\"0167\", SYMLINK+=\"android_adb\" # Teleepoch ATTR{idVendor}==\"2340\", ENV{adb_user}=\"yes\" # Texas Instruments UsbBoot ATTR{idVendor}==\"0451\", ATTR{idProduct}==\"d00f\", ENV{adb_user}=\"yes\" ATTR{idVendor}==\"0451\", ATTR{idProduct}==\"d010\", ENV{adb_user}=\"yes\" # Toshiba ATTR{idVendor}==\"0930\", ENV{adb_user}=\"yes\" # WEARNERS ATTR{idVendor}==\"05c6\", ENV{adb_user}=\"yes\" # XiaoMi ATTR{idVendor}!=\"2717\", GOTO=\"not_XiaoMi\" ENV{adb_user}=\"yes\" # Mi2A ATTR{idProduct}==\"904e\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"9039\", SYMLINK+=\"android_adb\" # Mi3 ATTR{idProduct}==\"0368\", SYMLINK+=\"android_adb\" # RedMi 1S WCDMA (MTP+Debug) ATTR{idProduct}==\"1268\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note WCDMA (MTP+Debug) ATTR{idProduct}==\"1248\", SYMLINK+=\"android_adb\" # RedMi 1S / RedMi / RedMi Note WCDMA (PTP+Debug) ATTR{idProduct}==\"1218\", SYMLINK+=\"android_adb\" # RedMi 1S /RedMi / RedMi Note WCDMA (Usb+Debug) ATTR{idProduct}==\"1228\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note 4G WCDMA (MTP+Debug) ATTR{idProduct}==\"1368\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note 4G WCDMA (PTP+Debug) ATTR{idProduct}==\"1318\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note 4G WCDMA (Usb+Debug) ATTR{idProduct}==\"1328\", SYMLINK+=\"android_adb\" # Mi Mix / A1 (ff88=rndis+adb, ff18=ptp+adb, ff48=mtp+adb, ff28=storage+adb) ATTR{idProduct}==\"ff88\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"ff18\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"ff48\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"ff28\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note 4G CDMA (Usb+Debug) / Mi4c / Mi5 ATTR{idProduct}==\"ff68\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_XiaoMi\" # Yota ATTR{idVendor}!=\"2916\", GOTO=\"not_Yota\" ENV{adb_user}=\"yes\" # YotaPhone2 (f003=normal,9139=debug) ATTR{idProduct}==\"9139\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Yota\" # Wileyfox ATTR{idVendor}==\"2970\", ENV{adb_user}=\"yes\" # YU ATTR{idVendor}==\"1ebf\", ENV{adb_user}=\"yes\" # Zebra ATTR{idVendor}!=\"05e0\", GOTO=\"not_Zebra\" ENV{adb_user}=\"yes\" # TC55 ATTR{idProduct}==\"2101\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Zebra\" # ZTE ATTR{idVendor}!=\"19d2\", GOTO=\"not_ZTE\" ENV{adb_user}=\"yes\" # Blade (1353=normal,1351=debug) ATTR{idProduct}==\"1351\", SYMLINK+=\"android_adb\" # Blade S (Crescent, Orange San Francisco 2) (1355=normal,1354=debug) ATTR{idProduct}==\"1354\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_ZTE\" # Wileyfox ATTR{idVendor}==\"2970\", ENV{adb_user}=\"yes\" # YU ATTR{idVendor}==\"1ebf\", ENV{adb_user}=\"yes\" # ZUK ATTR{idVendor}==\"2b4c\", ENV{adb_user}=\"yes\" # Skip other vendor tests LABEL=\"android_usb_rule_match\" # Symlink shortcuts to reduce code in tests above ENV{adb_adbfast}==\"yes\", ENV{adb_adb}=\"yes\", ENV{adb_fast}=\"yes\" ENV{adb_adb}==\"yes\", ENV{adb_user}=\"yes\", SYMLINK+=\"android_adb\" ENV{adb_fast}==\"yes\", ENV{adb_user}=\"yes\", SYMLINK+=\"android_fastboot\" # Enable device as a user device if found (add an \"android\" SYMLINK) ENV{adb_user}==\"yes\", MODE=\"0660\", GROUP=\"adbusers\", TAG+=\"uaccess\", SYMLINK+=\"android\" # Devices listed here {begin...end} are connected by USB LABEL=\"android_usb_rules_end\"","title":"UDEV Rules"},{"location":"Dev/Android/udev_rules/#udev-rules","text":"","title":"UDEV Rules"},{"location":"Dev/Android/udev_rules/#instalaltion","text":"# Clone this repository git clone https://github.com/M0Rf30/android-udev-rules.git cd android-udev-rules # Copy rules file sudo cp -v 51-android.rules /etc/udev/rules.d/51-android.rules # OR create a sym-link to the rules file - choose this option if you'd like to update your udev rules using git. sudo ln -sf \"$PWD\"/51-android.rules /etc/udev/rules.d/51-android.rules # Change file permissions sudo chmod a+r /etc/udev/rules.d/51-android.rules # If adbusers group already exists remove old adbusers group groupdel adbusers # add the adbusers group if it's doesn't already exist sudo mkdir -p /usr/lib/sysusers.d/ && sudo cp android-udev.conf /usr/lib/sysusers.d/ sudo systemd-sysusers # (1) # OR on Fedora: groupadd adbusers # Add your user to the adbusers group sudo usermod -a -G adbusers $(whoami) # Restart UDEV sudo udevadm control --reload-rules sudo service udev restart # OR on Fedora: sudo systemctl restart systemd-udevd.service # Restart the ADB server adb kill-server # Replug your Android device and verify that USB debugging is enabled in developer options adb devices # You should now see your device","title":"Instalaltion"},{"location":"Dev/Android/udev_rules/#android-udevconf","text":"g adbusers - -","title":"android-udev.conf"},{"location":"Dev/Android/udev_rules/#51-androidrules","text":"# These rules refer: https://developer.android.com/studio/run/device.html # and include many suggestions from Arch Linux, GitHub and other Communities. # Latest version can be found at: https://github.com/M0Rf30/android-udev-rules # Skip this section below if this device is not connected by USB SUBSYSTEM!=\"usb\", GOTO=\"android_usb_rules_end\" LABEL=\"android_universal_rule\" ENV{ID_USB_INTERFACES}!=\"*:ff420?:*\", GOTO=\"android_usb_rules_begin\" ACTION==\"add\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{ID_USB_INTERFACES}==\"*:ff420?:*\", MODE=\"0666\", GROUP=\"plugdev\", SYMLINK+=\"android/$env{ID_SERIAL_SHORT}\" LABEL=\"android_usb_rules_begin\" # Devices listed here in android_usb_rules_{begin...end} are connected by USB # Acer ATTR{idVendor}!=\"0502\", GOTO=\"not_Acer\" ENV{adb_user}=\"yes\" # Iconia Tab A1-830 ATTR{idProduct}==\"3604\", ENV{adb_adbfast}=\"yes\" # Iconia Tab A500 ATTR{idProduct}==\"3325\", ENV{adb_adbfast}=\"yes\" # Liquid (3202=normal,3203=debug) ATTR{idProduct}==\"3203\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Acer\" # Actions Semiconductor Co., Ltd ATTR{idVendor}==\"10d6\", ENV{adb_user}=\"yes\" # Denver TAD 70111 ATTR{idProduct}==\"0c02\", SYMLINK+=\"android_adb\" # ADVANCE ATTR{idVendor}==\"0a5c\", ENV{adb_user}=\"yes\" # S5 ATTR{idProduct}==\"e681\", SYMLINK+=\"android_adb\" # Amazon Lab126 ATTR{idVendor}==\"1949\", ENV{adb_user}=\"yes\" # Amazon Kindle Fire ATTR{idProduct}==\"0006\", ENV{adb_adbfast}=\"yes\" # Archos ATTR{idVendor}!=\"0e79\", GOTO=\"not_Archos\" ENV{adb_user}=\"yes\" # 43 ATTR{idProduct}==\"1417\", ENV{adb_adbfast}=\"yes\" # 101 ATTR{idProduct}==\"1411\", ENV{adb_adbfast}=\"yes\" # 101 xs ATTR{idProduct}==\"1549\", ENV{adb_adbfast}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Archos\" # ASUSTeK ATTR{idVendor}!=\"0b05\", GOTO=\"not_Asus\" # False positive - accessory ATTR{idProduct}==\"1???\", GOTO=\"android_usb_rules_end\" ENV{adb_user}=\"yes\" # Zenphone 2 (ZE500CL) (7770=adb 7773=mtp,adb 7777=ptp,adb 7775=rndis,adb,mass_storage 5F03=mtp,adb,pclink,mass_storage 5F07=ptp,adb,pclink 5F05=rndis,adb,pclink,mass_storage ATTR{idProduct}==\"7770\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"7773\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"7777\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"7775\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"5F03\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"5F07\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"5F05\", SYMLINK+=\"android_adb\" # Zenphone 4 (581f=mtp,adb 583f=rndis,adb) ATTR{idProduct}==\"581f\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"583f\", SYMLINK+=\"android_adb\" # Zenphone 5 (4c90=normal,4c91=debug,4daf=Fastboot) ATTR{idProduct}==\"4c91\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4daf\", SYMLINK+=\"android_fastboot\" # Tegra APX ATTR{idProduct}==\"7030\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Asus\" # Azpen Onda ATTR{idVendor}==\"1f3a\", ENV{adb_user}=\"yes\" # BQ ATTR{idVendor}!=\"2a47\", GOTO=\"not_BQ\" ENV{adb_user}=\"yes\" # Aquaris 4.5 ATTR{idProduct}==\"0c02\", ENV{adb_adbfast}=\"yes\" ATTR{idProduct}==\"2008\", ENV{adb_adbfast}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_BQ\" # Dell ATTR{idVendor}==\"413c\", ENV{adb_user}=\"yes\" # Essential ATTR{idVendor}!=\"2e17\", GOTO=\"not_Essential\" ENV{adb_user}=\"yes\" # Essential PH-1 ATTR{idProduct}==\"c009\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"c030\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Essential\" # Fairphone 2 ATTR{idVendor}==\"2ae5\", ENV{adb_user}=\"yes\" # Foxconn ATTR{idVendor}==\"0489\", ENV{adb_user}=\"yes\" # Commtiva Z71, Geeksphone One ATTR{idVendor}==\"0489\", ATTR{idProduct}==\"c001\", SYMLINK+=\"android_adb\" # Fujitsu/Fujitsu Toshiba ATTR{idVendor}==\"04c5\", ENV{adb_user}=\"yes\" # Fuzhou Rockchip Electronics ATTR{idVendor}==\"2207\", ENV{adb_user}=\"yes\" # Mediacom Smartpad 715i ATTR{idVendor}==\"2207\", ATTR{idProduct}==\"0000\", SYMLINK+=\"android_adb\" # Ubislate 7Ci ATTR{idVendor}==\"2207\", ATTR{idProduct}==\"0010\", SYMLINK+=\"android_adb\" # Garmin-Asus ATTR{idVendor}==\"091e\", ENV{adb_user}=\"yes\" # Google ATTR{idVendor}!=\"18d1\", GOTO=\"not_Google\" ENV{adb_user}=\"yes\" # Nexus, Pixel, Pixel XL, Pixel 2, Pixel 2XL (4ee2=mtp,adb 4ee4=rndis,adb 4ee6=ptp,adb 4ee7=adb 4ee9=midi,adb 2d01=accessory,adb 2d03=audio_source,adb 2d05=accessory,audio_source,adb) # See https://android.googlesource.com/device/google/wahoo/+/master/init.hardware.usb.rc ATTR{idProduct}==\"4ee2\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee4\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee6\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee7\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee9\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"2d01\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"2d03\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"2d05\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4ee0\", SYMLINK+=\"android_fastboot\" # Nexus 7 ATTR{idProduct}==\"4e42\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4e40\", SYMLINK+=\"android_fastboot\" # Nexus 5, Nexus 10 ATTR{idProduct}==\"4ee1\", ENV{adb_adbfast}=\"yes\" # Nexus S (4e22=mass_storage,adb 4e24=rndis,adb) # See https://android.googlesource.com/device/samsung/crespo/+/android-4.1.2_r2.1/init.herring.usb.rc ATTR{idProduct}==\"4e22\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4e24\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"4e20\", SYMLINK+=\"android_fastboot\" # Galaxy Nexus ATTR{idProduct}==\"4e30\", ENV{adb_adbfast}=\"yes\" # Nexus One (4e11=normal,4e12=debug,0fff=debug) ATTR{idProduct}==\"4e12\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"0fff\", SYMLINK+=\"android_fastboot\" # Generic and unspecified debug interface ATTR{idProduct}==\"d00d\", SYMLINK+=\"android_fastboot\" # Pico i.MX7 Dual Development Board ATTR{idProduct}==\"4ee7\", SYMLINK+=\"android_adb\" # Include: Samsung Galaxy Nexus (GSM) ATTR{idProduct}==\"4e30\", SYMLINK+=\"android_fastboot\" # Recovery adb entry for Nexus Family (orig d001, OP3 has 18d1:d002) ATTR{idProduct}==\"d00?\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Google\" # Haier ATTR{idVendor}==\"201e\", ENV{adb_user}=\"yes\" # Hisense ATTR{idVendor}==\"109b\", ENV{adb_user}=\"yes\" # Honeywell/Foxconn ATTR{idVendor}!=\"0c2e\", GOTO=\"not_Honeywell\" ENV{adb_user}=\"yes\" # D70e ATTR{idProduct}==\"0ba3\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Honeywell\" # HTC ATTR{idVendor}!=\"0bb4\", GOTO=\"not_HTC\" ENV{adb_user}=\"yes\" # fastboot mode enabled ATTR{idProduct}==\"0fff\", ENV{adb_adbfast}=\"yes\", GOTO=\"android_usb_rule_match\" # ChaCha ATTR{idProduct}==\"0cb2\", ENV{adb_adbfast}=\"yes\" # Desire (Bravo) ATTR{idProduct}==\"0c87\", SYMLINK+=\"android_adb\" # Desire HD ATTR{idProduct}==\"0ca2\", SYMLINK+=\"android_adb\" # Desire S (Saga) ATTR{idProduct}==\"0cab\", SYMLINK+=\"android_adb\" # Desire Z ATTR{idProduct}==\"0c91\", ENV{adb_adbfast}=\"yes\" # Evo Shift ATTR{idProduct}==\"0ca5\", SYMLINK+=\"android_adb\" # G1 ATTR{idProduct}==\"0c01\", ENV{adb_adbfast}=\"yes\" # HD2 ATTR{idProduct}==\"0c02\", ENV{adb_adbfast}=\"yes\" # Hero H2000 ATTR{idProduct}==\"0001\", ENV{adb_adbfast}=\"yes\" # Hero (GSM), Desire ATTR{idProduct}==\"0c99\", SYMLINK+=\"android_adb\" # Hero (CDMA) ATTR{idProduct}==\"0c9a\", SYMLINK+=\"android_adb\" # Incredible ATTR{idProduct}==\"0c9e\", SYMLINK+=\"android_adb\" # Incredible rev 0002 ATTR{idProduct}==\"0c8d\", SYMLINK+=\"android_adb\" # MyTouch 4G ATTR{idProduct}==\"0c96\", SYMLINK+=\"android_adb\" # One (m7) && One (m8) ATTR{idProduct}==\"0c93\" # Sensation ATTR{idProduct}==\"0f87\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"0ff0\", SYMLINK+=\"android_fastboot\" # One V ATTR{idProduct}==\"0ce5\", SYMLINK+=\"android_adb\" # Slide ATTR{idProduct}==\"0e03\", SYMLINK+=\"android_adb\" # Tatoo, Dream, ADP1, G1, Magic ATTR{idProduct}==\"0c01\" ATTR{idProduct}==\"0c02\", ENV{adb_adbfast}=\"yes\" # Vision ATTR{idProduct}==\"0c91\", SYMLINK+=\"android_adb\" # Wildfire ATTR{idProduct}==\"0c8b\", ENV{adb_adbfast}=\"yes\" # Wildfire S ATTR{idProduct}==\"0c86\", ENV{adb_adbfast}=\"yes\" # Zopo ZP900, Fairphone ATTR{idProduct}==\"0c03\", ENV{adb_adbfast}=\"yes\" # Zopo C2 ATTR{idProduct}==\"2008\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" GOTO=\"android_usb_rule_match\" LABEL=\"not_HTC\" # Huawei ATTR{idVendor}!=\"12d1\", GOTO=\"not_Huawei\" ENV{adb_user}=\"yes\" # IDEOS ATTR{idProduct}==\"1038\", ENV{adb_adbfast}=\"yes\" # U8850 Vision ATTR{idProduct}==\"1021\", ENV{adb_adbfast}=\"yes\" # HiKey adb ATTR{idProduct}==\"1057\", SYMLINK+=\"android_adb\" # HiKey usbnet ATTR{idProduct}==\"1050\", SYMLINK+=\"android_adb\" # Honor 6 ATTR{idProduct}==\"103a\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"1051\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # MediaPad M2-A01L ATTR{idProduct}==\"1052\", SYMLINK+=\"android_adb\" # Huawei Watch ATTR{idProduct}==\"1c2c\", SYMLINK+=\"android_adb\" # Mate 9 ATTR{idProduct}==\"107e\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Huawei\" # Intel # Geeksphone Revolution ATTR{idVendor}==\"8087\", ATTR{idProduct}==\"0a16\", SYMLINK+=\"android_adb\", ENV{adb_user}=\"yes\" # Chuwi Hi 10 Pro (HQ64) ATTR{idVendor}==\"8087\", ATTR{idProduct}==\"2a65\", SYMLINK+=\"android_adb\", ENV{adb_user}=\"yes\" ATTR{idVendor}==\"8087\", ATTR{idProduct}==\"07ef\", SYMLINK+=\"android_adb\", ENV{adb_user}=\"yes\" # Reference Boards using kernelflinger # See https://github.com/intel/kernelflinger/blob/master/libefiusb/usb.c#L56 ATTR{idProduct}==\"09ef\", ENV{adb_adbfast}=\"yes\" # IUNI ATTR{idVendor}!=\"271d\", GOTO=\"not_IUNI\" ENV{adb_user}=\"yes\" # U3 ATTR{idProduct}==\"bf39\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_IUNI\" # K-Touch ATTR{idVendor}==\"24e3\", ENV{adb_user}=\"yes\" # KT Tech ATTR{idVendor}==\"2116\", ENV{adb_user}=\"yes\" # Kyocera #ATTR{idVendor}==\"0482\", ENV{adb_user}=\"yes\" # Lenovo ATTR{idVendor}==\"17ef\", ENV{adb_user}=\"yes\" # LeTv ATTR{idVendor}!=\"2b0e\", GOTO=\"not_letv\" ENV{adb_user}=\"yes\" # LEX720 LeEco Pro3 6GB (610c=normal,610d=debug, 610b=camera) ATTR{idProduct}==\"610d\", ENV{adb_fastboot}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_letv\" # LG ATTR{idVendor}!=\"1004\", GOTO=\"not_LG\" ENV{adb_user}=\"yes\" # Ally, Vortex, P500, P500h ATTR{idProduct}==\"618f\" ATTR{idProduct}==\"618e\", SYMLINK+=\"android_adb\" # G2 D802 ATTR{idProduct}==\"61f1\", SYMLINK+=\"android_adb\" # G2 D803 ATTR{idProduct}==\"618c\", SYMLINK+=\"android_adb\" # G2 D803 rogers ATTR{idProduct}==\"631f\", SYMLINK+=\"android_adb\" # G2 mini D620r (PTP) ATTR{idProduct}==\"631d\", SYMLINK+=\"android_adb\" # G3 D855 ATTR{idProduct}==\"633e\", SYMLINK+=\"android_adb\" # Optimus LTE ATTR{idProduct}==\"6315\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"61f9\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # Optimus One ATTR{idProduct}==\"61c5\", SYMLINK+=\"android_adb\" # Swift GT540 ATTR{idProduct}==\"61b4\", SYMLINK+=\"android_adb\" # P500 CM10 ATTR{idProduct}==\"61a6\", SYMLINK+=\"android_adb\" # 4X HD P880 ATTR{idProduct}==\"61f9\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_LG\" # Meizu ATTR{idVendor}!=\"2a45\", GOTO=\"not_Meizu\" ENV{adb_user}=\"yes\" # MX6 ATTR{idProduct}==\"0c02\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Meizu\" # Micromax ATTR{idVendor}!=\"2a96\", GOTO=\"not_Micromax\" ENV{adb_user}=\"yes\" # P702 ATTR{idProduct}==\"201d\", SYMLINK+=\"android_adb\", SYMLINK+=\"android_fastboot\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Micromax\" # Motorola ATTR{idVendor}!=\"22b8\", GOTO=\"not_Motorola\" ENV{adb_user}=\"yes\" # CLIQ XT/Quench ATTR{idProduct}==\"2d66\" # Defy/MB525 ATTR{idProduct}==\"428c\" # Droid ATTR{idProduct}==\"41db\" # Xoom ID 1 ATTR{idProduct}==\"70a8\", ENV{adb_adbfast}=\"yes\" # Xoom ID 2 ATTR{idProduct}==\"70a9\", ENV{adb_adbfast}=\"yes\" # Razr XT912 ATTR{idProduct}==\"4362\", ENV{adb_adbfast}=\"yes\" # Moto XT1052 ATTR{idProduct}==\"2e83\", ENV{adb_adbfast}=\"yes\" # Moto E/G ATTR{idProduct}==\"2e76\", ENV{adb_adbfast}=\"yes\" # Moto E/G (Dual SIM) ATTR{idProduct}==\"2e80\", ENV{adb_adbfast}=\"yes\" # Moto E/G (Global GSM) ATTR{idProduct}==\"2e82\", ENV{adb_adbfast}=\"yes\" # Droid Turbo 2) ATTR{idProduct}==\"2ea4\", ENV{adb_adbfast}=\"yes\", SYMLINK+=\"android%n\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Motorola\" # MTK ATTR{idVendor}==\"0e8d\", ENV{adb_user}=\"yes\" # NEC ATTR{idVendor}==\"0409\", ENV{adb_user}=\"yes\" # Nextbit ATTR{idVendor}==\"2c3f\", ENV{adb_user}=\"yes\" # Nokia X ATTR{idVendor}==\"0421\", ENV{adb_user}=\"yes\" # Nokia 3 ATTR{idVendor}==\"2e04\", ENV{adb_user}=\"yes\" # Nook ATTR{idVendor}==\"2080\", ENV{adb_user}=\"yes\" # Nvidia ATTR{idVendor}==\"0955\", ENV{adb_user}=\"yes\" # Audi SDIS Rear Seat Entertainment Tablet ATTR{idProduct}==\"7000\", SYMLINK+=\"android_fastboot\" # OnePlus(Oreo) ATTR{idVendor}!=\"2a70\", GOTO=\"not_OnePlus\" ENV{adb_user}=\"yes\" # Charging mode ATTR{idProduct}==\"4ee7\", SYMLINK+=\"android_adb\" # MTP mode ATTR{idProduct}==\"9011\", SYMLINK+=\"android_adb\" # PTP mode ATTR{idProduct}==\"904e\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_OnePlus\" # OnePlus 3T w/ Oreo MIDI mode ATTR{idVendor}!=\"05c6\", GOTO=\"not_OnePlus_MIDI\" ATTR{idProduct}==\"90bb\", SYMLINK+=\"android_adb\" LABEL=\"not_OnePlus_MIDI\" # Oppo ATTR{idVendor}==\"22d9\", ENV{adb_user}=\"yes\" # Find 5 ATTR{idProduct}==\"2767\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"2764\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # OTGV ATTR{idVendor}==\"2257\", ENV{adb_user}=\"yes\" # Pantech ATTR{idVendor}==\"10a9\", ENV{adb_user}=\"yes\" # Pegatron ATTR{idVendor}==\"1d4d\", ENV{adb_user}=\"yes\" # Philips ATTR{idVendor}==\"0471\", ENV{adb_user}=\"yes\" # PMC-Sierra ATTR{idVendor}==\"04da\", ENV{adb_user}=\"yes\" # Qualcomm ATTR{idVendor}!=\"05c6\", GOTO=\"not_Qualcomm\" ENV{adb_user}=\"yes\" # Geeksphone Zero ATTR{idProduct}==\"9025\", SYMLINK+=\"android_adb\" # OnePlus One ATTR{idProduct}==\"676?\", SYMLINK+=\"android_adb\" # OnePlus Two ATTR{idProduct}==\"9011\", SYMLINK+=\"android_adb\" # OnePlus 3 ATTR{idProduct}==\"900e\", SYMLINK+=\"android_adb\" # OnePlus 3T ATTR{idProduct}==\"676c\", SYMLINK+=\"android_adb\" # OnePlus 5 ATTR{idProduct}==\"9011\", SYMLINK+=\"android_adb\" # Xiaomi A1 (90bb=midi+adb) ATTR{idProduct}==\"90bb\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Qualcomm\" # Research In Motion, Ltd. ATTR{idVendor}!=\"0fca\", GOTO=\"not_RIM\" ENV{adb_user}=\"yes\" # BlackBerry DTEK60 ATTR{idProduct}==\"8042\", ENV{adb_fastboot}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_RIM\" # SK Telesys ATTR{idVendor}==\"1f53\", ENV{adb_user}=\"yes\" # Samsung ATTR{idVendor}!=\"04e8\", GOTO=\"not_Samsung\" # False positive printer ATTR{idProduct}==\"3???\", GOTO=\"android_usb_rules_end\" ENV{adb_user}=\"yes\" # Galaxy i5700 ATTR{idProduct}==\"681c\", ENV{adb_adbfast}=\"yes\" # Galaxy i5800 (681c=debug,6601=fastboot,68a0=mediaplayer) ATTR{idProduct}==\"681c\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"6601\", SYMLINK+=\"android_fastboot\" ATTR{idProduct}==\"68a9\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # Galaxy i7500 ATTR{idProduct}==\"6640\", ENV{adb_adbfast}=\"yes\" # Galaxy i9000 S, i9300 S3 ATTR{idProduct}==\"6601\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"685d\", MODE=\"0660\" ATTR{idProduct}==\"68c3\", MODE=\"0660\" # Galaxy Ace (S5830) \"Cooper\" ATTR{idProduct}==\"689e\", ENV{adb_adbfast}=\"yes\" # Galaxy Tab ATTR{idProduct}==\"6877\", ENV{adb_adbfast}=\"yes\" # Galaxy Nexus (GSM) (6860=mtp,adb 6864=rndis,adb 6866=ptp,adb) ATTR{idProduct}==\"6860\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"6864\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"6866\", SYMLINK+=\"android_adb\" # Galaxy Core, Tab 10.1, i9100 S2, i9300 S3, N5100 Note (8.0), Galaxy S3 SHW-M440S 3G (Korea only) ATTR{idProduct}==\"6860\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"685e\", ENV{adb_adbfast}=\"yes\" # Galaxy i9300 S3 ATTR{idProduct}==\"6866\", SYMLINK+=\"libmtp-%k\", ENV{ID_MTP_DEVICE}=\"1\", ENV{ID_MEDIA_PLAYER}=\"1\" # Galaxy S4 GT-I9500 ATTR{idProduct}==\"685d\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Samsung\" # Sharp ATTR{idVendor}==\"04dd\", ENV{adb_user}=\"yes\" # Sony ATTR{idVendor}==\"054c\", ENV{adb_user}=\"yes\" # Sony Ericsson ATTR{idVendor}!=\"0fce\", GOTO=\"not_Sony_Ericsson\" ENV{adb_user}=\"yes\" # Xperia X10 mini ATTR{idProduct}==\"3137\" ATTR{idProduct}==\"2137\", SYMLINK+=\"android_adb\" # Xperia X10 mini pro ATTR{idProduct}==\"3138\" ATTR{idProduct}==\"2138\", SYMLINK+=\"android_adb\" # Xperia X8 ATTR{idProduct}==\"3149\" ATTR{idProduct}==\"2149\", SYMLINK+=\"android_adb\" # Xperia X12 ATTR{idProduct}==\"e14f\" ATTR{idProduct}==\"614f\", SYMLINK+=\"android_adb\" # Xperia Arc S ATTR{idProduct}==\"414f\", ENV{adb_adbfast}=\"yes\" # Xperia Neo V (6156=debug,0dde=fastboot) ATTR{idProduct}==\"6156\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"0dde\", SYMLINK+=\"android_fastboot\" # Xperia S ATTR{idProduct}==\"5169\", ENV{adb_adbfast}=\"yes\" # Xperia SP ATTR{idProduct}==\"6195\", ENV{adb_adbfast}=\"yes\" # Xperia L ATTR{idProduct}==\"5192\", ENV{adb_adbfast}=\"yes\" # Xperia Mini Pro ATTR{idProduct}==\"0166\", ENV{adb_adbfast}=\"yes\" # Xperia V ATTR{idProduct}==\"0186\", ENV{adb_adbfast}=\"yes\" # Xperia Acro S ATTR{idProduct}==\"5176\", ENV{adb_adbfast}=\"yes\" # Xperia Z1 Compact ATTR{idProduct}==\"51a7\", ENV{adb_adbfast}=\"yes\" # Xperia Z2 ATTR{idProduct}==\"51ba\", ENV{adb_adbfast}=\"yes\" # Xperia Z3 ATTR{idProduct}==\"01af\", ENV{adb_adbfast}=\"yes\" # Xperia Z3 Compact ATTR{idProduct}==\"01bb\", ENV{adb_adbfast}=\"yes\" # Xperia Z3+ Dual ATTR{idProduct}==\"51c9\", ENV{adb_adbfast}=\"yes\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Sony_Ericsson\" # Spreadtrum ATTR{idVendor}==\"1782\", ENV{adb_user}=\"yes\" # T & A Mobile Phones ATTR{idVendor}==\"1bbb\", ENV{adb_user}=\"yes\" # Alcatel OT991D ATTR{idProduct}==\"00f2\", SYMLINK+=\"android_adb\" # Alcatel OT6012A ATTR{idProduct}==\"0167\", SYMLINK+=\"android_adb\" # Teleepoch ATTR{idVendor}==\"2340\", ENV{adb_user}=\"yes\" # Texas Instruments UsbBoot ATTR{idVendor}==\"0451\", ATTR{idProduct}==\"d00f\", ENV{adb_user}=\"yes\" ATTR{idVendor}==\"0451\", ATTR{idProduct}==\"d010\", ENV{adb_user}=\"yes\" # Toshiba ATTR{idVendor}==\"0930\", ENV{adb_user}=\"yes\" # WEARNERS ATTR{idVendor}==\"05c6\", ENV{adb_user}=\"yes\" # XiaoMi ATTR{idVendor}!=\"2717\", GOTO=\"not_XiaoMi\" ENV{adb_user}=\"yes\" # Mi2A ATTR{idProduct}==\"904e\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"9039\", SYMLINK+=\"android_adb\" # Mi3 ATTR{idProduct}==\"0368\", SYMLINK+=\"android_adb\" # RedMi 1S WCDMA (MTP+Debug) ATTR{idProduct}==\"1268\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note WCDMA (MTP+Debug) ATTR{idProduct}==\"1248\", SYMLINK+=\"android_adb\" # RedMi 1S / RedMi / RedMi Note WCDMA (PTP+Debug) ATTR{idProduct}==\"1218\", SYMLINK+=\"android_adb\" # RedMi 1S /RedMi / RedMi Note WCDMA (Usb+Debug) ATTR{idProduct}==\"1228\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note 4G WCDMA (MTP+Debug) ATTR{idProduct}==\"1368\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note 4G WCDMA (PTP+Debug) ATTR{idProduct}==\"1318\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note 4G WCDMA (Usb+Debug) ATTR{idProduct}==\"1328\", SYMLINK+=\"android_adb\" # Mi Mix / A1 (ff88=rndis+adb, ff18=ptp+adb, ff48=mtp+adb, ff28=storage+adb) ATTR{idProduct}==\"ff88\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"ff18\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"ff48\", SYMLINK+=\"android_adb\" ATTR{idProduct}==\"ff28\", SYMLINK+=\"android_adb\" # RedMi / RedMi Note 4G CDMA (Usb+Debug) / Mi4c / Mi5 ATTR{idProduct}==\"ff68\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_XiaoMi\" # Yota ATTR{idVendor}!=\"2916\", GOTO=\"not_Yota\" ENV{adb_user}=\"yes\" # YotaPhone2 (f003=normal,9139=debug) ATTR{idProduct}==\"9139\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Yota\" # Wileyfox ATTR{idVendor}==\"2970\", ENV{adb_user}=\"yes\" # YU ATTR{idVendor}==\"1ebf\", ENV{adb_user}=\"yes\" # Zebra ATTR{idVendor}!=\"05e0\", GOTO=\"not_Zebra\" ENV{adb_user}=\"yes\" # TC55 ATTR{idProduct}==\"2101\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_Zebra\" # ZTE ATTR{idVendor}!=\"19d2\", GOTO=\"not_ZTE\" ENV{adb_user}=\"yes\" # Blade (1353=normal,1351=debug) ATTR{idProduct}==\"1351\", SYMLINK+=\"android_adb\" # Blade S (Crescent, Orange San Francisco 2) (1355=normal,1354=debug) ATTR{idProduct}==\"1354\", SYMLINK+=\"android_adb\" GOTO=\"android_usb_rule_match\" LABEL=\"not_ZTE\" # Wileyfox ATTR{idVendor}==\"2970\", ENV{adb_user}=\"yes\" # YU ATTR{idVendor}==\"1ebf\", ENV{adb_user}=\"yes\" # ZUK ATTR{idVendor}==\"2b4c\", ENV{adb_user}=\"yes\" # Skip other vendor tests LABEL=\"android_usb_rule_match\" # Symlink shortcuts to reduce code in tests above ENV{adb_adbfast}==\"yes\", ENV{adb_adb}=\"yes\", ENV{adb_fast}=\"yes\" ENV{adb_adb}==\"yes\", ENV{adb_user}=\"yes\", SYMLINK+=\"android_adb\" ENV{adb_fast}==\"yes\", ENV{adb_user}=\"yes\", SYMLINK+=\"android_fastboot\" # Enable device as a user device if found (add an \"android\" SYMLINK) ENV{adb_user}==\"yes\", MODE=\"0660\", GROUP=\"adbusers\", TAG+=\"uaccess\", SYMLINK+=\"android\" # Devices listed here {begin...end} are connected by USB LABEL=\"android_usb_rules_end\"","title":"51-android.rules"},{"location":"Dev/Bash/Collect_bash_history/","text":"Collect .bash_history from a bunch of servers. ip_base_file - just a list of IP address. And you have to have same password on all servers. #!/bin/bash # # Script to collect bash history from remote servers # echo \"Usage: ./collect.sh <ip_base_file>\" read -n 1 -p \"Do you want to collect bash_history? (y/[a]): \" AMSURE [ \"$AMSURE\" = \"y\" ] || exit echo \"\" 1>&2 now=$(date +\"%m_%d_%Y\") mkdir ./$now ## Provide BASE64 encoded password here ## echo \"MEGA-SECURE-PASSWORD\" | base64 -i PASS=`echo \"TUVHQS1TRUNVUkUtUEFTU1dPUkQK\" | base64 -di` awk '{print $1}' < ./\"$1\" | while read ip; do expect -c \" set timeout 1 spawn scp root@$ip:~/.bash_history ./\"$now\"/\"$ip\"_history.txt expect yes/no { send yes\\r ; exp_continue } expect password: { send $PASS\\r } expect 100% sleep 1 exit \" done","title":"Collect bash history"},{"location":"Dev/Bash/Collect_bash_history/#collect-bash_history-from-a-bunch-of-servers","text":"ip_base_file - just a list of IP address. And you have to have same password on all servers. #!/bin/bash # # Script to collect bash history from remote servers # echo \"Usage: ./collect.sh <ip_base_file>\" read -n 1 -p \"Do you want to collect bash_history? (y/[a]): \" AMSURE [ \"$AMSURE\" = \"y\" ] || exit echo \"\" 1>&2 now=$(date +\"%m_%d_%Y\") mkdir ./$now ## Provide BASE64 encoded password here ## echo \"MEGA-SECURE-PASSWORD\" | base64 -i PASS=`echo \"TUVHQS1TRUNVUkUtUEFTU1dPUkQK\" | base64 -di` awk '{print $1}' < ./\"$1\" | while read ip; do expect -c \" set timeout 1 spawn scp root@$ip:~/.bash_history ./\"$now\"/\"$ip\"_history.txt expect yes/no { send yes\\r ; exp_continue } expect password: { send $PASS\\r } expect 100% sleep 1 exit \" done","title":"Collect .bash_history from a bunch of servers."},{"location":"Dev/Bash/Convert-CP1251-to-UTF8/","text":"Convert windows-1251 to utf-8 #!/usr/bin/bash # Recursive file convertion windows-1251 --> utf-8 # Place this file in the root of your site, add execute permission and run # Converts *.php, *.html, *.css, *.js files. # To add file type by extension, e.g. *.cgi, add '-o -name \"*.cgi\"' to the find command find ./ -name \"*.cfg\" -type f | while read file do echo \" $file\" mv $file $file.icv iconv -f WINDOWS-1251 -t UTF-8 $file.icv > $file rm -f $file.icv done","title":"Convert CP1251 to UTF8"},{"location":"Dev/Bash/Convert-CP1251-to-UTF8/#convert-windows-1251-to-utf-8","text":"#!/usr/bin/bash # Recursive file convertion windows-1251 --> utf-8 # Place this file in the root of your site, add execute permission and run # Converts *.php, *.html, *.css, *.js files. # To add file type by extension, e.g. *.cgi, add '-o -name \"*.cgi\"' to the find command find ./ -name \"*.cfg\" -type f | while read file do echo \" $file\" mv $file $file.icv iconv -f WINDOWS-1251 -t UTF-8 $file.icv > $file rm -f $file.icv done","title":"Convert windows-1251 to utf-8"},{"location":"Dev/Bash/Gentoo_Functions/","text":"# Copyright 1999-2014 Gentoo Foundation # Distributed under the terms of the GNU General Public License v2 # # All functions in this file should be written in POSIX sh. Please do # not use bashisms. # RC_GOT_FUNCTIONS=\"yes\" # # hard set the indent used for e-commands. # num defaults to 0 # This is a private function. # _esetdent() { local i=\"$1\" [ -z \"$i\" ] || [ \"$i\" -lt 0 ] && i=0 RC_INDENTATION=$(printf \"%${i}s\" '') } # # increase the indent used for e-commands. # eindent() { local i=\"$1\" [ -n \"$i\" ] && [ \"$i\" -gt 0 ] || i=$RC_DEFAULT_INDENT _esetdent $(( ${#RC_INDENTATION} + i )) } # # decrease the indent used for e-commands. # eoutdent() { local i=\"$1\" [ -n \"$i\" ] && [ \"$i\" -gt 0 ] || i=$RC_DEFAULT_INDENT _esetdent $(( ${#RC_INDENTATION} - i )) } # # this function was lifted from OpenRC. It returns 0 if the argument or # the value of the argument is \"yes\", \"true\", \"on\", or \"1\" or 1 # otherwise. # yesno() { [ -z \"$1\" ] && return 1 case \"$1\" in [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1) return 0;; [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0) return 1;; esac local value= eval value=\\$${1} case \"$value\" in [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1) return 0;; [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0) return 1;; *) vewarn \"\\$$1 is not set properly\"; return 1;; esac } # # use the system logger to log a message # esyslog() { local pri= local tag= if [ -n \"$EINFO_LOG\" ] && command -v logger > /dev/null 2>&1; then pri=\"$1\" tag=\"$2\" shift 2 [ -z \"$*\" ] && return 0 logger -p \"${pri}\" -t \"${tag}\" -- \"$*\" fi return 0 } # # show an informative message (without a newline) # einfon() { if yesno \"${EINFO_QUIET}\"; then return 0 fi if ! yesno \"${RC_ENDCOL}\" && [ \"${LAST_E_CMD}\" = \"ebegin\" ]; then printf \"\\n\" fi printf \" ${GOOD}*${NORMAL} ${RC_INDENTATION}$*\" LAST_E_CMD=\"einfon\" return 0 } # # show an informative message (with a newline) # einfo() { einfon \"$*\\n\" LAST_E_CMD=\"einfo\" return 0 } # # show a warning message (without a newline) and log it # ewarnn() { if yesno \"${EINFO_QUIET}\"; then return 0 else if ! yesno \"${RC_ENDCOL}\" && [ \"${LAST_E_CMD}\" = \"ebegin\" ]; then printf \"\\n\" >&2 fi printf \" ${WARN}*${NORMAL} ${RC_INDENTATION}$*\" >&2 fi local name=\"${0##*/}\" # Log warnings to system log esyslog \"daemon.warning\" \"${name}\" \"$*\" LAST_E_CMD=\"ewarnn\" return 0 } # # show a warning message (with a newline) and log it # ewarn() { if yesno \"${EINFO_QUIET}\"; then return 0 else if ! yesno \"${RC_ENDCOL}\" && [ \"${LAST_E_CMD}\" = \"ebegin\" ]; then printf \"\\n\" >&2 fi printf \" ${WARN}*${NORMAL} ${RC_INDENTATION}$*\\n\" >&2 fi local name=\"${0##*/}\" # Log warnings to system log esyslog \"daemon.warning\" \"${name}\" \"$*\" LAST_E_CMD=\"ewarn\" return 0 } # # show an error message (without a newline) and log it # eerrorn() { if yesno \"${EERROR_QUIET}\"; then return 1 else if ! yesno \"${RC_ENDCOL}\" && [ \"${LAST_E_CMD}\" = \"ebegin\" ]; then printf \"\\n\" >&2 fi printf \" ${BAD}*${NORMAL} ${RC_INDENTATION}$*\" >&2 fi local name=\"${0##*/}\" # Log errors to system log esyslog \"daemon.err\" \"rc-scripts\" \"$*\" LAST_E_CMD=\"eerrorn\" return 1 } # # show an error message (with a newline) and log it # eerror() { if yesno \"${EERROR_QUIET}\"; then return 1 else if ! yesno \"${RC_ENDCOL}\" && [ \"${LAST_E_CMD}\" = \"ebegin\" ]; then printf \"\\n\" >&2 fi printf \" ${BAD}*${NORMAL} ${RC_INDENTATION}$*\\n\" >&2 fi local name=\"${0##*/}\" # Log errors to system log esyslog \"daemon.err\" \"rc-scripts\" \"$*\" LAST_E_CMD=\"eerror\" return 1 } # # show a message indicating the start of a process # ebegin() { local msg=\"$*\" if yesno \"${EINFO_QUIET}\"; then return 0 fi msg=\"${msg} ...\" einfon \"${msg}\" if yesno \"${RC_ENDCOL}\"; then printf \"\\n\" fi LAST_E_LEN=\"$(( 3 + ${#RC_INDENTATION} + ${#msg} ))\" LAST_E_CMD=\"ebegin\" return 0 } # # indicate the completion of process, called from eend/ewend # if error, show errstr via efunc # # This function is private to functions.sh. Do not call it from a # script. # _eend() { hen ENDCOL='\\033[A\\033['$(( COLS - 8 ))'C' else ENDCOL='' fi # Setup the colors so our messages all look pretty if yesno \"${RC_NOCOLOR}\"; then unset GOOD WARN BAD NORMAL HILITE BRACKET elif (command -v tput && tput colors) >/dev/null 2>&1; then GOOD=\"$(tput sgr0)$(tput bold)$(tput setaf 2)\" WARN=\"$(tput sgr0)$(tput bold)$(tput setaf 3)\" BAD=\"$(tput sgr0)$(tput bold)$(tput setaf 1)\" HILITE=\"$(tput sgr0)$(tput bold)$(tput setaf 6)\" BRACKET=\"$(tput sgr0)$(tput bold)$(tput setaf 4)\" NORMAL=\"$(tput sgr0)\" else GOOD=$(printf '\\033[32;01m') WARN=$(printf '\\033[33;01m') BAD=$(printf '\\033[31;01m') HILITE=$(printf '\\033[36;01m') BRACKET=$(printf '\\033[34;01m') NORMAL=$(printf '\\033[0m') fi # vim:ts=4 shift _eend \"${retval}\" eerror \"$*\" LAST_E_CMD=\"eend\" return ${retval} } # # indicate the completion of process # if error, show errstr via ewarn # ewend() { local retval=\"${1:-0}\" [ $# -eq 0 ] || shift _eend \"${retval}\" ewarn \"$*\" LAST_E_CMD=\"ewend\" return ${retval} } # v-e-commands honor EINFO_VERBOSE which defaults to no. # The condition is negated so the return value will be zero. veinfo() { yesno \"${EINFO_VERBOSE}\" && einfo \"$@\" } veinfon() { yesno \"${EINFO_VERBOSE}\" && einfon \"$@\" } vewarn() { yesno \"${EINFO_VERBOSE}\" && ewarn \"$@\" } veerror() { yesno \"${EINFO_VERBOSE}\" && eerror \"$@\" } vebegin() { yesno \"${EINFO_VERBOSE}\" && ebegin \"$@\" } veend() { yesno \"${EINFO_VERBOSE}\" && { eend \"$@\"; return $?; } return ${1:-0} } vewend() { yesno \"${EINFO_VERBOSE}\" && { ewend \"$@\"; return $?; } return ${1:-0} } veindent() { yesno \"${EINFO_VERBOSE}\" && eindent } veoutdent() { yesno \"${EINFO_VERBOSE}\" && eoutdent } # # prints the current libdir {lib,lib32,lib64} # get_libdir() { if [ -n \"${CONF_LIBDIR_OVERRIDE}\" ] ; then CONF_LIBDIR=\"${CONF_LIBDIR_OVERRIDE}\" elif command -v portageq > /dev/null 2>&1; then CONF_LIBDIR=\"$(portageq envvar CONF_LIBDIR)\" fi printf \"${CONF_LIBDIR:=lib}\\n\" } # # return 0 if gentoo=param was passed to the kernel # # EXAMPLE: if get_bootparam \"nodevfs\" ; then .... # get_bootparam() { local x copt params retval=1 [ ! -r /proc/cmdline ] && return 1 read copts < /proc/cmdline for copt in $copts ; do if [ \"${copt%=*}\" = \"gentoo\" ] ; then params=$(gawk -v PARAMS=\"${copt##*=}\" ' BEGIN { split(PARAMS, nodes, \",\") for (x in nodes) print nodes[x] }') # Parse gentoo option for x in ${params} ; do if [ \"${x}\" = \"$1\" ] ; then # echo \"YES\" retval=0 fi done fi done return ${retval} } # # return 0 if any of the files/dirs are newer than # the reference file # # EXAMPLE: if is_older_than a.out *.o ; then ... is_older_than() { local x= local ref=\"$1\" [ $# -eq 0 ] || shift for x in \"$@\" ; do [ \"${x}\" -nt \"${ref}\" ] && return 0 [ -d \"${x}\" ] && is_older_than \"${ref}\" \"${x}\"/* && return 0 done return 1 } # This is the main script, please add all functions above this point! # Dont output to stdout? EINFO_QUIET=\"${EINFO_QUIET:-no}\" EINFO_VERBOSE=\"${EINFO_VERBOSE:-no}\" # Should we use color? RC_NOCOLOR=\"${RC_NOCOLOR:-no}\" # Can the terminal handle endcols? RC_ENDCOL=\"yes\" # Default values for e-message indentation and dots RC_INDENTATION='' RC_DEFAULT_INDENT=2 RC_DOT_PATTERN='' # Cache the CONSOLETYPE - this is important as backgrounded shells don't # have a TTY. rc unsets it at the end of running so it shouldn't hang # around if [ -z \"${CONSOLETYPE}\" ] ; then CONSOLETYPE=\"$(consoletype stdout 2>/dev/null )\"; export CONSOLETYPE fi if [ \"${CONSOLETYPE}\" = \"serial\" ] ; then RC_NOCOLOR=\"yes\" RC_ENDCOL=\"no\" fi for arg in \"$@\" ; do case \"${arg}\" in # Lastly check if the user disabled it with --nocolor argument --nocolor|-nc) RC_NOCOLOR=\"yes\" ;; esac done # Setup COLS and ENDCOL so eend can line up the [ ok ] COLS=\"${COLUMNS:-0}\" # bash's internal COLUMNS variable [ \"$COLS\" -eq 0 ] && \\ COLS=\"$(set -- $(stty size 2>/dev/null) ; printf \"$2\\n\")\" [ -z \"$COLS\" ] && COLS=80 [ \"$COLS\" -gt 0 ] || COLS=80 # width of [ ok ] == 7 if yesno \"${RC_ENDCOL}\"; then ENDCOL='\\033[A\\033['$(( COLS - 8 ))'C' else ENDCOL='' fi # Setup the colors so our messages all look pretty if yesno \"${RC_NOCOLOR}\"; then unset GOOD WARN BAD NORMAL HILITE BRACKET elif (command -v tput && tput colors) >/dev/null 2>&1; then GOOD=\"$(tput sgr0)$(tput bold)$(tput setaf 2)\" WARN=\"$(tput sgr0)$(tput bold)$(tput setaf 3)\" BAD=\"$(tput sgr0)$(tput bold)$(tput setaf 1)\" HILITE=\"$(tput sgr0)$(tput bold)$(tput setaf 6)\" BRACKET=\"$(tput sgr0)$(tput bold)$(tput setaf 4)\" NORMAL=\"$(tput sgr0)\" else GOOD=$(printf '\\033[32;01m') WARN=$(printf '\\033[33;01m') BAD=$(printf '\\033[31;01m') HILITE=$(printf '\\033[36;01m') BRACKET=$(printf '\\033[34;01m') NORMAL=$(printf '\\033[0m') fi # vim:ts=4","title":"Gentoo Functions"},{"location":"Dev/Brainfuck/Sample1/","text":"Print \"2 + 2 = 4\"** # Increase a[1] to 50 and print ASCII value \"2\" # 1. ++++++++++[>+++++<-]>.< # Increase a[2] to 32 and print ASCII value \" \" # 2. ++++++++[>>++++<<-]>>.<< # Increase a[3] to 43 and print ASCII value \"+\" # 3. ++++++++++[>>>++++<<<-]>>>+++.<<< # Print from a[2] ASCII value \" \" # 4. >>.<< # Print from a[1] ASCII value \"2\" # 5. >.< # Print from a[2] ASCII value \" \" # 6. >>.<< # Increase a[4] to 61 and print ASCII value \"=\" # 7. ++++++++++[>>>>++++++<<<<-]>>>>+.<<<< # Print from a[2] ASCII value \" \" # 8. >>.<< # Increase a[5] to 52 and print ASCII value \"4\" # 9. ++++++++++[>>>>>+++++<<<<<-]>>>>>++.<<<<< ++++++++++[>+++++<-]>.< ++++++++[>>++++<<-]>>.<< ++++++++++[>>>++++<<<-]>>>+++.<<< >>.<< >.< >>.<< ++++++++++[>>>>++++++<<<<-]>>>>+.<<<< >>.<< ++++++++++[>>>>>+++++<<<<<-]>>>>>++.<<<<<","title":"Sample1"},{"location":"Dev/Brainfuck/Sample1/#print-2-2-4","text":"# Increase a[1] to 50 and print ASCII value \"2\" # 1. ++++++++++[>+++++<-]>.< # Increase a[2] to 32 and print ASCII value \" \" # 2. ++++++++[>>++++<<-]>>.<< # Increase a[3] to 43 and print ASCII value \"+\" # 3. ++++++++++[>>>++++<<<-]>>>+++.<<< # Print from a[2] ASCII value \" \" # 4. >>.<< # Print from a[1] ASCII value \"2\" # 5. >.< # Print from a[2] ASCII value \" \" # 6. >>.<< # Increase a[4] to 61 and print ASCII value \"=\" # 7. ++++++++++[>>>>++++++<<<<-]>>>>+.<<<< # Print from a[2] ASCII value \" \" # 8. >>.<< # Increase a[5] to 52 and print ASCII value \"4\" # 9. ++++++++++[>>>>>+++++<<<<<-]>>>>>++.<<<<< ++++++++++[>+++++<-]>.< ++++++++[>>++++<<-]>>.<< ++++++++++[>>>++++<<<-]>>>+++.<<< >>.<< >.< >>.<< ++++++++++[>>>>++++++<<<<-]>>>>+.<<<< >>.<< ++++++++++[>>>>>+++++<<<<<-]>>>>>++.<<<<<","title":"Print \"2 + 2 = 4\"**"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/","text":"Overview C++11/14/17 Many of these descriptions and examples come from various resources (see Acknowledgements section), summarized in my own words. C++17 includes the following new language features: template argument deduction for class templates declaring non-type template parameters with auto folding expressions new rules for auto deduction from braced-init-list constexpr lambda inline variables nested namespaces structured bindings selection statements with initializer constexpr if C++17 includes the following new library features: std::variant std::optional std::any std::string_view std::invoke std::apply splicing for maps and sets C++14 includes the following new language features: binary literals generic lambda expressions lambda capture initializers return type deduction decltype(auto) relaxing constraints on constexpr functions C++14 includes the following new library features: user-defined literals for standard library types compile-time integer sequences C++11 includes the following new language features: move semantics variadic templates rvalue references initializer lists static assertions auto lambda expressions decltype template aliases nullptr strongly-typed enums attributes constexpr delegating constructors user-defined literals explicit virtual overrides default functions deleted functions range-based for loops special member functions for move semantics C++11 includes the following new library features: std::move std::forward std::to_string type traits smart pointers std::chrono tuples std::tie std::array unordered containers memory model C++17 Language Features Template argument deduction for class templates Automatic template argument deduction much like how it's done for functions, but now including class constructors. template <typename T = float> struct MyContainer { T val; MyContainer() : val() {} MyContainer(T val) : val(val) {} // ... }; MyContainer c1{ 1 }; // OK MyContainer<int> MyContainer c2; // OK MyContainer<float> Declaring non-type template parameters with auto Following the deduction rules of auto , while respecting the non-type template parameter list of allowable types[*], template arguments can be deduced from the types of its arguments: // Explicitly pass type `int` as template argument. auto seq = std::integer_sequence<int, 0, 1, 2>(); // Type is deduced to be `int`. auto seq2 = my_integer_sequence<0, 1, 2>(); * - For example, you cannot use a double as a template parameter type, which also makes this an invalid deduction using auto . Folding expressions A fold expression performs a fold of a template parameter pack over a binary operator. An expression of the form (... op e) or (e op ...) , where op is a fold-operator and e is an unexpanded parameter pack, are called unary folds . An expression of the form (e1 op1 ... op2 e2) , where op1 and op2 are fold-operators, is called a binary fold . Either e1 or e2 are unexpanded parameter packs, but not both. template<typename... Args> bool logicalAnd(Args... args) { // Binary folding. return (true && ... && args); } bool b = true; bool& b2 = b; logicalAnd(b, b2, true); // == true template<typename... Args> auto sum(Args... args) { // Unary folding. return (... + args); } sum(1.0, 2.0f, 3); // == 6.0 New rules for auto deduction from braced-init-list Changes to auto deduction when used with the uniform initialization syntax. Previously, auto x{ 3 }; deduces a std::initializer_list<int> , which now deduces to int . auto x1{ 1, 2, 3 }; // error: not a single element auto x2 = { 1, 2, 3 }; // decltype(x2) is std::initializer_list<int> auto x3{ 3 }; // decltype(x3) is int auto x4{ 3.0 }; // decltype(x4) is double constexpr lambda Compile-time lambdas using constexpr . auto identity = [] (int n) constexpr { return n; }; static_assert(identity(123) == 123); constexpr auto add = [] (int x, int y) { auto L = [=] { return x; }; auto R = [=] { return y; }; return [=] { return L() + R(); }; }; static_assert(add(1, 2)() == 3); constexpr int addOne(int n) { return [n] { return n + 1; }(); } static_assert(addOne(1) == 2); Inline variables The inline specifier can be applied to variables as well as to functions. A variable declared inline has the same semantics as a function declared inline. // Disassembly example using compiler explorer. struct S { int x; }; inline S x1 = S{321}; // mov esi, dword ptr [x1] // x1: .long 321 S x2 = S{123}; // mov eax, dword ptr [.L_ZZ4mainE2x2] // mov dword ptr [rbp - 8], eax // .L_ZZ4mainE2x2: .long 123 Nested namespaces Using the namespace resolution operator to create nested namespace definitions. namespace A { namespace B { namespace C { int i; } } } // vs. namespace A::B::C { int i; } Structured bindings A proposal for de-structuring initialization, that would allow writing auto {x, y, z} = expr; where the type of expr was a tuple-like object, whose elements would be bound to the variables x , y , and z (which this construct declares). Tuple-like objects include std::tuple , std::pair , std::array , and aggregate structures. using Coordinate = std::pair<int, int>; Coordinate origin() { return Coordinate{0, 0}; } const auto [ x, y ] = origin(); x; // == 0 y; // == 0 Selection statements with initializer New versions of the if and switch statements which simplify common code patterns and help users keep scopes tight. { std::lock_guard<std::mutex> lk(mx); if (v.empty()) v.push_back(val); } // vs. if (std::lock_guard<std::mutex> lk(mx); v.empty()) { v.push_back(val); } Foo gadget(args); switch (auto s = gadget.status()) { case OK: gadget.zip(); break; case Bad: throw BadFoo(s.message()); } // vs. switch (Foo gadget(args); auto s = gadget.status()) { case OK: gadget.zip(); break; case Bad: throw BadFoo(s.message()); } constexpr if Write code that is instantiated depending on a compile-time condition. template <typename T> constexpr bool isIntegral() { if constexpr (std::is_integral<T>::value) { return true; } else { return false; } } static_assert(isIntegral<int>() == true); static_assert(isIntegral<char>() == true); static_assert(isIntegral<double>() == false); struct S {}; static_assert(isIntegral<S>() == false); C++17 Library Features std::variant The class template std::variant represents a type-safe union . An instance of std::variant at any given time holds a value of one of its alternative types (it's also possible for it to be valueless). std::variant<int, double> v{ 12 }; std::get<int>(v); // == 12 std::get<0>(v); // == 12 v = 12.0; std::get<double>(v); // == 12.0 std::get<1>(v); // == 12.0 std::optional The class template std::optional manages an optional contained value, i.e. a value that may or may not be present. A common use case for optional is the return value of a function that may fail. std::optional<std::string> create(bool b) { if (b) { return \"Godzilla\"; } else { return {}; } } create(false).value_or(\"empty\"); // == \"empty\" create(true).value(); // == \"Godzilla\" // optional-returning factory functions are usable as conditions of while and if if (auto str = create(true)) { // ... } std::any A type-safe container for single values of any type. std::any x{ 5 }; x.has_value() // == true std::any_cast<int>(x) // == 5 std::any_cast<int&>(x) = 10; std::any_cast<int>(x) // == 10 std::string_view A non-owning reference to a string. Useful for providing an abstraction on top of strings (e.g. for parsing). // Regular strings. std::string_view cppstr{ \"foo\" }; // Wide strings. std::wstring_view wcstr_v{ L\"baz\" }; // Character arrays. char array[3] = {'b', 'a', 'r'}; std::string_view array_v(array, sizeof array); std::string str{ \" trim me\" }; std::string_view v{ str }; v.remove_prefix(std::min(v.find_first_not_of(\" \"), v.size())); str; // == \" trim me\" v; // == \"trim me\" std::invoke Invoke a Callable object with parameters. Examples of Callable objects are std::function or std::bind where an object can be called similarly to a regular function. template <typename Callable> class Proxy { Callable c; public: Proxy(Callable c): c(c) {} template <class... Args> decltype(auto) operator()(Args&&... args) { // ... return std::invoke(c, std::forward<Args>(args)...); } }; auto add = [] (int x, int y) { return x + y; }; Proxy<decltype(add)> p{ add }; p(1, 2); // == 3 std::apply Invoke a Callable object with a tuple of arguments. auto add = [] (int x, int y) { return x + y; }; std::apply(add, std::make_tuple( 1, 2 )); // == 3 Splicing for maps and sets Moving nodes and merging containers without the overhead of expensive copies, moves, or heap allocations/deallocations. Moving elements from one map to another: std::map<int, string> src{ { 1, \"one\" }, { 2, \"two\" }, { 3, \"buckle my shoe\" } }; std::map<int, string> dst{ { 3, \"three\" } }; dst.insert(src.extract(src.find(1))); // Cheap remove and insert of { 1, \"one\" } from `src` to `dst`. dst.insert(src.extract(2)); // Cheap remove and insert of { 2, \"two\" } from `src` to `dst`. // dst == { { 1, \"one\" }, { 2, \"two\" }, { 3, \"three\" } }; Inserting an entire set: std::set<int> src{1, 3, 5}; std::set<int> dst{2, 4, 5}; dst.merge(src); // src == { 5 } // dst == { 1, 2, 3, 4, 5 } Inserting elements which outlive the container: auto elementFactory() { std::set<...> s; s.emplace(...); return s.extract(s.begin()); } s2.insert(elementFactory()); Changing the key of a map element: std::map<int, string> m{ { 1, \"one\" }, { 2, \"two\" }, { 3, \"three\" } }; auto e = m.extract(2); e.key() = 4; m.insert(std::move(e)); // m == { { 1, \"one\" }, { 3, \"three\" }, { 4, \"two\" } } C++14 Language Features Binary literals Binary literals provide a convenient way to represent a base-2 number. It is possible to separate digits with ' . 0b110 // == 6 0b1111'1111 // == 255 Generic lambda expressions C++14 now allows the auto type-specifier in the parameter list, enabling polymorphic lambdas. auto identity = [](auto x) { return x; }; int three = identity(3); // == 3 std::string foo = identity(\"foo\"); // == \"foo\" Lambda capture initializers This allows creating lambda captures initialized with arbitrary expressions. The name given to the captured value does not need to be related to any variables in the enclosing scopes and introduces a new name inside the lambda body. The initializing expression is evaluated when the lambda is created (not when it is invoked ). int factory(int i) { return i * 10; } auto f = [x = factory(2)] { return x; }; // returns 20 auto generator = [x = 0] () mutable { // this would no compile without 'mutable' as we are modifying x on each call return x++; }; auto a = generator(); // == 0 auto b = generator(); // == 1 auto c = generator(); // == 2 Because it is now possible to move (or forward ) values into a lambda that could previously be only captured by copy or reference we can now capture move-only types in a lambda by value. Note that in the below example the p in the capture-list of task2 on the left-hand-side of = is a new variable private to the lambda body and does not refer to the original p . auto p = std::make_unique<int>(1); auto task1 = [=] { *p = 5; }; // ERROR: std::unique_ptr cannot be copied // vs. auto task2 = [p = std::move(p)] { *p = 5; }; // OK: p is move-constructed into the closure object // the original p is empty after task2 is created Using this reference-captures can have different names than the referenced variable. auto x = 1; auto f = [&r = x, x = x * 10] { ++r; return r + x; }; f(); // sets x to 2 and returns 12 Return type deduction Using an auto return type in C++14, the compiler will attempt to deduce the type for you. With lambdas, you can now deduce its return type using auto , which makes returning a deduced reference or rvalue reference possible. // Deduce return type as `int`. auto f(int i) { return i; } template <typename T> auto& f(T& t) { return t; } // Returns a reference to a deduced type. auto g = [](auto& x) -> auto& { return f(x); }; int y = 123; int& z = g(y); // reference to `y` decltype(auto) The decltype(auto) type-specifier also deduces a type like auto does. However, it deduces return types while keeping their references or \"const-ness\", while auto will not. const int x = 0; auto x1 = x; // int decltype(auto) x2 = x; // const int int y = 0; int& y1 = y; auto y2 = y; // int decltype(auto) y3 = y; // int& int&& z = 0; auto z1 = std::move(z); // int decltype(auto) z2 = std::move(z); // int&& // Note: Especially useful for generic code! // Return type is `int`. auto f(const int& i) { return i; } // Return type is `const int&`. decltype(auto) g(const int& i) { return i; } int x = 123; static_assert(std::is_same<const int&, decltype(f(x))>::value == 0); static_assert(std::is_same<int, decltype(f(x))>::value == 1); static_assert(std::is_same<const int&, decltype(g(x))>::value == 1); Relaxing constraints on constexpr functions In C++11, constexpr function bodies could only contain a very limited set of syntax, including (but not limited to): typedef s, using s, and a single return statement. In C++14, the set of allowable syntax expands greatly to include the most common syntax such as if statements, multiple return s, loops, etc. constexpr int factorial(int n) { if (n <= 1) { return 1; } else { return n * factorial(n - 1); } } factorial(5); // == 120 C++14 Library Features User-defined literals for standard library types New user-defined literals for standard library types, including new built-in literals for chrono and basic_string . These can be constexpr meaning they can be used at compile-time. Some uses for these literals include compile-time integer parsing, binary literals, and imaginary number literals. using namespace std::chrono_literals; auto day = 24h; day.count(); // == 24 std::chrono::duration_cast<std::chrono::minutes>(day).count(); // == 1440 Compile-time integer sequences The class template std::integer_sequence represents a compile-time sequence of integers. There are a few helpers built on top: std::make_integer_sequence<T, N...> - creates a sequence of 0, ..., N - 1 with type T . std::index_sequence_for<T...> - converts a template parameter pack into an integer sequence. Convert an array into a tuple: template<typename Array, std::size_t... I> decltype(auto) a2t_impl(const Array& a, std::integer_sequence<std::size_t, I...>) { return std::make_tuple(a[I]...); } template<typename T, std::size_t N, typename Indices = std::make_index_sequence<N>> decltype(auto) a2t(const std::array<T, N>& a) { return a2t_impl(a, Indices()); } C++11 Language Features Move semantics Move semantics is mostly about performance optimization: the ability to move an object without the expensive overhead of copying. The difference between a copy and a move is that a copy leaves the source unchanged, and a move will leave the source either unchanged or radically different -- depending on what the source is. For plain old data, a move is the same as a copy. To move an object means to transfer ownership of some resource it manages to another object. You could think of this as changing pointers held by the source object to be moved, or now held, by the destination object; the resource remains in its location in memory. Such an inexpensive transfer of resources is extremely useful when the source is an rvalue , where the potentially dangerous side-effect of changing the source after the move is redundant since the source is a temporary object that won't be accessible later. Moves also make it possible to transfer objects such as std::unique_ptr s, smart pointers that are designed to hold a pointer to a unique object, from one scope to another. See the sections on: rvalue references , defining move special member functions , std::move , std::forward . Rvalue references C++11 introduces a new reference termed the rvalue reference . An rvalue reference to A is created with the syntax A&& . This enables two major features: move semantics; and perfect forwarding , the ability to pass arguments while maintaining information about them as lvalues/rvalues in a generic way. auto type deduction with lvalues and rvalues: int x = 0; // `x` is an lvalue of type `int` int& xl = x; // `xl` is an lvalue of type `int&` int&& xr = x; // compiler error -- `x` is an lvalue int&& xr2 = 0; // `xr2` is an lvalue of type `int&&` auto& al = x; // `al` is an lvalue of type `int&` auto&& al2 = x; // `al2` is an lvalue of type `int&` auto&& ar = 0; // `ar` is an lvalue of type `int&&` See also: std::move , std::forward . Variadic templates The ... syntax creates a parameter pack or expands one. A template parameter pack is a template parameter that accepts zero or more template arguments (non-types, types, or templates). A template with at least one parameter pack is called a variadic template . template <typename... T> struct arity { constexpr static int value = sizeof...(T); }; static_assert(arity<>::value == 0); static_assert(arity<char, short, int>::value == 3); Initializer lists A lightweight array-like container of elements created using a \"braced list\" syntax. For example, { 1, 2, 3 } creates a sequences of integers, that has type std::initializer_list<int> . Useful as a replacement to passing a vector of objects to a function. int sum(const std::initializer_list<int>& list) { int total = 0; for (auto& e : list) { total += e; } return total; } auto list = { 1, 2, 3 }; f(list); // == 6 f({ 1, 2, 3 }); // == 6 f({}); // == 0 Static assertions Assertions that are evaluated at compile-time. constexpr int x = 0; constexpr int y = 1; static_assert(x == y, \"x != y\"); auto auto -typed variables are deduced by the compiler according to the type of their initializer. auto a = 3.14; // double auto b = 1; // int auto& c = b; // int& auto d = { 0 }; // std::initializer_list<int> auto&& e = 1; // int&& auto&& f = b; // int& auto g = new auto(123); // int* const auto h = 1; // const int auto i = 1, j = 2, k = 3; // int, int, int auto l = 1, m = true, n = 1.61; // error -- `l` deduced to be int, `m` is bool auto o; // error -- `o` requires initializer Extremely useful for readability, especially for complicated types: std::vector<int> v = ...; std::vector<int>::const_iterator cit = v.cbegin(); // vs. auto cit = v.cbegin(); Functions can also deduce the return type using auto . In C++11, a return type must be specified either explicitly, or using decltype like so: template <typename X, typename Y> auto add(X x, Y y) -> decltype(x + y) { return x + y; } add(1, 2); // == 3 add(1, 2.0); // == 3.0 add(1.5, 1.5); // == 3.0 The trailing return type in the above example is the declared type (see section on decltype ) of the expression x + y . For example, if x is an integer and y is a double, decltype(x + y) is a double. Therefore, the above function will deduce the type depending on what type the expression x + y yields. Notice that the trailing return type has access to its parameters, and this when appropriate. Lambda expressions A lambda is an unnamed function object capable of capturing variables in scope. It features: a capture list ; an optional set of parameters with an optional trailing return type; and a body. Examples of capture lists: [] - captures nothing. [=] - capture local objects (local variables, parameters) in scope by value. [&] - capture local objects (local variables, parameters) in scope by reference. [this] - capture this pointer by value. * [a, &b] - capture objects a by value, b by reference. int x = 1; auto getX = [=]{ return x; }; getX(); // == 1 auto addX = [=](int y) { return x + y; }; addX(1); // == 2 auto getXRef = [&]() -> int& { return x; }; getXRef(); // int& to `x` By default value-captures cannot be modified inside the lambda because the compiler-generated method is marked as const . The mutable keyword allows modifying captured variables. The keyword is placed after the parameter-list (which must be present even if it is empty). int x = 1; auto f1 = [&x] { x = 2; }; // OK: x is a reference and modifies the original auto f2 = [x] { x = 2; }; // ERROR: the lambda can only perform const-operations on the captured value // vs. auto f3 = [x] () mutable { x = 2; }; // OK: the lambda can perform any operations on the captured value decltype decltype is an operator which returns the declared type of an expression passed to it. Examples of decltype : int a = 1; // `a` is declared as type `int` decltype(a) b = a; // `decltype(a)` is `int` const int& c = a; // `c` is declared as type `const int&` decltype(c) d = a; // `decltype(c)` is `const int&` decltype(123) e = 123; // `decltype(123)` is `int` int&& f = 1; // `f` is declared as type `int&&` decltype(f) g = 1; // `decltype(f) is `int&&` decltype((a)) h = x; // `decltype((a))` is int& template <typename X, typename Y> auto add(X x, Y y) -> decltype(x + y) { return x + y; } add(1, 2.0); // `decltype(x + y)` => `decltype(3.0)` => `double` Template aliases Semantically similar to using a typedef however, template aliases with using are easier to read and are compatible with templates. template <typename T> using Vec = std::vector<T>; Vec<int> v{}; // std::vector<int> using String = std::string; String s{\"foo\"}; nullptr C++11 introduces a new null pointer type designed to replace C's NULL macro. nullptr itself is of type std::nullptr_t and can be implicitly converted into pointer types, and unlike NULL , not convertible to integral types except bool . void foo(int); void foo(char*); foo(NULL); // error -- ambiguous foo(nullptr); // calls foo(char*) Strongly-typed enums Type-safe enums that solve a variety of problems with C-style enums including: implicit conversions, inability to specify the underlying type, scope pollution. // Specifying underlying type as `unsigned int` enum class Color : unsigned int { Red = 0xff0000, Green = 0xff00, Blue = 0xff }; // `Red`/`Green` in `Alert` don't conflict with `Color` enum class Alert : bool { Red, Green }; Color c = Color::Red; Attributes Attributes provide a universal syntax over __attribute__(...) , __declspec , etc. // `noreturn` attribute indicates `f` doesn't return. [[ noreturn ]] void f() { throw \"error\"; } constexpr Constant expressions are expressions evaluated by the compiler at compile-time. Only non-complex computations can be carried out in a constant expression. Use the constexpr specifier to indicate the variable, function, etc. is a constant expression. constexpr int square(int x) { return x * x; } int square2(int x) { return x * x; } int a = square(2); // mov DWORD PTR [rbp-4], 4 int b = square2(2); // mov edi, 2 // call square2(int) // mov DWORD PTR [rbp-8], eax constexpr values are those that the compiler can evaluate at compile-time: const int x = 123; constexpr const int& y = x; // error -- constexpr variable `y` must be initialized by a constant expression Constant expressions with classes: struct Complex { constexpr Complex(double r, double i) : re(r), im(i) { } constexpr double real() { return re; } constexpr double imag() { return im; } private: double re; double im; }; constexpr Complex I(0, 1); Delegating constructors Constructors can now call other constructors in the same class using an initializer list. struct Foo { int foo; Foo(int foo) : foo(foo) {} Foo() : Foo(0) {} }; Foo foo{}; foo.foo; // == 0 User-defined literals User-defined literals allow you to extend the language and add your own syntax. To create a literal, define a T operator \"\" X(...) { ... } function that returns a type T , with a name X . Note that the name of this function defines the name of the literal. Any literal names not starting with an underscore are reserved and won't be invoked. There are rules on what parameters a user-defined literal function should accept, according to what type the literal is called on. Converting Celsius to Fahrenheit: // `unsigned long long` parameter required for integer literal. long long operator \"\" _celsius(unsigned long long tempCelsius) { return std::llround(tempCelsius * 1.8 + 32); } 24_celsius; // == 75 String to integer conversion: // `const char*` and `std::size_t` required as parameters. int operator \"\" _int(const char* str, std::size_t) { return std::stoi(str); } \"123\"_int; // == 123, with type `int` Explicit virtual overrides Specifies that a virtual function overrides another virtual function. If the virtual function does not override a parent's virtual function, throws a compiler error. struct A { virtual void foo(); void bar(); }; struct B : A { void foo() override; // correct -- B::foo overrides A::foo void bar() override; // error -- A::bar is not virtual void baz() override; // error -- B::baz does not override A::baz }; Default functions A more elegant, efficient way to provide a default implementation of a function, such as a constructor. struct A { A() = default; A(int x) : x(x) {} int x{ 1 }; }; A a{}; // a.x == 1 A a2{ 123 }; // a.x == 123 With inheritance: struct B { B() : x(1); int x; }; struct C : B { // Calls B::B C() = default; }; C c{}; // c.x == 1 Deleted functions A more elegant, efficient way to provide a deleted implementation of a function. Useful for preventing copies on objects. class A { int x; public: A(int x) : x(x) {}; A(const A&) = delete; A& operator=(const A&) = delete; }; A x{ 123 }; A y = x; // error -- call to deleted copy constructor y = x; // error -- operator= deleted Range-based for loops Syntactic sugar for iterating over a container's elements. std::array<int, 5> a{ 1, 2, 3, 4, 5 }; for (int& x : a) x *= 2; // a == { 2, 4, 6, 8, 10 } Note the difference when using int as opposed to int& : std::array<int, 5> a{ 1, 2, 3, 4, 5 }; for (int x : a) x *= 2; // a == { 1, 2, 3, 4, 5 } Special member functions for move semantics The copy constructor and copy assignment operator are called when copies are made, and with C++11's introduction of move semantics, there is now a move constructor and move assignment operator for moves. struct A { std::string s; A() : s(\"test\") {} A(const A& o) : s(o.s) {} A(A&& o) : s(std::move(o.s)) {} A& operator=(A&& o) { s = std::move(o.s); return *this; } }; A f(A a) { return a; } A a1 = f(A{}); // move-constructed from rvalue temporary A a2 = std::move(a1); // move-constructed using std::move A a3 = A{}; a2 = std::move(a3); // move-assignment using std::move a1 = f(A{}); // move-assignment from rvalue temporary C++11 Library Features std::move std::move indicates that the object passed to it may be moved, or in other words, moved from one object to another without a copy. The object passed in should not be used after the move in certain situations. A definition of std::move (performing a move is nothing more than casting to an rvalue): template <typename T> typename remove_reference<T>::type&& move(T&& arg) { return static_cast<typename remove_reference<T>::type&&>(arg); } Transferring std::unique_ptr s: std::unique_ptr<int> p1{ new int }; std::unique_ptr<int> p2 = p1; // error -- cannot copy unique pointers std::unique_ptr<int> p3 = std::move(p1); // move `p1` into `p2` // now unsafe to dereference object held by `p1` std::forward Returns the arguments passed to it as-is, either as an lvalue or rvalue references, and includes cv-qualification. Useful for generic code that need a reference (either lvalue or rvalue) when appropriate, e.g factories. Forwarding gets its power from template argument deduction : T& & becomes T& T& && becomes T& T&& & becomes T& T&& && becomes T&& A definition of std::forward : template <typename T> T&& forward(typename remove_reference<T>::type& arg) { return static_cast<T&&>(arg); } An example of a function wrapper which just forwards other A objects to a new A object's copy or move constructor: struct A { A() = default; A(const A& o) { std::cout << \"copied\" << std::endl; } A(A&& o) { std::cout << \"moved\" << std::endl; } }; template <typename T> A wrapper(T&& arg) { return A{ std::forward<T>(arg) }; } wrapper(A{}); // moved A a{}; wrapper(a); // copied wrapper(std::move(a)); // moved std::to_string Converts a numeric argument to a std::string . std::to_string(1.2); // == \"1.2\" std::to_string(123); // == \"123\" Type traits Type traits defines a compile-time template-based interface to query or modify the properties of types. static_assert(std::is_integral<int>::value == 1); static_assert(std::is_same<int, int>::value == 1); static_assert(std::is_same<std::conditional<true, int, double>::type, int>::value == 1); Smart pointers C++11 introduces new smart(er) pointers: std::unique_ptr , std::shared_ptr , std::weak_ptr . std::auto_ptr now becomes deprecated and then eventually removed in C++17. std::unique_ptr is a non-copyable, movable smart pointer that properly manages arrays and STL containers. std::unique_ptr<Foo> p1(new Foo); // `p1` owns `Foo` if (p1) p1->bar(); { std::unique_ptr<Foo> p2(std::move(p1)); // Now `p2` owns `Foo` f(*p2); p1 = std::move(p2); // Ownership returns to `p1` -- `p2` gets destroyed } if (p1) p1->bar(); // `Foo` instance is destroyed when `p1` goes out of scope std::chrono The chrono library contains a set of utility functions and types that deal with durations , clocks , and time points . One use case of this library is benchmarking code: std::chrono::time_point<std::chrono::system_clock> start, end; start = std::chrono::system_clock::now(); // Some computations... end = std::chrono::system_clock::now(); std::chrono::duration<double> elapsed_seconds = end-start; elapsed_seconds.count(); // t number of seconds, represented as a `double` Tuples Tuples are a fixed-size collection of heterogeneous values. Access the elements of a std::tuple by unpacking using std::tie , or using std::get . // `playerProfile` has type `std::tuple<int, std::string, std::string>`. auto playerProfile = std::make_tuple(51, \"Frans Nielsen\", \"NYI\"); std::get<0>(playerProfile); // 51 std::get<1>(playerProfile); // \"Frans Nielsen\" std::get<2>(playerProfile); // \"NYI\" std::tie Creates a tuple of lvalue references. Useful for unpacking std::pair and std::tuple objects. Use std::ignore as a placeholder for ignored values. In C++17, structured bindings should be used instead. // With tuples... std::string playerName; std::tie(std::ignore, playerName, std::ignore) = std::make_tuple(91, \"John Tavares\", \"NYI\"); // With pairs... std::string yes, no; std::tie(yes, no) = std::make_pair(\"yes\", \"no\"); std::array std::array is a container built on top of a C-style array. Supports common container operations such as sorting. std::array<int, 3> a = {2, 1, 3}; std::sort(a.begin(), a.end()); // a == { 1, 2, 3 } for (int& x : a) x *= 2; // a == { 2, 4, 6 } Unordered containers These containers maintain average constant-time complexity for search, insert, and remove operations. In order to achieve constant-time complexity, sacrifices order for speed by hashing elements into buckets. There are four unordered containers: unordered_set unordered_multiset unordered_map unordered_multimap Memory model C++11 introduces a memory model for C++, which means library support for threading and atomic operations. Some of these operations include (but aren't limited to) atomic loads/stores, compare-and-swap, atomic flags, promises, futures, locks, and condition variables. Acknowledgements cppreference - especially useful for finding examples and documentation of new library features. C++ Rvalue References Explained - a great introduction I used to understand rvalue references, perfect forwarding, and move semantics. clang and gcc 's standards support pages. Also included here are the proposals for language/library features that I used to help find a description of, what it's meant to fix, and some examples. Compiler explorer Scott Meyers' Effective Modern C++ - highly recommended book! Jason Turner's C++ Weekly - nice collection of C++-related videos. What can I do with a moved-from object? What are some uses of decltype(auto)? And many more SO posts I'm forgetting... Author Anthony Calandra Content Contributors Those who have added new content will be listed here in no particular order. thukydides - mentioned binary digit separators. mknejp - lambda capture initializers and mutable keyword. License MIT","title":"Modern Cpp Features"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#overview-c111417","text":"Many of these descriptions and examples come from various resources (see Acknowledgements section), summarized in my own words. C++17 includes the following new language features: template argument deduction for class templates declaring non-type template parameters with auto folding expressions new rules for auto deduction from braced-init-list constexpr lambda inline variables nested namespaces structured bindings selection statements with initializer constexpr if C++17 includes the following new library features: std::variant std::optional std::any std::string_view std::invoke std::apply splicing for maps and sets C++14 includes the following new language features: binary literals generic lambda expressions lambda capture initializers return type deduction decltype(auto) relaxing constraints on constexpr functions C++14 includes the following new library features: user-defined literals for standard library types compile-time integer sequences C++11 includes the following new language features: move semantics variadic templates rvalue references initializer lists static assertions auto lambda expressions decltype template aliases nullptr strongly-typed enums attributes constexpr delegating constructors user-defined literals explicit virtual overrides default functions deleted functions range-based for loops special member functions for move semantics C++11 includes the following new library features: std::move std::forward std::to_string type traits smart pointers std::chrono tuples std::tie std::array unordered containers memory model","title":"Overview C++11/14/17"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#c17-language-features","text":"","title":"C++17 Language Features"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#template-argument-deduction-for-class-templates","text":"Automatic template argument deduction much like how it's done for functions, but now including class constructors. template <typename T = float> struct MyContainer { T val; MyContainer() : val() {} MyContainer(T val) : val(val) {} // ... }; MyContainer c1{ 1 }; // OK MyContainer<int> MyContainer c2; // OK MyContainer<float>","title":"Template argument deduction for class templates"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#declaring-non-type-template-parameters-with-auto","text":"Following the deduction rules of auto , while respecting the non-type template parameter list of allowable types[*], template arguments can be deduced from the types of its arguments: // Explicitly pass type `int` as template argument. auto seq = std::integer_sequence<int, 0, 1, 2>(); // Type is deduced to be `int`. auto seq2 = my_integer_sequence<0, 1, 2>(); * - For example, you cannot use a double as a template parameter type, which also makes this an invalid deduction using auto .","title":"Declaring non-type template parameters with auto"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#folding-expressions","text":"A fold expression performs a fold of a template parameter pack over a binary operator. An expression of the form (... op e) or (e op ...) , where op is a fold-operator and e is an unexpanded parameter pack, are called unary folds . An expression of the form (e1 op1 ... op2 e2) , where op1 and op2 are fold-operators, is called a binary fold . Either e1 or e2 are unexpanded parameter packs, but not both. template<typename... Args> bool logicalAnd(Args... args) { // Binary folding. return (true && ... && args); } bool b = true; bool& b2 = b; logicalAnd(b, b2, true); // == true template<typename... Args> auto sum(Args... args) { // Unary folding. return (... + args); } sum(1.0, 2.0f, 3); // == 6.0","title":"Folding expressions"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#new-rules-for-auto-deduction-from-braced-init-list","text":"Changes to auto deduction when used with the uniform initialization syntax. Previously, auto x{ 3 }; deduces a std::initializer_list<int> , which now deduces to int . auto x1{ 1, 2, 3 }; // error: not a single element auto x2 = { 1, 2, 3 }; // decltype(x2) is std::initializer_list<int> auto x3{ 3 }; // decltype(x3) is int auto x4{ 3.0 }; // decltype(x4) is double","title":"New rules for auto deduction from braced-init-list"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#constexpr-lambda","text":"Compile-time lambdas using constexpr . auto identity = [] (int n) constexpr { return n; }; static_assert(identity(123) == 123); constexpr auto add = [] (int x, int y) { auto L = [=] { return x; }; auto R = [=] { return y; }; return [=] { return L() + R(); }; }; static_assert(add(1, 2)() == 3); constexpr int addOne(int n) { return [n] { return n + 1; }(); } static_assert(addOne(1) == 2);","title":"constexpr lambda"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#inline-variables","text":"The inline specifier can be applied to variables as well as to functions. A variable declared inline has the same semantics as a function declared inline. // Disassembly example using compiler explorer. struct S { int x; }; inline S x1 = S{321}; // mov esi, dword ptr [x1] // x1: .long 321 S x2 = S{123}; // mov eax, dword ptr [.L_ZZ4mainE2x2] // mov dword ptr [rbp - 8], eax // .L_ZZ4mainE2x2: .long 123","title":"Inline variables"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#nested-namespaces","text":"Using the namespace resolution operator to create nested namespace definitions. namespace A { namespace B { namespace C { int i; } } } // vs. namespace A::B::C { int i; }","title":"Nested namespaces"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#structured-bindings","text":"A proposal for de-structuring initialization, that would allow writing auto {x, y, z} = expr; where the type of expr was a tuple-like object, whose elements would be bound to the variables x , y , and z (which this construct declares). Tuple-like objects include std::tuple , std::pair , std::array , and aggregate structures. using Coordinate = std::pair<int, int>; Coordinate origin() { return Coordinate{0, 0}; } const auto [ x, y ] = origin(); x; // == 0 y; // == 0","title":"Structured bindings"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#selection-statements-with-initializer","text":"New versions of the if and switch statements which simplify common code patterns and help users keep scopes tight. { std::lock_guard<std::mutex> lk(mx); if (v.empty()) v.push_back(val); } // vs. if (std::lock_guard<std::mutex> lk(mx); v.empty()) { v.push_back(val); } Foo gadget(args); switch (auto s = gadget.status()) { case OK: gadget.zip(); break; case Bad: throw BadFoo(s.message()); } // vs. switch (Foo gadget(args); auto s = gadget.status()) { case OK: gadget.zip(); break; case Bad: throw BadFoo(s.message()); }","title":"Selection statements with initializer"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#constexpr-if","text":"Write code that is instantiated depending on a compile-time condition. template <typename T> constexpr bool isIntegral() { if constexpr (std::is_integral<T>::value) { return true; } else { return false; } } static_assert(isIntegral<int>() == true); static_assert(isIntegral<char>() == true); static_assert(isIntegral<double>() == false); struct S {}; static_assert(isIntegral<S>() == false);","title":"constexpr if"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#c17-library-features","text":"","title":"C++17 Library Features"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdvariant","text":"The class template std::variant represents a type-safe union . An instance of std::variant at any given time holds a value of one of its alternative types (it's also possible for it to be valueless). std::variant<int, double> v{ 12 }; std::get<int>(v); // == 12 std::get<0>(v); // == 12 v = 12.0; std::get<double>(v); // == 12.0 std::get<1>(v); // == 12.0","title":"std::variant"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdoptional","text":"The class template std::optional manages an optional contained value, i.e. a value that may or may not be present. A common use case for optional is the return value of a function that may fail. std::optional<std::string> create(bool b) { if (b) { return \"Godzilla\"; } else { return {}; } } create(false).value_or(\"empty\"); // == \"empty\" create(true).value(); // == \"Godzilla\" // optional-returning factory functions are usable as conditions of while and if if (auto str = create(true)) { // ... }","title":"std::optional"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdany","text":"A type-safe container for single values of any type. std::any x{ 5 }; x.has_value() // == true std::any_cast<int>(x) // == 5 std::any_cast<int&>(x) = 10; std::any_cast<int>(x) // == 10","title":"std::any"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdstring_view","text":"A non-owning reference to a string. Useful for providing an abstraction on top of strings (e.g. for parsing). // Regular strings. std::string_view cppstr{ \"foo\" }; // Wide strings. std::wstring_view wcstr_v{ L\"baz\" }; // Character arrays. char array[3] = {'b', 'a', 'r'}; std::string_view array_v(array, sizeof array); std::string str{ \" trim me\" }; std::string_view v{ str }; v.remove_prefix(std::min(v.find_first_not_of(\" \"), v.size())); str; // == \" trim me\" v; // == \"trim me\"","title":"std::string_view"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdinvoke","text":"Invoke a Callable object with parameters. Examples of Callable objects are std::function or std::bind where an object can be called similarly to a regular function. template <typename Callable> class Proxy { Callable c; public: Proxy(Callable c): c(c) {} template <class... Args> decltype(auto) operator()(Args&&... args) { // ... return std::invoke(c, std::forward<Args>(args)...); } }; auto add = [] (int x, int y) { return x + y; }; Proxy<decltype(add)> p{ add }; p(1, 2); // == 3","title":"std::invoke"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdapply","text":"Invoke a Callable object with a tuple of arguments. auto add = [] (int x, int y) { return x + y; }; std::apply(add, std::make_tuple( 1, 2 )); // == 3","title":"std::apply"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#splicing-for-maps-and-sets","text":"Moving nodes and merging containers without the overhead of expensive copies, moves, or heap allocations/deallocations. Moving elements from one map to another: std::map<int, string> src{ { 1, \"one\" }, { 2, \"two\" }, { 3, \"buckle my shoe\" } }; std::map<int, string> dst{ { 3, \"three\" } }; dst.insert(src.extract(src.find(1))); // Cheap remove and insert of { 1, \"one\" } from `src` to `dst`. dst.insert(src.extract(2)); // Cheap remove and insert of { 2, \"two\" } from `src` to `dst`. // dst == { { 1, \"one\" }, { 2, \"two\" }, { 3, \"three\" } }; Inserting an entire set: std::set<int> src{1, 3, 5}; std::set<int> dst{2, 4, 5}; dst.merge(src); // src == { 5 } // dst == { 1, 2, 3, 4, 5 } Inserting elements which outlive the container: auto elementFactory() { std::set<...> s; s.emplace(...); return s.extract(s.begin()); } s2.insert(elementFactory()); Changing the key of a map element: std::map<int, string> m{ { 1, \"one\" }, { 2, \"two\" }, { 3, \"three\" } }; auto e = m.extract(2); e.key() = 4; m.insert(std::move(e)); // m == { { 1, \"one\" }, { 3, \"three\" }, { 4, \"two\" } }","title":"Splicing for maps and sets"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#c14-language-features","text":"","title":"C++14 Language Features"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#binary-literals","text":"Binary literals provide a convenient way to represent a base-2 number. It is possible to separate digits with ' . 0b110 // == 6 0b1111'1111 // == 255","title":"Binary literals"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#generic-lambda-expressions","text":"C++14 now allows the auto type-specifier in the parameter list, enabling polymorphic lambdas. auto identity = [](auto x) { return x; }; int three = identity(3); // == 3 std::string foo = identity(\"foo\"); // == \"foo\"","title":"Generic lambda expressions"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#lambda-capture-initializers","text":"This allows creating lambda captures initialized with arbitrary expressions. The name given to the captured value does not need to be related to any variables in the enclosing scopes and introduces a new name inside the lambda body. The initializing expression is evaluated when the lambda is created (not when it is invoked ). int factory(int i) { return i * 10; } auto f = [x = factory(2)] { return x; }; // returns 20 auto generator = [x = 0] () mutable { // this would no compile without 'mutable' as we are modifying x on each call return x++; }; auto a = generator(); // == 0 auto b = generator(); // == 1 auto c = generator(); // == 2 Because it is now possible to move (or forward ) values into a lambda that could previously be only captured by copy or reference we can now capture move-only types in a lambda by value. Note that in the below example the p in the capture-list of task2 on the left-hand-side of = is a new variable private to the lambda body and does not refer to the original p . auto p = std::make_unique<int>(1); auto task1 = [=] { *p = 5; }; // ERROR: std::unique_ptr cannot be copied // vs. auto task2 = [p = std::move(p)] { *p = 5; }; // OK: p is move-constructed into the closure object // the original p is empty after task2 is created Using this reference-captures can have different names than the referenced variable. auto x = 1; auto f = [&r = x, x = x * 10] { ++r; return r + x; }; f(); // sets x to 2 and returns 12","title":"Lambda capture initializers"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#return-type-deduction","text":"Using an auto return type in C++14, the compiler will attempt to deduce the type for you. With lambdas, you can now deduce its return type using auto , which makes returning a deduced reference or rvalue reference possible. // Deduce return type as `int`. auto f(int i) { return i; } template <typename T> auto& f(T& t) { return t; } // Returns a reference to a deduced type. auto g = [](auto& x) -> auto& { return f(x); }; int y = 123; int& z = g(y); // reference to `y`","title":"Return type deduction"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#decltypeauto","text":"The decltype(auto) type-specifier also deduces a type like auto does. However, it deduces return types while keeping their references or \"const-ness\", while auto will not. const int x = 0; auto x1 = x; // int decltype(auto) x2 = x; // const int int y = 0; int& y1 = y; auto y2 = y; // int decltype(auto) y3 = y; // int& int&& z = 0; auto z1 = std::move(z); // int decltype(auto) z2 = std::move(z); // int&& // Note: Especially useful for generic code! // Return type is `int`. auto f(const int& i) { return i; } // Return type is `const int&`. decltype(auto) g(const int& i) { return i; } int x = 123; static_assert(std::is_same<const int&, decltype(f(x))>::value == 0); static_assert(std::is_same<int, decltype(f(x))>::value == 1); static_assert(std::is_same<const int&, decltype(g(x))>::value == 1);","title":"decltype(auto)"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#relaxing-constraints-on-constexpr-functions","text":"In C++11, constexpr function bodies could only contain a very limited set of syntax, including (but not limited to): typedef s, using s, and a single return statement. In C++14, the set of allowable syntax expands greatly to include the most common syntax such as if statements, multiple return s, loops, etc. constexpr int factorial(int n) { if (n <= 1) { return 1; } else { return n * factorial(n - 1); } } factorial(5); // == 120","title":"Relaxing constraints on constexpr functions"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#c14-library-features","text":"","title":"C++14 Library Features"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#user-defined-literals-for-standard-library-types","text":"New user-defined literals for standard library types, including new built-in literals for chrono and basic_string . These can be constexpr meaning they can be used at compile-time. Some uses for these literals include compile-time integer parsing, binary literals, and imaginary number literals. using namespace std::chrono_literals; auto day = 24h; day.count(); // == 24 std::chrono::duration_cast<std::chrono::minutes>(day).count(); // == 1440","title":"User-defined literals for standard library types"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#compile-time-integer-sequences","text":"The class template std::integer_sequence represents a compile-time sequence of integers. There are a few helpers built on top: std::make_integer_sequence<T, N...> - creates a sequence of 0, ..., N - 1 with type T . std::index_sequence_for<T...> - converts a template parameter pack into an integer sequence. Convert an array into a tuple: template<typename Array, std::size_t... I> decltype(auto) a2t_impl(const Array& a, std::integer_sequence<std::size_t, I...>) { return std::make_tuple(a[I]...); } template<typename T, std::size_t N, typename Indices = std::make_index_sequence<N>> decltype(auto) a2t(const std::array<T, N>& a) { return a2t_impl(a, Indices()); }","title":"Compile-time integer sequences"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#c11-language-features","text":"","title":"C++11 Language Features"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#move-semantics","text":"Move semantics is mostly about performance optimization: the ability to move an object without the expensive overhead of copying. The difference between a copy and a move is that a copy leaves the source unchanged, and a move will leave the source either unchanged or radically different -- depending on what the source is. For plain old data, a move is the same as a copy. To move an object means to transfer ownership of some resource it manages to another object. You could think of this as changing pointers held by the source object to be moved, or now held, by the destination object; the resource remains in its location in memory. Such an inexpensive transfer of resources is extremely useful when the source is an rvalue , where the potentially dangerous side-effect of changing the source after the move is redundant since the source is a temporary object that won't be accessible later. Moves also make it possible to transfer objects such as std::unique_ptr s, smart pointers that are designed to hold a pointer to a unique object, from one scope to another. See the sections on: rvalue references , defining move special member functions , std::move , std::forward .","title":"Move semantics"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#rvalue-references","text":"C++11 introduces a new reference termed the rvalue reference . An rvalue reference to A is created with the syntax A&& . This enables two major features: move semantics; and perfect forwarding , the ability to pass arguments while maintaining information about them as lvalues/rvalues in a generic way. auto type deduction with lvalues and rvalues: int x = 0; // `x` is an lvalue of type `int` int& xl = x; // `xl` is an lvalue of type `int&` int&& xr = x; // compiler error -- `x` is an lvalue int&& xr2 = 0; // `xr2` is an lvalue of type `int&&` auto& al = x; // `al` is an lvalue of type `int&` auto&& al2 = x; // `al2` is an lvalue of type `int&` auto&& ar = 0; // `ar` is an lvalue of type `int&&` See also: std::move , std::forward .","title":"Rvalue references"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#variadic-templates","text":"The ... syntax creates a parameter pack or expands one. A template parameter pack is a template parameter that accepts zero or more template arguments (non-types, types, or templates). A template with at least one parameter pack is called a variadic template . template <typename... T> struct arity { constexpr static int value = sizeof...(T); }; static_assert(arity<>::value == 0); static_assert(arity<char, short, int>::value == 3);","title":"Variadic templates"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#initializer-lists","text":"A lightweight array-like container of elements created using a \"braced list\" syntax. For example, { 1, 2, 3 } creates a sequences of integers, that has type std::initializer_list<int> . Useful as a replacement to passing a vector of objects to a function. int sum(const std::initializer_list<int>& list) { int total = 0; for (auto& e : list) { total += e; } return total; } auto list = { 1, 2, 3 }; f(list); // == 6 f({ 1, 2, 3 }); // == 6 f({}); // == 0","title":"Initializer lists"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#static-assertions","text":"Assertions that are evaluated at compile-time. constexpr int x = 0; constexpr int y = 1; static_assert(x == y, \"x != y\");","title":"Static assertions"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#auto","text":"auto -typed variables are deduced by the compiler according to the type of their initializer. auto a = 3.14; // double auto b = 1; // int auto& c = b; // int& auto d = { 0 }; // std::initializer_list<int> auto&& e = 1; // int&& auto&& f = b; // int& auto g = new auto(123); // int* const auto h = 1; // const int auto i = 1, j = 2, k = 3; // int, int, int auto l = 1, m = true, n = 1.61; // error -- `l` deduced to be int, `m` is bool auto o; // error -- `o` requires initializer Extremely useful for readability, especially for complicated types: std::vector<int> v = ...; std::vector<int>::const_iterator cit = v.cbegin(); // vs. auto cit = v.cbegin(); Functions can also deduce the return type using auto . In C++11, a return type must be specified either explicitly, or using decltype like so: template <typename X, typename Y> auto add(X x, Y y) -> decltype(x + y) { return x + y; } add(1, 2); // == 3 add(1, 2.0); // == 3.0 add(1.5, 1.5); // == 3.0 The trailing return type in the above example is the declared type (see section on decltype ) of the expression x + y . For example, if x is an integer and y is a double, decltype(x + y) is a double. Therefore, the above function will deduce the type depending on what type the expression x + y yields. Notice that the trailing return type has access to its parameters, and this when appropriate.","title":"auto"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#lambda-expressions","text":"A lambda is an unnamed function object capable of capturing variables in scope. It features: a capture list ; an optional set of parameters with an optional trailing return type; and a body. Examples of capture lists: [] - captures nothing. [=] - capture local objects (local variables, parameters) in scope by value. [&] - capture local objects (local variables, parameters) in scope by reference. [this] - capture this pointer by value. * [a, &b] - capture objects a by value, b by reference. int x = 1; auto getX = [=]{ return x; }; getX(); // == 1 auto addX = [=](int y) { return x + y; }; addX(1); // == 2 auto getXRef = [&]() -> int& { return x; }; getXRef(); // int& to `x` By default value-captures cannot be modified inside the lambda because the compiler-generated method is marked as const . The mutable keyword allows modifying captured variables. The keyword is placed after the parameter-list (which must be present even if it is empty). int x = 1; auto f1 = [&x] { x = 2; }; // OK: x is a reference and modifies the original auto f2 = [x] { x = 2; }; // ERROR: the lambda can only perform const-operations on the captured value // vs. auto f3 = [x] () mutable { x = 2; }; // OK: the lambda can perform any operations on the captured value","title":"Lambda expressions"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#decltype","text":"decltype is an operator which returns the declared type of an expression passed to it. Examples of decltype : int a = 1; // `a` is declared as type `int` decltype(a) b = a; // `decltype(a)` is `int` const int& c = a; // `c` is declared as type `const int&` decltype(c) d = a; // `decltype(c)` is `const int&` decltype(123) e = 123; // `decltype(123)` is `int` int&& f = 1; // `f` is declared as type `int&&` decltype(f) g = 1; // `decltype(f) is `int&&` decltype((a)) h = x; // `decltype((a))` is int& template <typename X, typename Y> auto add(X x, Y y) -> decltype(x + y) { return x + y; } add(1, 2.0); // `decltype(x + y)` => `decltype(3.0)` => `double`","title":"decltype"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#template-aliases","text":"Semantically similar to using a typedef however, template aliases with using are easier to read and are compatible with templates. template <typename T> using Vec = std::vector<T>; Vec<int> v{}; // std::vector<int> using String = std::string; String s{\"foo\"};","title":"Template aliases"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#nullptr","text":"C++11 introduces a new null pointer type designed to replace C's NULL macro. nullptr itself is of type std::nullptr_t and can be implicitly converted into pointer types, and unlike NULL , not convertible to integral types except bool . void foo(int); void foo(char*); foo(NULL); // error -- ambiguous foo(nullptr); // calls foo(char*)","title":"nullptr"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#strongly-typed-enums","text":"Type-safe enums that solve a variety of problems with C-style enums including: implicit conversions, inability to specify the underlying type, scope pollution. // Specifying underlying type as `unsigned int` enum class Color : unsigned int { Red = 0xff0000, Green = 0xff00, Blue = 0xff }; // `Red`/`Green` in `Alert` don't conflict with `Color` enum class Alert : bool { Red, Green }; Color c = Color::Red;","title":"Strongly-typed enums"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#attributes","text":"Attributes provide a universal syntax over __attribute__(...) , __declspec , etc. // `noreturn` attribute indicates `f` doesn't return. [[ noreturn ]] void f() { throw \"error\"; }","title":"Attributes"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#constexpr","text":"Constant expressions are expressions evaluated by the compiler at compile-time. Only non-complex computations can be carried out in a constant expression. Use the constexpr specifier to indicate the variable, function, etc. is a constant expression. constexpr int square(int x) { return x * x; } int square2(int x) { return x * x; } int a = square(2); // mov DWORD PTR [rbp-4], 4 int b = square2(2); // mov edi, 2 // call square2(int) // mov DWORD PTR [rbp-8], eax constexpr values are those that the compiler can evaluate at compile-time: const int x = 123; constexpr const int& y = x; // error -- constexpr variable `y` must be initialized by a constant expression Constant expressions with classes: struct Complex { constexpr Complex(double r, double i) : re(r), im(i) { } constexpr double real() { return re; } constexpr double imag() { return im; } private: double re; double im; }; constexpr Complex I(0, 1);","title":"constexpr"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#delegating-constructors","text":"Constructors can now call other constructors in the same class using an initializer list. struct Foo { int foo; Foo(int foo) : foo(foo) {} Foo() : Foo(0) {} }; Foo foo{}; foo.foo; // == 0","title":"Delegating constructors"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#user-defined-literals","text":"User-defined literals allow you to extend the language and add your own syntax. To create a literal, define a T operator \"\" X(...) { ... } function that returns a type T , with a name X . Note that the name of this function defines the name of the literal. Any literal names not starting with an underscore are reserved and won't be invoked. There are rules on what parameters a user-defined literal function should accept, according to what type the literal is called on. Converting Celsius to Fahrenheit: // `unsigned long long` parameter required for integer literal. long long operator \"\" _celsius(unsigned long long tempCelsius) { return std::llround(tempCelsius * 1.8 + 32); } 24_celsius; // == 75 String to integer conversion: // `const char*` and `std::size_t` required as parameters. int operator \"\" _int(const char* str, std::size_t) { return std::stoi(str); } \"123\"_int; // == 123, with type `int`","title":"User-defined literals"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#explicit-virtual-overrides","text":"Specifies that a virtual function overrides another virtual function. If the virtual function does not override a parent's virtual function, throws a compiler error. struct A { virtual void foo(); void bar(); }; struct B : A { void foo() override; // correct -- B::foo overrides A::foo void bar() override; // error -- A::bar is not virtual void baz() override; // error -- B::baz does not override A::baz };","title":"Explicit virtual overrides"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#default-functions","text":"A more elegant, efficient way to provide a default implementation of a function, such as a constructor. struct A { A() = default; A(int x) : x(x) {} int x{ 1 }; }; A a{}; // a.x == 1 A a2{ 123 }; // a.x == 123 With inheritance: struct B { B() : x(1); int x; }; struct C : B { // Calls B::B C() = default; }; C c{}; // c.x == 1","title":"Default functions"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#deleted-functions","text":"A more elegant, efficient way to provide a deleted implementation of a function. Useful for preventing copies on objects. class A { int x; public: A(int x) : x(x) {}; A(const A&) = delete; A& operator=(const A&) = delete; }; A x{ 123 }; A y = x; // error -- call to deleted copy constructor y = x; // error -- operator= deleted","title":"Deleted functions"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#range-based-for-loops","text":"Syntactic sugar for iterating over a container's elements. std::array<int, 5> a{ 1, 2, 3, 4, 5 }; for (int& x : a) x *= 2; // a == { 2, 4, 6, 8, 10 } Note the difference when using int as opposed to int& : std::array<int, 5> a{ 1, 2, 3, 4, 5 }; for (int x : a) x *= 2; // a == { 1, 2, 3, 4, 5 }","title":"Range-based for loops"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#special-member-functions-for-move-semantics","text":"The copy constructor and copy assignment operator are called when copies are made, and with C++11's introduction of move semantics, there is now a move constructor and move assignment operator for moves. struct A { std::string s; A() : s(\"test\") {} A(const A& o) : s(o.s) {} A(A&& o) : s(std::move(o.s)) {} A& operator=(A&& o) { s = std::move(o.s); return *this; } }; A f(A a) { return a; } A a1 = f(A{}); // move-constructed from rvalue temporary A a2 = std::move(a1); // move-constructed using std::move A a3 = A{}; a2 = std::move(a3); // move-assignment using std::move a1 = f(A{}); // move-assignment from rvalue temporary","title":"Special member functions for move semantics"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#c11-library-features","text":"","title":"C++11 Library Features"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdmove","text":"std::move indicates that the object passed to it may be moved, or in other words, moved from one object to another without a copy. The object passed in should not be used after the move in certain situations. A definition of std::move (performing a move is nothing more than casting to an rvalue): template <typename T> typename remove_reference<T>::type&& move(T&& arg) { return static_cast<typename remove_reference<T>::type&&>(arg); } Transferring std::unique_ptr s: std::unique_ptr<int> p1{ new int }; std::unique_ptr<int> p2 = p1; // error -- cannot copy unique pointers std::unique_ptr<int> p3 = std::move(p1); // move `p1` into `p2` // now unsafe to dereference object held by `p1`","title":"std::move"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdforward","text":"Returns the arguments passed to it as-is, either as an lvalue or rvalue references, and includes cv-qualification. Useful for generic code that need a reference (either lvalue or rvalue) when appropriate, e.g factories. Forwarding gets its power from template argument deduction : T& & becomes T& T& && becomes T& T&& & becomes T& T&& && becomes T&& A definition of std::forward : template <typename T> T&& forward(typename remove_reference<T>::type& arg) { return static_cast<T&&>(arg); } An example of a function wrapper which just forwards other A objects to a new A object's copy or move constructor: struct A { A() = default; A(const A& o) { std::cout << \"copied\" << std::endl; } A(A&& o) { std::cout << \"moved\" << std::endl; } }; template <typename T> A wrapper(T&& arg) { return A{ std::forward<T>(arg) }; } wrapper(A{}); // moved A a{}; wrapper(a); // copied wrapper(std::move(a)); // moved","title":"std::forward"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdto_string","text":"Converts a numeric argument to a std::string . std::to_string(1.2); // == \"1.2\" std::to_string(123); // == \"123\"","title":"std::to_string"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#type-traits","text":"Type traits defines a compile-time template-based interface to query or modify the properties of types. static_assert(std::is_integral<int>::value == 1); static_assert(std::is_same<int, int>::value == 1); static_assert(std::is_same<std::conditional<true, int, double>::type, int>::value == 1);","title":"Type traits"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#smart-pointers","text":"C++11 introduces new smart(er) pointers: std::unique_ptr , std::shared_ptr , std::weak_ptr . std::auto_ptr now becomes deprecated and then eventually removed in C++17. std::unique_ptr is a non-copyable, movable smart pointer that properly manages arrays and STL containers. std::unique_ptr<Foo> p1(new Foo); // `p1` owns `Foo` if (p1) p1->bar(); { std::unique_ptr<Foo> p2(std::move(p1)); // Now `p2` owns `Foo` f(*p2); p1 = std::move(p2); // Ownership returns to `p1` -- `p2` gets destroyed } if (p1) p1->bar(); // `Foo` instance is destroyed when `p1` goes out of scope","title":"Smart pointers"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdchrono","text":"The chrono library contains a set of utility functions and types that deal with durations , clocks , and time points . One use case of this library is benchmarking code: std::chrono::time_point<std::chrono::system_clock> start, end; start = std::chrono::system_clock::now(); // Some computations... end = std::chrono::system_clock::now(); std::chrono::duration<double> elapsed_seconds = end-start; elapsed_seconds.count(); // t number of seconds, represented as a `double`","title":"std::chrono"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#tuples","text":"Tuples are a fixed-size collection of heterogeneous values. Access the elements of a std::tuple by unpacking using std::tie , or using std::get . // `playerProfile` has type `std::tuple<int, std::string, std::string>`. auto playerProfile = std::make_tuple(51, \"Frans Nielsen\", \"NYI\"); std::get<0>(playerProfile); // 51 std::get<1>(playerProfile); // \"Frans Nielsen\" std::get<2>(playerProfile); // \"NYI\"","title":"Tuples"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdtie","text":"Creates a tuple of lvalue references. Useful for unpacking std::pair and std::tuple objects. Use std::ignore as a placeholder for ignored values. In C++17, structured bindings should be used instead. // With tuples... std::string playerName; std::tie(std::ignore, playerName, std::ignore) = std::make_tuple(91, \"John Tavares\", \"NYI\"); // With pairs... std::string yes, no; std::tie(yes, no) = std::make_pair(\"yes\", \"no\");","title":"std::tie"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#stdarray","text":"std::array is a container built on top of a C-style array. Supports common container operations such as sorting. std::array<int, 3> a = {2, 1, 3}; std::sort(a.begin(), a.end()); // a == { 1, 2, 3 } for (int& x : a) x *= 2; // a == { 2, 4, 6 }","title":"std::array"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#unordered-containers","text":"These containers maintain average constant-time complexity for search, insert, and remove operations. In order to achieve constant-time complexity, sacrifices order for speed by hashing elements into buckets. There are four unordered containers: unordered_set unordered_multiset unordered_map unordered_multimap","title":"Unordered containers"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#memory-model","text":"C++11 introduces a memory model for C++, which means library support for threading and atomic operations. Some of these operations include (but aren't limited to) atomic loads/stores, compare-and-swap, atomic flags, promises, futures, locks, and condition variables.","title":"Memory model"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#acknowledgements","text":"cppreference - especially useful for finding examples and documentation of new library features. C++ Rvalue References Explained - a great introduction I used to understand rvalue references, perfect forwarding, and move semantics. clang and gcc 's standards support pages. Also included here are the proposals for language/library features that I used to help find a description of, what it's meant to fix, and some examples. Compiler explorer Scott Meyers' Effective Modern C++ - highly recommended book! Jason Turner's C++ Weekly - nice collection of C++-related videos. What can I do with a moved-from object? What are some uses of decltype(auto)? And many more SO posts I'm forgetting...","title":"Acknowledgements"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#author","text":"Anthony Calandra","title":"Author"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#content-contributors","text":"Those who have added new content will be listed here in no particular order. thukydides - mentioned binary digit separators. mknejp - lambda capture initializers and mutable keyword.","title":"Content Contributors"},{"location":"Dev/C_and_Cpp/Modern_Cpp_Features/#license","text":"MIT","title":"License"},{"location":"Dev/C_and_Cpp/Rand/","text":"Random number Returning rand() % N does not uniformly give a number in the range [0, N) unless N divides the length of the interval into which rand() returns (i.e. is a power of 2). Furthermore, one has no idea whether the moduli of rand() are independent: it's possible that they go 0, 1, 2, ..., which is uniform but not very random. The only assumption it seems reasonable to make is that rand() puts out a Poisson distribution: any two nonoverlapping subintervals of the same size are equally likely and independent. For a finite set of values, this implies a uniform distribution and also ensures that the values of rand() are nicely scattered. This means that the only correct way of changing the range of rand() is to divide it into boxes; for example, if RAND_MAX == 11 and you want a range of 1..6, you should assign {0,1} to 1, {2,3} to 2, and so on. These are disjoint, equally-sized intervals and thus are uniformly and independently distributed. The suggestion to use floating-point division is mathematically plausible but suffers from rounding issues in principle. Perhaps double is high-enough precision to make it work; perhaps not. I don't know and I don't want to have to figure it out; in any case, the answer is system-dependent. The correct way is to use integer arithmetic. That is, you want something like the following: #include <stdlib.h> // For random(), RAND_MAX // Assumes 0 <= max <= RAND_MAX // Returns in the closed interval [0, max] long random_at_most(long max) { unsigned long // max <= RAND_MAX < ULONG_MAX, so this is okay. num_bins = (unsigned long) max + 1, num_rand = (unsigned long) RAND_MAX + 1, bin_size = num_rand / num_bins, defect = num_rand % num_bins; long x; do { x = random(); } // This is carefully written not to overflow while (num_rand - defect <= (unsigned long)x); // Truncated division is intentional return x/bin_size; } The loop is necessary to get a perfectly uniform distribution. For example, if you are given random numbers from 0 to 2 and you want only ones from 0 to 1, you just keep pulling until you don't get a 2; it's not hard to check that this gives 0 or 1 with equal probability. This method is also described in the link that nos gave in their answer, though coded differently. I'm using random() rather than rand() as it has a better distribution (as noted by the man page for rand()). If you want to get random values outside the default range [0, RAND_MAX], then you have to do something tricky. Perhaps the most expedient is to define a function random_extended() that pulls n bits (using random_at_most()) and returns in [0, 2 n), and then apply random_at_most() with random_extended() in place of random() (and 2 n - 1 in place of RAND_MAX) to pull a random value less than 2**n, assuming you have a numerical type that can hold such a value. Finally, of course, you can get values in [min, max] using min + random_at_most(max - min), including negative values.","title":"Rand"},{"location":"Dev/C_and_Cpp/Rand/#random-number","text":"Returning rand() % N does not uniformly give a number in the range [0, N) unless N divides the length of the interval into which rand() returns (i.e. is a power of 2). Furthermore, one has no idea whether the moduli of rand() are independent: it's possible that they go 0, 1, 2, ..., which is uniform but not very random. The only assumption it seems reasonable to make is that rand() puts out a Poisson distribution: any two nonoverlapping subintervals of the same size are equally likely and independent. For a finite set of values, this implies a uniform distribution and also ensures that the values of rand() are nicely scattered. This means that the only correct way of changing the range of rand() is to divide it into boxes; for example, if RAND_MAX == 11 and you want a range of 1..6, you should assign {0,1} to 1, {2,3} to 2, and so on. These are disjoint, equally-sized intervals and thus are uniformly and independently distributed. The suggestion to use floating-point division is mathematically plausible but suffers from rounding issues in principle. Perhaps double is high-enough precision to make it work; perhaps not. I don't know and I don't want to have to figure it out; in any case, the answer is system-dependent. The correct way is to use integer arithmetic. That is, you want something like the following: #include <stdlib.h> // For random(), RAND_MAX // Assumes 0 <= max <= RAND_MAX // Returns in the closed interval [0, max] long random_at_most(long max) { unsigned long // max <= RAND_MAX < ULONG_MAX, so this is okay. num_bins = (unsigned long) max + 1, num_rand = (unsigned long) RAND_MAX + 1, bin_size = num_rand / num_bins, defect = num_rand % num_bins; long x; do { x = random(); } // This is carefully written not to overflow while (num_rand - defect <= (unsigned long)x); // Truncated division is intentional return x/bin_size; } The loop is necessary to get a perfectly uniform distribution. For example, if you are given random numbers from 0 to 2 and you want only ones from 0 to 1, you just keep pulling until you don't get a 2; it's not hard to check that this gives 0 or 1 with equal probability. This method is also described in the link that nos gave in their answer, though coded differently. I'm using random() rather than rand() as it has a better distribution (as noted by the man page for rand()). If you want to get random values outside the default range [0, RAND_MAX], then you have to do something tricky. Perhaps the most expedient is to define a function random_extended() that pulls n bits (using random_at_most()) and returns in [0, 2 n), and then apply random_at_most() with random_extended() in place of random() (and 2 n - 1 in place of RAND_MAX) to pull a random value less than 2**n, assuming you have a numerical type that can hold such a value. Finally, of course, you can get values in [min, max] using min + random_at_most(max - min), including negative values.","title":"Random number"},{"location":"Dev/Cmd/ping_whole_subnet/","text":"Ping subnet FOR /L %i IN (1,1,254) DO ping -n 1 192.168.10.%i | FIND /i \"Reply\">>c:\\ipaddresses.txt","title":"Ping whole subnet"},{"location":"Dev/Cmd/ping_whole_subnet/#ping-subnet","text":"FOR /L %i IN (1,1,254) DO ping -n 1 192.168.10.%i | FIND /i \"Reply\">>c:\\ipaddresses.txt","title":"Ping subnet"},{"location":"Dev/Cuda/Make/","text":"Dealing with: libGL.so,libGLU.so,libX11.so not found # If you face this warnings: # >>> WARNING - libGL.so not found, refer to CUDA Getting Started Guide for how to find and install them. <<< # >>> WARNING - libGLU.so not found, refer to CUDA Getting Started Guide for how to find and install them. <<< # >>> WARNING - libX11.so not found, refer to CUDA Getting Started Guide for how to find and install them. <<< # You sould pass apropriate lib path to GLPATH environment variable GLPATH=/usr/lib make GLPATH=/usr/lib32 make GLPATH=/usr/lib64 make","title":"Make"},{"location":"Dev/Cuda/Make/#dealing-with-libglsolibglusolibx11so-not-found","text":"# If you face this warnings: # >>> WARNING - libGL.so not found, refer to CUDA Getting Started Guide for how to find and install them. <<< # >>> WARNING - libGLU.so not found, refer to CUDA Getting Started Guide for how to find and install them. <<< # >>> WARNING - libX11.so not found, refer to CUDA Getting Started Guide for how to find and install them. <<< # You sould pass apropriate lib path to GLPATH environment variable GLPATH=/usr/lib make GLPATH=/usr/lib32 make GLPATH=/usr/lib64 make","title":"Dealing with: libGL.so,libGLU.so,libX11.so not found"},{"location":"Dev/Debug/10_Commands/","text":"Ten Commands Every Linux Developer Should Know This article presents a list of commands you should be able to find on any Linux installation. These are tools to help you improve your code and be more productive. The list comes from my own experience as a programmer and includes tools I've come to rely on repeatedly. Some tools help create code, some help debug code and some help reverse engineer code that's been dumped in your lap. ctags Those of you addicted to integrated development environments (IDEs) probably never heard of this tool, or if you did you probably think it's obsolete. But a tags-aware editor is a productive programming tool. Tagging your code allows editors like vi and Emacs to treat your code like hypertext (Figure 1). Each object in your code becomes hyperlinked to its definition. For example, if you are browsing code in vi and want to know where the variable foo was defined, type :ta foo. If your cursor is pointing to the variable, simply use Ctrl-right bracket. The good news for the vi-impaired is ctags is not only for C and vi anymore. The GNU version of ctags produces tags that can be used with Emacs and many other editors that recognize tag files. In addition, ctags recognizes many languages other than C and C++, including Perl and Python, and even hardware design languages, such as Verilog. It even can produce a human-readable cross-reference that can be useful for understanding code and performing metrics. Even if you're not interested in using ctags in your editor, you might want to check out the human-readable cross-reference by typing: ctags -x *.c*. What I like about this tool is that you get useful information whether you input one file or one hundred files, unlike many IDEs that aren't useful unless they can see your entire application. It's not a program checker, so garbage in, garbage out (GIGO) rules apply. strace strace lets you decipher what's going on when you have no debugger nor the source code. One of my pet peeves is a program that doesn't start and doesn't tell you why. Perhaps a required file is missing or has the wrong permissions. strace can tell you what the program is doing right up to the point where it exits. It can tell you what system calls the program is using and whether they pass or fail. It even can follow forks. strace often gives me answers much more quickly than a debugger, especially if the code is unfamiliar. On occasion, I have to debug code on a live system with no debugger. A quick run with strace sometimes can avoid patching the system or littering my code with printfs. Here is a trivial example of me as an unprivileged user trying to delete a protected file: strace -o strace.out rm -f /etc/yp.conf The output shows where things went wrong: lstat64(\"/etc/yp.conf\", {st_mode=S_IFREG|0644,st_size=361, ...}) = 0 access(\"/etc/yp.conf\", W_OK) = -1 EACCES(Permission denied) unlink(\"/etc/yp.conf\") = -1 EACCES (Permission denied) strace also lets you attach to processes for just-in-time debugging. Suppose a process seems to be spending a lot of time doing nothing. A quick way to find out what is going on is to type: strace -c -p mypid After a second or two, press Ctrl-C and you might see a dump something like this: % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 91.31 0.480456 3457 139 poll 6.66 0.035025 361 97 write 0.91 0.004794 16 304 futex 0.52 0.002741 14 203 read 0.31 0.001652 3 533 gettimeofday 0.26 0.001361 4 374 ioctl 0.01 0.000075 8 10 brk 0.01 0.000064 64 1 clone 0.00 0.000026 26 1 stat64 0.00 0.000007 7 1 uname 0.00 0.000005 5 1 sched_get_priority_max 0.00 0.000002 2 1 sched_get_priority_min ------ ----------- ----------- --------- --------- ---------------- 100.00 0.526208 1665 total In this case, it's spending most of its time in the poll system call\u2014probably waiting on a socket. fuser The name is a mnemonic for file user and tells what processes have opened a given file. It also can send a signal to all those processes for you. Suppose you want to delete a file but can't because some program has it open and won't close it. Instead of rebooting, type fuser -k myfile. This sends a SIGTERM to every process that has myfile opened. Perhaps you need to kill a process that forked itself all over the place, intentionally or otherwise. An unenlightened programmer might type something like ps | grep myprogram. This inevitably would be followed by several cut-and-paste operations with the mouse. An easier way is to type fuser -k ./myprogram, where myprogram is the pathname of the executable. fuser typically is located in /sbin, which generally is reserved for system administrative tools. You can add /usr/sbin and /sbin to the end of your $PATH. ps ps is used to find process status, but many people don't realize it also can be a powerful debugging tool. To get at these features, use the -o option, which lets you access many details of your processes, including CPU usage, virtual memory usage, current state and much more. Many of these options are defined in the POSIX standard, so they work across platforms. To look at your running commands by pid and process state, type ps -e -o pid,state,cmd. The output looks like this: 4576 S /opt/OpenOffice.org1.1.0/program/soffice.bin -writer 4618 D dd if /dev/cdrom of /dev/null 4619 S bash 4645 R ps -e -o pid,state,cmd Here you can see my dd command is in an uninterruptible sleep (state D). Basically, it is blocking while waiting for /dev/cdrom. My OpenOffice.org writer is sleeping (state S) while I type my example, and my ps command is running (state R). For an idea of how a running program is performing, type: ps -o start,time,etime -p mypid This shows the basic output from the time command, discussed later, except you don't have to wait until your program is finished. Most of the information that ps produces is available from the /proc filesystem, but if you are writing a script, using ps is more portable. You never know when a minor kernel rev will break all of your scripts that are mining the /proc filesystem. Use ps instead. time The time command is useful for understanding your code's performance. The most basic output consists of real, user and system time. Intuitively, real time is the amount of time between when the code started and when it exited. User time and system time are the amount of time spent executing application code versus kernel code, respectively. Two flavors of the time command are available. The shell has a built-in version that tells you only scheduler information. A version in /usr/bin includes more information and allows you to format the output. You easily can override the built-in time command by preceding it with a backslash, as in the examples that follow. A basic knowledge of the Linux scheduler is helpful in interpreting the output, but this tool also is helpful for learning how the scheduler works. For example, the real time of a process typically is larger than the sum of the user and system time. Time spent blocking in a system call does not count against the process, because the scheduler is free to schedule other processes during this time. The following sleep command takes one second to execute but takes no measurable system or user time: \\time -p sleep 1 real 1.03 user 0.00 sys 0.00 The next example shows how a task can spend all of its time in user space. Here, Perl calls the log() function in a loop, which requires nothing from the kernel: \\time perl -e 'log(2.0) foreach(0..0x100000)' real 0.40 user 0.20 sys 0.00 This example shows a process using a lot of memory: \\time perl -e '$x = 'a' x 0x1000000' 0.06user 0.12system 0:00.22elapsed 81%CPU (0avgtext+0avgdata 0maxresident)k 0inputs+0outputs (309major+8235minor)pagefaults 0swaps The useful information here is listed as pagefaults. Although the GNU time command advertises a lot of information, the 2.4 series of the Linux kernel stores only major and minor page-fault information. A major page fault is one that requires I/O; a minor page fault does not. nm This command allows you to retrieve information on symbol names inside an object file or executable file. By default, the output gives you a symbol name and its virtual address. What good is that? Suppose you are compiling code and the compiler complains that you have an unresolved symbol _foo. You search all of your source code and cannot find anywhere where you use this symbol. Perhaps it got pulled in from some template or a macro buried in one of the dozens of include files that compiled along with your code. The command: nm -guA *.o | grep foo shows all the modules that refer to foo. If you want to find out what library defines foo, simply use: nm -gA /usr/lib/* | grep foo The nm command also understands how to demangle C++ names, which can be handy when mixing C and C++. For example, forgetting to declare a C function with extern\"C\" produces a link time error something like this: undefined reference to `cfunc(char*)' In a large project with poorly defined headers, you might have a hard time tracking down the offending module. In this case, you can look for all the unresolved symbols in each object file with demangling turned on as follows: nm -guC *.o extern-c.o:cfunc no-extern-c.o:cfunc(char*) The first module is correct; the second is not. strings This command looks for ASCII strings embedded in binary files. It can be used for good or for evil. The good uses include trying to figure out what library is producing that cryptic string on stdout every once in a while, for example: strings -f /usr/lib/lib* | grep \"cryptic message\" On the evil side, the character strings can be used to probe your format strings looking for clues and vulnerabilities. This is why you should never put passwords and logins in your programs. It might be wise to examine your own programs with this tool and see what a clever programmer can see. The version of strings that comes with the GNU binutils has many useful options. od, xxd These two commands do basically the same thing, but each offers slightly different features. od is used to convert a binary file to whatever format you like. When dealing with programs that generate raw binary files, od can be indispensable. Although the name stands for octal dump, it can dump data in decimal and hexadecimal as well. od dumps integers, IEEE floats or plain bytes. When looking at multibyte integers or floats, the host byte order affects the output. xxd also dumps binary files but does not try to interpret them as integers or floats, so the host byte order does not affect the output, which can be confusing or helpful depending on the file. Let's create a four-byte file on an Intel machine: $ echo -n abcd > foo.bin $ od -tx4 foo.bin 0000000 64636261 0000004 $ xxd -g4 foo.bin 0000000: 61626364 abcd The output of od is a byte-swapped 32-bit integer, and the output of xxd is a group of four bytes in the same byte order as they appear in the file. If you're looking for the string abcd, xxd is the command for you. But, if you're looking for the 32-bit number 0x64636261, od is the right command. xxd also knows a few cool tricks that od doesn't, including the ability to format the output in binary and to translate a binary file into a C array. Suppose you have a binary file that you want to encode inside an array in your C program. One way to do this is by creating a text file as follows: $ xxd -i foo.bin unsigned char foo_bin[] = { 0x61, 0x62, 0x63, 0x64 }; unsigned int foo_bin_len = 4; file UNIX and Linux have never enforced any policy of filename extensions. Naming conventions have evolved, but they are guidelines, not policies. If you want to name your digital picture image00.exe, go ahead. Your Linux photo application gladly accepts the file no matter what the name is, although it may be hard to remember. The file command can help when you have to retrieve a file from a brain-dead Web browser, which mangles the name\u2014say a file that should have been named foo.bar.hello.world.tar.gz comes out as foo.bar. The file command can help like this: $ file foo.bar foo.bar: gzip compressed data, was \"foo.bar.hello.world.tar\", from Unix Perhaps you received a distribution with a bin directory full of dozens of files, some of which are executables and some are scripts. Suppose you want to pick out all the shell scripts. Try this: $ file /usr/sbin/* | grep script /usr/sbin/makewhatis: a /bin/bash script text executable /usr/sbin/xconv.pl: a /usr/bin/perl script text executable The file command identifies all the files in the bin directory, and the grep command filters out everything not a script. Here are some more examples: file core.4867 core.4867: ELF 32-bit LSB core file Intel 80386, version 1 (SYSV), SVR4-style, from 'abort' file /boot/initrd-2.4.20-6.img /boot/initrd-2.4.20-6.img: gzip compressed data, from Unix, max compression file -z /boot/initrd-2.4.20-6.img /boot/initrd-2.4.20-6.img: Linux rev 1.0 ext2 filesystem data (gzip compressed data, from Unix, max compression) Just as you shouldn't judge a book by its cover, you shouldn't assume the contents of a file based on its name. objdump This is a more advanced tool and is not for the faint of heart. It's sort of a data-mining tool for object files. A treasure trove of information is encoded inside your object code, and this tool lets you see it. One useful thing this tool can do is dump assembly code mixed with source lines, something gcc -S doesn't do for some reason. Your object code must be compiled with debug (-g) for this to work: objdump --demangle --source myobject.o objdump also can help extract binary data from a core file for postmortem debug when you don't have access to a debugger. A complete example is too long for this article, but you need the virtual address from nm or obdump -t. Then, you can dump the file offsets for each virtual address with objdump -x. Finally, objdump is able to read from non-ELF file formats that gdb and other tools can't touch. This article is not intended as a definitive reference but as a starting point to help you become more productive. Each one of these commands is well documented in the Linux man and info pages. Consult them for more information and more ideas.","title":"10 Commands"},{"location":"Dev/Debug/10_Commands/#ten-commands-every-linux-developer-should-know","text":"This article presents a list of commands you should be able to find on any Linux installation. These are tools to help you improve your code and be more productive. The list comes from my own experience as a programmer and includes tools I've come to rely on repeatedly. Some tools help create code, some help debug code and some help reverse engineer code that's been dumped in your lap.","title":"Ten Commands Every Linux Developer Should Know"},{"location":"Dev/Debug/10_Commands/#ctags","text":"Those of you addicted to integrated development environments (IDEs) probably never heard of this tool, or if you did you probably think it's obsolete. But a tags-aware editor is a productive programming tool. Tagging your code allows editors like vi and Emacs to treat your code like hypertext (Figure 1). Each object in your code becomes hyperlinked to its definition. For example, if you are browsing code in vi and want to know where the variable foo was defined, type :ta foo. If your cursor is pointing to the variable, simply use Ctrl-right bracket. The good news for the vi-impaired is ctags is not only for C and vi anymore. The GNU version of ctags produces tags that can be used with Emacs and many other editors that recognize tag files. In addition, ctags recognizes many languages other than C and C++, including Perl and Python, and even hardware design languages, such as Verilog. It even can produce a human-readable cross-reference that can be useful for understanding code and performing metrics. Even if you're not interested in using ctags in your editor, you might want to check out the human-readable cross-reference by typing: ctags -x *.c*. What I like about this tool is that you get useful information whether you input one file or one hundred files, unlike many IDEs that aren't useful unless they can see your entire application. It's not a program checker, so garbage in, garbage out (GIGO) rules apply.","title":"ctags"},{"location":"Dev/Debug/10_Commands/#strace","text":"strace lets you decipher what's going on when you have no debugger nor the source code. One of my pet peeves is a program that doesn't start and doesn't tell you why. Perhaps a required file is missing or has the wrong permissions. strace can tell you what the program is doing right up to the point where it exits. It can tell you what system calls the program is using and whether they pass or fail. It even can follow forks. strace often gives me answers much more quickly than a debugger, especially if the code is unfamiliar. On occasion, I have to debug code on a live system with no debugger. A quick run with strace sometimes can avoid patching the system or littering my code with printfs. Here is a trivial example of me as an unprivileged user trying to delete a protected file: strace -o strace.out rm -f /etc/yp.conf The output shows where things went wrong: lstat64(\"/etc/yp.conf\", {st_mode=S_IFREG|0644,st_size=361, ...}) = 0 access(\"/etc/yp.conf\", W_OK) = -1 EACCES(Permission denied) unlink(\"/etc/yp.conf\") = -1 EACCES (Permission denied) strace also lets you attach to processes for just-in-time debugging. Suppose a process seems to be spending a lot of time doing nothing. A quick way to find out what is going on is to type: strace -c -p mypid After a second or two, press Ctrl-C and you might see a dump something like this: % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 91.31 0.480456 3457 139 poll 6.66 0.035025 361 97 write 0.91 0.004794 16 304 futex 0.52 0.002741 14 203 read 0.31 0.001652 3 533 gettimeofday 0.26 0.001361 4 374 ioctl 0.01 0.000075 8 10 brk 0.01 0.000064 64 1 clone 0.00 0.000026 26 1 stat64 0.00 0.000007 7 1 uname 0.00 0.000005 5 1 sched_get_priority_max 0.00 0.000002 2 1 sched_get_priority_min ------ ----------- ----------- --------- --------- ---------------- 100.00 0.526208 1665 total In this case, it's spending most of its time in the poll system call\u2014probably waiting on a socket.","title":"strace"},{"location":"Dev/Debug/10_Commands/#fuser","text":"The name is a mnemonic for file user and tells what processes have opened a given file. It also can send a signal to all those processes for you. Suppose you want to delete a file but can't because some program has it open and won't close it. Instead of rebooting, type fuser -k myfile. This sends a SIGTERM to every process that has myfile opened. Perhaps you need to kill a process that forked itself all over the place, intentionally or otherwise. An unenlightened programmer might type something like ps | grep myprogram. This inevitably would be followed by several cut-and-paste operations with the mouse. An easier way is to type fuser -k ./myprogram, where myprogram is the pathname of the executable. fuser typically is located in /sbin, which generally is reserved for system administrative tools. You can add /usr/sbin and /sbin to the end of your $PATH.","title":"fuser"},{"location":"Dev/Debug/10_Commands/#ps","text":"ps is used to find process status, but many people don't realize it also can be a powerful debugging tool. To get at these features, use the -o option, which lets you access many details of your processes, including CPU usage, virtual memory usage, current state and much more. Many of these options are defined in the POSIX standard, so they work across platforms. To look at your running commands by pid and process state, type ps -e -o pid,state,cmd. The output looks like this: 4576 S /opt/OpenOffice.org1.1.0/program/soffice.bin -writer 4618 D dd if /dev/cdrom of /dev/null 4619 S bash 4645 R ps -e -o pid,state,cmd Here you can see my dd command is in an uninterruptible sleep (state D). Basically, it is blocking while waiting for /dev/cdrom. My OpenOffice.org writer is sleeping (state S) while I type my example, and my ps command is running (state R). For an idea of how a running program is performing, type: ps -o start,time,etime -p mypid This shows the basic output from the time command, discussed later, except you don't have to wait until your program is finished. Most of the information that ps produces is available from the /proc filesystem, but if you are writing a script, using ps is more portable. You never know when a minor kernel rev will break all of your scripts that are mining the /proc filesystem. Use ps instead.","title":"ps"},{"location":"Dev/Debug/10_Commands/#time","text":"The time command is useful for understanding your code's performance. The most basic output consists of real, user and system time. Intuitively, real time is the amount of time between when the code started and when it exited. User time and system time are the amount of time spent executing application code versus kernel code, respectively. Two flavors of the time command are available. The shell has a built-in version that tells you only scheduler information. A version in /usr/bin includes more information and allows you to format the output. You easily can override the built-in time command by preceding it with a backslash, as in the examples that follow. A basic knowledge of the Linux scheduler is helpful in interpreting the output, but this tool also is helpful for learning how the scheduler works. For example, the real time of a process typically is larger than the sum of the user and system time. Time spent blocking in a system call does not count against the process, because the scheduler is free to schedule other processes during this time. The following sleep command takes one second to execute but takes no measurable system or user time: \\time -p sleep 1 real 1.03 user 0.00 sys 0.00 The next example shows how a task can spend all of its time in user space. Here, Perl calls the log() function in a loop, which requires nothing from the kernel: \\time perl -e 'log(2.0) foreach(0..0x100000)' real 0.40 user 0.20 sys 0.00 This example shows a process using a lot of memory: \\time perl -e '$x = 'a' x 0x1000000' 0.06user 0.12system 0:00.22elapsed 81%CPU (0avgtext+0avgdata 0maxresident)k 0inputs+0outputs (309major+8235minor)pagefaults 0swaps The useful information here is listed as pagefaults. Although the GNU time command advertises a lot of information, the 2.4 series of the Linux kernel stores only major and minor page-fault information. A major page fault is one that requires I/O; a minor page fault does not.","title":"time"},{"location":"Dev/Debug/10_Commands/#nm","text":"This command allows you to retrieve information on symbol names inside an object file or executable file. By default, the output gives you a symbol name and its virtual address. What good is that? Suppose you are compiling code and the compiler complains that you have an unresolved symbol _foo. You search all of your source code and cannot find anywhere where you use this symbol. Perhaps it got pulled in from some template or a macro buried in one of the dozens of include files that compiled along with your code. The command: nm -guA *.o | grep foo shows all the modules that refer to foo. If you want to find out what library defines foo, simply use: nm -gA /usr/lib/* | grep foo The nm command also understands how to demangle C++ names, which can be handy when mixing C and C++. For example, forgetting to declare a C function with extern\"C\" produces a link time error something like this: undefined reference to `cfunc(char*)' In a large project with poorly defined headers, you might have a hard time tracking down the offending module. In this case, you can look for all the unresolved symbols in each object file with demangling turned on as follows: nm -guC *.o extern-c.o:cfunc no-extern-c.o:cfunc(char*) The first module is correct; the second is not.","title":"nm"},{"location":"Dev/Debug/10_Commands/#strings","text":"This command looks for ASCII strings embedded in binary files. It can be used for good or for evil. The good uses include trying to figure out what library is producing that cryptic string on stdout every once in a while, for example: strings -f /usr/lib/lib* | grep \"cryptic message\" On the evil side, the character strings can be used to probe your format strings looking for clues and vulnerabilities. This is why you should never put passwords and logins in your programs. It might be wise to examine your own programs with this tool and see what a clever programmer can see. The version of strings that comes with the GNU binutils has many useful options.","title":"strings"},{"location":"Dev/Debug/10_Commands/#od-xxd","text":"These two commands do basically the same thing, but each offers slightly different features. od is used to convert a binary file to whatever format you like. When dealing with programs that generate raw binary files, od can be indispensable. Although the name stands for octal dump, it can dump data in decimal and hexadecimal as well. od dumps integers, IEEE floats or plain bytes. When looking at multibyte integers or floats, the host byte order affects the output. xxd also dumps binary files but does not try to interpret them as integers or floats, so the host byte order does not affect the output, which can be confusing or helpful depending on the file. Let's create a four-byte file on an Intel machine: $ echo -n abcd > foo.bin $ od -tx4 foo.bin 0000000 64636261 0000004 $ xxd -g4 foo.bin 0000000: 61626364 abcd The output of od is a byte-swapped 32-bit integer, and the output of xxd is a group of four bytes in the same byte order as they appear in the file. If you're looking for the string abcd, xxd is the command for you. But, if you're looking for the 32-bit number 0x64636261, od is the right command. xxd also knows a few cool tricks that od doesn't, including the ability to format the output in binary and to translate a binary file into a C array. Suppose you have a binary file that you want to encode inside an array in your C program. One way to do this is by creating a text file as follows: $ xxd -i foo.bin unsigned char foo_bin[] = { 0x61, 0x62, 0x63, 0x64 }; unsigned int foo_bin_len = 4;","title":"od, xxd"},{"location":"Dev/Debug/10_Commands/#file","text":"UNIX and Linux have never enforced any policy of filename extensions. Naming conventions have evolved, but they are guidelines, not policies. If you want to name your digital picture image00.exe, go ahead. Your Linux photo application gladly accepts the file no matter what the name is, although it may be hard to remember. The file command can help when you have to retrieve a file from a brain-dead Web browser, which mangles the name\u2014say a file that should have been named foo.bar.hello.world.tar.gz comes out as foo.bar. The file command can help like this: $ file foo.bar foo.bar: gzip compressed data, was \"foo.bar.hello.world.tar\", from Unix Perhaps you received a distribution with a bin directory full of dozens of files, some of which are executables and some are scripts. Suppose you want to pick out all the shell scripts. Try this: $ file /usr/sbin/* | grep script /usr/sbin/makewhatis: a /bin/bash script text executable /usr/sbin/xconv.pl: a /usr/bin/perl script text executable The file command identifies all the files in the bin directory, and the grep command filters out everything not a script. Here are some more examples: file core.4867 core.4867: ELF 32-bit LSB core file Intel 80386, version 1 (SYSV), SVR4-style, from 'abort' file /boot/initrd-2.4.20-6.img /boot/initrd-2.4.20-6.img: gzip compressed data, from Unix, max compression file -z /boot/initrd-2.4.20-6.img /boot/initrd-2.4.20-6.img: Linux rev 1.0 ext2 filesystem data (gzip compressed data, from Unix, max compression) Just as you shouldn't judge a book by its cover, you shouldn't assume the contents of a file based on its name.","title":"file"},{"location":"Dev/Debug/10_Commands/#objdump","text":"This is a more advanced tool and is not for the faint of heart. It's sort of a data-mining tool for object files. A treasure trove of information is encoded inside your object code, and this tool lets you see it. One useful thing this tool can do is dump assembly code mixed with source lines, something gcc -S doesn't do for some reason. Your object code must be compiled with debug (-g) for this to work: objdump --demangle --source myobject.o objdump also can help extract binary data from a core file for postmortem debug when you don't have access to a debugger. A complete example is too long for this article, but you need the virtual address from nm or obdump -t. Then, you can dump the file offsets for each virtual address with objdump -x. Finally, objdump is able to read from non-ELF file formats that gdb and other tools can't touch. This article is not intended as a definitive reference but as a starting point to help you become more productive. Each one of these commands is well documented in the Linux man and info pages. Consult them for more information and more ideas.","title":"objdump"},{"location":"Dev/Debug/Core_Dumps/","text":"Setup core dumps # Set core pattern to get files named like: core-bash-sig11-user0-group0-pid28808-time1481235929 echo \"core-%e-sig%s-user%u-group%g-pid%p-time%t\" > /proc/sys/kernel/core_pattern # Set limits for all users: vim /etc/security/limits.d/core.conf # --- contents --- * hard core unlimited * soft core unlimited # ---------------- # (Optional) Enable DefaultCoreLimits for all systemd services: vim /etc/systemd/system.conf # Uncoment DefaultLimitCORE and set it to infinity: DefaultLimitCORE=infinity # Reload systemd systemctl daemon-reexec # (Optional) Update only that service that you intersted in: vim /etc/systemd/system/service-you-intersted-in.service # --- Add following in [Service] section --- LimitCORE=infinity # ------------------------------------------ # Restart your service: systemctl stop service-you-intersted-in systemctl start service-you-intersted-in # And don't forget to disable core dumping when you don't need dumps any more","title":"Core Dumps"},{"location":"Dev/Debug/Core_Dumps/#setup-core-dumps","text":"# Set core pattern to get files named like: core-bash-sig11-user0-group0-pid28808-time1481235929 echo \"core-%e-sig%s-user%u-group%g-pid%p-time%t\" > /proc/sys/kernel/core_pattern # Set limits for all users: vim /etc/security/limits.d/core.conf # --- contents --- * hard core unlimited * soft core unlimited # ---------------- # (Optional) Enable DefaultCoreLimits for all systemd services: vim /etc/systemd/system.conf # Uncoment DefaultLimitCORE and set it to infinity: DefaultLimitCORE=infinity # Reload systemd systemctl daemon-reexec # (Optional) Update only that service that you intersted in: vim /etc/systemd/system/service-you-intersted-in.service # --- Add following in [Service] section --- LimitCORE=infinity # ------------------------------------------ # Restart your service: systemctl stop service-you-intersted-in systemctl start service-you-intersted-in # And don't forget to disable core dumping when you don't need dumps any more","title":"Setup core dumps"},{"location":"Dev/Debug/GDB/","text":"Analyse core dumps # run debugger with exe-you-intersted-in gdb <executable> # load core core dump (gdb) core <core_dump_file> # use common gdb commands like: backtrace","title":"GDB"},{"location":"Dev/Debug/GDB/#analyse-core-dumps","text":"# run debugger with exe-you-intersted-in gdb <executable> # load core core dump (gdb) core <core_dump_file> # use common gdb commands like: backtrace","title":"Analyse core dumps"},{"location":"Dev/Hardware/GPU/","text":"How to calc max resolution to MB A graphics card actually requires relatively little memory to function as a simple framebuffer (2D graphics) device: For example - the framebuffer requirements for 1920x1080 in 32 bit colour would be: 1920 x 1080 = 2073600 pixels 2073600 x 32 = 66355200 bits 66355200 / 8 = 8294400 bytes 8294400 / 1024 = 8100 kilobytes 8100 / 1024 = 7.91015625 megabytes So even at that high resolution an 8MB card would be able to display an image. You can double, or even triple that amount if you are using double or triple buffering (display one image while rendering another then switch to that new image while you render a third, etc). All the rest of the memory is used when the card is working with 3D graphics to store internal copies (and transformed copies) of textures for rendering. The more memory you have the more and higher resolution textures the card can hold internally, so it won't need to be repeatedly sent the same textures over and over again by the gaming engine. So basically the more memory you have the better it will be for 3D gaming. UHD 8K 7680 \u00d7 4320 = 33177600 px 33177600 x 48 = 1592524800 bits 1592524800 / 8 = 199065600 byte 199065600 / 1024 = 194400 KB 194400 / 1024 = 189,84375 MB","title":"GPU"},{"location":"Dev/Hardware/GPU/#how-to-calc-max-resolution-to-mb","text":"A graphics card actually requires relatively little memory to function as a simple framebuffer (2D graphics) device: For example - the framebuffer requirements for 1920x1080 in 32 bit colour would be: 1920 x 1080 = 2073600 pixels 2073600 x 32 = 66355200 bits 66355200 / 8 = 8294400 bytes 8294400 / 1024 = 8100 kilobytes 8100 / 1024 = 7.91015625 megabytes So even at that high resolution an 8MB card would be able to display an image. You can double, or even triple that amount if you are using double or triple buffering (display one image while rendering another then switch to that new image while you render a third, etc). All the rest of the memory is used when the card is working with 3D graphics to store internal copies (and transformed copies) of textures for rendering. The more memory you have the more and higher resolution textures the card can hold internally, so it won't need to be repeatedly sent the same textures over and over again by the gaming engine. So basically the more memory you have the better it will be for 3D gaming.","title":"How to calc max resolution to MB"},{"location":"Dev/Hardware/GPU/#uhd-8k","text":"7680 \u00d7 4320 = 33177600 px 33177600 x 48 = 1592524800 bits 1592524800 / 8 = 199065600 byte 199065600 / 1024 = 194400 KB 194400 / 1024 = 189,84375 MB","title":"UHD 8K"},{"location":"Dev/Hardware/IP_Packet_Example/","text":"IP Packet Example 0x0000: 0050 5684 0731 0013 19ff 1343 0800 4500 .PV..1.....C..E. 0x0010: 0034 448b 4000 7f06 8d9a 0a0a 0a83 0a0a .4D.@........... 0x0020: 0b08 d7ec 0050 57bb 1851 0000 0000 8002 .....PW..Q...... 0x0030: 2000 dd28 0000 0204 05b4 0103 0308 0101 ...(............ 0x0040: 0402 0x0000: 0050 5684 0731 - Destination MAC-address 00:50:56:84:07:31 0013 19ff 1343 - Source MAC-address 00:13:19:ff:13:43 0800 - Type (0x0800 - IP) 4500 - IP version, IHL (IP Header Length), Type of service 0x0010: 0034 - Packet Length 52 448b - Packet ID 17547 4000 - Flag DF (Don't fragment) \u0438 Fregment Offset 7f06 - TTL and protocol (127 \u0438 6) 8d9a - Header checksum 0a0a 0a83 - Source IP 10.10.10.131 0x0020 - '0000': 0a0a 0b08 - Destination IP 10.10.11.8 d7ec - Source port 55276 0050 - Destination port 80 57bb 1851 - Queue number 1471879249 0000 0000 - Answer number ACK, \u0442\u0443\u0442 0 8002 - \u0422\u0421\u0420 Header Length, message type (here: SYN) 0x0030: 2000 - Window 8192 dd28 - CheckSUM 0000 - Urgent pointer 0204 - TCP Options: MSS (max segment size option) 05b4 - TCP Options: MSS (max segment size = 1460) 0103 - TCP Options: nop 0308 - TCP Options: Window Scale 8 0101 - TCP Options: nop, nop 0x0040: 0402 - TCP Options: SackOK","title":"IP Packet Example"},{"location":"Dev/Hardware/IP_Packet_Example/#ip-packet-example","text":"0x0000: 0050 5684 0731 0013 19ff 1343 0800 4500 .PV..1.....C..E. 0x0010: 0034 448b 4000 7f06 8d9a 0a0a 0a83 0a0a .4D.@........... 0x0020: 0b08 d7ec 0050 57bb 1851 0000 0000 8002 .....PW..Q...... 0x0030: 2000 dd28 0000 0204 05b4 0103 0308 0101 ...(............ 0x0040: 0402 0x0000: 0050 5684 0731 - Destination MAC-address 00:50:56:84:07:31 0013 19ff 1343 - Source MAC-address 00:13:19:ff:13:43 0800 - Type (0x0800 - IP) 4500 - IP version, IHL (IP Header Length), Type of service 0x0010: 0034 - Packet Length 52 448b - Packet ID 17547 4000 - Flag DF (Don't fragment) \u0438 Fregment Offset 7f06 - TTL and protocol (127 \u0438 6) 8d9a - Header checksum 0a0a 0a83 - Source IP 10.10.10.131 0x0020 - '0000': 0a0a 0b08 - Destination IP 10.10.11.8 d7ec - Source port 55276 0050 - Destination port 80 57bb 1851 - Queue number 1471879249 0000 0000 - Answer number ACK, \u0442\u0443\u0442 0 8002 - \u0422\u0421\u0420 Header Length, message type (here: SYN) 0x0030: 2000 - Window 8192 dd28 - CheckSUM 0000 - Urgent pointer 0204 - TCP Options: MSS (max segment size option) 05b4 - TCP Options: MSS (max segment size = 1460) 0103 - TCP Options: nop 0308 - TCP Options: Window Scale 8 0101 - TCP Options: nop, nop 0x0040: 0402 - TCP Options: SackOK","title":"IP Packet Example"},{"location":"Dev/Hardware/Latency_Numbers/","text":"Latency Numbers Every Programmer Should Know Latency Numbers Every Programmer Should Know # From Jonas Bon\u00e9r Latency Comparison Numbers -------------------------- L1 cache reference 0.5 ns Branch mispredict 5 ns L2 cache reference 7 ns 14x L1 cache Mutex lock/unlock 25 ns Main memory reference 100 ns 20x L2 cache, 200x L1 cache Compress 1K bytes with Zippy 3,000 ns 3 us Send 1K bytes over 1 Gbps network 10,000 ns 10 us Read 4K randomly from SSD* 150,000 ns 150 us ~1GB/sec SSD Read 1 MB sequentially from memory 250,000 ns 250 us Round trip within same datacenter 500,000 ns 500 us Read 1 MB sequentially from SSD* 1,000,000 ns 1,000 us 1 ms ~1GB/sec SSD, 4X memory Disk seek 10,000,000 ns 10,000 us 10 ms 20x datacenter roundtrip Read 1 MB sequentially from disk 20,000,000 ns 20,000 us 20 ms 80x memory, 20X SSD Send packet CA->Netherlands->CA 150,000,000 ns 150,000 us 150 ms Notes ----- 1 ns = 10^-9 seconds 1 us = 10^-6 seconds = 1,000 ns 1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns","title":"Latency Numbers"},{"location":"Dev/Hardware/Latency_Numbers/#latency-numbers-every-programmer-should-know","text":"Latency Numbers Every Programmer Should Know # From Jonas Bon\u00e9r Latency Comparison Numbers -------------------------- L1 cache reference 0.5 ns Branch mispredict 5 ns L2 cache reference 7 ns 14x L1 cache Mutex lock/unlock 25 ns Main memory reference 100 ns 20x L2 cache, 200x L1 cache Compress 1K bytes with Zippy 3,000 ns 3 us Send 1K bytes over 1 Gbps network 10,000 ns 10 us Read 4K randomly from SSD* 150,000 ns 150 us ~1GB/sec SSD Read 1 MB sequentially from memory 250,000 ns 250 us Round trip within same datacenter 500,000 ns 500 us Read 1 MB sequentially from SSD* 1,000,000 ns 1,000 us 1 ms ~1GB/sec SSD, 4X memory Disk seek 10,000,000 ns 10,000 us 10 ms 20x datacenter roundtrip Read 1 MB sequentially from disk 20,000,000 ns 20,000 us 20 ms 80x memory, 20X SSD Send packet CA->Netherlands->CA 150,000,000 ns 150,000 us 150 ms Notes ----- 1 ns = 10^-9 seconds 1 us = 10^-6 seconds = 1,000 ns 1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns","title":"Latency Numbers Every Programmer Should Know"},{"location":"Dev/Hardware/Networks/","text":"RFC1878 Full Table The following table lists the variable length subnets from 1 to 32, the CIDR [3] representation form (/xx) and the Decmial equivalents. (M = Million, K=Thousand, A,B,C= traditional class values) Mask value: # of Hex CIDR Decimal addresses Classfull 80.00.00.00 /1 128.0.0.0 2048 M 128 A C0.00.00.00 /2 192.0.0.0 1024 M 64 A E0.00.00.00 /3 224.0.0.0 512 M 32 A F0.00.00.00 /4 240.0.0.0 256 M 16 A F8.00.00.00 /5 248.0.0.0 128 M 8 A FC.00.00.00 /6 252.0.0.0 64 M 4 A FE.00.00.00 /7 254.0.0.0 32 M 2 A FF.00.00.00 /8 255.0.0.0 16 M 1 A FF.80.00.00 /9 255.128.0.0 8 M 128 B FF.C0.00.00 /10 255.192.0.0 4 M 64 B FF.E0.00.00 /11 255.224.0.0 2 M 32 B FF.F0.00.00 /12 255.240.0.0 1024 K 16 B FF.F8.00.00 /13 255.248.0.0 512 K 8 B FF.FC.00.00 /14 255.252.0.0 256 K 4 B FF.FE.00.00 /15 255.254.0.0 128 K 2 B FF.FF.00.00 /16 255.255.0.0 64 K 1 B FF.FF.80.00 /17 255.255.128.0 32 K 128 C FF.FF.C0.00 /18 255.255.192.0 16 K 64 C FF.FF.E0.00 /19 255.255.224.0 8 K 32 C FF.FF.F0.00 /20 255.255.240.0 4 K 16 C FF.FF.F8.00 /21 255.255.248.0 2 K 8 C FF.FF.FC.00 /22 255.255.252.0 1 K 4 C FF.FF.FE.00 /23 255.255.254.0 512 2 C FF.FF.FF.00 /24 255.255.255.0 256 1 C FF.FF.FF.80 /25 255.255.255.128 128 1/2 C FF.FF.FF.C0 /26 255.255.255.192 64 1/4 C FF.FF.FF.E0 /27 255.255.255.224 32 1/8 C FF.FF.FF.F0 /28 255.255.255.240 16 1/16 C FF.FF.FF.F8 /29 255.255.255.248 8 1/32 C FF.FF.FF.FC /30 255.255.255.252 4 1/64 C FF.FF.FF.FE /31 255.255.255.254 2 1/128 C FF.FF.FF.FF /32 255.255.255.255 This is a single host route Subnets and Networks The number of available network and host addresses are derived from the number of bits used for subnet masking. The tables below depict the number of subnetting bits and the resulting network, broadcast address, and host addresses. Please note that all-zeros and all-ones subnets are included in Tables 1-1 and 1-2 per the current, standards- based practice for using all definable subnets. Table 1-1 Class B Subnet Mask # of nets Net. Addr. Host Addr Range Brodcast Addr. Bits of Subnet hosts/subnet 255.255.128.0 2 nets N.N.0.0 N.N.0-127.N N.N.127.255 1 bit subnet 32766 N.N.128.0 N.N.128-254.N N.N.254.255 255.255.192.0 4 nets N.N.0.0 N.N.0-63.N N.N.63.255 2 bit subnet 16382 N.N.64.0 N.N.64-127.N N.N.127.255 N.N.128.0 N.N.128-191.N N.N.191.255 N.N.192.0 N.N.192-254.N N.N.254.255 255.255.224.0 8 nets N.N.0.0 N.N.0-31.N N.N.31.255 3 bit subnet 8190 N.N.32.0 N.N.32-63.N N.N.63.255 N.N.64.0 N.N.64-95.N N.N.95.255 N.N.96.0 N.N.96-127.N N.N.127.255 N.N.128.0 N.N.128-159.N N.N.159.255 N.N.160.0 N.N.160-191.N N.N.191.255 N.N.192.0 N.N.192-223.N N.N.223.255 N.N.224.0 N.N.224-254.N N.N.254.255 255.255.240.0 16 nets N.N.0.0 N.N.0-15.N N.N.15.255 4 bit subnet 4094 N.N.16.0 N.N.16-31.N N.N.31.255 N.N.32.0 N.N.32-47.N N.N.47.255 N.N.48.0 N.N.48-63.N N.N.63.255 N.N.64.0 N.N.64-79.N N.N.79.255 N.N.80.0 N.N.80-95.N N.N.95.255 N.N.96.0 N.N.96-111.N N.N.111.255 N.N.112.0 N.N.112-127.N N.N.127.255 N.N.128.0 N.N.128-143.N N.N.143.255 N.N.144.0 N.N.144-159.N N.N.159.255 N.N.160.0 N.N.160-175.N N.N.175.255 N.N.176.0 N.N.176-191.N N.N.191.255 N.N.192.0 N.N.192-207.N N.N.207.255 N.N.208.0 N.N.208-223.N N.N.223.255 N.N.224.0 N.N.224-239.N N.N.239.255 N.N.240.0 N.N.240-254.N N.N.254.255 255.255.248.0 32 nets N.N.0.0 N.N.0-7.N N.N.7.255 5 bit subnet 2046 N.N.8.0 N.N.8-15.N N.N.15.255 N.N.16.0 N.N.16-23.N N.N.23.255 N.N.24.0 N.N.24-31.N N.N.31.255 N.N.32.0 N.N.32-39.N N.N.39.255 N.N.40.0 N.N.40-47.N N.N.47.255 N.N.48.0 N.N.48-55.N N.N.55.255 N.N.56.0 N.N.56-63.N N.N.63.255 N.N.64.0 N.N.64-71.N N.N.71.255 N.N.72.0 N.N.72-79.N N.N.79.255 N.N.80.0 N.N.80-87.N N.N.87.255 N.N.88.0 N.N.88-95.N N.N.95.255 N.N.96.0 N.N.96-103.N N.N.103.255 N.N.104.0 N.N.104-111.N N.N.111.255 N.N.112.0 N.N.112-119.N N.N.119.255 N.N.120.0 N.N.120-127.N N.N.127.255 N.N.128.0 N.N.128-135.N N.N.135.255 N.N.136.0 N.N.136-143.N N.N.143.255 N.N.144.0 N.N.144-151.N N.N.151.255 N.N.152.0 N.N.152-159.N N.N.159.255 N.N.160.0 N.N.160-167.N N.N.167.255 N.N.168.0 N.N.168-175.N N.N.175.255 N.N.176.0 N.N.176-183.N N.N.183.255 N.N.184.0 N.N.184-191.N N.N.191.255 N.N.192.0 N.N.192-199.N N.N.199.255 N.N.200.0 N.N.200-207.N N.N.207.255 N.N.208.0 N.N.208-215.N N.N.215.255 N.N.216.0 N.N.216-223.N N.N.223.255 N.N.224.0 N.N.224-231.N N.N.231.255 N.N.232.0 N.N.232-239.N N.N.239.255 N.N.240.0 N.N.240-247.N N.N.247.255 N.N.248.0 N.N.248-254.N N.N.254.255 255.255.252.0 64 nets N.N.0.0 N.N.0-3.N N.N.3.255 6 bit subnet 1022 N.N.4.0 N.N.4-7.N N.N.7.255 N.N.8.0 N.N.8-11.N N.N.11.255 N.N.12.0 N.N.12-15.N N.N.15.255 N.N.240.0 N.N.240-243.N N.N.243.255 N.N.244.0 N.N.244-247.N N.N.247.255 N.N.248.0 N.N.248-251.N N.N.251.255 N.N.252.0 N.N.252-254.N N.N.254.255 255.255.254.0 128 nets N.N.0.0 N.N.0-1.N N.N.1.255 7 bit subnet 510 N.N.2.0 N.N.2-3.N N.N.3.255 N.N.4.0 N.N.4-5.N N.N.5.255 N.N.250.0 N.N.250-251.N N.N.251.255 N.N.252.0 N.N.252-253.N N.N.253.255 N.N.254.0 N.N.254.N N.N.254.255 255.255.255.0 255 nets N.N.0.0 N.N.0.N N.N.0.255 8 bit subnet 253 N.N.1.0 N.N.1.N N.N.1.255 N.N.252.0 N.N.252.N N.N.252.255 N.N.253.0 N.N.253.N N.N.253.255 N.N.254.0 N.N.254.N N.N.254.255 Table 1-2 Class C Subnet Mask # of nets Net. Addr. Host Addr Range Brodcast Addr. Bits of Subnet hosts/subnet 255.255.255.128 2 nets N.N.N.0 N.N.N.1-126 N.N.N.127 1 bit Class C 126 N.N.N.128 N.N.N.129-254 N.N.N.255 9 bit Class B 255.255.255.192 4 nets N.N.N.0 N.N.N.1-62 N.N.N.63 2 bit Class C 62 N.N.N.64 N.N.N.65-126 N.N.N.127 10 bit Class B N.N.N.128 N.N.N.129-190 N.N.N.191 N.N.N.192 N.N.N.193-254 N.N.N.255 255.255.255.224 8 nets N.N.N.0 N.N.N.1-30 N.N.N.31 3 bit Class C 30 N.N.N.32 N.N.N.33-62 N.N.N.63 11 bit Class B N.N.N.64 N.N.N.65-94 N.N.N.95 N.N.N.96 N.N.N.97-126 N.N.N.127 N.N.N.128 N.N.N.129-158 N.N.N.159 N.N.N.160 N.N.N.161-190 N.N.N.191 N.N.N.192 N.N.N.193-222 N.N.N.223 N.N.N.224 N.N.N.225-254 N.N.N.255 255.255.255.240 16 nets N.N.N.0 N.N.N.1-14 N.N.N.15 4 bit Class C 14 N.N.N.16 N.N.N.17-30 N.N.N.31 12 bit Class B N.N.N.32 N.N.N.33-46 N.N.N.47 N.N.N.48 N.N.N.49-62 N.N.N.63 N.N.N.64 N.N.N.65-78 N.N.N.79 N.N.N.80 N.N.N.81-94 N.N.N.95 N.N.N.96 N.N.N.97-110 N.N.N.111 N.N.N.112 N.N.N.113-126 N.N.N.127 N.N.N.128 N.N.N.129-142 N.N.N.143 N.N.N.144 N.N.N.145-158 N.N.N.159 N.N.N.160 N.N.N.161-174 N.N.N.175 N.N.N.176 N.N.N.177-190 N.N.N.191 N.N.N.192 N.N.N.193-206 N.N.N.207 N.N.N.208 N.N.N.209-222 N.N.N.223 N.N.N.224 N.N.N.225-238 N.N.N.239 N.N.N.240 N.N.N.241-254 N.N.N.255 255.255.255.248 32 nets N.N.N.0 N.N.N.1-6 N.N.N.7 5 bit Class C 6 N.N.N.8 N.N.N.9-14 N.N.N.15 13 bit Class B N.N.N.16 N.N.N.17-22 N.N.N.23 N.N.N.24 N.N.N.25-30 N.N.N.31 N.N.N.32 N.N.N.33-38 N.N.N.39 N.N.N.40 N.N.N.41-46 N.N.N.47 N.N.N.48 N.N.N.49-54 N.N.N.55 N.N.N.56 N.N.N.57-62 N.N.N.63 N.N.N.64 N.N.N.65-70 N.N.N.71 N.N.N.72 N.N.N.73-78 N.N.N.79 N.N.N.80 N.N.N.81-86 N.N.N.87 N.N.N.88 N.N.N.89-94 N.N.N.95 N.N.N.96 N.N.N.97-102 N.N.N.103 N.N.N.104 N.N.N.105-110 N.N.N.111 N.N.N.112 N.N.N.113-118 N.N.N.119 N.N.N.120 N.N.N.121-126 N.N.N.127 N.N.N.128 N.N.N.129-134 N.N.N.135 N.N.N.136 N.N.N.137-142 N.N.N.143 N.N.N.144 N.N.N.145-150 N.N.N.151 N.N.N.152 N.N.N.153-158 N.N.N.159 N.N.N.160 N.N.N.161-166 N.N.N.167 N.N.N.168 N.N.N.169-174 N.N.N.175 N.N.N.176 N.N.N.177-182 N.N.N.183 N.N.N.184 N.N.N.185-190 N.N.N.191 N.N.N.192 N.N.N.193-198 N.N.N.199 N.N.N.200 N.N.N.201-206 N.N.N.207 N.N.N.208 N.N.N.209-214 N.N.N.215 N.N.N.216 N.N.N.217-222 N.N.N.223 N.N.N.224 N.N.N.225-230 N.N.N.231 N.N.N.232 N.N.N.233-238 N.N.N.239 N.N.N.240 N.N.N.241-246 N.N.N.247 N.N.N.248 N.N.N.249-254 N.N.N.255 255.255.255.252 64 nets N.N.N.0 N.N.N.1-2 N.N.N.3 6 bit Class C 2 N.N.N.4 N.N.N.5-6 N.N.N.7 14 bit Class B N.N.N.8 N.N.N.9-10 N.N.N.11 N.N.N.244 N.N.N.245-246 N.N.N.247 N.N.N.248 N.N.N.249-250 N.N.N.251 N.N.N.252 N.N.N.253-254 N.N.N.255 For the sake of completeness within this memo, tables 2-1 and 2-2 illistrate some options for subnet/host partions within selected block sizes using calculations which exclude all-zeros and all-ones subnets. Many vendors only support subnetting based upon this premise. This practice is obsolete! Modern software will be able to utilize all definable networks. Table 2-1 from a /16 block # bits Mask Effective Subnets Effective Hosts ======== ===== ================= =============== 2 255.255.192.0 2 16382 3 255.255.224.0 6 8190 4 255.255.240.0 14 4094 5 255.255.248.0 30 2046 6 255.255.252.0 62 1022 7 255.255.254.0 126 510 8 255.255.255.0 254 254 9 255.255.255.128 510 126 10 255.255.255.192 1022 62 11 255.255.255.224 2046 30 12 255.255.255.240 4094 14 13 255.255.255.248 8190 6 14 255.255.255.252 16382 2 Table 2-2 from a /24 block # bits Mask Effective Subnets Effective Hosts ======== ===== ================= =============== 2 255.255.255.192 2 62 3 255.255.255.224 6 30 4 255.255.255.240 14 14 5 255.255.255.248 30 6 6 255.255.255.252 62 2 *Subnet all zeroes and all ones excluded. (Obsolete) *Host all zeroes and all ones excluded. (Obsolete)","title":"Networks"},{"location":"Dev/Hardware/Networks/#rfc1878","text":"","title":"RFC1878"},{"location":"Dev/Hardware/Networks/#full-table","text":"The following table lists the variable length subnets from 1 to 32, the CIDR [3] representation form (/xx) and the Decmial equivalents. (M = Million, K=Thousand, A,B,C= traditional class values) Mask value: # of Hex CIDR Decimal addresses Classfull 80.00.00.00 /1 128.0.0.0 2048 M 128 A C0.00.00.00 /2 192.0.0.0 1024 M 64 A E0.00.00.00 /3 224.0.0.0 512 M 32 A F0.00.00.00 /4 240.0.0.0 256 M 16 A F8.00.00.00 /5 248.0.0.0 128 M 8 A FC.00.00.00 /6 252.0.0.0 64 M 4 A FE.00.00.00 /7 254.0.0.0 32 M 2 A FF.00.00.00 /8 255.0.0.0 16 M 1 A FF.80.00.00 /9 255.128.0.0 8 M 128 B FF.C0.00.00 /10 255.192.0.0 4 M 64 B FF.E0.00.00 /11 255.224.0.0 2 M 32 B FF.F0.00.00 /12 255.240.0.0 1024 K 16 B FF.F8.00.00 /13 255.248.0.0 512 K 8 B FF.FC.00.00 /14 255.252.0.0 256 K 4 B FF.FE.00.00 /15 255.254.0.0 128 K 2 B FF.FF.00.00 /16 255.255.0.0 64 K 1 B FF.FF.80.00 /17 255.255.128.0 32 K 128 C FF.FF.C0.00 /18 255.255.192.0 16 K 64 C FF.FF.E0.00 /19 255.255.224.0 8 K 32 C FF.FF.F0.00 /20 255.255.240.0 4 K 16 C FF.FF.F8.00 /21 255.255.248.0 2 K 8 C FF.FF.FC.00 /22 255.255.252.0 1 K 4 C FF.FF.FE.00 /23 255.255.254.0 512 2 C FF.FF.FF.00 /24 255.255.255.0 256 1 C FF.FF.FF.80 /25 255.255.255.128 128 1/2 C FF.FF.FF.C0 /26 255.255.255.192 64 1/4 C FF.FF.FF.E0 /27 255.255.255.224 32 1/8 C FF.FF.FF.F0 /28 255.255.255.240 16 1/16 C FF.FF.FF.F8 /29 255.255.255.248 8 1/32 C FF.FF.FF.FC /30 255.255.255.252 4 1/64 C FF.FF.FF.FE /31 255.255.255.254 2 1/128 C FF.FF.FF.FF /32 255.255.255.255 This is a single host route","title":"Full Table"},{"location":"Dev/Hardware/Networks/#subnets-and-networks","text":"The number of available network and host addresses are derived from the number of bits used for subnet masking. The tables below depict the number of subnetting bits and the resulting network, broadcast address, and host addresses. Please note that all-zeros and all-ones subnets are included in Tables 1-1 and 1-2 per the current, standards- based practice for using all definable subnets.","title":"Subnets and Networks"},{"location":"Dev/Hardware/Networks/#table-1-1-class-b","text":"Subnet Mask # of nets Net. Addr. Host Addr Range Brodcast Addr. Bits of Subnet hosts/subnet 255.255.128.0 2 nets N.N.0.0 N.N.0-127.N N.N.127.255 1 bit subnet 32766 N.N.128.0 N.N.128-254.N N.N.254.255 255.255.192.0 4 nets N.N.0.0 N.N.0-63.N N.N.63.255 2 bit subnet 16382 N.N.64.0 N.N.64-127.N N.N.127.255 N.N.128.0 N.N.128-191.N N.N.191.255 N.N.192.0 N.N.192-254.N N.N.254.255 255.255.224.0 8 nets N.N.0.0 N.N.0-31.N N.N.31.255 3 bit subnet 8190 N.N.32.0 N.N.32-63.N N.N.63.255 N.N.64.0 N.N.64-95.N N.N.95.255 N.N.96.0 N.N.96-127.N N.N.127.255 N.N.128.0 N.N.128-159.N N.N.159.255 N.N.160.0 N.N.160-191.N N.N.191.255 N.N.192.0 N.N.192-223.N N.N.223.255 N.N.224.0 N.N.224-254.N N.N.254.255 255.255.240.0 16 nets N.N.0.0 N.N.0-15.N N.N.15.255 4 bit subnet 4094 N.N.16.0 N.N.16-31.N N.N.31.255 N.N.32.0 N.N.32-47.N N.N.47.255 N.N.48.0 N.N.48-63.N N.N.63.255 N.N.64.0 N.N.64-79.N N.N.79.255 N.N.80.0 N.N.80-95.N N.N.95.255 N.N.96.0 N.N.96-111.N N.N.111.255 N.N.112.0 N.N.112-127.N N.N.127.255 N.N.128.0 N.N.128-143.N N.N.143.255 N.N.144.0 N.N.144-159.N N.N.159.255 N.N.160.0 N.N.160-175.N N.N.175.255 N.N.176.0 N.N.176-191.N N.N.191.255 N.N.192.0 N.N.192-207.N N.N.207.255 N.N.208.0 N.N.208-223.N N.N.223.255 N.N.224.0 N.N.224-239.N N.N.239.255 N.N.240.0 N.N.240-254.N N.N.254.255 255.255.248.0 32 nets N.N.0.0 N.N.0-7.N N.N.7.255 5 bit subnet 2046 N.N.8.0 N.N.8-15.N N.N.15.255 N.N.16.0 N.N.16-23.N N.N.23.255 N.N.24.0 N.N.24-31.N N.N.31.255 N.N.32.0 N.N.32-39.N N.N.39.255 N.N.40.0 N.N.40-47.N N.N.47.255 N.N.48.0 N.N.48-55.N N.N.55.255 N.N.56.0 N.N.56-63.N N.N.63.255 N.N.64.0 N.N.64-71.N N.N.71.255 N.N.72.0 N.N.72-79.N N.N.79.255 N.N.80.0 N.N.80-87.N N.N.87.255 N.N.88.0 N.N.88-95.N N.N.95.255 N.N.96.0 N.N.96-103.N N.N.103.255 N.N.104.0 N.N.104-111.N N.N.111.255 N.N.112.0 N.N.112-119.N N.N.119.255 N.N.120.0 N.N.120-127.N N.N.127.255 N.N.128.0 N.N.128-135.N N.N.135.255 N.N.136.0 N.N.136-143.N N.N.143.255 N.N.144.0 N.N.144-151.N N.N.151.255 N.N.152.0 N.N.152-159.N N.N.159.255 N.N.160.0 N.N.160-167.N N.N.167.255 N.N.168.0 N.N.168-175.N N.N.175.255 N.N.176.0 N.N.176-183.N N.N.183.255 N.N.184.0 N.N.184-191.N N.N.191.255 N.N.192.0 N.N.192-199.N N.N.199.255 N.N.200.0 N.N.200-207.N N.N.207.255 N.N.208.0 N.N.208-215.N N.N.215.255 N.N.216.0 N.N.216-223.N N.N.223.255 N.N.224.0 N.N.224-231.N N.N.231.255 N.N.232.0 N.N.232-239.N N.N.239.255 N.N.240.0 N.N.240-247.N N.N.247.255 N.N.248.0 N.N.248-254.N N.N.254.255 255.255.252.0 64 nets N.N.0.0 N.N.0-3.N N.N.3.255 6 bit subnet 1022 N.N.4.0 N.N.4-7.N N.N.7.255 N.N.8.0 N.N.8-11.N N.N.11.255 N.N.12.0 N.N.12-15.N N.N.15.255 N.N.240.0 N.N.240-243.N N.N.243.255 N.N.244.0 N.N.244-247.N N.N.247.255 N.N.248.0 N.N.248-251.N N.N.251.255 N.N.252.0 N.N.252-254.N N.N.254.255 255.255.254.0 128 nets N.N.0.0 N.N.0-1.N N.N.1.255 7 bit subnet 510 N.N.2.0 N.N.2-3.N N.N.3.255 N.N.4.0 N.N.4-5.N N.N.5.255 N.N.250.0 N.N.250-251.N N.N.251.255 N.N.252.0 N.N.252-253.N N.N.253.255 N.N.254.0 N.N.254.N N.N.254.255 255.255.255.0 255 nets N.N.0.0 N.N.0.N N.N.0.255 8 bit subnet 253 N.N.1.0 N.N.1.N N.N.1.255 N.N.252.0 N.N.252.N N.N.252.255 N.N.253.0 N.N.253.N N.N.253.255 N.N.254.0 N.N.254.N N.N.254.255","title":"Table 1-1 Class B"},{"location":"Dev/Hardware/Networks/#table-1-2-class-c","text":"Subnet Mask # of nets Net. Addr. Host Addr Range Brodcast Addr. Bits of Subnet hosts/subnet 255.255.255.128 2 nets N.N.N.0 N.N.N.1-126 N.N.N.127 1 bit Class C 126 N.N.N.128 N.N.N.129-254 N.N.N.255 9 bit Class B 255.255.255.192 4 nets N.N.N.0 N.N.N.1-62 N.N.N.63 2 bit Class C 62 N.N.N.64 N.N.N.65-126 N.N.N.127 10 bit Class B N.N.N.128 N.N.N.129-190 N.N.N.191 N.N.N.192 N.N.N.193-254 N.N.N.255 255.255.255.224 8 nets N.N.N.0 N.N.N.1-30 N.N.N.31 3 bit Class C 30 N.N.N.32 N.N.N.33-62 N.N.N.63 11 bit Class B N.N.N.64 N.N.N.65-94 N.N.N.95 N.N.N.96 N.N.N.97-126 N.N.N.127 N.N.N.128 N.N.N.129-158 N.N.N.159 N.N.N.160 N.N.N.161-190 N.N.N.191 N.N.N.192 N.N.N.193-222 N.N.N.223 N.N.N.224 N.N.N.225-254 N.N.N.255 255.255.255.240 16 nets N.N.N.0 N.N.N.1-14 N.N.N.15 4 bit Class C 14 N.N.N.16 N.N.N.17-30 N.N.N.31 12 bit Class B N.N.N.32 N.N.N.33-46 N.N.N.47 N.N.N.48 N.N.N.49-62 N.N.N.63 N.N.N.64 N.N.N.65-78 N.N.N.79 N.N.N.80 N.N.N.81-94 N.N.N.95 N.N.N.96 N.N.N.97-110 N.N.N.111 N.N.N.112 N.N.N.113-126 N.N.N.127 N.N.N.128 N.N.N.129-142 N.N.N.143 N.N.N.144 N.N.N.145-158 N.N.N.159 N.N.N.160 N.N.N.161-174 N.N.N.175 N.N.N.176 N.N.N.177-190 N.N.N.191 N.N.N.192 N.N.N.193-206 N.N.N.207 N.N.N.208 N.N.N.209-222 N.N.N.223 N.N.N.224 N.N.N.225-238 N.N.N.239 N.N.N.240 N.N.N.241-254 N.N.N.255 255.255.255.248 32 nets N.N.N.0 N.N.N.1-6 N.N.N.7 5 bit Class C 6 N.N.N.8 N.N.N.9-14 N.N.N.15 13 bit Class B N.N.N.16 N.N.N.17-22 N.N.N.23 N.N.N.24 N.N.N.25-30 N.N.N.31 N.N.N.32 N.N.N.33-38 N.N.N.39 N.N.N.40 N.N.N.41-46 N.N.N.47 N.N.N.48 N.N.N.49-54 N.N.N.55 N.N.N.56 N.N.N.57-62 N.N.N.63 N.N.N.64 N.N.N.65-70 N.N.N.71 N.N.N.72 N.N.N.73-78 N.N.N.79 N.N.N.80 N.N.N.81-86 N.N.N.87 N.N.N.88 N.N.N.89-94 N.N.N.95 N.N.N.96 N.N.N.97-102 N.N.N.103 N.N.N.104 N.N.N.105-110 N.N.N.111 N.N.N.112 N.N.N.113-118 N.N.N.119 N.N.N.120 N.N.N.121-126 N.N.N.127 N.N.N.128 N.N.N.129-134 N.N.N.135 N.N.N.136 N.N.N.137-142 N.N.N.143 N.N.N.144 N.N.N.145-150 N.N.N.151 N.N.N.152 N.N.N.153-158 N.N.N.159 N.N.N.160 N.N.N.161-166 N.N.N.167 N.N.N.168 N.N.N.169-174 N.N.N.175 N.N.N.176 N.N.N.177-182 N.N.N.183 N.N.N.184 N.N.N.185-190 N.N.N.191 N.N.N.192 N.N.N.193-198 N.N.N.199 N.N.N.200 N.N.N.201-206 N.N.N.207 N.N.N.208 N.N.N.209-214 N.N.N.215 N.N.N.216 N.N.N.217-222 N.N.N.223 N.N.N.224 N.N.N.225-230 N.N.N.231 N.N.N.232 N.N.N.233-238 N.N.N.239 N.N.N.240 N.N.N.241-246 N.N.N.247 N.N.N.248 N.N.N.249-254 N.N.N.255 255.255.255.252 64 nets N.N.N.0 N.N.N.1-2 N.N.N.3 6 bit Class C 2 N.N.N.4 N.N.N.5-6 N.N.N.7 14 bit Class B N.N.N.8 N.N.N.9-10 N.N.N.11 N.N.N.244 N.N.N.245-246 N.N.N.247 N.N.N.248 N.N.N.249-250 N.N.N.251 N.N.N.252 N.N.N.253-254 N.N.N.255 For the sake of completeness within this memo, tables 2-1 and 2-2 illistrate some options for subnet/host partions within selected block sizes using calculations which exclude all-zeros and all-ones subnets. Many vendors only support subnetting based upon this premise. This practice is obsolete! Modern software will be able to utilize all definable networks.","title":"Table 1-2 Class C"},{"location":"Dev/Hardware/Networks/#table-2-1-from-a-16-block","text":"# bits Mask Effective Subnets Effective Hosts ======== ===== ================= =============== 2 255.255.192.0 2 16382 3 255.255.224.0 6 8190 4 255.255.240.0 14 4094 5 255.255.248.0 30 2046 6 255.255.252.0 62 1022 7 255.255.254.0 126 510 8 255.255.255.0 254 254 9 255.255.255.128 510 126 10 255.255.255.192 1022 62 11 255.255.255.224 2046 30 12 255.255.255.240 4094 14 13 255.255.255.248 8190 6 14 255.255.255.252 16382 2","title":"Table 2-1 from a /16 block"},{"location":"Dev/Hardware/Networks/#table-2-2-from-a-24-block","text":"# bits Mask Effective Subnets Effective Hosts ======== ===== ================= =============== 2 255.255.255.192 2 62 3 255.255.255.224 6 30 4 255.255.255.240 14 14 5 255.255.255.248 30 6 6 255.255.255.252 62 2 *Subnet all zeroes and all ones excluded. (Obsolete) *Host all zeroes and all ones excluded. (Obsolete)","title":"Table 2-2 from a /24 block"},{"location":"Dev/Java/Environment/","text":"Windows variables JAVA_HOME : C:\\Program Files\\Java\\jdkx.x.x_xxx JDK_HOME : %JAVA_HOME% JRE_HOME : %JAVA_HOME%\\jre CLASSPATH : .;%JAVA_HOME%\\lib;%JAVA_HOME%\\jre\\lib PATH : <all_your_recors>;%JAVA_HOME%\\bin # Optional JAVA_TOOL_OPTIONS : -Dfile.encoding=\"UTF-8\" Unix variables # If you install JRE only: JAVA_HOME=/path/to/jre JRE_HOME=$JAVA_HOME CLASSPATH=.;$JAVA_HOME/lib PATH=$PATH;$JAVA_HOME/bin # If you install JDK: JAVA_HOME=/path/to/jdk JDK_HOME=$JAVA_HOME JRE_HOME=$JAVA_HOME/jre CLASSPATH=.;$JAVA_HOME/lib;$JAVA_HOME/jre/lib PATH=$PATH;$JAVA_HOME/bin","title":"Environment"},{"location":"Dev/Java/Environment/#windows-variables","text":"JAVA_HOME : C:\\Program Files\\Java\\jdkx.x.x_xxx JDK_HOME : %JAVA_HOME% JRE_HOME : %JAVA_HOME%\\jre CLASSPATH : .;%JAVA_HOME%\\lib;%JAVA_HOME%\\jre\\lib PATH : <all_your_recors>;%JAVA_HOME%\\bin # Optional JAVA_TOOL_OPTIONS : -Dfile.encoding=\"UTF-8\"","title":"Windows variables"},{"location":"Dev/Java/Environment/#unix-variables","text":"# If you install JRE only: JAVA_HOME=/path/to/jre JRE_HOME=$JAVA_HOME CLASSPATH=.;$JAVA_HOME/lib PATH=$PATH;$JAVA_HOME/bin # If you install JDK: JAVA_HOME=/path/to/jdk JDK_HOME=$JAVA_HOME JRE_HOME=$JAVA_HOME/jre CLASSPATH=.;$JAVA_HOME/lib;$JAVA_HOME/jre/lib PATH=$PATH;$JAVA_HOME/bin","title":"Unix variables"},{"location":"Dev/Java/Runtime_customization/","text":"Java custom user and system preferencies path # From user which will start particular hava application mkdir -p <new_system_prefs> mkdir -p <new_user_prefs> chmod -R 755 <new_system_prefs> chmod -R 755 <new_user_prefs> export JAVA_OPTS=\"-Djava.util.prefs.systemRoot=<new_system_prefs> -Djava.util.prefs.userRoot=<new_user_prefs>\" # start application","title":"Runtime customization"},{"location":"Dev/Java/Runtime_customization/#java-custom-user-and-system-preferencies-path","text":"# From user which will start particular hava application mkdir -p <new_system_prefs> mkdir -p <new_user_prefs> chmod -R 755 <new_system_prefs> chmod -R 755 <new_user_prefs> export JAVA_OPTS=\"-Djava.util.prefs.systemRoot=<new_system_prefs> -Djava.util.prefs.userRoot=<new_user_prefs>\" # start application","title":"Java custom user and system preferencies path"},{"location":"Dev/Libraries/Linux/","text":"Add global library path echo '/path/to/library/dir' >> /etc/ld.so.conf.d/<your-custom-name>.conf ldconfig","title":"Linux"},{"location":"Dev/Libraries/Linux/#add-global-library-path","text":"echo '/path/to/library/dir' >> /etc/ld.so.conf.d/<your-custom-name>.conf ldconfig","title":"Add global library path"},{"location":"Dev/MPI/HelloWorld/","text":"Hello World C #include <stdio.h> #include <mpi.h> main(int argc, char **argv) { int node; char hostname[256]; MPI_Init(&argc,&argv); MPI_Comm_rank(MPI_COMM_WORLD, &node); gethostname(hostname,255); printf(\"Hello World from process %d on %s\\n\",node, hostname); MPI_Finalize(); return 0; } RUN #!/bin/bash #$ -l mem=1G #$ -l h_rt=0:15:00 #$ -pe mpi-fill 8 #$ -cwd echo -n \"Start at $(date +%Y-%m-%d-%H-%M-%S)\" mpirun ./helloworld echo -n \"Finish at $(date +%Y-%m-%d-%H-%M-%S)\"","title":"HelloWorld"},{"location":"Dev/MPI/HelloWorld/#hello-world","text":"C #include <stdio.h> #include <mpi.h> main(int argc, char **argv) { int node; char hostname[256]; MPI_Init(&argc,&argv); MPI_Comm_rank(MPI_COMM_WORLD, &node); gethostname(hostname,255); printf(\"Hello World from process %d on %s\\n\",node, hostname); MPI_Finalize(); return 0; } RUN #!/bin/bash #$ -l mem=1G #$ -l h_rt=0:15:00 #$ -pe mpi-fill 8 #$ -cwd echo -n \"Start at $(date +%Y-%m-%d-%H-%M-%S)\" mpirun ./helloworld echo -n \"Finish at $(date +%Y-%m-%d-%H-%M-%S)\"","title":"Hello World"},{"location":"Dev/MPI/MPI-Lib/","text":"MPI_Abort MPI_Abort(3) MPI MPI_Abort(3) NAME MPI_Abort - Terminates MPI execution environment SYNOPSIS #include \"mpi.h\" int MPI_Abort( MPI_Comm comm, int errorcode ) INPUT PARAMETERS comm - communicator of tasks to abort errorcode - error code to return to invoking environment NOTES Terminates all MPI processes associated with the communicator comm ; in most systems (all to date), terminates all processes. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION abort.c 12/13/2001 MPI_Abort(3) MPI_Address MPI_Address(3) MPI MPI_Address(3) NAME MPI_Address - Gets the address of a location in memory SYNOPSIS #include \"mpi.h\" int MPI_Address( void *location, MPI_Aint *address) INPUT PARAMETERS location - location in caller memory (choice) OUTPUT PARAMETER address - address of location (integer) NOTE This routine is provided for both the Fortran and C programmers. On many systems, the address returned by this routine will be the same as produced by the C & operator, but this is not required in C and may not be true of systems with word- rather than byte-oriented instructions or systems with segmented address spaces. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION address.c 11/14/2001 MPI_Address(3) MPI_Allgather MPI_Allgather(3) MPI MPI_Allgather(3) NAME MPI_Allgather - Gathers data from all tasks and distribute it to all tasks SYNOPSIS #include \"mpi.h\" int MPI_Allgather ( void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - data type of send buffer elements (handle) recvcount - number of elements received from any process (integer) recvtype - data type of receive buffer elements (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES The MPI standard (1.0 and 1.1) says that The jth block of data sent from each proess is received by every pro- cess and placed in the jth block of the buffer recvbuf . This is misleading; a better description is The block of data sent from the jth process is received by every pro- cess and placed in the jth block of the buffer recvbuf . This text was suggested by Rajeev Thakur. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION allgather.c 10/1/2004 MPI_Allgather(3) MPI_Allgatherv MPI_Allgatherv(3) MPI MPI_Allgatherv(3) NAME MPI_Allgatherv - Gathers data from all tasks and deliver it to all SYNOPSIS #include \"mpi.h\" int MPI_Allgatherv ( void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int *recvcounts, int *displs, MPI_Datatype recvtype, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - data type of send buffer elements (handle) recvcounts - integer array (of length group size) containing the number of elements that are received from each process displs - integer array (of length group size). Entry i specifies the displacement (relative to recvbuf ) at which to place the incom- ing data from process i recvtype - data type of receive buffer elements (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES The MPI standard (1.0 and 1.1) says that The jth block of data sent from each proess is received by every pro- cess and placed in the jth block of the buffer recvbuf . This is misleading; a better description is The block of data sent from the jth process is received by every pro- cess and placed in the jth block of the buffer recvbuf . This text was suggested by Rajeev Thakur. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION allgatherv.c 11/14/2001 MPI_Allgatherv(3) MPI_Allreduce MPI_Allreduce(3) MPI MPI_Allreduce(3) NAME MPI_Allreduce - Combines values from all processes and distribute the result back to all processes SYNOPSIS #include \"mpi.h\" int MPI_Allreduce ( void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) count - number of elements in send buffer (integer) datatype - data type of elements of send buffer (handle) op - operation (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - starting address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_OP - Invalid operation. MPI operations (objects of type MPI_Op ) must either be one of the predefined operations (e.g., MPI_SUM ) or created with MPI_Op_create . MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION allreduce.c 11/14/2001 MPI_Allreduce(3) MPI_Alltoall MPI_Alltoall(3) MPI MPI_Alltoall(3) NAME MPI_Alltoall - Sends data from all to all processes SYNOPSIS #include \"mpi.h\" int MPI_Alltoall( void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcnt, MPI_Datatype recvtype, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements to send to each process (integer) sendtype - data type of send buffer elements (handle) recvcount - number of elements received from any process (integer) recvtype - data type of receive buffer elements (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION alltoall.c 11/14/2001 MPI_Alltoall(3) MPI_Alltoallv MPI_Alltoallv(3) MPI MPI_Alltoallv(3) NAME MPI_Alltoallv - Sends data from all to all processes, with a displace- ment SYNOPSIS #include \"mpi.h\" int MPI_Alltoallv ( void *sendbuf, int *sendcnts, int *sdispls, MPI_Datatype sendtype, void *recvbuf, int *recvcnts, int *rdispls, MPI_Datatype recvtype, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcounts - integer array equal to the group size specifying the number of elements to send to each processor sdispls - integer array (of length group size). Entry j specifies the displacement (relative to sendbuf from which to take the outgo- ing data destined for process j sendtype - data type of send buffer elements (handle) recvcounts - integer array equal to the group size specifying the maximum number of elements that can be received from each processor rdispls - integer array (of length group size). Entry i specifies the displacement (relative to recvbuf at which to place the incom- ing data from process i recvtype - data type of receive buffer elements (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION alltoallv.c 11/14/2001 MPI_Alltoallv(3) MPI_Attr_delete MPI_Attr_delete(3) MPI MPI_Attr_delete(3) NAME MPI_Attr_delete - Deletes attribute value associated with a key SYNOPSIS #include \"mpi.h\" int MPI_Attr_delete ( MPI_Comm comm, int keyval ) INPUT PARAMETERS comm - communicator to which attribute is attached (handle) keyval - The key value of the deleted attribute (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - This error class is associated with an error code that indi- cates that an attempt was made to free one of the permanent keys. LOCATION attr_delval.c 11/14/2001 MPI_Attr_delete(3) MPI_Attr_get MPI_Attr_get(3) MPI MPI_Attr_get(3) NAME MPI_Attr_get - Retrieves attribute value by key SYNOPSIS #include \"mpi.h\" int MPI_Attr_get ( MPI_Comm comm, int keyval, void *attr_value, int *flag ) INPUT PARAMETERS comm - communicator to which attribute is attached (handle) keyval - key value (integer) OUTPUT PARAMETERS attr_value - attribute value, unless flag = false flag - true if an attribute value was extracted; false if no attribute is associated with the key NOTES Attributes must be extracted from the same language as they were inserted in with MPI_ATTR_PUT . The notes for C and Fortran below explain why. NOTES FOR C Even though the attr_value arguement is declared as void * , it is really the address of a void pointer. See the rationale in the stan- dard for more details. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. The attr_value in Fortran is a pointer to a Fortran integer, not a pointer to a void * . ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_OTHER - Other error; the error code associated with this error indi- cates an attempt to use an invalue keyval. LOCATION attr_getval.c 11/14/2001 MPI_Attr_get(3) MPI_Attr_put MPI_Attr_put(3) MPI MPI_Attr_put(3) NAME MPI_Attr_put - Stores attribute value associated with a key SYNOPSIS #include \"mpi.h\" int MPI_Attr_put ( MPI_Comm comm, int keyval, void *attr_value ) INPUT PARAMETERS comm - communicator to which attribute will be attached (handle) keyval - key value, as returned by MPI_KEYVAL_CREATE (integer) attribute_val - attribute value NOTES Values of the permanent attributes MPI_TAG_UB , MPI_HOST , MPI_IO , and MPI_WTIME_IS_GLOBAL may not be changed. The type of the attribute value depends on whether C or Fortran is being used. In C, an attribute value is a pointer ( void * ); in For- tran, it is a single integer ( not a pointer, since Fortran has no pointers and there are systems for which a pointer does not fit in an integer (e.g., any > 32 bit address system that uses 64 bits for For- tran DOUBLE PRECISION ). If an attribute is already present, the delete function (specified when the corresponding keyval was created) will be called. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_OTHER - Other error; the error code associated with this error indi- cates an attempt to use an invalue keyval. MPI_ERR_ARG - This error class is associated with an error code that indi- cates that an attempt was made to free one of the permanent keys. SEE ALSO MPI_Attr_get, MPI_Keyval_create, MPI_Attr_delete LOCATION attr_putval.c 11/14/2001 MPI_Attr_put(3) MPI_Barrier MPI_Barrier(3) MPI MPI_Barrier(3) NAME MPI_Barrier - Blocks until all process have reached this routine. SYNOPSIS #include \"mpi.h\" int MPI_Barrier ( MPI_Comm comm ) INPUT PARAMETERS comm - communicator (handle) NOTES Blocks the caller until all group members have called it; the call returns at any process only after all group members have entered the call. ALGORITHM If the underlying device cannot do better, a tree-like or combine algo- rithm is used to broadcast a message wto all members of the communica- tor. We can modifiy this to use \"blocks\" at a later time (see MPI_Bcast ). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION barrier.c 11/14/2001 MPI_Barrier(3) MPI_Bcast MPI_Bcast(3) MPI MPI_Bcast(3) NAME MPI_Bcast - Broadcasts a message from the process with rank \"root\" to all other processes of the group. SYNOPSIS #include \"mpi.h\" int MPI_Bcast ( void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm ) INPUT/OUTPUT PARAMETERS buffer - starting address of buffer (choice) count - number of entries in buffer (integer) datatype - data type of buffer (handle) root - rank of broadcast root (integer) comm - communicator (handle) ALGORITHM If the underlying device does not take responsibility, this function uses a tree-like algorithm to broadcast the message to blocks of pro- cesses. A linear algorithm is then used to broadcast the message from the first process in a block to all other processes. MPIR_BCAST_BLOCK_SIZE determines the size of blocks. If this is set to 1, then this function is equivalent to using a pure tree algorithm. If it is set to the size of the group or greater, it is a pure linear algorithm. The value should be adjusted to determine the most effi- cient value on different machines. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_ROOT - Invalid root. The root must be specified as a rank in the communicator. Ranks must be between zero and the size of the communicator minus one. LOCATION bcast.c 11/14/2001 MPI_Bcast(3) MPI_Bsend_init MPI_Bsend_init(3) MPI MPI_Bsend_init(3) NAME MPI_Bsend_init - Builds a handle for a buffered send SYNOPSIS #include \"mpi.h\" int MPI_Bsend_init( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements sent (integer) datatype - type of each element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . LOCATION bsend_init.c 12/13/2001 MPI_Bsend_init(3) MPI_Bsend MPI_Bsend(3) MPI MPI_Bsend(3) NAME MPI_Bsend - Basic send with user-specified buffering SYNOPSIS #include \"mpi.h\" int MPI_Bsend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (nonnegative integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) NOTES This send is provided as a convenience function; it allows the user to send messages without worring about where they are buffered (because the user must have provided buffer space with MPI_Buffer_attach ). In deciding how much buffer space to allocate, remember that the buffer space is not available for reuse by subsequent MPI_Bsend s unless you are certain that the message has been received (not just that it should have been received). For example, this code does not allocate enough buffer space MPI_Buffer_attach( b, n*sizeof(double) + MPI_BSEND_OVERHEAD ); for (i=0; i<m; i++) { MPI_Bsend( buf, n, MPI_DOUBLE, ... ); } because only enough buffer space is provided for a single send, and the loop may start a second MPI_Bsend before the first is done making use of the buffer. In C, you can force the messages to be delivered by MPI_Buffer_detach( &b, &n ); MPI_Buffer_attach( b, n ); (The MPI_Buffer_detach will not complete until all buffered messages are delivered.) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . SEE ALSO MPI_Buffer_attach, MPI_Ibsend, MPI_Bsend_init LOCATION bsend.c 11/14/2001 MPI_Bsend(3) MPI_Buffer_attach MPI_Buffer_attach(3) MPI MPI_Buffer_attach(3) NAME MPI_Buffer_attach - Attaches a user-defined buffer for sending SYNOPSIS #include \"mpi.h\" int MPI_Buffer_attach( void *buffer, int size ) INPUT PARAMETERS buffer - initial buffer address (choice) size - buffer size, in bytes (integer) NOTES The size given should be the sum of the sizes of all outstanding Bsends that you intend to have, plus a few hundred bytes for each Bsend that you do. For the purposes of calculating size, you should use MPI_Pack_size . In other words, in the code MPI_Buffer_attach( buffer, size ); MPI_Bsend( ..., count=20, datatype=type1, ... ); . . . MPI_Bsend( ..., count=40, datatype=type2, ... ); the value of size in the MPI_Buffer_attach call should be greater than the value computed by MPI_Pack_size( 20, type1, comm, &s1 ); MPI_Pack_size( 40, type2, comm, &s2 ); size = s1 + s2 + 2 * MPI_BSEND_OVERHEAD; The MPI_BSEND_OVERHEAD gives the maximum amount of space that may be used in the buffer for use by the BSEND routines in using the buffer. This value is in mpi.h (for C) and mpif.h (for Fortran). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_INTERN - An internal error has been detected. This is fatal. Please send a bug report to mpi-bugs@mcs.anl.gov . SEE ALSO MPI_Buffer_detach, MPI_Bsend LOCATION bufattach.c 11/14/2001 MPI_Buffer_attach(3) MPI_Buffer_detach MPI_Buffer_detach(3) MPI MPI_Buffer_detach(3) NAME MPI_Buffer_detach - Removes an existing buffer (for use in MPI_Bsend etc) SYNOPSIS #include \"mpi.h\" int MPI_Buffer_detach( void *bufferptr, int *size ) OUTPUT PARAMETERS buffer - initial buffer address (choice) size - buffer size, in bytes (integer) NOTES The reason that MPI_Buffer_detach returns the address and size of the buffer being detached is to allow nested libraries to replace and restore the buffer. For example, consider int size, mysize, idummy; void *ptr, *myptr, *dummy; MPI_Buffer_detach( &ptr, &size ); MPI_Buffer_attach( myptr, mysize ); . . . . . . library code ... . . . MPI_Buffer_detach( &dummy, &idummy ); MPI_Buffer_attach( ptr, size ); This is much like the action of the Unix signal routine and has the same strengths (it is simple) and weaknesses (it only works for nested usages). Note that for this approach to work, MPI_Buffer_detach must return MPI_SUCCESS even when there is no buffer to detach. In that case, it returns a size of zero. The MPI 1.1 standard for MPI_BUFFER_DETACH contains the text The statements made in this section describe the behavior of MPI for buffered-mode sends. When no buffer is currently associated, MPI behaves as if a zero-sized buffer is associated with the process. This could be read as applying only to the various Bsend routines. This implementation takes the position that this applies to MPI_BUFFER_DETACH as well. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. The Fortran binding for this routine is different. Because Fortran does not have pointers, it is impossible to provide a way to use the output of this routine to exchange buffers. In this case, only the size field is set. NOTES FOR C Even though the bufferptr argument is declared as void * , it is really the address of a void pointer. See the rationale in the standard for more details. LOCATION buffree.c 11/14/2001 MPI_Buffer_detach(3) MPI_Cancel MPI_Cancel(3) MPI MPI_Cancel(3) NAME MPI_Cancel - Cancels a communication request SYNOPSIS #include \"mpi.h\" int MPI_Cancel( MPI_Request *request ) INPUT PARAMETER request - communication request (handle) NOTE Cancel has only been implemented for receive requests; it is a no-op for send requests. The primary expected use of MPI_Cancel is in multi- buffering schemes, where speculative MPI_Irecvs are made. When the computation completes, some of these receive requests may remain; using MPI_Cancel allows the user to cancel these unsatisfied requests. Cancelling a send operation is much more difficult, in large part because the send will usually be at least partially complete (the information on the tag, size, and source are usually sent immediately to the destination). As of version 1.2.0, MPICH supports cancelling of sends. Users are advised that cancelling a send, while a local opera- tion (as defined by the MPI standard), is likely to be expensive (usu- ally generating one or more internal messages). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NULL HANDLES The MPI 1.1 specification, in the section on opaque objects, explicitly DISALLOWS FREEING A NULL COMMUNICATOR. THE TEXT FROM THE STANDARD IS A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. Such exception is allowed for handles to request objects in Wait and Test calls (sections Communication Completion and Multiple Completions ). Otherwise, a null handle can only be passed to a function that allocates a new object and returns a reference to it in the handle. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cancel.c 11/14/2001 MPI_Cancel(3) MPI_Cart_coords MPI_Cart_coords(3) MPI MPI_Cart_coords(3) NAME MPI_Cart_coords - Determines process coords in cartesian topology given rank in group SYNOPSIS #include \"mpi.h\" int MPI_Cart_coords ( MPI_Comm comm, int rank, int maxdims, int *coords ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) rank - rank of a process within group of comm (integer) maxdims - length of vector coords in the calling program (integer) OUTPUT PARAMETER coords - integer array (of size ndims ) containing the Cartesian coor- dinates of specified process (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_DIMS - Illegal dimension argument. A dimension argument is null or its length is less than or equal to zero. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_coords.c 3/28/2002 MPI_Cart_coords(3) MPI_Cart_create MPI_Cart_create(3) MPI MPI_Cart_create(3) NAME MPI_Cart_create - Makes a new communicator to which topology informa- tion has been attached SYNOPSIS #include \"mpi.h\" int MPI_Cart_create ( MPI_Comm comm_old, int ndims, int *dims, int *periods, int reorder, MPI_Comm *comm_cart ) INPUT PARAMETERS comm_old - input communicator (handle) ndims - number of dimensions of cartesian grid (integer) dims - integer array of size ndims specifying the number of processes in each dimension periods - logical array of size ndims specifying whether the grid is periodic (true) or not (false) in each dimension reorder - ranking may be reordered (true) or not (false) (logical) OUTPUT PARAMETER comm_cart - communicator with new cartesian topology (handle) ALGORITHM We ignore reorder info currently. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_DIMS - Illegal dimension argument. A dimension argument is null or its length is less than or equal to zero. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_create.c 11/14/2001 MPI_Cart_create(3) MPI_Cartdim_get MPI_Cartdim_get(3) MPI MPI_Cartdim_get(3) NAME MPI_Cartdim_get - Retrieves Cartesian topology information associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Cartdim_get ( MPI_Comm comm, int *ndims ) INPUT PARAMETER comm - communicator with cartesian structure (handle) OUTPUT PARAMETER ndims - number of dimensions of the cartesian structure (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cartdim_get.c 11/14/2001 MPI_Cartdim_get(3) MPI_Cart_get MPI_Cart_get(3) MPI MPI_Cart_get(3) NAME MPI_Cart_get - Retrieves Cartesian topology information associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Cart_get ( MPI_Comm comm, int maxdims, int *dims, int *periods, int *coords ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) maxdims - length of vectors dims , periods , and coords in the calling program (integer) OUTPUT PARAMETERS dims - number of processes for each cartesian dimension (array of integer) periods - periodicity (true/false) for each cartesian dimension (array of logical) coords - coordinates of calling process in cartesian structure (array of integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_get.c 11/14/2001 MPI_Cart_get(3) MPI_Cart_map MPI_Cart_map(3) MPI MPI_Cart_map(3) NAME MPI_Cart_map - Maps process to Cartesian topology information SYNOPSIS #include \"mpi.h\" int MPI_Cart_map ( MPI_Comm comm_old, int ndims, int *dims, int *periods, int *newrank) INPUT PARAMETERS comm - input communicator (handle) ndims - number of dimensions of Cartesian structure (integer) dims - integer array of size ndims specifying the number of processes in each coordinate direction periods - logical array of size ndims specifying the periodicity speci- fication in each coordinate direction OUTPUT PARAMETER newrank - reordered rank of the calling process; MPI_UNDEFINED if call- ing process does not belong to grid (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_DIMS - Illegal dimension argument. A dimension argument is null or its length is less than or equal to zero. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_map.c 3/28/2002 MPI_Cart_map(3) MPI_Cart_rank MPI_Cart_rank(3) MPI MPI_Cart_rank(3) NAME MPI_Cart_rank - Determines process rank in communicator given Carte- sian location SYNOPSIS #include \"mpi.h\" int MPI_Cart_rank ( MPI_Comm comm, int *coords, int *rank ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) coords - integer array (of size ndims ) specifying the cartesian coor- dinates of a process OUTPUT PARAMETER rank - rank of specified process (integer) NOTES Out-of-range coordinates are erroneous for non-periodic dimensions. Versions of MPICH before 1.2.2 returned MPI_PROC_NULL for the rank in this case. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_rank.c 11/14/2001 MPI_Cart_rank(3) MPI_Cart_shift MPI_Cart_shift(3) MPI MPI_Cart_shift(3) NAME MPI_Cart_shift - Returns the shifted source and destination ranks, given a shift direction and amount SYNOPSIS #include \"mpi.h\" int MPI_Cart_shift ( MPI_Comm comm, int direction, int displ, int *source, int *dest ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) direction - coordinate dimension of shift (integer) disp - displacement (> 0: upwards shift, < 0: downwards shift) (inte- ger) OUTPUT PARAMETERS rank_source - rank of source process (integer) rank_dest - rank of destination process (integer) NOTES The direction argument is in the range [0,n-1] for an n-dimensional Cartesian mesh. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_shift.c 11/14/2001 MPI_Cart_shift(3) MPI_Cart_sub MPI_Cart_sub(3) MPI MPI_Cart_sub(3) NAME MPI_Cart_sub - Partitions a communicator into subgroups which form lower-dimensional cartesian subgrids SYNOPSIS #include \"mpi.h\" int MPI_Cart_sub ( MPI_Comm comm, int *remain_dims, MPI_Comm *comm_new ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) remain_dims - the i th entry of remain_dims specifies whether the i th dimension is kept in the subgrid (true) or is dropped (false) (logical vector) OUTPUT PARAMETER newcomm - communicator containing the subgrid that includes the calling process (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_sub.c 11/14/2001 MPI_Cart_sub(3) MPI_Comm_compare MPI_Comm_compare(3) MPI MPI_Comm_compare(3) NAME MPI_Comm_compare - Compares two communicators SYNOPSIS #include \"mpi.h\" int MPI_Comm_compare ( MPI_Comm comm1, MPI_Comm comm2, int *result) INPUT PARAMETERS comm1 - comm1 (handle) comm2 - comm2 (handle) OUTPUT PARAMETER result - integer which is MPI_IDENT if the contexts and groups are the same, MPI_CONGRUENT if different contexts but identical groups, MPI_SIMILAR if different contexts but similar groups, and MPI_UNEQUAL otherwise USING 'MPI_COMM_NULL' WITH 'MPI_COMM_COMPARE' It is an error to use MPI_COMM_NULL as one of the arguments to MPI_Comm_compare . The relevant sections of the MPI standard are . (2.4.1 Opaque Objects) A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. . (5.4.1. Communicator Accessors) <no text in MPI_COMM_COMPARE allow- ing a null handle> NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION commcompare.c 11/14/2001 MPI_Comm_compare(3) MPI_Comm_create MPI_Comm_create(3) MPI MPI_Comm_create(3) NAME MPI_Comm_create - Creates a new communicator SYNOPSIS #include \"mpi.h\" int MPI_Comm_create ( MPI_Comm comm, MPI_Group group, MPI_Comm *comm_out ) INPUT PARAMETERS comm - communicator (handle) group - group, which is a subset of the group of comm (handle) OUTPUT PARAMETER comm_out - new communicator (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Comm_free LOCATION comm_create.c 11/14/2001 MPI_Comm_create(3) MPI_Comm_dup MPI_Comm_dup(3) MPI MPI_Comm_dup(3) NAME MPI_Comm_dup - Duplicates an existing communicator with all its cached information SYNOPSIS #include \"mpi.h\" int MPI_Comm_dup ( MPI_Comm comm, MPI_Comm *comm_out ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER newcomm - A new communicator over the same group as comm but with a new context. See notes. (handle) NOTES This routine is used to create a new communicator that has a new commu- nication context but contains the same group of processes as the input communicator. Since all MPI communication is performed within a commu- nicator (specifies as the group of processes plus the context), this routine provides an effective way to create a private communicator for use by a software module or library. In particular, no library routine should use MPI_COMM_WORLD as the communicator; instead, a duplicate of a user-specified communicator should always be used. For more informa- tion, see Using MPI, 2nd edition. Because this routine essentially produces a copy of a communicator, it also copies any attributes that have been defined on the input communi- cator, using the attribute copy function specified by the copy_function argument to MPI_Keyval_create . This is particularly useful for (a) attributes that describe some property of the group associated with the communicator, such as its interconnection topology and (b) communica- tors that are given back to the user; the attibutes in this case can track subsequent MPI_Comm_dup operations on this communicator. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Comm_free, MPI_Keyval_create, MPI_Attr_set, MPI_Attr_delete LOCATION comm_dup.c 11/14/2001 MPI_Comm_dup(3) MPI_Comm_free MPI_Comm_free(3) MPI MPI_Comm_free(3) NAME MPI_Comm_free - Marks the communicator object for deallocation SYNOPSIS #include \"mpi.h\" int MPI_Comm_free ( MPI_Comm *commp ) INPUT PARAMETER comm - communicator to be destroyed (handle) NULL HANDLES The MPI 1.1 specification, in the section on opaque objects, explicitly DISALLOWS FREEING A NULL COMMUNICATOR. THE TEXT FROM THE STANDARD IS A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. Such exception is allowed for handles to request objects in Wait and Test calls (sections Communication Completion and Multiple Completions ). Otherwise, a null handle can only be passed to a function that allocates a new object and returns a reference to it in the handle. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION comm_free.c 10/31/2002 MPI_Comm_free(3) MPI_Comm_group MPI_Comm_group(3) MPI MPI_Comm_group(3) NAME MPI_Comm_group - Accesses the group associated with given communicator SYNOPSIS #include \"mpi.h\" int MPI_Comm_group ( MPI_Comm comm, MPI_Group *group ) INPUT PARAMETER comm - Communicator OUTPUT PARAMETER group - Group in communicator USING 'MPI_COMM_NULL' WITH 'MPI_COMM_GROUP' It is an error to use MPI_COMM_NULL as one of the arguments to MPI_Comm_group . The relevant sections of the MPI standard are . (2.4.1 Opaque Objects) A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. . (5.3.2. Group Constructors) <no text in MPI_COMM_GROUP allowing a null handle> Previous versions of MPICH allow MPI_COMM_NULL in this function. In the interests of promoting portability of applications, we have changed the behavior of MPI_Comm_group to detect this violation of the MPI standard. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION comm_group.c 11/14/2001 MPI_Comm_group(3) MPI_Comm_rank MPI_Comm_rank(3) MPI MPI_Comm_rank(3) NAME MPI_Comm_rank - Determines the rank of the calling process in the com- municator SYNOPSIS #include \"mpi.h\" int MPI_Comm_rank ( MPI_Comm comm, int *rank ) INPUT PARAMETERS comm - communicator (handle) OUTPUT PARAMETER rank - rank of the calling process in group of comm (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION comm_rank.c 11/14/2001 MPI_Comm_rank(3) MPI_Comm_remote_group MPI_Comm_remote_group(3) MPI MPI_Comm_remote_group(3) NAME MPI_Comm_remote_group - Accesses the remote group associated with the given inter-communicator SYNOPSIS #include \"mpi.h\" int MPI_Comm_remote_group ( MPI_Comm comm, MPI_Group *group ) INPUT PARAMETER comm - Communicator (must be intercommunicator) OUTPUT PARAMETER group - remote group of communicator NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION comm_rgroup.c 11/14/2001 MPI_Comm_remote_group(3) MPI_Comm_remote_size MPI_Comm_remote_size(3) MPI MPI_Comm_remote_size(3) NAME MPI_Comm_remote_size - Determines the size of the remote group asso- ciated with an inter-communictor SYNOPSIS #include \"mpi.h\" int MPI_Comm_remote_size ( MPI_Comm comm, int *size ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER size - number of processes in the group of comm (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION comm_rsize.c 11/14/2001 MPI_Comm_remote_size(3) MPI_Comm_size MPI_Comm_size(3) MPI MPI_Comm_size(3) NAME MPI_Comm_size - Determines the size of the group associated with a communictor SYNOPSIS #include \"mpi.h\" int MPI_Comm_size ( MPI_Comm comm, int *size ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER size - number of processes in the group of comm (integer) NOTES MPI_COMM_NULL is not considered a valid argument to this function. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION comm_size.c 11/14/2001 MPI_Comm_size(3) MPI_Comm_split MPI_Comm_split(3) MPI MPI_Comm_split(3) NAME MPI_Comm_split - Creates new communicators based on colors and keys SYNOPSIS #include \"mpi.h\" int MPI_Comm_split ( MPI_Comm comm, int color, int key, MPI_Comm *comm_out ) INPUT PARAMETERS comm - communicator (handle) color - control of subset assignment (nonnegative integer). Processes with the same color are in the same new communicator key - control of rank assigment (integer) OUTPUT PARAMETER newcomm - new communicator (handle) NOTES The color must be non-negative or MPI_UNDEFINED . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ALGORITHM The current algorithm used has quite a few (read: a lot of) inefficien- cies that can be removed. Here is what we do for now 1) A table is built of colors, and keys (has a next field also). 2) The tables of all processes are merged using MPI_Allreduce . 3) Two contexts are allocated for all the comms to be created. These same two contexts can be used for all created communicators since the communicators will not overlap. 4) If the local process has a color of MPI_UNDEFINED , it can return a NULL comm. 5) The table entries that match the local process color are sorted by key/rank. 6) A group is created from the sorted list and a communicator is created with this group and the previously allocated contexts. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Comm_free LOCATION comm_split.c 8/29/2002 MPI_Comm_split(3) MPI_Comm_test_inter MPI_Comm_test_inter(3) MPI MPI_Comm_test_inter(3) NAME MPI_Comm_test_inter - Tests to see if a comm is an inter-communicator SYNOPSIS #include \"mpi.h\" int MPI_Comm_test_inter ( MPI_Comm comm, int *flag ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER flag - (logical) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION comm_testic.c 11/14/2001 MPI_Comm_test_inter(3) MPI_Dims_create MPI_Dims_create(3) MPI MPI_Dims_create(3) NAME MPI_Dims_create - Creates a division of processors in a cartesian grid SYNOPSIS #include \"mpi.h\" int MPI_Dims_create( int nnodes, int ndims, int *dims) INPUT PARAMETERS nnodes - number of nodes in a grid (integer) ndims - number of cartesian dimensions (integer) IN/OUT PARAMETER dims - integer array of size ndims specifying the number of nodes in each dimension NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION dims_create.c 4/24/2002 MPI_Dims_create(3) MPI_Errhandler_create MPI_Errhandler_create(3) MPI MPI_Errhandler_create(3) NAME MPI_Errhandler_create - Creates an MPI-style errorhandler SYNOPSIS #include \"mpi.h\" int MPI_Errhandler_create( MPI_Handler_function *function, MPI_Errhandler *errhandler) INPUT PARAMETER function - user defined error handling procedure OUTPUT PARAMETER errhandler - MPI error handler (handle) NOTES The MPI Standard states that an implementation may make the output value (errhandler) simply the address of the function. However, the action of MPI_Errhandler_free makes this impossible, since it is required to set the value of the argument to MPI_ERRHANDLER_NULL . In addition, the actual error handler must remain until all communicators that use it are freed. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION errcreate.c 11/14/2001 MPI_Errhandler_create(3) MPI_Errhandler_free MPI_Errhandler_free(3) MPI MPI_Errhandler_free(3) NAME MPI_Errhandler_free - Frees an MPI-style errorhandler SYNOPSIS #include \"mpi.h\" int MPI_Errhandler_free( MPI_Errhandler *errhandler ) INPUT PARAMETER errhandler - MPI error handler (handle). Set to MPI_ERRHANDLER_NULL on exit. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION errfree.c 11/14/2001 MPI_Errhandler_free(3) MPI_Errhandler_get MPI_Errhandler_get(3) MPI MPI_Errhandler_get(3) NAME MPI_Errhandler_get - Gets the error handler for a communicator SYNOPSIS #include \"mpi.h\" int MPI_Errhandler_get( MPI_Comm comm, MPI_Errhandler *errhandler ) INPUT PARAMETER comm - communicator to get the error handler from (handle) OUTPUT PARAMETER errhandler - MPI error handler currently associated with communicator (han- dle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTE ON IMPLEMENTATION The MPI Standard was unclear on whether this routine required the user to call MPI_Errhandler_free once for each call made to this routine in order to free the error handler. After some debate, the MPI Forum added an explicit statement that users are required to call MPI_Errhan- dler_free when the return value from this routine is no longer needed. This behavior is similar to the other MPI routines for getting objects; for example, MPI_Comm_group requires that the user call MPI_Group_free when the group returned by MPI_Comm_group is no longer needed. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION errget.c 11/14/2001 MPI_Errhandler_get(3) MPI_Errhandler_set MPI_Errhandler_set(3) MPI MPI_Errhandler_set(3) NAME MPI_Errhandler_set - Sets the error handler for a communicator SYNOPSIS #include \"mpi.h\" int MPI_Errhandler_set( MPI_Comm comm, MPI_Errhandler errhandler ) INPUT PARAMETERS comm - communicator to set the error handler for (handle) errhandler - new MPI error handler for communicator (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION errset.c 11/14/2001 MPI_Errhandler_set(3) MPI_Error_class MPI_Error_class(3) MPI MPI_Error_class(3) NAME MPI_Error_class - Converts an error code into an error class SYNOPSIS #include \"mpi.h\" int MPI_Error_class( int errorcode, int *errorclass) INPUT PARAMETER errorcode - Error code returned by an MPI routine OUTPUT PARAMETER errorclass - Error class associated with errorcode NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION errclass.c 11/14/2001 MPI_Error_class(3) MPI_Error_string MPI_Error_string(3) MPI MPI_Error_string(3) NAME MPI_Error_string - Return a string for a given error code SYNOPSIS #include \"mpi.h\" int MPI_Error_string( int errorcode, char *string, int *resultlen ) INPUT PARAMETERS errorcode - Error code returned by an MPI routine or an MPI error class OUTPUT PARAMETER string - Text that corresponds to the errorcode resultlen - Length of string Notes: Error codes are the values return by MPI routines (in C) or in the ierr argument (in Fortran). These can be converted into error classes with the routine MPI_Error_class . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION errorstring.c 11/14/2001 MPI_Error_string(3) MPI_Finalize MPI_Finalize(3) MPI MPI_Finalize(3) NAME MPI_Finalize - Terminates MPI execution environment SYNOPSIS #include \"mpi.h\" int MPI_Finalize() NOTES All processes must call this routine before exiting. The number of processes running after this routine is called is undefined; it is best not to perform much more than a return rc after calling MPI_Finalize . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION finalize.c 4/9/2002 MPI_Finalize(3) MPI_Gather MPI_Gather(3) MPI MPI_Gather(3) NAME MPI_Gather - Gathers together values from a group of processes SYNOPSIS #include \"mpi.h\" int MPI_Gather ( void *sendbuf, int sendcnt, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - data type of send buffer elements (handle) recvcount - number of elements for any single receive (integer, signifi- cant only at root) recvtype - data type of recv buffer elements (significant only at root) (handle) root - rank of receiving process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice, significant only at root ) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION gather.c 11/14/2001 MPI_Gather(3) MPI_Gatherv MPI_Gatherv(3) MPI MPI_Gatherv(3) NAME MPI_Gatherv - Gathers into specified locations from all processes in a group SYNOPSIS #include \"mpi.h\" int MPI_Gatherv ( void *sendbuf, int sendcnt, MPI_Datatype sendtype, void *recvbuf, int *recvcnts, int *displs, MPI_Datatype recvtype, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - data type of send buffer elements (handle) recvcounts - integer array (of length group size) containing the number of elements that are received from each process (significant only at root ) displs - integer array (of length group size). Entry i specifies the displacement relative to recvbuf at which to place the incoming data from process i (significant only at root) recvtype - data type of recv buffer elements (significant only at root ) (handle) root - rank of receiving process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice, significant only at root ) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION gatherv.c 2/19/2002 MPI_Gatherv(3) MPI_Get_count MPI_Get_count(3) MPI MPI_Get_count(3) NAME MPI_Get_count - Gets the number of \"top level\" elements SYNOPSIS #include \"mpi.h\" int MPI_Get_count( MPI_Status *status, MPI_Datatype datatype, int *count ) INPUT PARAMETERS status - return status of receive operation (Status) datatype - datatype of each receive buffer element (handle) OUTPUT PARAMETER count - number of received elements (integer) Notes: If the size of the datatype is zero, this routine will return a count of zero. If the amount of data in status is not an exact multiple of the size of datatype (so that count would not be integral), a count of MPI_UNDEFINED is returned instead. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION getcount.c 11/14/2001 MPI_Get_count(3) MPI_Get_elements MPI_Get_elements(3) MPI MPI_Get_elements(3) NAME MPI_Get_elements - Returns the number of basic elements in a datatype SYNOPSIS #include \"mpi.h\" int MPI_Get_elements ( MPI_Status *status, MPI_Datatype datatype, int *elements ) INPUT PARAMETERS status - return status of receive operation (Status) datatype - datatype used by receive operation (handle) OUTPUT PARAMETER count - number of received basic elements (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION getelements.c 11/14/2001 MPI_Get_elements(3) MPI_Get_processor_name MPI_Get_processor_name(3) MPI MPI_Get_processor_name(3) NAME MPI_Get_processor_name - Gets the name of the processor SYNOPSIS #include \"mpi.h\" int MPI_Get_processor_name( char *name, int *resultlen) OUTPUT PARAMETERS name - A unique specifier for the actual (as opposed to virtual) node. This must be an array of size at least MPI_MAX_PROCES- SOR_NAME . resultlen - Length (in characters) of the name NOTES The name returned should identify a particular piece of hardware; the exact format is implementation defined. This name may or may not be the same as might be returned by gethostname , uname , or sysinfo . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION getpname.c 11/14/2001 MPI_Get_processor_name(3) MPI_Get_version MPI_Get_version(3) MPI MPI_Get_version(3) NAME MPI_Get_version - Gets the version of MPI SYNOPSIS #include \"mpi.h\" int MPI_Get_version( int *version, int *subversion ) OUTPUT PARAMETERS version - Major version of MPI (1 or 2) subversion - Minor version of MPI. NOTES The defined values MPI_VERSION and MPI_SUBVERSION contain the same information. This routine allows you to check that the library matches the version specified in the mpi.h and mpif.h files. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION getversion.c 11/14/2001 MPI_Get_version(3) MPI_Graph_create MPI_Graph_create(3) MPI MPI_Graph_create(3) NAME MPI_Graph_create - Makes a new communicator to which topology informa- tion has been attached SYNOPSIS #include \"mpi.h\" int MPI_Graph_create ( MPI_Comm comm_old, int nnodes, int *index, int *edges, int reorder, MPI_Comm *comm_graph ) INPUT PARAMETERS comm_old - input communicator without topology (handle) nnodes - number of nodes in graph (integer) index - array of integers describing node degrees (see below) edges - array of integers describing graph edges (see below) reorder - ranking may be reordered (true) or not (false) (logical) OUTPUT PARAMETER comm_graph - communicator with graph topology added (handle) ALGORITHM We ignore the reorder info currently. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION graphcreate.c 1/4/2002 MPI_Graph_create(3) MPI_Graphdims_get MPI_Graphdims_get(3) MPI MPI_Graphdims_get(3) NAME MPI_Graphdims_get - Retrieves graph topology information associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Graphdims_get ( MPI_Comm comm, int *nnodes, int *nedges ) INPUT PARAMETERS comm - communicator for group with graph structure (handle) OUTPUT PARAMETER nnodes - number of nodes in graph (integer) nedges - number of edges in graph (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION graphdimsget.c 11/14/2001 MPI_Graphdims_get(3) MPI_Graph_get MPI_Graph_get(3) MPI MPI_Graph_get(3) NAME MPI_Graph_get - Retrieves graph topology information associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Graph_get ( MPI_Comm comm, int maxindex, int maxedges, int *index, int *edges ) INPUT PARAMETERS comm - communicator with graph structure (handle) maxindex - length of vector index in the calling program (integer) maxedges - length of vector edges in the calling program (integer) OUTPUT PARAMETER index - array of integers containing the graph structure (for details see the definition of MPI_GRAPH_CREATE ) edges - array of integers containing the graph structure NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION graph_get.c 1/4/2002 MPI_Graph_get(3) MPI_Graph_map MPI_Graph_map(3) MPI MPI_Graph_map(3) NAME MPI_Graph_map - Maps process to graph topology information SYNOPSIS #include \"mpi.h\" int MPI_Graph_map ( MPI_Comm comm_old, int nnodes, int *index, int *edges, int *newrank ) INPUT PARAMETERS comm - input communicator (handle) nnodes - number of graph nodes (integer) index - integer array specifying the graph structure, see MPI_GRAPH_CREATE edges - integer array specifying the graph structure OUTPUT PARAMETER newrank - reordered rank of the calling process; MPI_UNDEFINED if the calling process does not belong to graph (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION graph_map.c 1/4/2002 MPI_Graph_map(3) MPI_Graph_neighbors_count MPI_Graph_neighbors_count(3) MPI MPI_Graph_neighbors_count(3) NAME MPI_Graph_neighbors_count - Returns the number of neighbors of a node associated with a graph topology SYNOPSIS #include \"mpi.h\" int MPI_Graph_neighbors_count ( MPI_Comm comm, int rank, int *nneighbors ) INPUT PARAMETERS comm - communicator with graph topology (handle) rank - rank of process in group of comm (integer) OUTPUT PARAMETER nneighbors - number of neighbors of specified process (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION graphnbrcnt.c 11/14/2001 MPI_Graph_neighbors_count(3) MPI_Graph_neighbors MPI_Graph_neighbors(3) MPI MPI_Graph_neighbors(3) NAME MPI_Graph_neighbors - Returns the neighbors of a node associated with a graph topology SYNOPSIS #include \"mpi.h\" int MPI_Graph_neighbors ( MPI_Comm comm, int rank, int maxneighbors, int *neighbors ) INPUT PARAMETERS comm - communicator with graph topology (handle) rank - rank of process in group of comm (integer) maxneighbors - size of array neighbors (integer) OUTPUT PARAMETERS neighbors - ranks of processes that are neighbors to specified process (array of integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION graph_nbr.c 11/14/2001 MPI_Graph_neighbors(3) MPI_Group_compare MPI_Group_compare(3) MPI MPI_Group_compare(3) NAME MPI_Group_compare - Compares two groups SYNOPSIS #include \"mpi.h\" int MPI_Group_compare ( MPI_Group group1, MPI_Group group2, int *result ) INPUT PARAMETERS group1 - group1 (handle) group2 - group2 (handle) OUTPUT PARAMETER result - integer which is MPI_IDENT if the order and members of the two groups are the same, MPI_SIMILAR if only the members are the same, and MPI_UNEQUAL otherwise NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION groupcompare.c 11/14/2001 MPI_Group_compare(3) MPI_Group_difference MPI_Group_difference(3) MPI MPI_Group_difference(3) NAME MPI_Group_difference - Makes a group from the difference of two groups SYNOPSIS #include \"mpi.h\" int MPI_Group_difference ( MPI_Group group1, MPI_Group group2, MPI_Group *group_out ) INPUT PARAMETERS group1 - first group (handle) group2 - second group (handle) OUTPUT PARAMETER newgroup - difference group (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Group_free LOCATION group_diff.c 11/14/2001 MPI_Group_difference(3) MPI_Group_excl MPI_Group_excl(3) MPI MPI_Group_excl(3) NAME MPI_Group_excl - Produces a group by reordering an existing group and taking only unlisted members SYNOPSIS #include \"mpi.h\" int MPI_Group_excl ( MPI_Group group, int n, int *ranks, MPI_Group *newgroup ) INPUT PARAMETERS group - group (handle) n - number of elements in array ranks (integer) ranks - array of integer ranks in group not to appear in newgroup OUTPUT PARAMETER newgroup - new group derived from above, preserving the order defined by group (handle) NOTE Currently, each of the ranks to exclude must be a valid rank in the group and all elements must be distinct or the function is erroneous. This restriction is per the draft. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Group_free LOCATION group_excl.c 11/14/2001 MPI_Group_excl(3) MPI_Group_free MPI_Group_free(3) MPI MPI_Group_free(3) NAME MPI_Group_free - Frees a group SYNOPSIS #include \"mpi.h\" int MPI_Group_free ( MPI_Group *group ) Input Parameter group - group (handle) NOTES On output, group is set to MPI_GROUP_NULL . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_ARG - This error class is associated with an error code that indi- cates that an attempt was made to free one of the permanent groups. LOCATION group_free.c 11/14/2001 MPI_Group_free(3) MPI_Group_incl MPI_Group_incl(3) MPI MPI_Group_incl(3) NAME MPI_Group_incl - Produces a group by reordering an existing group and taking only listed members SYNOPSIS #include \"mpi.h\" int MPI_Group_incl ( MPI_Group group, int n, int *ranks, MPI_Group *group_out ) INPUT PARAMETERS group - group (handle) n - number of elements in array ranks (and size of newgroup ) (integer) ranks - ranks of processes in group to appear in newgroup (array of integers) OUTPUT PARAMETER newgroup - new group derived from above, in the order defined by ranks (handle) NOTE This implementation does not currently check to see that the list of ranks to ensure that there are no duplicates. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Group_free LOCATION group_incl.c 11/14/2001 MPI_Group_incl(3) MPI_Group_intersection MPI_Group_intersection(3) MPI MPI_Group_intersection(3) NAME MPI_Group_intersection - Produces a group as the intersection of two existing groups SYNOPSIS #include \"mpi.h\" int MPI_Group_intersection ( MPI_Group group1, MPI_Group group2, MPI_Group *group_out ) INPUT PARAMETERS group1 - first group (handle) group2 - second group (handle) OUTPUT PARAMETER newgroup - intersection group (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Group_free LOCATION group_inter.c 11/14/2001 MPI_Group_intersection(3) MPI_Group_range_excl MPI_Group_range_excl(3) MPI MPI_Group_range_excl(3) NAME MPI_Group_range_excl - Produces a group by excluding ranges of pro- cesses from an existing group SYNOPSIS #include \"mpi.h\" int MPI_Group_range_excl ( MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup ) INPUT PARAMETERS group - group (handle) n - number of elements in array ranks (integer) ranges - a one-dimensional array of integer triplets of the form (first rank, last rank, stride), indicating the ranks in group of pro- cesses to be excluded from the output group newgroup . OUTPUT PARAMETER newgroup - new group derived from above, preserving the order in group (handle) NOTE Currently, each of the ranks to exclude must be a valid rank in the group and all elements must be distinct or the function is erroneous. This restriction is per the draft. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO MPI_Group_free LOCATION group_rexcl.c 11/14/2001 MPI_Group_range_excl(3) MPI_Group_range_incl MPI_Group_range_incl(3) MPI MPI_Group_range_incl(3) NAME MPI_Group_range_incl - Creates a new group from ranges of ranks in an existing group SYNOPSIS #include \"mpi.h\" int MPI_Group_range_incl ( MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup ) INPUT PARAMETERS group - group (handle) n - number of triplets in array ranges (integer) ranges - a one-dimensional array of integer triplets, of the form (first rank, last rank, stride) indicating ranks in group or processes to be included in newgroup OUTPUT PARAMETER newgroup - new group derived from above, in the order defined by ranges (handle) NOTE This implementation does not currently check to see that the list of ranges to include are valid ranks in the group. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Group_free LOCATION group_rincl.c 11/14/2001 MPI_Group_range_incl(3) MPI_Group_rank MPI_Group_rank(3) MPI MPI_Group_rank(3) NAME MPI_Group_rank - Returns the rank of this process in the given group SYNOPSIS #include \"mpi.h\" int MPI_Group_rank ( MPI_Group group, int *rank ) INPUT PARAMETERS group - group (handle) OUTPUT PARAMETER rank - rank of the calling process in group, or MPI_UNDEFINED if the process is not a member (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION group_rank.c 11/14/2001 MPI_Group_rank(3) MPI_Group_size MPI_Group_size(3) MPI MPI_Group_size(3) NAME MPI_Group_size - Returns the size of a group SYNOPSIS #include \"mpi.h\" int MPI_Group_size ( MPI_Group group, int *size ) INPUT PARAMETERS group - group (handle) Output Parameter: size - number of processes in the group (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION group_size.c 11/14/2001 MPI_Group_size(3) MPI_Group_translate_ranks MPI_Group_translate_ranks(3) MPI MPI_Group_translate_ranks(3) NAME MPI_Group_translate_ranks - Translates the ranks of processes in one group to those in another group SYNOPSIS #include \"mpi.h\" int MPI_Group_translate_ranks ( MPI_Group group_a, int n, int *ranks_a, MPI_Group group_b, int *ranks_b ) INPUT PARAMETERS group1 - group1 (handle) n - number of ranks in ranks1 and ranks2 arrays (integer) ranks1 - array of zero or more valid ranks in group1 group2 - group2 (handle) OUTPUT PARAMETER ranks2 - array of corresponding ranks in group2, MPI_UNDEFINED when no correspondence exists. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION group_tranks.c 11/14/2001 MPI_Group_translate_ranks(3) MPI_Group_union MPI_Group_union(3) MPI MPI_Group_union(3) NAME MPI_Group_union - Produces a group by combining two groups SYNOPSIS #include \"mpi.h\" int MPI_Group_union ( MPI_Group group1, MPI_Group group2, MPI_Group *group_out ) INPUT PARAMETERS group1 - first group (handle) group2 - second group (handle) OUTPUT PARAMETER newgroup - union group (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Group_free LOCATION group_union.c 11/14/2001 MPI_Group_union(3) MPI_Ibsend MPI_Ibsend(3) MPI MPI_Ibsend(3) NAME MPI_Ibsend - Starts a nonblocking buffered send SYNOPSIS #include \"mpi.h\" int MPI_Ibsend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION ibsend.c 11/14/2001 MPI_Ibsend(3) MPI_Initialized MPI_Initialized(3) MPI MPI_Initialized(3) NAME MPI_Initialized - Indicates whether MPI_Init has been called. SYNOPSIS #include \"mpi.h\" int MPI_Initialized( int *flag ) OUTPUT PARAMETER flag - Flag is true if MPI_Init has been called and false otherwise. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION initialize.c 11/14/2001 MPI_Initialized(3) MPI_Init MPI_Init(3) MPI MPI_Init(3) NAME MPI_Init - Initialize the MPI execution environment SYNOPSIS #include \"mpi.h\" int MPI_Init(int *argc, char ***argv) INPUT PARAMETERS argc - Pointer to the number of arguments argv - Pointer to the argument vector COMMAND LINE ARGUMENTS MPI specifies no command-line arguments but does allow an MPI implemen- tation to make use of them. -mpiqueue - print out the state of the message queues when MPI_FINALIZE is called. All processors print; the output may be hard to deci- pher. This is intended as a debugging aid. -mpiversion - print out the version of the implementation ( not of MPI), including the arguments that were used with configure. -mpinice nn - Increments the nice value by nn (lowering the priority of the program by nn ). nn must be positive (except for root). Not all systems support this argument; those that do not will ignore it. -mpedbg - Start a debugger in an xterm window if there is an error (either detected by MPI or a normally fatal signal). This works only if MPICH was configured with -mpedbg . CURRENTLY DISABLED. If you have TotalView, -mpichtv or mpirun -tv will give you a better environment anyway. -mpimem - If MPICH was built with -DMPIR_DEBUG_MEM , this checks all malloc and free operations (internal to MPICH) for signs of injury to the memory allocation areas. -mpidb options - Activate various debugging options. Some require that MPICH have been built with special options. These are intended for debugging MPICH, not for debugging user programs. The available options include: mem - Enable dynamic memory tracing of internal MPI objects memall - Generate output of all memory allocation/deallocation ptr - Enable tracing of internal MPI pointer conversions rank n - Limit subsequent -mpidb options to on the process with the specified rank in MPI_COMM_WORLD. A rank of -1 selects all of MPI_COMM_WORLD. ref - Trace use of internal MPI objects reffile filename - Trace use of internal MPI objects with output to the indicated file trace - Trace routine calls NOTES Note that the Fortran binding for this routine has only the error return argument ( MPI_INIT(ierror) ) Because the Fortran and C versions of MPI_Init are different, there is a restriction on who can call MPI_Init . The version (Fortran or C) must match the main program. That is, if the main program is in C, then the C version of MPI_Init must be called. If the main program is in Fortran, the Fortran version must be called. On exit from this routine, all processes will have a copy of the argu- ment list. This is not required by the MPI standard, and truely portable codes should not rely on it. This is provided as a service by this implementation (an MPI implementation is allowed to distribute the command line arguments but is not required to). Command line arguments are not provided to Fortran programs. More pre- cisely, non-standard Fortran routines such as getarg and iargc have undefined behavior in MPI and in this implementation. The MPI standard does not say what a program can do before an MPI_INIT or after an MPI_FINALIZE . In the MPICH implementation, you should do as little as possible. In particular, avoid anything that changes the external state of the program, such as opening files, reading standard input or writing to standard output. SIGNALS USED The MPI standard requires that all signals used be documented. The MPICH implementation itself uses no signals, but some of the software that MPICH relies on may use some signals. The list below is partial and should be independantly checked if you (and any package that you use) depend on particular signals. IBM POE/MPL FOR SP2 SIGHUP, SIGINT, SIGQUIT, SIGFPE, SIGSEGV, SIGPIPE, SIGALRM, SIGTERM, SIGIO -MPEDBG SWITCH SIGQUIT, SIGILL, SIGFPE, SIGBUS, SIGSEGV, SIGSYS MEIKO CS2 SIGUSR2 CH_P4 DEVICE SIGUSR1 The ch_p4 device also catches SIGINT, SIGFPE, SIGBUS, and SIGSEGV; this helps the p4 device (and MPICH) more gracefully abort a failed program. INTEL PARAGON (CH_NX AND NX DEVICE) SIGUSR2 SHARED MEMORY (CH_SHMEM DEVICE) SIGCHLD Note that if you are using software that needs the same signals, you may find that there is no way to use that software with the MPI imple- mentation. The signals that cause the most trouble for applications include SIGIO , SIGALRM , and SIGPIPE . For example, using SIGIO and SIGPIPE may prevent X11 routines from working. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_OTHER - This error class is associated with an error code that indi- cates that an attempt was made to call MPI_INIT a second time. MPI_INIT may only be called once in a program. LOCATION init.c 4/8/2002 MPI_Init(3) mpi_init_thread <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> <title>404 Not Found</title> </head> <body> <p><strong>HTTP 404 - Not Found</strong><p /> The requested URL was not found on this server. </body> </html> MPI_Intercomm_create MPI_Intercomm_create(3) MPI MPI_Intercomm_create(3) NAME MPI_Intercomm_create - Creates an intercommuncator from two intracom- municators SYNOPSIS #include \"mpi.h\" int MPI_Intercomm_create ( MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *comm_out ) INPUT PARAMTERS local_comm - Local (intra)communicator local_leader - Rank in local_comm of leader (often 0) peer_comm - Remote communicator remote_leader - Rank in peer_comm of remote leader (often 0) tag - Message tag to use in constructing intercommunicator; if mul- tiple MPI_Intercomm_creates are being made, they should use dif- ferent tags (more precisely, ensure that the local and remote leaders are using different tags for each MPI_intercomm_create ). OUTPUT PARAMETER comm_out - Created intercommunicator NOTES The MPI 1.1 Standard contains two mutually exclusive comments on the input intracommunicators. One says that their repective groups must be disjoint; the other that the leaders can be the same process. After some discussion by the MPI Forum, it has been decided that the groups must be disjoint. Note that the reason given for this in the standard is not the reason for this choice; rather, the other operations on intercommunicators (like MPI_Intercomm_merge ) do not make sense if the groups are not disjoint. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ALGORITHM 1) Allocate a send context, an inter - coll context, and an intra-coll context 2) Send send_context and lrank_to_grank list from local comm group - if I'm the local_leader. 3) If I'm the local leader, then wait on the posted sends and receives - to complete. Post the receive for the remote group informa- tion and wait for it to complete. 4) Broadcast information received from the remote leader. - . 5) Create the inter_communicator from the information we now have. An inter - communicator ends up with three levels of communicators. The inter-communicator returned to the user, a \"collective\" inter- communicator that can be used for safe communications between local & remote groups, and a collective intra-communicator that can be used to allocate new contexts during the merge and dup operations. For the resulting inter-communicator, comm_out comm_out = inter-communicator comm_out->comm_coll = \"collective\" inter-communicator comm_out->comm_coll->comm_coll = safe collective intra-communicator ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Intercomm_merge, MPI_Comm_free, MPI_Comm_remote_group, MPI_Comm_remote_size LOCATION ic_create.c 11/14/2001 MPI_Intercomm_create(3) MPI_Intercomm_merge MPI_Intercomm_merge(3) MPI MPI_Intercomm_merge(3) NAME MPI_Intercomm_merge - Creates an intracommuncator from an intercommu- nicator SYNOPSIS #include \"mpi.h\" int MPI_Intercomm_merge ( MPI_Comm comm, int high, MPI_Comm *comm_out ) INPUT PARAMETERS comm - Intercommunicator high - Used to order the groups of the two intracommunicators within comm when creating the new communicator. OUTPUT PARAMETER comm_out - Created intracommunicator NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ALGORITHM 1) Allocate two contexts 2) Local and remote group leaders swap high values 3) Determine the high value. 4) Merge the two groups and make the intra-communicator ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Intercomm_create, MPI_Comm_free LOCATION ic_merge.c 11/14/2001 MPI_Intercomm_merge(3) MPI_Iprobe MPI_Iprobe(3) MPI MPI_Iprobe(3) NAME MPI_Iprobe - Nonblocking test for a message SYNOPSIS #include \"mpi.h\" int MPI_Iprobe( int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status ) INPUT PARAMETERS source - source rank, or MPI_ANY_SOURCE (integer) tag - tag value or MPI_ANY_TAG (integer) comm - communicator (handle) OUTPUT PARAMETER flag - (logical) status - status object (Status) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION iprobe.c 12/7/2004 MPI_Iprobe(3) MPI_Irecv MPI_Irecv(3) MPI MPI_Irecv(3) NAME MPI_Irecv - Begins a nonblocking receive SYNOPSIS #include \"mpi.h\" int MPI_Irecv( void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of receive buffer (choice) count - number of elements in receive buffer (integer) datatype - datatype of each receive buffer element (handle) source - rank of source (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION irecv.c 11/14/2001 MPI_Irecv(3) MPI_Irsend MPI_Irsend(3) MPI MPI_Irsend(3) NAME MPI_Irsend - Starts a nonblocking ready send SYNOPSIS #include \"mpi.h\" int MPI_Irsend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) Output Parameter: request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION irsend.c 11/14/2001 MPI_Irsend(3) MPI_Isend MPI_Isend(3) MPI MPI_Isend(3) NAME MPI_Isend - Begins a nonblocking send SYNOPSIS #include \"mpi.h\" int MPI_Isend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION isend.c 11/14/2001 MPI_Isend(3) MPI_Issend MPI_Issend(3) MPI MPI_Issend(3) NAME MPI_Issend - Starts a nonblocking synchronous send SYNOPSIS #include \"mpi.h\" int MPI_Issend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION issend.c 11/14/2001 MPI_Issend(3) MPI_Keyval_create MPI_Keyval_create(3) MPI MPI_Keyval_create(3) NAME MPI_Keyval_create - Generates a new attribute key SYNOPSIS #include \"mpi.h\" int MPI_Keyval_create ( MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn, int *keyval, void *extra_state ) INPUT PARAMETERS copy_fn - Copy callback function for keyval delete_fn - Delete callback function for keyval extra_state - Extra state for callback functions OUTPUT PARAMETER keyval - key value for future access (integer) NOTES Key values are global (available for any and all communicators). There are subtle differences between C and Fortran that require that the copy_fn be written in the same language that MPI_Keyval_create is called from. This should not be a problem for most users; only pro- gramers using both Fortran and C in the same program need to be sure that they follow this rule. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION keyvalcreate.c 11/14/2001 MPI_Keyval_create(3) MPI_Keyval_free MPI_Keyval_free(3) MPI MPI_Keyval_free(3) NAME MPI_Keyval_free - Frees attribute key for communicator cache attribute SYNOPSIS #include \"mpi.h\" int MPI_Keyval_free ( int *keyval ) INPUT PARAMETER keyval - Frees the integer key value (integer) NOTE Key values are global (they can be used with any and all communicators) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_ARG - This error class is associated with an error code that indi- cates that an attempt was made to free one of the permanent keys. SEE ALSO MPI_Keyval_create LOCATION keyval_free.c 6/12/2002 MPI_Keyval_free(3) MPI_Op_create MPI_Op_create(3) MPI MPI_Op_create(3) NAME MPI_Op_create - Creates a user-defined combination function handle SYNOPSIS #include \"mpi.h\" int MPI_Op_create( MPI_User_function *function, int commute, MPI_Op *op ) INPUT PARAMETERS function - user defined function (function) commute - true if commutative; false otherwise. OUTPUT PARAMETER op - operation (handle) NOTES ON THE USER FUNCTION The calling list for the user function type is typedef void (MPI_User_function) ( void * a, void * b, int * len, MPI_Datatype * ); where the operation is b[i] = a[i] op b[i] , for i=0,...,len-1 . A pointer to the datatype given to the MPI collective computation routine (i.e., MPI_Reduce , MPI_Allreduce , MPI_Scan , or MPI_Reduce_scatter ) is also passed to the user-specified routine. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Op_free LOCATION opcreate.c 11/14/2001 MPI_Op_create(3) MPI_Op_free MPI_Op_free(3) MPI MPI_Op_free(3) NAME MPI_Op_free - Frees a user-defined combination function handle SYNOPSIS #include \"mpi.h\" int MPI_Op_free( MPI_Op *op ) INPUT PARAMETER op - operation (handle) NOTES op is set to MPI_OP_NULL on exit. NULL HANDLES The MPI 1.1 specification, in the section on opaque objects, explicitly DISALLOWS FREEING A NULL COMMUNICATOR. THE TEXT FROM THE STANDARD IS A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. Such exception is allowed for handles to request objects in Wait and Test calls (sections Communication Completion and Multiple Completions ). Otherwise, a null handle can only be passed to a function that allocates a new object and returns a reference to it in the handle. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_ARG - Invalid argument; the error code associated with this error indicates an attempt to free an MPI permanent operation (e.g., MPI_SUM ). *N/ /*N MPI_ERR_PERM_KEY MPI_ERR_ARG - Invalid argument; the error code associated with this error indicates an attempt to free or chnage an MPI permanent keyval (e.g., MPI_TAG_UB ). *N/ /*N MPI_ERR_UNKNOWN MPI_ERR_UNKNOWN - Unknown error. You should never see this. If you do, report it to mpi-bugs@mcs.anl.gov . SEE ALSO MPI_Op_create LOCATION opfree.c 11/14/2001 MPI_Op_free(3) MPI_Pack MPI_Pack(3) MPI MPI_Pack(3) NAME MPI_Pack - Packs a datatype into contiguous memory SYNOPSIS #include \"mpi.h\" int MPI_Pack ( void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outcount, int *position, MPI_Comm comm ) INPUT PARAMETERS inbuf - input buffer start (choice) incount - number of input data items (integer) datatype - datatype of each input data item (handle) outcount - output buffer size, in bytes (integer) position - current position in buffer, in bytes (integer) comm - communicator for packed message (handle) OUTPUT PARAMETER outbuf - output buffer start (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO MPI_Unpack, MPI_Pack_size LOCATION pack.c 11/14/2001 MPI_Pack(3) MPI_Pack_size MPI_Pack_size(3) MPI MPI_Pack_size(3) NAME MPI_Pack_size - Returns the upper bound on the amount of space needed to pack a message SYNOPSIS #include \"mpi.h\" int MPI_Pack_size ( int incount, MPI_Datatype datatype, MPI_Comm comm, int *size ) INPUT PARAMETERS incount - count argument to packing call (integer) datatype - datatype argument to packing call (handle) comm - communicator argument to packing call (handle) OUTPUT PARAMETER size - upper bound on size of packed message, in bytes (integer) NOTES The MPI standard document describes this in terms of MPI_Pack , but it applies to both MPI_Pack and MPI_Unpack . That is, the value size is the maximum that is needed by either MPI_Pack or MPI_Unpack . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION pack_size.c 11/14/2001 MPI_Pack_size(3) MPI_Pcontrol MPI_Pcontrol(3) MPI MPI_Pcontrol(3) NAME MPI_Pcontrol - Controls profiling SYNOPSIS #include \"mpi.h\" int MPI_Pcontrol( int level ) INPUT PARAMETERS level - Profiling level NOTES This routine provides a common interface for profiling control. The interpretation of level and any other arguments is left to the profil- ing library. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION pcontrol.c 11/14/2001 MPI_Pcontrol(3) MPI_Probe MPI_Probe(3) MPI MPI_Probe(3) NAME MPI_Probe - Blocking test for a message SYNOPSIS #include \"mpi.h\" int MPI_Probe( int source, int tag, MPI_Comm comm, MPI_Status *status ) INPUT PARAMETERS source - source rank, or MPI_ANY_SOURCE (integer) tag - tag value or MPI_ANY_TAG (integer) comm - communicator (handle) OUTPUT PARAMETER status - status object (Status) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION probe.c 12/7/2004 MPI_Probe(3) MPI_Recv_init MPI_Recv_init(3) MPI MPI_Recv_init(3) NAME MPI_Recv_init - Builds a handle for a receive SYNOPSIS #include \"mpi.h\" int MPI_Recv_init( void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of receive buffer (choice) count - number of elements received (integer) datatype - type of each element (handle) source - rank of source or MPI_ANY_SOURCE (integer) tag - message tag or MPI_ANY_TAG (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Start, MPI_Request_free LOCATION create_recv.c 11/14/2001 MPI_Recv_init(3) MPI_Recv MPI_Recv(3) MPI MPI_Recv(3) NAME MPI_Recv - Basic receive SYNOPSIS #include \"mpi.h\" int MPI_Recv( void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status ) OUTPUT PARAMETERS buf - initial address of receive buffer (choice) status - status object (Status) INPUT PARAMETERS count - maximum number of elements in receive buffer (integer) datatype - datatype of each receive buffer element (handle) source - rank of source (integer) tag - message tag (integer) comm - communicator (handle) NOTES The count argument indicates the maximum length of a message; the actual number can be determined with MPI_Get_count . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION recv.c 2/24/2004 MPI_Recv(3) MPI_Reduce MPI_Reduce(3) MPI MPI_Reduce(3) NAME MPI_Reduce - Reduces values on all processes to a single value SYNOPSIS #include \"mpi.h\" int MPI_Reduce ( void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - address of send buffer (choice) count - number of elements in send buffer (integer) datatype - data type of elements of send buffer (handle) op - reduce operation (handle) root - rank of root process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice, significant only at root ) ALGORITHM This implementation currently uses a simple tree algorithm. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_BUFFER - This error class is associcated with an error code that indi- cates that two buffer arguments are aliased ; that is, the describe overlapping storage (often the exact same storage). This is prohibited in MPI (because it is prohibited by the For- tran standard, and rather than have a separate case for C and Fortran, the MPI Forum adopted the more restrictive requirements of Fortran). LOCATION reduce.c 2/19/2002 MPI_Reduce(3) MPI_Reduce_scatter MPI_Reduce_scatter(3) MPI MPI_Reduce_scatter(3) NAME MPI_Reduce_scatter - Combines values and scatters the results SYNOPSIS #include \"mpi.h\" int MPI_Reduce_scatter ( void *sendbuf, void *recvbuf, int *recvcnts, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) recvcounts - integer array specifying the number of elements in result dis- tributed to each process. Array must be identical on all call- ing processes. datatype - data type of elements of input buffer (handle) op - operation (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - starting address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_OP - Invalid operation. MPI operations (objects of type MPI_Op ) must either be one of the predefined operations (e.g., MPI_SUM ) or created with MPI_Op_create . MPI_ERR_BUFFER - This error class is associcated with an error code that indi- cates that two buffer arguments are aliased ; that is, the describe overlapping storage (often the exact same storage). This is prohibited in MPI (because it is prohibited by the For- tran standard, and rather than have a separate case for C and Fortran, the MPI Forum adopted the more restrictive requirements of Fortran). LOCATION red_scat.c 11/14/2001 MPI_Reduce_scatter(3) MPI_Request_free MPI_Request_free(3) MPI MPI_Request_free(3) NAME MPI_Request_free - Frees a communication request object SYNOPSIS #include \"mpi.h\" int MPI_Request_free( MPI_Request *request ) INPUT PARAMETER request - communication request (handle) NOTES This routine is normally used to free persistent requests created with either MPI_Recv_init or MPI_Send_init and friends. However, it can be used to free a request created with MPI_Irecv or MPI_Isend and friends; in that case the use can not use the test/wait routines on the request. It is permitted to free an active request. However, once freed, you can not use the request in a wait or test routine (e.g., MPI_Wait ). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO also: MPI_Isend, MPI_Irecv, MPI_Issend, MPI_Ibsend, MPI_Irsend, MPI_Recv_init, MPI_Send_init, MPI_Ssend_init, MPI_Rsend_init, MPI_Wait, MPI_Test, MPI_Waitall, MPI_Waitany, MPI_Waitsome, MPI_Testall, MPI_Tes- tany, MPI_Testsome LOCATION commreq_free.c 11/14/2001 MPI_Request_free(3) MPI_Rsend_init MPI_Rsend_init(3) MPI MPI_Rsend_init(3) NAME MPI_Rsend_init - Builds a handle for a ready send SYNOPSIS #include \"mpi.h\" int MPI_Rsend_init( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements sent (integer) datatype - type of each element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Start, MPI_Request_free, MPI_Send_init LOCATION rsend_init.c 11/14/2001 MPI_Rsend_init(3) MPI_Rsend MPI_Rsend(3) MPI MPI_Rsend(3) NAME MPI_Rsend - Basic ready send SYNOPSIS #include \"mpi.h\" int MPI_Rsend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (nonnegative integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION rsend.c 11/14/2001 MPI_Rsend(3) MPI_Scan MPI_Scan(3) MPI MPI_Scan(3) NAME MPI_Scan - Computes the scan (partial reductions) of data on a collec- tion of processes SYNOPSIS #include \"mpi.h\" int MPI_Scan ( void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) count - number of elements in input buffer (integer) datatype - data type of elements of input buffer (handle) op - operation (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - starting address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_BUFFER - This error class is associcated with an error code that indi- cates that two buffer arguments are aliased ; that is, the describe overlapping storage (often the exact same storage). This is prohibited in MPI (because it is prohibited by the For- tran standard, and rather than have a separate case for C and Fortran, the MPI Forum adopted the more restrictive requirements of Fortran). LOCATION scan.c 11/14/2001 MPI_Scan(3) MPI_Scatter MPI_Scatter(3) MPI MPI_Scatter(3) NAME MPI_Scatter - Sends data from one task to all other tasks in a group SYNOPSIS #include \"mpi.h\" int MPI_Scatter ( void *sendbuf, int sendcnt, MPI_Datatype sendtype, void *recvbuf, int recvcnt, MPI_Datatype recvtype, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - address of send buffer (choice, significant only at root ) sendcount - number of elements sent to each process (integer, significant only at root ) sendtype - data type of send buffer elements (significant only at root ) (handle) recvcount - number of elements in receive buffer (integer) recvtype - data type of receive buffer elements (handle) root - rank of sending process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION scatter.c 4/5/2004 MPI_Scatter(3) MPI_Scatterv MPI_Scatterv(3) MPI MPI_Scatterv(3) NAME MPI_Scatterv - Scatters a buffer in parts to all tasks in a group SYNOPSIS #include \"mpi.h\" int MPI_Scatterv ( void *sendbuf, int *sendcnts, int *displs, MPI_Datatype sendtype, void *recvbuf, int recvcnt, MPI_Datatype recvtype, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - address of send buffer (choice, significant only at root ) sendcounts - integer array (of length group size) specifying the number of elements to send to each processor displs - integer array (of length group size). Entry i specifies the displacement (relative to sendbuf from which to take the outgo- ing data to process i sendtype - data type of send buffer elements (handle) recvcount - number of elements in receive buffer (integer) recvtype - data type of receive buffer elements (handle) root - rank of sending process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION scatterv.c 2/21/2002 MPI_Scatterv(3) MPI_Send_init MPI_Send_init(3) MPI MPI_Send_init(3) NAME MPI_Send_init - Builds a handle for a standard send SYNOPSIS #include \"mpi.h\" int MPI_Send_init( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements sent (integer) datatype - type of each element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) Output Parameter: request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Start, MPI_Startall, MPI_Request_free LOCATION create_send.c 11/14/2001 MPI_Send_init(3) MPI_Send MPI_Send(3) MPI MPI_Send(3) NAME MPI_Send - Performs a basic send SYNOPSIS #include \"mpi.h\" int MPI_Send( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (nonnegative integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) NOTES This routine may block until the message is received. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Isend, MPI_Bsend LOCATION send.c 11/14/2001 MPI_Send(3) MPI_Sendrecv MPI_Sendrecv(3) MPI MPI_Sendrecv(3) NAME MPI_Sendrecv - Sends and receives a message SYNOPSIS #include \"mpi.h\" int MPI_Sendrecv( void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status ) INPUT PARAMETERS sendbuf - initial address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - type of elements in send buffer (handle) dest - rank of destination (integer) sendtag - send tag (integer) recvcount - number of elements in receive buffer (integer) recvtype - type of elements in receive buffer (handle) source - rank of source (integer) recvtag - receive tag (integer) comm - communicator (handle) OUTPUT PARAMETERS recvbuf - initial address of receive buffer (choice) status - status object (Status). This refers to the receive operation. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION sendrecv.c 11/14/2001 MPI_Sendrecv(3) MPI_Sendrecv_replace MPI_Sendrecv_replace(3) MPI MPI_Sendrecv_replace(3) NAME MPI_Sendrecv_replace - Sends and receives using a single buffer SYNOPSIS #include \"mpi.h\" int MPI_Sendrecv_replace( void *buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status ) INPUT PARAMETERS count - number of elements in send and receive buffer (integer) datatype - type of elements in send and receive buffer (handle) dest - rank of destination (integer) sendtag - send message tag (integer) source - rank of source (integer) recvtag - receive message tag (integer) comm - communicator (handle) OUTPUT PARAMETERS buf - initial address of send and receive buffer (choice) status - status object (Status) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TRUNCATE - Message truncated on receive. The buffer size specified was too small for the received message. This is a recoverable error in the MPICH implementation. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION sendrecv_rep.c 11/14/2001 MPI_Sendrecv_replace(3) MPI_Ssend_init MPI_Ssend_init(3) MPI MPI_Ssend_init(3) NAME MPI_Ssend_init - Builds a handle for a synchronous send SYNOPSIS #include \"mpi.h\" int MPI_Ssend_init( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements sent (integer) datatype - type of each element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION ssend_init.c 11/14/2001 MPI_Ssend_init(3) MPI_Ssend MPI_Ssend(3) MPI MPI_Ssend(3) NAME MPI_Ssend - Basic synchronous send SYNOPSIS #include \"mpi.h\" int MPI_Ssend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (nonnegative integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION ssend.c 11/14/2001 MPI_Ssend(3) MPI_Startall MPI_Startall(3) MPI MPI_Startall(3) NAME MPI_Startall - Starts a collection of requests SYNOPSIS #include \"mpi.h\" int MPI_Startall( int count, MPI_Request array_of_requests[] ) INPUT PARAMETERS count - list length (integer) array_of_requests - array of requests (array of handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION startall.c 11/14/2001 MPI_Startall(3) MPI_Start MPI_Start(3) MPI MPI_Start(3) NAME MPI_Start - Initiates a communication with a persistent request handle SYNOPSIS #include \"mpi.h\" int MPI_Start( MPI_Request *request) INPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. LOCATION start.c 11/14/2001 MPI_Start(3) MPI_Testall MPI_Testall(3) MPI MPI_Testall(3) NAME MPI_Testall - Tests for the completion of all previously initiated communications SYNOPSIS #include \"mpi.h\" int MPI_Testall( int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[] ) INPUT PARAMETERS count - lists length (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS flag - (logical) array_of_statuses - array of status objects (array of Status). May be MPI_STA- TUSES_IGNORE . NOTES flag is true only if all requests have completed. Otherwise, flag is false and neither the array_of_requests nor the array_of_statuses is modified. NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_IN_STATUS - The actual error value is in the MPI_Status argument. This error class is returned only from the multiple-completion routines ( MPI_Testall , MPI_Testany , MPI_Testsome , MPI_Wait- all , MPI_Waitany , and MPI_Waitsome ). The field MPI_ERROR in the status argument contains the error value or MPI_SUCCESS (no error and complete) or MPI_ERR_PENDING to indicate that the request has not completed. The MPI Standard does not specify what the result of the multiple completion routines is when an error occurs. For example, in an MPI_WAITALL , does the routine wait for all requests to either fail or complete, or does it return immediately (with the MPI definition of immediately, which means independent of actions of other MPI processes)? MPICH has chosen to make the return immediate (alternately, local in MPI terms), and to use the error class MPI_ERR_PENDING (introduced in MPI 1.1) to indicate which requests have not com- pleted. In most cases, only one request with an error will be detected in each call to an MPI routine that tests multiple requests. The requests that have not been processed (because an error occured in one of the requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING . LOCATION testall.c 2/19/2003 MPI_Testall(3) MPI_Testany MPI_Testany(3) MPI MPI_Testany(3) NAME MPI_Testany - Tests for completion of any previdously initiated com- munication SYNOPSIS #include \"mpi.h\" int MPI_Testany( int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status ) INPUT PARAMETERS count - list length (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS index - index of operation that completed, or MPI_UNDEFINED if none completed (integer) flag - true if one of the operations is complete (logical) status - status object (Status). May be MPI_STATUS_IGNORE . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. LOCATION testany.c 1/9/2003 MPI_Testany(3) MPI_Test_cancelled MPI_Test_cancelled(3) MPI MPI_Test_cancelled(3) NAME MPI_Test_cancelled - Tests to see if a request was cancelled SYNOPSIS #include \"mpi.h\" int MPI_Test_cancelled( MPI_Status *status, int *flag) INPUT PARAMETER status - status object (Status) OUTPUT PARAMETER flag - (logical) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION testcancel.c 11/14/2001 MPI_Test_cancelled(3) MPI_Test MPI_Test(3) MPI MPI_Test(3) NAME MPI_Test - Tests for the completion of a send or receive SYNOPSIS #include \"mpi.h\" int MPI_Test ( MPI_Request *request, int *flag, MPI_Status *status) INPUT PARAMETER request - communication request (handle) OUTPUT PARAMETER flag - true if operation completed (logical) status - status object (Status). May be MPI_STATUS_IGNORE . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION test.c 1/9/2003 MPI_Test(3) MPI_Testsome MPI_Testsome(3) MPI MPI_Testsome(3) NAME MPI_Testsome - Tests for some given communications to complete SYNOPSIS #include \"mpi.h\" int MPI_Testsome( int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[] ) INPUT PARAMETERS incount - length of array_of_requests (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS outcount - number of completed requests (integer) array_of_indices - array of indices of operations that completed (array of inte- gers) array_of_statuses - array of status objects for operations that completed (array of Status). May be MPI_STATUSES_IGNORE . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_IN_STATUS - The actual error value is in the MPI_Status argument. This error class is returned only from the multiple-completion routines ( MPI_Testall , MPI_Testany , MPI_Testsome , MPI_Wait- all , MPI_Waitany , and MPI_Waitsome ). The field MPI_ERROR in the status argument contains the error value or MPI_SUCCESS (no error and complete) or MPI_ERR_PENDING to indicate that the request has not completed. The MPI Standard does not specify what the result of the multiple completion routines is when an error occurs. For example, in an MPI_WAITALL , does the routine wait for all requests to either fail or complete, or does it return immediately (with the MPI definition of immediately, which means independent of actions of other MPI processes)? MPICH has chosen to make the return immediate (alternately, local in MPI terms), and to use the error class MPI_ERR_PENDING (introduced in MPI 1.1) to indicate which requests have not com- pleted. In most cases, only one request with an error will be detected in each call to an MPI routine that tests multiple requests. The requests that have not been processed (because an error occured in one of the requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING . LOCATION testsome.c 1/9/2003 MPI_Testsome(3) MPI_Topo_test MPI_Topo_test(3) MPI MPI_Topo_test(3) NAME MPI_Topo_test - Determines the type of topology (if any) associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Topo_test ( MPI_Comm comm, int *top_type ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER top_type - topology type of communicator comm (choice). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO MPI_Graph_create, MPI_Cart_create LOCATION topo_test.c 11/14/2001 MPI_Topo_test(3) MPI_Type_commit MPI_Type_commit(3) MPI MPI_Type_commit(3) NAME MPI_Type_commit - Commits the datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_commit ( MPI_Datatype *datatype ) INPUT PARAMETER datatype - datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION type_commit.c 11/14/2001 MPI_Type_commit(3) MPI_Type_contiguous MPI_Type_contiguous(3) MPI MPI_Type_contiguous(3) NAME MPI_Type_contiguous - Creates a contiguous datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_contiguous( int count, MPI_Datatype old_type, MPI_Datatype *newtype) INPUT PARAMETERS count - replication count (nonnegative integer) oldtype - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION type_contig.c 11/14/2001 MPI_Type_contiguous(3) MPI_Type_extent MPI_Type_extent(3) MPI MPI_Type_extent(3) NAME MPI_Type_extent - Returns the extent of a datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_extent( MPI_Datatype datatype, MPI_Aint *extent ) INPUT PARAMETERS datatype - datatype (handle) OUTPUT PARAMETER extent - datatype extent (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION type_extent.c 11/14/2001 MPI_Type_extent(3) MPI_Type_free MPI_Type_free(3) MPI MPI_Type_free(3) NAME MPI_Type_free - Frees the datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_free ( MPI_Datatype *datatype ) INPUT PARAMETER datatype - datatype that is freed (handle) PREDEFINED TYPES The MPI standard states that (in Opaque Objects) MPI provides certain predefined opaque objects and predefined, static handles to these objects. Such objects may not be destroyed. Thus, it is an error to free a predefined datatype. The same section makes it clear that it is an error to free a null datatype. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_free.c 11/14/2001 MPI_Type_free(3) MPI_Type_hindexed MPI_Type_hindexed(3) MPI MPI_Type_hindexed(3) NAME MPI_Type_hindexed - Creates an indexed datatype with offsets in bytes SYNOPSIS #include \"mpi.h\" int MPI_Type_hindexed( int count, int blocklens[], MPI_Aint indices[], MPI_Datatype old_type, MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks -- also number of entries in indices and blocklens blocklens - number of elements in each block (array of nonnegative inte- gers) indices - byte displacement of each block (array of MPI_Aint) old_type - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. Also see the discussion for MPI_Type_indexed about the indices in For- tran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_hind.c 4/7/2003 MPI_Type_hindexed(3) MPI_Type_hvector MPI_Type_hvector(3) MPI MPI_Type_hvector(3) NAME MPI_Type_hvector - Creates a vector (strided) datatype with offset in bytes SYNOPSIS #include \"mpi.h\" int MPI_Type_hvector( int count, int blocklen, MPI_Aint stride, MPI_Datatype old_type, MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks (nonnegative integer) blocklength - number of elements in each block (nonnegative integer) stride - number of bytes between start of each block (integer) old_type - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION type_hvec.c 11/14/2001 MPI_Type_hvector(3) MPI_Type_indexed MPI_Type_indexed(3) MPI MPI_Type_indexed(3) NAME MPI_Type_indexed - Creates an indexed datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_indexed( int count, int blocklens[], int indices[], MPI_Datatype old_type, MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks -- also number of entries in indices and blocklens blocklens - number of elements in each block (array of nonnegative inte- gers) indices - displacement of each block in multiples of old_type (array of integers) old_type - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. The indices are displacements, and are based on a zero origin. A com- mon error is to do something like to following integer a(100) integer blens(10), indices(10) do i=1,10 blens(i) = 1 10 indices(i) = 1 + (i-1)*10 call MPI_TYPE_INDEXED(10,blens,indices,MPI_INTEGER,newtype,ierr) call MPI_TYPE_COMMIT(newtype,ierr) call MPI_SEND(a,1,newtype,...) expecting this to send a(1),a(11),... because the indices have values 1,11,... . Because these are displacements from the beginning of a , it actually sends a(1+1),a(1+11),... . If you wish to consider the displacements as indices into a Fortran array, consider declaring the Fortran array with a zero origin integer a(0:99) ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION type_ind.c 11/14/2001 MPI_Type_indexed(3) MPI_Type_lb MPI_Type_lb(3) MPI MPI_Type_lb(3) NAME MPI_Type_lb - Returns the lower-bound of a datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_lb ( MPI_Datatype datatype, MPI_Aint *displacement ) INPUT PARAMETERS datatype - datatype (handle) OUTPUT PARAMETER displacement - displacement of lower bound from origin, in bytes (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_lb.c 11/14/2001 MPI_Type_lb(3) MPI_Type_size MPI_Type_size(3) MPI MPI_Type_size(3) NAME MPI_Type_size - Return the number of bytes occupied by entries in the datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_size ( MPI_Datatype datatype, int *size ) INPUT PARAMETERS datatype - datatype (handle) OUTPUT PARAMETER size - datatype size (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_size.c 11/14/2001 MPI_Type_size(3) MPI_Type_struct MPI_Type_struct(3) MPI MPI_Type_struct(3) NAME MPI_Type_struct - Creates a struct datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_struct( int count, int blocklens[], MPI_Aint indices[], MPI_Datatype old_types[], MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks (integer) -- also number of entries in arrays array_of_types , array_of_displacements and array_of_block- lengths blocklens - number of elements in each block (array) indices - byte displacement of each block (array) old_types - type of elements in each block (array of handles to datatype objects) OUTPUT PARAMETER newtype - new datatype (handle) NOTES If an upperbound is set explicitly by using the MPI datatype MPI_UB , the corresponding index must be positive. The MPI standard originally made vague statements about padding and alignment; this was intended to allow the simple definition of struc- tures that could be sent with a count greater than one. For example, struct { int a; char b; } foo; may have sizeof(foo) > sizeof(int) + sizeof(char) ; for example, sizeof(foo) == 2*sizeof(int) . The initial version of the MPI standard defined the extent of a datatype as including an epsilon that would have allowed an implementation to make the extent an MPI datatype for this structure equal to 2*sizeof(int) . However, since different systems might define different paddings, there was much discussion by the MPI Forum about what was the correct value of epsilon, and one suggestion was to define epsilon as zero. This would have been the best thing to do in MPI 1.0, particularly since the MPI_UB type allows the user to easily set the end of the structure. Unfortunately, this change did not make it into the final document. Currently, this routine does not add any padding, since the amount of padding needed is determined by the compiler that the user is using to build their code, not the compiler used to construct the MPI library. A later version of MPICH may provide for some natural choices of padding (e.g., multiple of the size of the largest basic member), but users are advised to never depend on this, even with vendor MPI imple- mentations. Instead, if you define a structure datatype and wish to send or receive multiple items, you should explicitly include an MPI_UB entry as the last member of the structure. For example, the following code can be used for the structure foo blen[0] = 1; indices[0] = 0; oldtypes[0] = MPI_INT; blen[1] = 1; indices[1] = &foo.b - &foo; oldtypes[1] = MPI_CHAR; blen[2] = 1; indices[2] = sizeof(foo); oldtypes[2] = MPI_UB; MPI_Type_struct( 3, blen, indices, oldtypes, &newtype ); NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION type_struct.c 7/12/2002 MPI_Type_struct(3) MPI_Type_ub MPI_Type_ub(3) MPI MPI_Type_ub(3) NAME MPI_Type_ub - Returns the upper bound of a datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_ub ( MPI_Datatype datatype, MPI_Aint *displacement ) INPUT PARAMETERS datatype - datatype (handle) OUTPUT PARAMETER displacement - displacement of upper bound from origin, in bytes (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_ub.c 11/14/2001 MPI_Type_ub(3) MPI_Type_vector MPI_Type_vector(3) MPI MPI_Type_vector(3) NAME MPI_Type_vector - Creates a vector (strided) datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_vector( int count, int blocklen, int stride, MPI_Datatype old_type, MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks (nonnegative integer) blocklength - number of elements in each block (nonnegative integer) stride - number of elements between start of each block (integer) oldtype - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION type_vec.c 11/14/2001 MPI_Type_vector(3) MPI_Unpack MPI_Unpack(3) MPI MPI_Unpack(3) NAME MPI_Unpack - Unpack a datatype into contiguous memory SYNOPSIS #include \"mpi.h\" int MPI_Unpack ( void *inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm ) INPUT PARAMETERS inbuf - input buffer start (choice) insize - size of input buffer, in bytes (integer) position - current position in bytes (integer) outcount - number of items to be unpacked (integer) datatype - datatype of each output data item (handle) comm - communicator for packed message (handle) OUTPUT PARAMETER outbuf - output buffer start (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO MPI_Pack, MPI_Pack_size LOCATION unpack.c 11/14/2001 MPI_Unpack(3) MPI_Waitall MPI_Waitall(3) MPI MPI_Waitall(3) NAME MPI_Waitall - Waits for all given communications to complete SYNOPSIS #include \"mpi.h\" int MPI_Waitall( int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[] ) INPUT PARAMETERS count - lists length (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETER array_of_statuses - array of status objects (array of Status). May be MPI_STA- TUSES_IGNORE NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_IN_STATUS - The actual error value is in the MPI_Status argument. This error class is returned only from the multiple-completion rou- tines ( MPI_Testall , MPI_Testany , MPI_Testsome , MPI_Waitall , MPI_Waitany , and MPI_Waitsome ). The field MPI_ERROR in the status argument contains the error value or MPI_SUCCESS (no error and complete) or MPI_ERR_PENDING to indicate that the request has not completed. The MPI Standard does not specify what the result of the multiple completion routines is when an error occurs. For example, in an MPI_WAITALL , does the routine wait for all requests to either fail or complete, or does it return immediately (with the MPI definition of immediately, which means independent of actions of other MPI processes)? MPICH has chosen to make the return immediate (alternately, local in MPI terms), and to use the error class MPI_ERR_PENDING (introduced in MPI 1.1) to indicate which requests have not com- pleted. In most cases, only one request with an error will be detected in each call to an MPI routine that tests multiple requests. The requests that have not been processed (because an error occured in one of the requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING . MPI_ERR_PENDING - Pending request (not an error). See MPI_ERR_IN_STATUS . This value indicates that the request is not complete nor has a encountered a detected error. LOCATION waitall.c 2/24/2004 MPI_Waitall(3) MPI_Waitany MPI_Waitany(3) MPI MPI_Waitany(3) NAME MPI_Waitany - Waits for any specified send or receive to complete SYNOPSIS #include \"mpi.h\" int MPI_Waitany( int count, MPI_Request array_of_requests[], int *index, MPI_Status *status ) INPUT PARAMETERS count - list length (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS index - index of handle for operation that completed (integer). In the range 0 to count-1 . In Fortran, the range is 1 to count . status - status object (Status). May be MPI_STATUS_IGNORE . NOTES If all of the requests are MPI_REQUEST_NULL , then index is returned as MPI_UNDEFINED , and status is returned as an empty status. NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION waitany.c 1/9/2003 MPI_Waitany(3) MPI_Wait MPI_Wait(3) MPI MPI_Wait(3) NAME MPI_Wait - Waits for an MPI send or receive to complete SYNOPSIS #include \"mpi.h\" int MPI_Wait ( MPI_Request *request, MPI_Status *status) INPUT PARAMETER request - request (handle) OUTPUT PARAMETER status - status object (Status) . May be MPI_STATUS_IGNORE . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION wait.c 1/9/2003 MPI_Wait(3) MPI_Waitsome MPI_Waitsome(3) MPI MPI_Waitsome(3) NAME MPI_Waitsome - Waits for some given communications to complete SYNOPSIS #include \"mpi.h\" int MPI_Waitsome( int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[] ) INPUT PARAMETERS incount - length of array_of_requests (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS outcount - number of completed requests (integer) array_of_indices - array of indices of operations that completed (array of inte- gers) array_of_statuses - array of status objects for operations that completed (array of Status). May be MPI_STATUSES_IGNORE . NOTES The array of indicies are in the range 0 to incount - 1 for C and in the range 1 to incount for Fortran. Null requests are ignored; if all requests are null, then the routine returns with outcount set to MPI_UNDEFINED . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_IN_STATUS - The actual error value is in the MPI_Status argument. This error class is returned only from the multiple-completion rou- tines ( MPI_Testall , MPI_Testany , MPI_Testsome , MPI_Waitall , MPI_Waitany , and MPI_Waitsome ). The field MPI_ERROR in the status argument contains the error value or MPI_SUCCESS (no error and complete) or MPI_ERR_PENDING to indicate that the request has not completed. The MPI Standard does not specify what the result of the multiple completion routines is when an error occurs. For example, in an MPI_WAITALL , does the routine wait for all requests to either fail or complete, or does it return immediately (with the MPI definition of immediately, which means independent of actions of other MPI processes)? MPICH has chosen to make the return immediate (alternately, local in MPI terms), and to use the error class MPI_ERR_PENDING (introduced in MPI 1.1) to indicate which requests have not com- pleted. In most cases, only one request with an error will be detected in each call to an MPI routine that tests multiple requests. The requests that have not been processed (because an error occured in one of the requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING . LOCATION waitsome.c 1/9/2003 MPI_Waitsome(3) MPI_Wtick MPI_Wtick(3) MPI MPI_Wtick(3) NAME MPI_Wtick - Returns the resolution of MPI_Wtime SYNOPSIS #include \"mpi.h\" double MPI_Wtick() RETURN VALUE Time in seconds of the resolution of MPI_Wtime . NOTES FOR FORTRAN This is a function, declared as DOUBLE PRECISION MPI_WTICK() in For- tran. LOCATION wtick.c 8/20/2004 MPI_Wtick(3) MPI_Wtime MPI_Wtime(3) MPI MPI_Wtime(3) NAME MPI_Wtime - Returns an elapsed time on the calling processor SYNOPSIS #include \"mpi.h\" double MPI_Wtime() RETURN VALUE Time in seconds since an arbitrary time in the past. NOTES This is intended to be a high-resolution, elapsed (or wall) clock. See MPI_WTICK to determine the resolution of MPI_WTIME . If the attribute MPI_WTIME_IS_GLOBAL is defined and true, then the value is synchronized across all processes in MPI_COMM_WORLD . NOTES FOR FORTRAN This is a function, declared as DOUBLE PRECISION MPI_WTIME() in For- tran. SEE ALSO also: MPI_Wtick, MPI_Attr_get LOCATION wtime.c 11/14/2001 MPI_Wtime(3)","title":"MPI Lib"},{"location":"Dev/MPI/MPI-Lib/#mpi_abort","text":"MPI_Abort(3) MPI MPI_Abort(3) NAME MPI_Abort - Terminates MPI execution environment SYNOPSIS #include \"mpi.h\" int MPI_Abort( MPI_Comm comm, int errorcode ) INPUT PARAMETERS comm - communicator of tasks to abort errorcode - error code to return to invoking environment NOTES Terminates all MPI processes associated with the communicator comm ; in most systems (all to date), terminates all processes. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION abort.c 12/13/2001 MPI_Abort(3)","title":"MPI_Abort"},{"location":"Dev/MPI/MPI-Lib/#mpi_address","text":"MPI_Address(3) MPI MPI_Address(3) NAME MPI_Address - Gets the address of a location in memory SYNOPSIS #include \"mpi.h\" int MPI_Address( void *location, MPI_Aint *address) INPUT PARAMETERS location - location in caller memory (choice) OUTPUT PARAMETER address - address of location (integer) NOTE This routine is provided for both the Fortran and C programmers. On many systems, the address returned by this routine will be the same as produced by the C & operator, but this is not required in C and may not be true of systems with word- rather than byte-oriented instructions or systems with segmented address spaces. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION address.c 11/14/2001 MPI_Address(3)","title":"MPI_Address"},{"location":"Dev/MPI/MPI-Lib/#mpi_allgather","text":"MPI_Allgather(3) MPI MPI_Allgather(3) NAME MPI_Allgather - Gathers data from all tasks and distribute it to all tasks SYNOPSIS #include \"mpi.h\" int MPI_Allgather ( void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - data type of send buffer elements (handle) recvcount - number of elements received from any process (integer) recvtype - data type of receive buffer elements (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES The MPI standard (1.0 and 1.1) says that The jth block of data sent from each proess is received by every pro- cess and placed in the jth block of the buffer recvbuf . This is misleading; a better description is The block of data sent from the jth process is received by every pro- cess and placed in the jth block of the buffer recvbuf . This text was suggested by Rajeev Thakur. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION allgather.c 10/1/2004 MPI_Allgather(3)","title":"MPI_Allgather"},{"location":"Dev/MPI/MPI-Lib/#mpi_allgatherv","text":"MPI_Allgatherv(3) MPI MPI_Allgatherv(3) NAME MPI_Allgatherv - Gathers data from all tasks and deliver it to all SYNOPSIS #include \"mpi.h\" int MPI_Allgatherv ( void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int *recvcounts, int *displs, MPI_Datatype recvtype, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - data type of send buffer elements (handle) recvcounts - integer array (of length group size) containing the number of elements that are received from each process displs - integer array (of length group size). Entry i specifies the displacement (relative to recvbuf ) at which to place the incom- ing data from process i recvtype - data type of receive buffer elements (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES The MPI standard (1.0 and 1.1) says that The jth block of data sent from each proess is received by every pro- cess and placed in the jth block of the buffer recvbuf . This is misleading; a better description is The block of data sent from the jth process is received by every pro- cess and placed in the jth block of the buffer recvbuf . This text was suggested by Rajeev Thakur. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION allgatherv.c 11/14/2001 MPI_Allgatherv(3)","title":"MPI_Allgatherv"},{"location":"Dev/MPI/MPI-Lib/#mpi_allreduce","text":"MPI_Allreduce(3) MPI MPI_Allreduce(3) NAME MPI_Allreduce - Combines values from all processes and distribute the result back to all processes SYNOPSIS #include \"mpi.h\" int MPI_Allreduce ( void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) count - number of elements in send buffer (integer) datatype - data type of elements of send buffer (handle) op - operation (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - starting address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_OP - Invalid operation. MPI operations (objects of type MPI_Op ) must either be one of the predefined operations (e.g., MPI_SUM ) or created with MPI_Op_create . MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION allreduce.c 11/14/2001 MPI_Allreduce(3)","title":"MPI_Allreduce"},{"location":"Dev/MPI/MPI-Lib/#mpi_alltoall","text":"MPI_Alltoall(3) MPI MPI_Alltoall(3) NAME MPI_Alltoall - Sends data from all to all processes SYNOPSIS #include \"mpi.h\" int MPI_Alltoall( void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcnt, MPI_Datatype recvtype, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements to send to each process (integer) sendtype - data type of send buffer elements (handle) recvcount - number of elements received from any process (integer) recvtype - data type of receive buffer elements (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION alltoall.c 11/14/2001 MPI_Alltoall(3)","title":"MPI_Alltoall"},{"location":"Dev/MPI/MPI-Lib/#mpi_alltoallv","text":"MPI_Alltoallv(3) MPI MPI_Alltoallv(3) NAME MPI_Alltoallv - Sends data from all to all processes, with a displace- ment SYNOPSIS #include \"mpi.h\" int MPI_Alltoallv ( void *sendbuf, int *sendcnts, int *sdispls, MPI_Datatype sendtype, void *recvbuf, int *recvcnts, int *rdispls, MPI_Datatype recvtype, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcounts - integer array equal to the group size specifying the number of elements to send to each processor sdispls - integer array (of length group size). Entry j specifies the displacement (relative to sendbuf from which to take the outgo- ing data destined for process j sendtype - data type of send buffer elements (handle) recvcounts - integer array equal to the group size specifying the maximum number of elements that can be received from each processor rdispls - integer array (of length group size). Entry i specifies the displacement (relative to recvbuf at which to place the incom- ing data from process i recvtype - data type of receive buffer elements (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION alltoallv.c 11/14/2001 MPI_Alltoallv(3)","title":"MPI_Alltoallv"},{"location":"Dev/MPI/MPI-Lib/#mpi_attr_delete","text":"MPI_Attr_delete(3) MPI MPI_Attr_delete(3) NAME MPI_Attr_delete - Deletes attribute value associated with a key SYNOPSIS #include \"mpi.h\" int MPI_Attr_delete ( MPI_Comm comm, int keyval ) INPUT PARAMETERS comm - communicator to which attribute is attached (handle) keyval - The key value of the deleted attribute (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - This error class is associated with an error code that indi- cates that an attempt was made to free one of the permanent keys. LOCATION attr_delval.c 11/14/2001 MPI_Attr_delete(3)","title":"MPI_Attr_delete"},{"location":"Dev/MPI/MPI-Lib/#mpi_attr_get","text":"MPI_Attr_get(3) MPI MPI_Attr_get(3) NAME MPI_Attr_get - Retrieves attribute value by key SYNOPSIS #include \"mpi.h\" int MPI_Attr_get ( MPI_Comm comm, int keyval, void *attr_value, int *flag ) INPUT PARAMETERS comm - communicator to which attribute is attached (handle) keyval - key value (integer) OUTPUT PARAMETERS attr_value - attribute value, unless flag = false flag - true if an attribute value was extracted; false if no attribute is associated with the key NOTES Attributes must be extracted from the same language as they were inserted in with MPI_ATTR_PUT . The notes for C and Fortran below explain why. NOTES FOR C Even though the attr_value arguement is declared as void * , it is really the address of a void pointer. See the rationale in the stan- dard for more details. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. The attr_value in Fortran is a pointer to a Fortran integer, not a pointer to a void * . ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_OTHER - Other error; the error code associated with this error indi- cates an attempt to use an invalue keyval. LOCATION attr_getval.c 11/14/2001 MPI_Attr_get(3)","title":"MPI_Attr_get"},{"location":"Dev/MPI/MPI-Lib/#mpi_attr_put","text":"MPI_Attr_put(3) MPI MPI_Attr_put(3) NAME MPI_Attr_put - Stores attribute value associated with a key SYNOPSIS #include \"mpi.h\" int MPI_Attr_put ( MPI_Comm comm, int keyval, void *attr_value ) INPUT PARAMETERS comm - communicator to which attribute will be attached (handle) keyval - key value, as returned by MPI_KEYVAL_CREATE (integer) attribute_val - attribute value NOTES Values of the permanent attributes MPI_TAG_UB , MPI_HOST , MPI_IO , and MPI_WTIME_IS_GLOBAL may not be changed. The type of the attribute value depends on whether C or Fortran is being used. In C, an attribute value is a pointer ( void * ); in For- tran, it is a single integer ( not a pointer, since Fortran has no pointers and there are systems for which a pointer does not fit in an integer (e.g., any > 32 bit address system that uses 64 bits for For- tran DOUBLE PRECISION ). If an attribute is already present, the delete function (specified when the corresponding keyval was created) will be called. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_OTHER - Other error; the error code associated with this error indi- cates an attempt to use an invalue keyval. MPI_ERR_ARG - This error class is associated with an error code that indi- cates that an attempt was made to free one of the permanent keys. SEE ALSO MPI_Attr_get, MPI_Keyval_create, MPI_Attr_delete LOCATION attr_putval.c 11/14/2001 MPI_Attr_put(3)","title":"MPI_Attr_put"},{"location":"Dev/MPI/MPI-Lib/#mpi_barrier","text":"MPI_Barrier(3) MPI MPI_Barrier(3) NAME MPI_Barrier - Blocks until all process have reached this routine. SYNOPSIS #include \"mpi.h\" int MPI_Barrier ( MPI_Comm comm ) INPUT PARAMETERS comm - communicator (handle) NOTES Blocks the caller until all group members have called it; the call returns at any process only after all group members have entered the call. ALGORITHM If the underlying device cannot do better, a tree-like or combine algo- rithm is used to broadcast a message wto all members of the communica- tor. We can modifiy this to use \"blocks\" at a later time (see MPI_Bcast ). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION barrier.c 11/14/2001 MPI_Barrier(3)","title":"MPI_Barrier"},{"location":"Dev/MPI/MPI-Lib/#mpi_bcast","text":"MPI_Bcast(3) MPI MPI_Bcast(3) NAME MPI_Bcast - Broadcasts a message from the process with rank \"root\" to all other processes of the group. SYNOPSIS #include \"mpi.h\" int MPI_Bcast ( void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm ) INPUT/OUTPUT PARAMETERS buffer - starting address of buffer (choice) count - number of entries in buffer (integer) datatype - data type of buffer (handle) root - rank of broadcast root (integer) comm - communicator (handle) ALGORITHM If the underlying device does not take responsibility, this function uses a tree-like algorithm to broadcast the message to blocks of pro- cesses. A linear algorithm is then used to broadcast the message from the first process in a block to all other processes. MPIR_BCAST_BLOCK_SIZE determines the size of blocks. If this is set to 1, then this function is equivalent to using a pure tree algorithm. If it is set to the size of the group or greater, it is a pure linear algorithm. The value should be adjusted to determine the most effi- cient value on different machines. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_ROOT - Invalid root. The root must be specified as a rank in the communicator. Ranks must be between zero and the size of the communicator minus one. LOCATION bcast.c 11/14/2001 MPI_Bcast(3)","title":"MPI_Bcast"},{"location":"Dev/MPI/MPI-Lib/#mpi_bsend_init","text":"MPI_Bsend_init(3) MPI MPI_Bsend_init(3) NAME MPI_Bsend_init - Builds a handle for a buffered send SYNOPSIS #include \"mpi.h\" int MPI_Bsend_init( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements sent (integer) datatype - type of each element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . LOCATION bsend_init.c 12/13/2001 MPI_Bsend_init(3)","title":"MPI_Bsend_init"},{"location":"Dev/MPI/MPI-Lib/#mpi_bsend","text":"MPI_Bsend(3) MPI MPI_Bsend(3) NAME MPI_Bsend - Basic send with user-specified buffering SYNOPSIS #include \"mpi.h\" int MPI_Bsend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (nonnegative integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) NOTES This send is provided as a convenience function; it allows the user to send messages without worring about where they are buffered (because the user must have provided buffer space with MPI_Buffer_attach ). In deciding how much buffer space to allocate, remember that the buffer space is not available for reuse by subsequent MPI_Bsend s unless you are certain that the message has been received (not just that it should have been received). For example, this code does not allocate enough buffer space MPI_Buffer_attach( b, n*sizeof(double) + MPI_BSEND_OVERHEAD ); for (i=0; i<m; i++) { MPI_Bsend( buf, n, MPI_DOUBLE, ... ); } because only enough buffer space is provided for a single send, and the loop may start a second MPI_Bsend before the first is done making use of the buffer. In C, you can force the messages to be delivered by MPI_Buffer_detach( &b, &n ); MPI_Buffer_attach( b, n ); (The MPI_Buffer_detach will not complete until all buffered messages are delivered.) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . SEE ALSO MPI_Buffer_attach, MPI_Ibsend, MPI_Bsend_init LOCATION bsend.c 11/14/2001 MPI_Bsend(3)","title":"MPI_Bsend"},{"location":"Dev/MPI/MPI-Lib/#mpi_buffer_attach","text":"MPI_Buffer_attach(3) MPI MPI_Buffer_attach(3) NAME MPI_Buffer_attach - Attaches a user-defined buffer for sending SYNOPSIS #include \"mpi.h\" int MPI_Buffer_attach( void *buffer, int size ) INPUT PARAMETERS buffer - initial buffer address (choice) size - buffer size, in bytes (integer) NOTES The size given should be the sum of the sizes of all outstanding Bsends that you intend to have, plus a few hundred bytes for each Bsend that you do. For the purposes of calculating size, you should use MPI_Pack_size . In other words, in the code MPI_Buffer_attach( buffer, size ); MPI_Bsend( ..., count=20, datatype=type1, ... ); . . . MPI_Bsend( ..., count=40, datatype=type2, ... ); the value of size in the MPI_Buffer_attach call should be greater than the value computed by MPI_Pack_size( 20, type1, comm, &s1 ); MPI_Pack_size( 40, type2, comm, &s2 ); size = s1 + s2 + 2 * MPI_BSEND_OVERHEAD; The MPI_BSEND_OVERHEAD gives the maximum amount of space that may be used in the buffer for use by the BSEND routines in using the buffer. This value is in mpi.h (for C) and mpif.h (for Fortran). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_INTERN - An internal error has been detected. This is fatal. Please send a bug report to mpi-bugs@mcs.anl.gov . SEE ALSO MPI_Buffer_detach, MPI_Bsend LOCATION bufattach.c 11/14/2001 MPI_Buffer_attach(3)","title":"MPI_Buffer_attach"},{"location":"Dev/MPI/MPI-Lib/#mpi_buffer_detach","text":"MPI_Buffer_detach(3) MPI MPI_Buffer_detach(3) NAME MPI_Buffer_detach - Removes an existing buffer (for use in MPI_Bsend etc) SYNOPSIS #include \"mpi.h\" int MPI_Buffer_detach( void *bufferptr, int *size ) OUTPUT PARAMETERS buffer - initial buffer address (choice) size - buffer size, in bytes (integer) NOTES The reason that MPI_Buffer_detach returns the address and size of the buffer being detached is to allow nested libraries to replace and restore the buffer. For example, consider int size, mysize, idummy; void *ptr, *myptr, *dummy; MPI_Buffer_detach( &ptr, &size ); MPI_Buffer_attach( myptr, mysize ); . . . . . . library code ... . . . MPI_Buffer_detach( &dummy, &idummy ); MPI_Buffer_attach( ptr, size ); This is much like the action of the Unix signal routine and has the same strengths (it is simple) and weaknesses (it only works for nested usages). Note that for this approach to work, MPI_Buffer_detach must return MPI_SUCCESS even when there is no buffer to detach. In that case, it returns a size of zero. The MPI 1.1 standard for MPI_BUFFER_DETACH contains the text The statements made in this section describe the behavior of MPI for buffered-mode sends. When no buffer is currently associated, MPI behaves as if a zero-sized buffer is associated with the process. This could be read as applying only to the various Bsend routines. This implementation takes the position that this applies to MPI_BUFFER_DETACH as well. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. The Fortran binding for this routine is different. Because Fortran does not have pointers, it is impossible to provide a way to use the output of this routine to exchange buffers. In this case, only the size field is set. NOTES FOR C Even though the bufferptr argument is declared as void * , it is really the address of a void pointer. See the rationale in the standard for more details. LOCATION buffree.c 11/14/2001 MPI_Buffer_detach(3)","title":"MPI_Buffer_detach"},{"location":"Dev/MPI/MPI-Lib/#mpi_cancel","text":"MPI_Cancel(3) MPI MPI_Cancel(3) NAME MPI_Cancel - Cancels a communication request SYNOPSIS #include \"mpi.h\" int MPI_Cancel( MPI_Request *request ) INPUT PARAMETER request - communication request (handle) NOTE Cancel has only been implemented for receive requests; it is a no-op for send requests. The primary expected use of MPI_Cancel is in multi- buffering schemes, where speculative MPI_Irecvs are made. When the computation completes, some of these receive requests may remain; using MPI_Cancel allows the user to cancel these unsatisfied requests. Cancelling a send operation is much more difficult, in large part because the send will usually be at least partially complete (the information on the tag, size, and source are usually sent immediately to the destination). As of version 1.2.0, MPICH supports cancelling of sends. Users are advised that cancelling a send, while a local opera- tion (as defined by the MPI standard), is likely to be expensive (usu- ally generating one or more internal messages). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NULL HANDLES The MPI 1.1 specification, in the section on opaque objects, explicitly DISALLOWS FREEING A NULL COMMUNICATOR. THE TEXT FROM THE STANDARD IS A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. Such exception is allowed for handles to request objects in Wait and Test calls (sections Communication Completion and Multiple Completions ). Otherwise, a null handle can only be passed to a function that allocates a new object and returns a reference to it in the handle. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cancel.c 11/14/2001 MPI_Cancel(3)","title":"MPI_Cancel"},{"location":"Dev/MPI/MPI-Lib/#mpi_cart_coords","text":"MPI_Cart_coords(3) MPI MPI_Cart_coords(3) NAME MPI_Cart_coords - Determines process coords in cartesian topology given rank in group SYNOPSIS #include \"mpi.h\" int MPI_Cart_coords ( MPI_Comm comm, int rank, int maxdims, int *coords ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) rank - rank of a process within group of comm (integer) maxdims - length of vector coords in the calling program (integer) OUTPUT PARAMETER coords - integer array (of size ndims ) containing the Cartesian coor- dinates of specified process (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_DIMS - Illegal dimension argument. A dimension argument is null or its length is less than or equal to zero. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_coords.c 3/28/2002 MPI_Cart_coords(3)","title":"MPI_Cart_coords"},{"location":"Dev/MPI/MPI-Lib/#mpi_cart_create","text":"MPI_Cart_create(3) MPI MPI_Cart_create(3) NAME MPI_Cart_create - Makes a new communicator to which topology informa- tion has been attached SYNOPSIS #include \"mpi.h\" int MPI_Cart_create ( MPI_Comm comm_old, int ndims, int *dims, int *periods, int reorder, MPI_Comm *comm_cart ) INPUT PARAMETERS comm_old - input communicator (handle) ndims - number of dimensions of cartesian grid (integer) dims - integer array of size ndims specifying the number of processes in each dimension periods - logical array of size ndims specifying whether the grid is periodic (true) or not (false) in each dimension reorder - ranking may be reordered (true) or not (false) (logical) OUTPUT PARAMETER comm_cart - communicator with new cartesian topology (handle) ALGORITHM We ignore reorder info currently. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_DIMS - Illegal dimension argument. A dimension argument is null or its length is less than or equal to zero. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_create.c 11/14/2001 MPI_Cart_create(3)","title":"MPI_Cart_create"},{"location":"Dev/MPI/MPI-Lib/#mpi_cartdim_get","text":"MPI_Cartdim_get(3) MPI MPI_Cartdim_get(3) NAME MPI_Cartdim_get - Retrieves Cartesian topology information associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Cartdim_get ( MPI_Comm comm, int *ndims ) INPUT PARAMETER comm - communicator with cartesian structure (handle) OUTPUT PARAMETER ndims - number of dimensions of the cartesian structure (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cartdim_get.c 11/14/2001 MPI_Cartdim_get(3)","title":"MPI_Cartdim_get"},{"location":"Dev/MPI/MPI-Lib/#mpi_cart_get","text":"MPI_Cart_get(3) MPI MPI_Cart_get(3) NAME MPI_Cart_get - Retrieves Cartesian topology information associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Cart_get ( MPI_Comm comm, int maxdims, int *dims, int *periods, int *coords ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) maxdims - length of vectors dims , periods , and coords in the calling program (integer) OUTPUT PARAMETERS dims - number of processes for each cartesian dimension (array of integer) periods - periodicity (true/false) for each cartesian dimension (array of logical) coords - coordinates of calling process in cartesian structure (array of integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_get.c 11/14/2001 MPI_Cart_get(3)","title":"MPI_Cart_get"},{"location":"Dev/MPI/MPI-Lib/#mpi_cart_map","text":"MPI_Cart_map(3) MPI MPI_Cart_map(3) NAME MPI_Cart_map - Maps process to Cartesian topology information SYNOPSIS #include \"mpi.h\" int MPI_Cart_map ( MPI_Comm comm_old, int ndims, int *dims, int *periods, int *newrank) INPUT PARAMETERS comm - input communicator (handle) ndims - number of dimensions of Cartesian structure (integer) dims - integer array of size ndims specifying the number of processes in each coordinate direction periods - logical array of size ndims specifying the periodicity speci- fication in each coordinate direction OUTPUT PARAMETER newrank - reordered rank of the calling process; MPI_UNDEFINED if call- ing process does not belong to grid (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_DIMS - Illegal dimension argument. A dimension argument is null or its length is less than or equal to zero. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_map.c 3/28/2002 MPI_Cart_map(3)","title":"MPI_Cart_map"},{"location":"Dev/MPI/MPI-Lib/#mpi_cart_rank","text":"MPI_Cart_rank(3) MPI MPI_Cart_rank(3) NAME MPI_Cart_rank - Determines process rank in communicator given Carte- sian location SYNOPSIS #include \"mpi.h\" int MPI_Cart_rank ( MPI_Comm comm, int *coords, int *rank ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) coords - integer array (of size ndims ) specifying the cartesian coor- dinates of a process OUTPUT PARAMETER rank - rank of specified process (integer) NOTES Out-of-range coordinates are erroneous for non-periodic dimensions. Versions of MPICH before 1.2.2 returned MPI_PROC_NULL for the rank in this case. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_rank.c 11/14/2001 MPI_Cart_rank(3)","title":"MPI_Cart_rank"},{"location":"Dev/MPI/MPI-Lib/#mpi_cart_shift","text":"MPI_Cart_shift(3) MPI MPI_Cart_shift(3) NAME MPI_Cart_shift - Returns the shifted source and destination ranks, given a shift direction and amount SYNOPSIS #include \"mpi.h\" int MPI_Cart_shift ( MPI_Comm comm, int direction, int displ, int *source, int *dest ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) direction - coordinate dimension of shift (integer) disp - displacement (> 0: upwards shift, < 0: downwards shift) (inte- ger) OUTPUT PARAMETERS rank_source - rank of source process (integer) rank_dest - rank of destination process (integer) NOTES The direction argument is in the range [0,n-1] for an n-dimensional Cartesian mesh. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_shift.c 11/14/2001 MPI_Cart_shift(3)","title":"MPI_Cart_shift"},{"location":"Dev/MPI/MPI-Lib/#mpi_cart_sub","text":"MPI_Cart_sub(3) MPI MPI_Cart_sub(3) NAME MPI_Cart_sub - Partitions a communicator into subgroups which form lower-dimensional cartesian subgrids SYNOPSIS #include \"mpi.h\" int MPI_Cart_sub ( MPI_Comm comm, int *remain_dims, MPI_Comm *comm_new ) INPUT PARAMETERS comm - communicator with cartesian structure (handle) remain_dims - the i th entry of remain_dims specifies whether the i th dimension is kept in the subgrid (true) or is dropped (false) (logical vector) OUTPUT PARAMETER newcomm - communicator containing the subgrid that includes the calling process (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION cart_sub.c 11/14/2001 MPI_Cart_sub(3)","title":"MPI_Cart_sub"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_compare","text":"MPI_Comm_compare(3) MPI MPI_Comm_compare(3) NAME MPI_Comm_compare - Compares two communicators SYNOPSIS #include \"mpi.h\" int MPI_Comm_compare ( MPI_Comm comm1, MPI_Comm comm2, int *result) INPUT PARAMETERS comm1 - comm1 (handle) comm2 - comm2 (handle) OUTPUT PARAMETER result - integer which is MPI_IDENT if the contexts and groups are the same, MPI_CONGRUENT if different contexts but identical groups, MPI_SIMILAR if different contexts but similar groups, and MPI_UNEQUAL otherwise USING 'MPI_COMM_NULL' WITH 'MPI_COMM_COMPARE' It is an error to use MPI_COMM_NULL as one of the arguments to MPI_Comm_compare . The relevant sections of the MPI standard are . (2.4.1 Opaque Objects) A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. . (5.4.1. Communicator Accessors) <no text in MPI_COMM_COMPARE allow- ing a null handle> NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION commcompare.c 11/14/2001 MPI_Comm_compare(3)","title":"MPI_Comm_compare"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_create","text":"MPI_Comm_create(3) MPI MPI_Comm_create(3) NAME MPI_Comm_create - Creates a new communicator SYNOPSIS #include \"mpi.h\" int MPI_Comm_create ( MPI_Comm comm, MPI_Group group, MPI_Comm *comm_out ) INPUT PARAMETERS comm - communicator (handle) group - group, which is a subset of the group of comm (handle) OUTPUT PARAMETER comm_out - new communicator (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Comm_free LOCATION comm_create.c 11/14/2001 MPI_Comm_create(3)","title":"MPI_Comm_create"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_dup","text":"MPI_Comm_dup(3) MPI MPI_Comm_dup(3) NAME MPI_Comm_dup - Duplicates an existing communicator with all its cached information SYNOPSIS #include \"mpi.h\" int MPI_Comm_dup ( MPI_Comm comm, MPI_Comm *comm_out ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER newcomm - A new communicator over the same group as comm but with a new context. See notes. (handle) NOTES This routine is used to create a new communicator that has a new commu- nication context but contains the same group of processes as the input communicator. Since all MPI communication is performed within a commu- nicator (specifies as the group of processes plus the context), this routine provides an effective way to create a private communicator for use by a software module or library. In particular, no library routine should use MPI_COMM_WORLD as the communicator; instead, a duplicate of a user-specified communicator should always be used. For more informa- tion, see Using MPI, 2nd edition. Because this routine essentially produces a copy of a communicator, it also copies any attributes that have been defined on the input communi- cator, using the attribute copy function specified by the copy_function argument to MPI_Keyval_create . This is particularly useful for (a) attributes that describe some property of the group associated with the communicator, such as its interconnection topology and (b) communica- tors that are given back to the user; the attibutes in this case can track subsequent MPI_Comm_dup operations on this communicator. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Comm_free, MPI_Keyval_create, MPI_Attr_set, MPI_Attr_delete LOCATION comm_dup.c 11/14/2001 MPI_Comm_dup(3)","title":"MPI_Comm_dup"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_free","text":"MPI_Comm_free(3) MPI MPI_Comm_free(3) NAME MPI_Comm_free - Marks the communicator object for deallocation SYNOPSIS #include \"mpi.h\" int MPI_Comm_free ( MPI_Comm *commp ) INPUT PARAMETER comm - communicator to be destroyed (handle) NULL HANDLES The MPI 1.1 specification, in the section on opaque objects, explicitly DISALLOWS FREEING A NULL COMMUNICATOR. THE TEXT FROM THE STANDARD IS A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. Such exception is allowed for handles to request objects in Wait and Test calls (sections Communication Completion and Multiple Completions ). Otherwise, a null handle can only be passed to a function that allocates a new object and returns a reference to it in the handle. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION comm_free.c 10/31/2002 MPI_Comm_free(3)","title":"MPI_Comm_free"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_group","text":"MPI_Comm_group(3) MPI MPI_Comm_group(3) NAME MPI_Comm_group - Accesses the group associated with given communicator SYNOPSIS #include \"mpi.h\" int MPI_Comm_group ( MPI_Comm comm, MPI_Group *group ) INPUT PARAMETER comm - Communicator OUTPUT PARAMETER group - Group in communicator USING 'MPI_COMM_NULL' WITH 'MPI_COMM_GROUP' It is an error to use MPI_COMM_NULL as one of the arguments to MPI_Comm_group . The relevant sections of the MPI standard are . (2.4.1 Opaque Objects) A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. . (5.3.2. Group Constructors) <no text in MPI_COMM_GROUP allowing a null handle> Previous versions of MPICH allow MPI_COMM_NULL in this function. In the interests of promoting portability of applications, we have changed the behavior of MPI_Comm_group to detect this violation of the MPI standard. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION comm_group.c 11/14/2001 MPI_Comm_group(3)","title":"MPI_Comm_group"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_rank","text":"MPI_Comm_rank(3) MPI MPI_Comm_rank(3) NAME MPI_Comm_rank - Determines the rank of the calling process in the com- municator SYNOPSIS #include \"mpi.h\" int MPI_Comm_rank ( MPI_Comm comm, int *rank ) INPUT PARAMETERS comm - communicator (handle) OUTPUT PARAMETER rank - rank of the calling process in group of comm (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION comm_rank.c 11/14/2001 MPI_Comm_rank(3)","title":"MPI_Comm_rank"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_remote_group","text":"MPI_Comm_remote_group(3) MPI MPI_Comm_remote_group(3) NAME MPI_Comm_remote_group - Accesses the remote group associated with the given inter-communicator SYNOPSIS #include \"mpi.h\" int MPI_Comm_remote_group ( MPI_Comm comm, MPI_Group *group ) INPUT PARAMETER comm - Communicator (must be intercommunicator) OUTPUT PARAMETER group - remote group of communicator NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). LOCATION comm_rgroup.c 11/14/2001 MPI_Comm_remote_group(3)","title":"MPI_Comm_remote_group"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_remote_size","text":"MPI_Comm_remote_size(3) MPI MPI_Comm_remote_size(3) NAME MPI_Comm_remote_size - Determines the size of the remote group asso- ciated with an inter-communictor SYNOPSIS #include \"mpi.h\" int MPI_Comm_remote_size ( MPI_Comm comm, int *size ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER size - number of processes in the group of comm (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION comm_rsize.c 11/14/2001 MPI_Comm_remote_size(3)","title":"MPI_Comm_remote_size"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_size","text":"MPI_Comm_size(3) MPI MPI_Comm_size(3) NAME MPI_Comm_size - Determines the size of the group associated with a communictor SYNOPSIS #include \"mpi.h\" int MPI_Comm_size ( MPI_Comm comm, int *size ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER size - number of processes in the group of comm (integer) NOTES MPI_COMM_NULL is not considered a valid argument to this function. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION comm_size.c 11/14/2001 MPI_Comm_size(3)","title":"MPI_Comm_size"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_split","text":"MPI_Comm_split(3) MPI MPI_Comm_split(3) NAME MPI_Comm_split - Creates new communicators based on colors and keys SYNOPSIS #include \"mpi.h\" int MPI_Comm_split ( MPI_Comm comm, int color, int key, MPI_Comm *comm_out ) INPUT PARAMETERS comm - communicator (handle) color - control of subset assignment (nonnegative integer). Processes with the same color are in the same new communicator key - control of rank assigment (integer) OUTPUT PARAMETER newcomm - new communicator (handle) NOTES The color must be non-negative or MPI_UNDEFINED . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ALGORITHM The current algorithm used has quite a few (read: a lot of) inefficien- cies that can be removed. Here is what we do for now 1) A table is built of colors, and keys (has a next field also). 2) The tables of all processes are merged using MPI_Allreduce . 3) Two contexts are allocated for all the comms to be created. These same two contexts can be used for all created communicators since the communicators will not overlap. 4) If the local process has a color of MPI_UNDEFINED , it can return a NULL comm. 5) The table entries that match the local process color are sorted by key/rank. 6) A group is created from the sorted list and a communicator is created with this group and the previously allocated contexts. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Comm_free LOCATION comm_split.c 8/29/2002 MPI_Comm_split(3)","title":"MPI_Comm_split"},{"location":"Dev/MPI/MPI-Lib/#mpi_comm_test_inter","text":"MPI_Comm_test_inter(3) MPI MPI_Comm_test_inter(3) NAME MPI_Comm_test_inter - Tests to see if a comm is an inter-communicator SYNOPSIS #include \"mpi.h\" int MPI_Comm_test_inter ( MPI_Comm comm, int *flag ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER flag - (logical) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION comm_testic.c 11/14/2001 MPI_Comm_test_inter(3)","title":"MPI_Comm_test_inter"},{"location":"Dev/MPI/MPI-Lib/#mpi_dims_create","text":"MPI_Dims_create(3) MPI MPI_Dims_create(3) NAME MPI_Dims_create - Creates a division of processors in a cartesian grid SYNOPSIS #include \"mpi.h\" int MPI_Dims_create( int nnodes, int ndims, int *dims) INPUT PARAMETERS nnodes - number of nodes in a grid (integer) ndims - number of cartesian dimensions (integer) IN/OUT PARAMETER dims - integer array of size ndims specifying the number of nodes in each dimension NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION dims_create.c 4/24/2002 MPI_Dims_create(3)","title":"MPI_Dims_create"},{"location":"Dev/MPI/MPI-Lib/#mpi_errhandler_create","text":"MPI_Errhandler_create(3) MPI MPI_Errhandler_create(3) NAME MPI_Errhandler_create - Creates an MPI-style errorhandler SYNOPSIS #include \"mpi.h\" int MPI_Errhandler_create( MPI_Handler_function *function, MPI_Errhandler *errhandler) INPUT PARAMETER function - user defined error handling procedure OUTPUT PARAMETER errhandler - MPI error handler (handle) NOTES The MPI Standard states that an implementation may make the output value (errhandler) simply the address of the function. However, the action of MPI_Errhandler_free makes this impossible, since it is required to set the value of the argument to MPI_ERRHANDLER_NULL . In addition, the actual error handler must remain until all communicators that use it are freed. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION errcreate.c 11/14/2001 MPI_Errhandler_create(3)","title":"MPI_Errhandler_create"},{"location":"Dev/MPI/MPI-Lib/#mpi_errhandler_free","text":"MPI_Errhandler_free(3) MPI MPI_Errhandler_free(3) NAME MPI_Errhandler_free - Frees an MPI-style errorhandler SYNOPSIS #include \"mpi.h\" int MPI_Errhandler_free( MPI_Errhandler *errhandler ) INPUT PARAMETER errhandler - MPI error handler (handle). Set to MPI_ERRHANDLER_NULL on exit. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION errfree.c 11/14/2001 MPI_Errhandler_free(3)","title":"MPI_Errhandler_free"},{"location":"Dev/MPI/MPI-Lib/#mpi_errhandler_get","text":"MPI_Errhandler_get(3) MPI MPI_Errhandler_get(3) NAME MPI_Errhandler_get - Gets the error handler for a communicator SYNOPSIS #include \"mpi.h\" int MPI_Errhandler_get( MPI_Comm comm, MPI_Errhandler *errhandler ) INPUT PARAMETER comm - communicator to get the error handler from (handle) OUTPUT PARAMETER errhandler - MPI error handler currently associated with communicator (han- dle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTE ON IMPLEMENTATION The MPI Standard was unclear on whether this routine required the user to call MPI_Errhandler_free once for each call made to this routine in order to free the error handler. After some debate, the MPI Forum added an explicit statement that users are required to call MPI_Errhan- dler_free when the return value from this routine is no longer needed. This behavior is similar to the other MPI routines for getting objects; for example, MPI_Comm_group requires that the user call MPI_Group_free when the group returned by MPI_Comm_group is no longer needed. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION errget.c 11/14/2001 MPI_Errhandler_get(3)","title":"MPI_Errhandler_get"},{"location":"Dev/MPI/MPI-Lib/#mpi_errhandler_set","text":"MPI_Errhandler_set(3) MPI MPI_Errhandler_set(3) NAME MPI_Errhandler_set - Sets the error handler for a communicator SYNOPSIS #include \"mpi.h\" int MPI_Errhandler_set( MPI_Comm comm, MPI_Errhandler errhandler ) INPUT PARAMETERS comm - communicator to set the error handler for (handle) errhandler - new MPI error handler for communicator (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION errset.c 11/14/2001 MPI_Errhandler_set(3)","title":"MPI_Errhandler_set"},{"location":"Dev/MPI/MPI-Lib/#mpi_error_class","text":"MPI_Error_class(3) MPI MPI_Error_class(3) NAME MPI_Error_class - Converts an error code into an error class SYNOPSIS #include \"mpi.h\" int MPI_Error_class( int errorcode, int *errorclass) INPUT PARAMETER errorcode - Error code returned by an MPI routine OUTPUT PARAMETER errorclass - Error class associated with errorcode NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION errclass.c 11/14/2001 MPI_Error_class(3)","title":"MPI_Error_class"},{"location":"Dev/MPI/MPI-Lib/#mpi_error_string","text":"MPI_Error_string(3) MPI MPI_Error_string(3) NAME MPI_Error_string - Return a string for a given error code SYNOPSIS #include \"mpi.h\" int MPI_Error_string( int errorcode, char *string, int *resultlen ) INPUT PARAMETERS errorcode - Error code returned by an MPI routine or an MPI error class OUTPUT PARAMETER string - Text that corresponds to the errorcode resultlen - Length of string Notes: Error codes are the values return by MPI routines (in C) or in the ierr argument (in Fortran). These can be converted into error classes with the routine MPI_Error_class . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION errorstring.c 11/14/2001 MPI_Error_string(3)","title":"MPI_Error_string"},{"location":"Dev/MPI/MPI-Lib/#mpi_finalize","text":"MPI_Finalize(3) MPI MPI_Finalize(3) NAME MPI_Finalize - Terminates MPI execution environment SYNOPSIS #include \"mpi.h\" int MPI_Finalize() NOTES All processes must call this routine before exiting. The number of processes running after this routine is called is undefined; it is best not to perform much more than a return rc after calling MPI_Finalize . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION finalize.c 4/9/2002 MPI_Finalize(3)","title":"MPI_Finalize"},{"location":"Dev/MPI/MPI-Lib/#mpi_gather","text":"MPI_Gather(3) MPI MPI_Gather(3) NAME MPI_Gather - Gathers together values from a group of processes SYNOPSIS #include \"mpi.h\" int MPI_Gather ( void *sendbuf, int sendcnt, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - data type of send buffer elements (handle) recvcount - number of elements for any single receive (integer, signifi- cant only at root) recvtype - data type of recv buffer elements (significant only at root) (handle) root - rank of receiving process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice, significant only at root ) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION gather.c 11/14/2001 MPI_Gather(3)","title":"MPI_Gather"},{"location":"Dev/MPI/MPI-Lib/#mpi_gatherv","text":"MPI_Gatherv(3) MPI MPI_Gatherv(3) NAME MPI_Gatherv - Gathers into specified locations from all processes in a group SYNOPSIS #include \"mpi.h\" int MPI_Gatherv ( void *sendbuf, int sendcnt, MPI_Datatype sendtype, void *recvbuf, int *recvcnts, int *displs, MPI_Datatype recvtype, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - data type of send buffer elements (handle) recvcounts - integer array (of length group size) containing the number of elements that are received from each process (significant only at root ) displs - integer array (of length group size). Entry i specifies the displacement relative to recvbuf at which to place the incoming data from process i (significant only at root) recvtype - data type of recv buffer elements (significant only at root ) (handle) root - rank of receiving process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice, significant only at root ) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION gatherv.c 2/19/2002 MPI_Gatherv(3)","title":"MPI_Gatherv"},{"location":"Dev/MPI/MPI-Lib/#mpi_get_count","text":"MPI_Get_count(3) MPI MPI_Get_count(3) NAME MPI_Get_count - Gets the number of \"top level\" elements SYNOPSIS #include \"mpi.h\" int MPI_Get_count( MPI_Status *status, MPI_Datatype datatype, int *count ) INPUT PARAMETERS status - return status of receive operation (Status) datatype - datatype of each receive buffer element (handle) OUTPUT PARAMETER count - number of received elements (integer) Notes: If the size of the datatype is zero, this routine will return a count of zero. If the amount of data in status is not an exact multiple of the size of datatype (so that count would not be integral), a count of MPI_UNDEFINED is returned instead. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION getcount.c 11/14/2001 MPI_Get_count(3)","title":"MPI_Get_count"},{"location":"Dev/MPI/MPI-Lib/#mpi_get_elements","text":"MPI_Get_elements(3) MPI MPI_Get_elements(3) NAME MPI_Get_elements - Returns the number of basic elements in a datatype SYNOPSIS #include \"mpi.h\" int MPI_Get_elements ( MPI_Status *status, MPI_Datatype datatype, int *elements ) INPUT PARAMETERS status - return status of receive operation (Status) datatype - datatype used by receive operation (handle) OUTPUT PARAMETER count - number of received basic elements (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION getelements.c 11/14/2001 MPI_Get_elements(3)","title":"MPI_Get_elements"},{"location":"Dev/MPI/MPI-Lib/#mpi_get_processor_name","text":"MPI_Get_processor_name(3) MPI MPI_Get_processor_name(3) NAME MPI_Get_processor_name - Gets the name of the processor SYNOPSIS #include \"mpi.h\" int MPI_Get_processor_name( char *name, int *resultlen) OUTPUT PARAMETERS name - A unique specifier for the actual (as opposed to virtual) node. This must be an array of size at least MPI_MAX_PROCES- SOR_NAME . resultlen - Length (in characters) of the name NOTES The name returned should identify a particular piece of hardware; the exact format is implementation defined. This name may or may not be the same as might be returned by gethostname , uname , or sysinfo . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION getpname.c 11/14/2001 MPI_Get_processor_name(3)","title":"MPI_Get_processor_name"},{"location":"Dev/MPI/MPI-Lib/#mpi_get_version","text":"MPI_Get_version(3) MPI MPI_Get_version(3) NAME MPI_Get_version - Gets the version of MPI SYNOPSIS #include \"mpi.h\" int MPI_Get_version( int *version, int *subversion ) OUTPUT PARAMETERS version - Major version of MPI (1 or 2) subversion - Minor version of MPI. NOTES The defined values MPI_VERSION and MPI_SUBVERSION contain the same information. This routine allows you to check that the library matches the version specified in the mpi.h and mpif.h files. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION getversion.c 11/14/2001 MPI_Get_version(3)","title":"MPI_Get_version"},{"location":"Dev/MPI/MPI-Lib/#mpi_graph_create","text":"MPI_Graph_create(3) MPI MPI_Graph_create(3) NAME MPI_Graph_create - Makes a new communicator to which topology informa- tion has been attached SYNOPSIS #include \"mpi.h\" int MPI_Graph_create ( MPI_Comm comm_old, int nnodes, int *index, int *edges, int reorder, MPI_Comm *comm_graph ) INPUT PARAMETERS comm_old - input communicator without topology (handle) nnodes - number of nodes in graph (integer) index - array of integers describing node degrees (see below) edges - array of integers describing graph edges (see below) reorder - ranking may be reordered (true) or not (false) (logical) OUTPUT PARAMETER comm_graph - communicator with graph topology added (handle) ALGORITHM We ignore the reorder info currently. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION graphcreate.c 1/4/2002 MPI_Graph_create(3)","title":"MPI_Graph_create"},{"location":"Dev/MPI/MPI-Lib/#mpi_graphdims_get","text":"MPI_Graphdims_get(3) MPI MPI_Graphdims_get(3) NAME MPI_Graphdims_get - Retrieves graph topology information associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Graphdims_get ( MPI_Comm comm, int *nnodes, int *nedges ) INPUT PARAMETERS comm - communicator for group with graph structure (handle) OUTPUT PARAMETER nnodes - number of nodes in graph (integer) nedges - number of edges in graph (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION graphdimsget.c 11/14/2001 MPI_Graphdims_get(3)","title":"MPI_Graphdims_get"},{"location":"Dev/MPI/MPI-Lib/#mpi_graph_get","text":"MPI_Graph_get(3) MPI MPI_Graph_get(3) NAME MPI_Graph_get - Retrieves graph topology information associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Graph_get ( MPI_Comm comm, int maxindex, int maxedges, int *index, int *edges ) INPUT PARAMETERS comm - communicator with graph structure (handle) maxindex - length of vector index in the calling program (integer) maxedges - length of vector edges in the calling program (integer) OUTPUT PARAMETER index - array of integers containing the graph structure (for details see the definition of MPI_GRAPH_CREATE ) edges - array of integers containing the graph structure NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION graph_get.c 1/4/2002 MPI_Graph_get(3)","title":"MPI_Graph_get"},{"location":"Dev/MPI/MPI-Lib/#mpi_graph_map","text":"MPI_Graph_map(3) MPI MPI_Graph_map(3) NAME MPI_Graph_map - Maps process to graph topology information SYNOPSIS #include \"mpi.h\" int MPI_Graph_map ( MPI_Comm comm_old, int nnodes, int *index, int *edges, int *newrank ) INPUT PARAMETERS comm - input communicator (handle) nnodes - number of graph nodes (integer) index - integer array specifying the graph structure, see MPI_GRAPH_CREATE edges - integer array specifying the graph structure OUTPUT PARAMETER newrank - reordered rank of the calling process; MPI_UNDEFINED if the calling process does not belong to graph (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION graph_map.c 1/4/2002 MPI_Graph_map(3)","title":"MPI_Graph_map"},{"location":"Dev/MPI/MPI-Lib/#mpi_graph_neighbors_count","text":"MPI_Graph_neighbors_count(3) MPI MPI_Graph_neighbors_count(3) NAME MPI_Graph_neighbors_count - Returns the number of neighbors of a node associated with a graph topology SYNOPSIS #include \"mpi.h\" int MPI_Graph_neighbors_count ( MPI_Comm comm, int rank, int *nneighbors ) INPUT PARAMETERS comm - communicator with graph topology (handle) rank - rank of process in group of comm (integer) OUTPUT PARAMETER nneighbors - number of neighbors of specified process (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION graphnbrcnt.c 11/14/2001 MPI_Graph_neighbors_count(3)","title":"MPI_Graph_neighbors_count"},{"location":"Dev/MPI/MPI-Lib/#mpi_graph_neighbors","text":"MPI_Graph_neighbors(3) MPI MPI_Graph_neighbors(3) NAME MPI_Graph_neighbors - Returns the neighbors of a node associated with a graph topology SYNOPSIS #include \"mpi.h\" int MPI_Graph_neighbors ( MPI_Comm comm, int rank, int maxneighbors, int *neighbors ) INPUT PARAMETERS comm - communicator with graph topology (handle) rank - rank of process in group of comm (integer) maxneighbors - size of array neighbors (integer) OUTPUT PARAMETERS neighbors - ranks of processes that are neighbors to specified process (array of integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TOPOLOGY - Invalid topology. Either there is no topology associated with this communicator, or it is not the correct type (e.g., MPI_CART when expecting MPI_GRAPH ). MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION graph_nbr.c 11/14/2001 MPI_Graph_neighbors(3)","title":"MPI_Graph_neighbors"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_compare","text":"MPI_Group_compare(3) MPI MPI_Group_compare(3) NAME MPI_Group_compare - Compares two groups SYNOPSIS #include \"mpi.h\" int MPI_Group_compare ( MPI_Group group1, MPI_Group group2, int *result ) INPUT PARAMETERS group1 - group1 (handle) group2 - group2 (handle) OUTPUT PARAMETER result - integer which is MPI_IDENT if the order and members of the two groups are the same, MPI_SIMILAR if only the members are the same, and MPI_UNEQUAL otherwise NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION groupcompare.c 11/14/2001 MPI_Group_compare(3)","title":"MPI_Group_compare"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_difference","text":"MPI_Group_difference(3) MPI MPI_Group_difference(3) NAME MPI_Group_difference - Makes a group from the difference of two groups SYNOPSIS #include \"mpi.h\" int MPI_Group_difference ( MPI_Group group1, MPI_Group group2, MPI_Group *group_out ) INPUT PARAMETERS group1 - first group (handle) group2 - second group (handle) OUTPUT PARAMETER newgroup - difference group (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Group_free LOCATION group_diff.c 11/14/2001 MPI_Group_difference(3)","title":"MPI_Group_difference"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_excl","text":"MPI_Group_excl(3) MPI MPI_Group_excl(3) NAME MPI_Group_excl - Produces a group by reordering an existing group and taking only unlisted members SYNOPSIS #include \"mpi.h\" int MPI_Group_excl ( MPI_Group group, int n, int *ranks, MPI_Group *newgroup ) INPUT PARAMETERS group - group (handle) n - number of elements in array ranks (integer) ranks - array of integer ranks in group not to appear in newgroup OUTPUT PARAMETER newgroup - new group derived from above, preserving the order defined by group (handle) NOTE Currently, each of the ranks to exclude must be a valid rank in the group and all elements must be distinct or the function is erroneous. This restriction is per the draft. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Group_free LOCATION group_excl.c 11/14/2001 MPI_Group_excl(3)","title":"MPI_Group_excl"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_free","text":"MPI_Group_free(3) MPI MPI_Group_free(3) NAME MPI_Group_free - Frees a group SYNOPSIS #include \"mpi.h\" int MPI_Group_free ( MPI_Group *group ) Input Parameter group - group (handle) NOTES On output, group is set to MPI_GROUP_NULL . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_ARG - This error class is associated with an error code that indi- cates that an attempt was made to free one of the permanent groups. LOCATION group_free.c 11/14/2001 MPI_Group_free(3)","title":"MPI_Group_free"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_incl","text":"MPI_Group_incl(3) MPI MPI_Group_incl(3) NAME MPI_Group_incl - Produces a group by reordering an existing group and taking only listed members SYNOPSIS #include \"mpi.h\" int MPI_Group_incl ( MPI_Group group, int n, int *ranks, MPI_Group *group_out ) INPUT PARAMETERS group - group (handle) n - number of elements in array ranks (and size of newgroup ) (integer) ranks - ranks of processes in group to appear in newgroup (array of integers) OUTPUT PARAMETER newgroup - new group derived from above, in the order defined by ranks (handle) NOTE This implementation does not currently check to see that the list of ranks to ensure that there are no duplicates. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Group_free LOCATION group_incl.c 11/14/2001 MPI_Group_incl(3)","title":"MPI_Group_incl"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_intersection","text":"MPI_Group_intersection(3) MPI MPI_Group_intersection(3) NAME MPI_Group_intersection - Produces a group as the intersection of two existing groups SYNOPSIS #include \"mpi.h\" int MPI_Group_intersection ( MPI_Group group1, MPI_Group group2, MPI_Group *group_out ) INPUT PARAMETERS group1 - first group (handle) group2 - second group (handle) OUTPUT PARAMETER newgroup - intersection group (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Group_free LOCATION group_inter.c 11/14/2001 MPI_Group_intersection(3)","title":"MPI_Group_intersection"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_range_excl","text":"MPI_Group_range_excl(3) MPI MPI_Group_range_excl(3) NAME MPI_Group_range_excl - Produces a group by excluding ranges of pro- cesses from an existing group SYNOPSIS #include \"mpi.h\" int MPI_Group_range_excl ( MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup ) INPUT PARAMETERS group - group (handle) n - number of elements in array ranks (integer) ranges - a one-dimensional array of integer triplets of the form (first rank, last rank, stride), indicating the ranks in group of pro- cesses to be excluded from the output group newgroup . OUTPUT PARAMETER newgroup - new group derived from above, preserving the order in group (handle) NOTE Currently, each of the ranks to exclude must be a valid rank in the group and all elements must be distinct or the function is erroneous. This restriction is per the draft. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO MPI_Group_free LOCATION group_rexcl.c 11/14/2001 MPI_Group_range_excl(3)","title":"MPI_Group_range_excl"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_range_incl","text":"MPI_Group_range_incl(3) MPI MPI_Group_range_incl(3) NAME MPI_Group_range_incl - Creates a new group from ranges of ranks in an existing group SYNOPSIS #include \"mpi.h\" int MPI_Group_range_incl ( MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup ) INPUT PARAMETERS group - group (handle) n - number of triplets in array ranges (integer) ranges - a one-dimensional array of integer triplets, of the form (first rank, last rank, stride) indicating ranks in group or processes to be included in newgroup OUTPUT PARAMETER newgroup - new group derived from above, in the order defined by ranges (handle) NOTE This implementation does not currently check to see that the list of ranges to include are valid ranks in the group. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Group_free LOCATION group_rincl.c 11/14/2001 MPI_Group_range_incl(3)","title":"MPI_Group_range_incl"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_rank","text":"MPI_Group_rank(3) MPI MPI_Group_rank(3) NAME MPI_Group_rank - Returns the rank of this process in the given group SYNOPSIS #include \"mpi.h\" int MPI_Group_rank ( MPI_Group group, int *rank ) INPUT PARAMETERS group - group (handle) OUTPUT PARAMETER rank - rank of the calling process in group, or MPI_UNDEFINED if the process is not a member (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION group_rank.c 11/14/2001 MPI_Group_rank(3)","title":"MPI_Group_rank"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_size","text":"MPI_Group_size(3) MPI MPI_Group_size(3) NAME MPI_Group_size - Returns the size of a group SYNOPSIS #include \"mpi.h\" int MPI_Group_size ( MPI_Group group, int *size ) INPUT PARAMETERS group - group (handle) Output Parameter: size - number of processes in the group (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION group_size.c 11/14/2001 MPI_Group_size(3)","title":"MPI_Group_size"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_translate_ranks","text":"MPI_Group_translate_ranks(3) MPI MPI_Group_translate_ranks(3) NAME MPI_Group_translate_ranks - Translates the ranks of processes in one group to those in another group SYNOPSIS #include \"mpi.h\" int MPI_Group_translate_ranks ( MPI_Group group_a, int n, int *ranks_a, MPI_Group group_b, int *ranks_b ) INPUT PARAMETERS group1 - group1 (handle) n - number of ranks in ranks1 and ranks2 arrays (integer) ranks1 - array of zero or more valid ranks in group1 group2 - group2 (handle) OUTPUT PARAMETER ranks2 - array of corresponding ranks in group2, MPI_UNDEFINED when no correspondence exists. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION group_tranks.c 11/14/2001 MPI_Group_translate_ranks(3)","title":"MPI_Group_translate_ranks"},{"location":"Dev/MPI/MPI-Lib/#mpi_group_union","text":"MPI_Group_union(3) MPI MPI_Group_union(3) NAME MPI_Group_union - Produces a group by combining two groups SYNOPSIS #include \"mpi.h\" int MPI_Group_union ( MPI_Group group1, MPI_Group group2, MPI_Group *group_out ) INPUT PARAMETERS group1 - first group (handle) group2 - second group (handle) OUTPUT PARAMETER newgroup - union group (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_GROUP - Null group passed to function. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Group_free LOCATION group_union.c 11/14/2001 MPI_Group_union(3)","title":"MPI_Group_union"},{"location":"Dev/MPI/MPI-Lib/#mpi_ibsend","text":"MPI_Ibsend(3) MPI MPI_Ibsend(3) NAME MPI_Ibsend - Starts a nonblocking buffered send SYNOPSIS #include \"mpi.h\" int MPI_Ibsend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION ibsend.c 11/14/2001 MPI_Ibsend(3)","title":"MPI_Ibsend"},{"location":"Dev/MPI/MPI-Lib/#mpi_initialized","text":"MPI_Initialized(3) MPI MPI_Initialized(3) NAME MPI_Initialized - Indicates whether MPI_Init has been called. SYNOPSIS #include \"mpi.h\" int MPI_Initialized( int *flag ) OUTPUT PARAMETER flag - Flag is true if MPI_Init has been called and false otherwise. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION initialize.c 11/14/2001 MPI_Initialized(3)","title":"MPI_Initialized"},{"location":"Dev/MPI/MPI-Lib/#mpi_init","text":"MPI_Init(3) MPI MPI_Init(3) NAME MPI_Init - Initialize the MPI execution environment SYNOPSIS #include \"mpi.h\" int MPI_Init(int *argc, char ***argv) INPUT PARAMETERS argc - Pointer to the number of arguments argv - Pointer to the argument vector COMMAND LINE ARGUMENTS MPI specifies no command-line arguments but does allow an MPI implemen- tation to make use of them. -mpiqueue - print out the state of the message queues when MPI_FINALIZE is called. All processors print; the output may be hard to deci- pher. This is intended as a debugging aid. -mpiversion - print out the version of the implementation ( not of MPI), including the arguments that were used with configure. -mpinice nn - Increments the nice value by nn (lowering the priority of the program by nn ). nn must be positive (except for root). Not all systems support this argument; those that do not will ignore it. -mpedbg - Start a debugger in an xterm window if there is an error (either detected by MPI or a normally fatal signal). This works only if MPICH was configured with -mpedbg . CURRENTLY DISABLED. If you have TotalView, -mpichtv or mpirun -tv will give you a better environment anyway. -mpimem - If MPICH was built with -DMPIR_DEBUG_MEM , this checks all malloc and free operations (internal to MPICH) for signs of injury to the memory allocation areas. -mpidb options - Activate various debugging options. Some require that MPICH have been built with special options. These are intended for debugging MPICH, not for debugging user programs. The available options include: mem - Enable dynamic memory tracing of internal MPI objects memall - Generate output of all memory allocation/deallocation ptr - Enable tracing of internal MPI pointer conversions rank n - Limit subsequent -mpidb options to on the process with the specified rank in MPI_COMM_WORLD. A rank of -1 selects all of MPI_COMM_WORLD. ref - Trace use of internal MPI objects reffile filename - Trace use of internal MPI objects with output to the indicated file trace - Trace routine calls NOTES Note that the Fortran binding for this routine has only the error return argument ( MPI_INIT(ierror) ) Because the Fortran and C versions of MPI_Init are different, there is a restriction on who can call MPI_Init . The version (Fortran or C) must match the main program. That is, if the main program is in C, then the C version of MPI_Init must be called. If the main program is in Fortran, the Fortran version must be called. On exit from this routine, all processes will have a copy of the argu- ment list. This is not required by the MPI standard, and truely portable codes should not rely on it. This is provided as a service by this implementation (an MPI implementation is allowed to distribute the command line arguments but is not required to). Command line arguments are not provided to Fortran programs. More pre- cisely, non-standard Fortran routines such as getarg and iargc have undefined behavior in MPI and in this implementation. The MPI standard does not say what a program can do before an MPI_INIT or after an MPI_FINALIZE . In the MPICH implementation, you should do as little as possible. In particular, avoid anything that changes the external state of the program, such as opening files, reading standard input or writing to standard output. SIGNALS USED The MPI standard requires that all signals used be documented. The MPICH implementation itself uses no signals, but some of the software that MPICH relies on may use some signals. The list below is partial and should be independantly checked if you (and any package that you use) depend on particular signals. IBM POE/MPL FOR SP2 SIGHUP, SIGINT, SIGQUIT, SIGFPE, SIGSEGV, SIGPIPE, SIGALRM, SIGTERM, SIGIO -MPEDBG SWITCH SIGQUIT, SIGILL, SIGFPE, SIGBUS, SIGSEGV, SIGSYS MEIKO CS2 SIGUSR2 CH_P4 DEVICE SIGUSR1 The ch_p4 device also catches SIGINT, SIGFPE, SIGBUS, and SIGSEGV; this helps the p4 device (and MPICH) more gracefully abort a failed program. INTEL PARAGON (CH_NX AND NX DEVICE) SIGUSR2 SHARED MEMORY (CH_SHMEM DEVICE) SIGCHLD Note that if you are using software that needs the same signals, you may find that there is no way to use that software with the MPI imple- mentation. The signals that cause the most trouble for applications include SIGIO , SIGALRM , and SIGPIPE . For example, using SIGIO and SIGPIPE may prevent X11 routines from working. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_OTHER - This error class is associated with an error code that indi- cates that an attempt was made to call MPI_INIT a second time. MPI_INIT may only be called once in a program. LOCATION init.c 4/8/2002 MPI_Init(3)","title":"MPI_Init"},{"location":"Dev/MPI/MPI-Lib/#mpi_init_thread","text":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> <title>404 Not Found</title> </head> <body> <p><strong>HTTP 404 - Not Found</strong><p /> The requested URL was not found on this server. </body> </html>","title":"mpi_init_thread"},{"location":"Dev/MPI/MPI-Lib/#mpi_intercomm_create","text":"MPI_Intercomm_create(3) MPI MPI_Intercomm_create(3) NAME MPI_Intercomm_create - Creates an intercommuncator from two intracom- municators SYNOPSIS #include \"mpi.h\" int MPI_Intercomm_create ( MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *comm_out ) INPUT PARAMTERS local_comm - Local (intra)communicator local_leader - Rank in local_comm of leader (often 0) peer_comm - Remote communicator remote_leader - Rank in peer_comm of remote leader (often 0) tag - Message tag to use in constructing intercommunicator; if mul- tiple MPI_Intercomm_creates are being made, they should use dif- ferent tags (more precisely, ensure that the local and remote leaders are using different tags for each MPI_intercomm_create ). OUTPUT PARAMETER comm_out - Created intercommunicator NOTES The MPI 1.1 Standard contains two mutually exclusive comments on the input intracommunicators. One says that their repective groups must be disjoint; the other that the leaders can be the same process. After some discussion by the MPI Forum, it has been decided that the groups must be disjoint. Note that the reason given for this in the standard is not the reason for this choice; rather, the other operations on intercommunicators (like MPI_Intercomm_merge ) do not make sense if the groups are not disjoint. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ALGORITHM 1) Allocate a send context, an inter - coll context, and an intra-coll context 2) Send send_context and lrank_to_grank list from local comm group - if I'm the local_leader. 3) If I'm the local leader, then wait on the posted sends and receives - to complete. Post the receive for the remote group informa- tion and wait for it to complete. 4) Broadcast information received from the remote leader. - . 5) Create the inter_communicator from the information we now have. An inter - communicator ends up with three levels of communicators. The inter-communicator returned to the user, a \"collective\" inter- communicator that can be used for safe communications between local & remote groups, and a collective intra-communicator that can be used to allocate new contexts during the merge and dup operations. For the resulting inter-communicator, comm_out comm_out = inter-communicator comm_out->comm_coll = \"collective\" inter-communicator comm_out->comm_coll->comm_coll = safe collective intra-communicator ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Intercomm_merge, MPI_Comm_free, MPI_Comm_remote_group, MPI_Comm_remote_size LOCATION ic_create.c 11/14/2001 MPI_Intercomm_create(3)","title":"MPI_Intercomm_create"},{"location":"Dev/MPI/MPI-Lib/#mpi_intercomm_merge","text":"MPI_Intercomm_merge(3) MPI MPI_Intercomm_merge(3) NAME MPI_Intercomm_merge - Creates an intracommuncator from an intercommu- nicator SYNOPSIS #include \"mpi.h\" int MPI_Intercomm_merge ( MPI_Comm comm, int high, MPI_Comm *comm_out ) INPUT PARAMETERS comm - Intercommunicator high - Used to order the groups of the two intracommunicators within comm when creating the new communicator. OUTPUT PARAMETER comm_out - Created intracommunicator NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ALGORITHM 1) Allocate two contexts 2) Local and remote group leaders swap high values 3) Determine the high value. 4) Merge the two groups and make the intra-communicator ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Intercomm_create, MPI_Comm_free LOCATION ic_merge.c 11/14/2001 MPI_Intercomm_merge(3)","title":"MPI_Intercomm_merge"},{"location":"Dev/MPI/MPI-Lib/#mpi_iprobe","text":"MPI_Iprobe(3) MPI MPI_Iprobe(3) NAME MPI_Iprobe - Nonblocking test for a message SYNOPSIS #include \"mpi.h\" int MPI_Iprobe( int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status ) INPUT PARAMETERS source - source rank, or MPI_ANY_SOURCE (integer) tag - tag value or MPI_ANY_TAG (integer) comm - communicator (handle) OUTPUT PARAMETER flag - (logical) status - status object (Status) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION iprobe.c 12/7/2004 MPI_Iprobe(3)","title":"MPI_Iprobe"},{"location":"Dev/MPI/MPI-Lib/#mpi_irecv","text":"MPI_Irecv(3) MPI MPI_Irecv(3) NAME MPI_Irecv - Begins a nonblocking receive SYNOPSIS #include \"mpi.h\" int MPI_Irecv( void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of receive buffer (choice) count - number of elements in receive buffer (integer) datatype - datatype of each receive buffer element (handle) source - rank of source (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION irecv.c 11/14/2001 MPI_Irecv(3)","title":"MPI_Irecv"},{"location":"Dev/MPI/MPI-Lib/#mpi_irsend","text":"MPI_Irsend(3) MPI MPI_Irsend(3) NAME MPI_Irsend - Starts a nonblocking ready send SYNOPSIS #include \"mpi.h\" int MPI_Irsend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) Output Parameter: request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION irsend.c 11/14/2001 MPI_Irsend(3)","title":"MPI_Irsend"},{"location":"Dev/MPI/MPI-Lib/#mpi_isend","text":"MPI_Isend(3) MPI MPI_Isend(3) NAME MPI_Isend - Begins a nonblocking send SYNOPSIS #include \"mpi.h\" int MPI_Isend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION isend.c 11/14/2001 MPI_Isend(3)","title":"MPI_Isend"},{"location":"Dev/MPI/MPI-Lib/#mpi_issend","text":"MPI_Issend(3) MPI MPI_Issend(3) NAME MPI_Issend - Starts a nonblocking synchronous send SYNOPSIS #include \"mpi.h\" int MPI_Issend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION issend.c 11/14/2001 MPI_Issend(3)","title":"MPI_Issend"},{"location":"Dev/MPI/MPI-Lib/#mpi_keyval_create","text":"MPI_Keyval_create(3) MPI MPI_Keyval_create(3) NAME MPI_Keyval_create - Generates a new attribute key SYNOPSIS #include \"mpi.h\" int MPI_Keyval_create ( MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn, int *keyval, void *extra_state ) INPUT PARAMETERS copy_fn - Copy callback function for keyval delete_fn - Delete callback function for keyval extra_state - Extra state for callback functions OUTPUT PARAMETER keyval - key value for future access (integer) NOTES Key values are global (available for any and all communicators). There are subtle differences between C and Fortran that require that the copy_fn be written in the same language that MPI_Keyval_create is called from. This should not be a problem for most users; only pro- gramers using both Fortran and C in the same program need to be sure that they follow this rule. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION keyvalcreate.c 11/14/2001 MPI_Keyval_create(3)","title":"MPI_Keyval_create"},{"location":"Dev/MPI/MPI-Lib/#mpi_keyval_free","text":"MPI_Keyval_free(3) MPI MPI_Keyval_free(3) NAME MPI_Keyval_free - Frees attribute key for communicator cache attribute SYNOPSIS #include \"mpi.h\" int MPI_Keyval_free ( int *keyval ) INPUT PARAMETER keyval - Frees the integer key value (integer) NOTE Key values are global (they can be used with any and all communicators) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_ARG - This error class is associated with an error code that indi- cates that an attempt was made to free one of the permanent keys. SEE ALSO MPI_Keyval_create LOCATION keyval_free.c 6/12/2002 MPI_Keyval_free(3)","title":"MPI_Keyval_free"},{"location":"Dev/MPI/MPI-Lib/#mpi_op_create","text":"MPI_Op_create(3) MPI MPI_Op_create(3) NAME MPI_Op_create - Creates a user-defined combination function handle SYNOPSIS #include \"mpi.h\" int MPI_Op_create( MPI_User_function *function, int commute, MPI_Op *op ) INPUT PARAMETERS function - user defined function (function) commute - true if commutative; false otherwise. OUTPUT PARAMETER op - operation (handle) NOTES ON THE USER FUNCTION The calling list for the user function type is typedef void (MPI_User_function) ( void * a, void * b, int * len, MPI_Datatype * ); where the operation is b[i] = a[i] op b[i] , for i=0,...,len-1 . A pointer to the datatype given to the MPI collective computation routine (i.e., MPI_Reduce , MPI_Allreduce , MPI_Scan , or MPI_Reduce_scatter ) is also passed to the user-specified routine. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Op_free LOCATION opcreate.c 11/14/2001 MPI_Op_create(3)","title":"MPI_Op_create"},{"location":"Dev/MPI/MPI-Lib/#mpi_op_free","text":"MPI_Op_free(3) MPI MPI_Op_free(3) NAME MPI_Op_free - Frees a user-defined combination function handle SYNOPSIS #include \"mpi.h\" int MPI_Op_free( MPI_Op *op ) INPUT PARAMETER op - operation (handle) NOTES op is set to MPI_OP_NULL on exit. NULL HANDLES The MPI 1.1 specification, in the section on opaque objects, explicitly DISALLOWS FREEING A NULL COMMUNICATOR. THE TEXT FROM THE STANDARD IS A null handle argument is an erroneous IN argument in MPI calls, unless an exception is explicitly stated in the text that defines the function. Such exception is allowed for handles to request objects in Wait and Test calls (sections Communication Completion and Multiple Completions ). Otherwise, a null handle can only be passed to a function that allocates a new object and returns a reference to it in the handle. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_ARG - Invalid argument; the error code associated with this error indicates an attempt to free an MPI permanent operation (e.g., MPI_SUM ). *N/ /*N MPI_ERR_PERM_KEY MPI_ERR_ARG - Invalid argument; the error code associated with this error indicates an attempt to free or chnage an MPI permanent keyval (e.g., MPI_TAG_UB ). *N/ /*N MPI_ERR_UNKNOWN MPI_ERR_UNKNOWN - Unknown error. You should never see this. If you do, report it to mpi-bugs@mcs.anl.gov . SEE ALSO MPI_Op_create LOCATION opfree.c 11/14/2001 MPI_Op_free(3)","title":"MPI_Op_free"},{"location":"Dev/MPI/MPI-Lib/#mpi_pack","text":"MPI_Pack(3) MPI MPI_Pack(3) NAME MPI_Pack - Packs a datatype into contiguous memory SYNOPSIS #include \"mpi.h\" int MPI_Pack ( void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outcount, int *position, MPI_Comm comm ) INPUT PARAMETERS inbuf - input buffer start (choice) incount - number of input data items (integer) datatype - datatype of each input data item (handle) outcount - output buffer size, in bytes (integer) position - current position in buffer, in bytes (integer) comm - communicator for packed message (handle) OUTPUT PARAMETER outbuf - output buffer start (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO MPI_Unpack, MPI_Pack_size LOCATION pack.c 11/14/2001 MPI_Pack(3)","title":"MPI_Pack"},{"location":"Dev/MPI/MPI-Lib/#mpi_pack_size","text":"MPI_Pack_size(3) MPI MPI_Pack_size(3) NAME MPI_Pack_size - Returns the upper bound on the amount of space needed to pack a message SYNOPSIS #include \"mpi.h\" int MPI_Pack_size ( int incount, MPI_Datatype datatype, MPI_Comm comm, int *size ) INPUT PARAMETERS incount - count argument to packing call (integer) datatype - datatype argument to packing call (handle) comm - communicator argument to packing call (handle) OUTPUT PARAMETER size - upper bound on size of packed message, in bytes (integer) NOTES The MPI standard document describes this in terms of MPI_Pack , but it applies to both MPI_Pack and MPI_Unpack . That is, the value size is the maximum that is needed by either MPI_Pack or MPI_Unpack . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION pack_size.c 11/14/2001 MPI_Pack_size(3)","title":"MPI_Pack_size"},{"location":"Dev/MPI/MPI-Lib/#mpi_pcontrol","text":"MPI_Pcontrol(3) MPI MPI_Pcontrol(3) NAME MPI_Pcontrol - Controls profiling SYNOPSIS #include \"mpi.h\" int MPI_Pcontrol( int level ) INPUT PARAMETERS level - Profiling level NOTES This routine provides a common interface for profiling control. The interpretation of level and any other arguments is left to the profil- ing library. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION pcontrol.c 11/14/2001 MPI_Pcontrol(3)","title":"MPI_Pcontrol"},{"location":"Dev/MPI/MPI-Lib/#mpi_probe","text":"MPI_Probe(3) MPI MPI_Probe(3) NAME MPI_Probe - Blocking test for a message SYNOPSIS #include \"mpi.h\" int MPI_Probe( int source, int tag, MPI_Comm comm, MPI_Status *status ) INPUT PARAMETERS source - source rank, or MPI_ANY_SOURCE (integer) tag - tag value or MPI_ANY_TAG (integer) comm - communicator (handle) OUTPUT PARAMETER status - status object (Status) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION probe.c 12/7/2004 MPI_Probe(3)","title":"MPI_Probe"},{"location":"Dev/MPI/MPI-Lib/#mpi_recv_init","text":"MPI_Recv_init(3) MPI MPI_Recv_init(3) NAME MPI_Recv_init - Builds a handle for a receive SYNOPSIS #include \"mpi.h\" int MPI_Recv_init( void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of receive buffer (choice) count - number of elements received (integer) datatype - type of each element (handle) source - rank of source or MPI_ANY_SOURCE (integer) tag - message tag or MPI_ANY_TAG (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Start, MPI_Request_free LOCATION create_recv.c 11/14/2001 MPI_Recv_init(3)","title":"MPI_Recv_init"},{"location":"Dev/MPI/MPI-Lib/#mpi_recv","text":"MPI_Recv(3) MPI MPI_Recv(3) NAME MPI_Recv - Basic receive SYNOPSIS #include \"mpi.h\" int MPI_Recv( void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status ) OUTPUT PARAMETERS buf - initial address of receive buffer (choice) status - status object (Status) INPUT PARAMETERS count - maximum number of elements in receive buffer (integer) datatype - datatype of each receive buffer element (handle) source - rank of source (integer) tag - message tag (integer) comm - communicator (handle) NOTES The count argument indicates the maximum length of a message; the actual number can be determined with MPI_Get_count . NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION recv.c 2/24/2004 MPI_Recv(3)","title":"MPI_Recv"},{"location":"Dev/MPI/MPI-Lib/#mpi_reduce","text":"MPI_Reduce(3) MPI MPI_Reduce(3) NAME MPI_Reduce - Reduces values on all processes to a single value SYNOPSIS #include \"mpi.h\" int MPI_Reduce ( void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - address of send buffer (choice) count - number of elements in send buffer (integer) datatype - data type of elements of send buffer (handle) op - reduce operation (handle) root - rank of root process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice, significant only at root ) ALGORITHM This implementation currently uses a simple tree algorithm. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_BUFFER - This error class is associcated with an error code that indi- cates that two buffer arguments are aliased ; that is, the describe overlapping storage (often the exact same storage). This is prohibited in MPI (because it is prohibited by the For- tran standard, and rather than have a separate case for C and Fortran, the MPI Forum adopted the more restrictive requirements of Fortran). LOCATION reduce.c 2/19/2002 MPI_Reduce(3)","title":"MPI_Reduce"},{"location":"Dev/MPI/MPI-Lib/#mpi_reduce_scatter","text":"MPI_Reduce_scatter(3) MPI MPI_Reduce_scatter(3) NAME MPI_Reduce_scatter - Combines values and scatters the results SYNOPSIS #include \"mpi.h\" int MPI_Reduce_scatter ( void *sendbuf, void *recvbuf, int *recvcnts, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) recvcounts - integer array specifying the number of elements in result dis- tributed to each process. Array must be identical on all call- ing processes. datatype - data type of elements of input buffer (handle) op - operation (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - starting address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_OP - Invalid operation. MPI operations (objects of type MPI_Op ) must either be one of the predefined operations (e.g., MPI_SUM ) or created with MPI_Op_create . MPI_ERR_BUFFER - This error class is associcated with an error code that indi- cates that two buffer arguments are aliased ; that is, the describe overlapping storage (often the exact same storage). This is prohibited in MPI (because it is prohibited by the For- tran standard, and rather than have a separate case for C and Fortran, the MPI Forum adopted the more restrictive requirements of Fortran). LOCATION red_scat.c 11/14/2001 MPI_Reduce_scatter(3)","title":"MPI_Reduce_scatter"},{"location":"Dev/MPI/MPI-Lib/#mpi_request_free","text":"MPI_Request_free(3) MPI MPI_Request_free(3) NAME MPI_Request_free - Frees a communication request object SYNOPSIS #include \"mpi.h\" int MPI_Request_free( MPI_Request *request ) INPUT PARAMETER request - communication request (handle) NOTES This routine is normally used to free persistent requests created with either MPI_Recv_init or MPI_Send_init and friends. However, it can be used to free a request created with MPI_Irecv or MPI_Isend and friends; in that case the use can not use the test/wait routines on the request. It is permitted to free an active request. However, once freed, you can not use the request in a wait or test routine (e.g., MPI_Wait ). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO also: MPI_Isend, MPI_Irecv, MPI_Issend, MPI_Ibsend, MPI_Irsend, MPI_Recv_init, MPI_Send_init, MPI_Ssend_init, MPI_Rsend_init, MPI_Wait, MPI_Test, MPI_Waitall, MPI_Waitany, MPI_Waitsome, MPI_Testall, MPI_Tes- tany, MPI_Testsome LOCATION commreq_free.c 11/14/2001 MPI_Request_free(3)","title":"MPI_Request_free"},{"location":"Dev/MPI/MPI-Lib/#mpi_rsend_init","text":"MPI_Rsend_init(3) MPI MPI_Rsend_init(3) NAME MPI_Rsend_init - Builds a handle for a ready send SYNOPSIS #include \"mpi.h\" int MPI_Rsend_init( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements sent (integer) datatype - type of each element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Start, MPI_Request_free, MPI_Send_init LOCATION rsend_init.c 11/14/2001 MPI_Rsend_init(3)","title":"MPI_Rsend_init"},{"location":"Dev/MPI/MPI-Lib/#mpi_rsend","text":"MPI_Rsend(3) MPI MPI_Rsend(3) NAME MPI_Rsend - Basic ready send SYNOPSIS #include \"mpi.h\" int MPI_Rsend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (nonnegative integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION rsend.c 11/14/2001 MPI_Rsend(3)","title":"MPI_Rsend"},{"location":"Dev/MPI/MPI-Lib/#mpi_scan","text":"MPI_Scan(3) MPI MPI_Scan(3) NAME MPI_Scan - Computes the scan (partial reductions) of data on a collec- tion of processes SYNOPSIS #include \"mpi.h\" int MPI_Scan ( void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm ) INPUT PARAMETERS sendbuf - starting address of send buffer (choice) count - number of elements in input buffer (integer) datatype - data type of elements of input buffer (handle) op - operation (handle) comm - communicator (handle) OUTPUT PARAMETER recvbuf - starting address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. NOTES ON COLLECTIVE OPERATIONS The reduction functions ( MPI_Op ) do not return an error value. As a result, if the functions detect an error, all they can do is either call MPI_Abort or silently skip the problem. Thus, if you change the error handler from MPI_ERRORS_ARE_FATAL to something else, for example, MPI_ERRORS_RETURN , then no error may be indicated. The reason for this is the performance problems in ensuring that all collective routines return the same error value. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. MPI_ERR_BUFFER - This error class is associcated with an error code that indi- cates that two buffer arguments are aliased ; that is, the describe overlapping storage (often the exact same storage). This is prohibited in MPI (because it is prohibited by the For- tran standard, and rather than have a separate case for C and Fortran, the MPI Forum adopted the more restrictive requirements of Fortran). LOCATION scan.c 11/14/2001 MPI_Scan(3)","title":"MPI_Scan"},{"location":"Dev/MPI/MPI-Lib/#mpi_scatter","text":"MPI_Scatter(3) MPI MPI_Scatter(3) NAME MPI_Scatter - Sends data from one task to all other tasks in a group SYNOPSIS #include \"mpi.h\" int MPI_Scatter ( void *sendbuf, int sendcnt, MPI_Datatype sendtype, void *recvbuf, int recvcnt, MPI_Datatype recvtype, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - address of send buffer (choice, significant only at root ) sendcount - number of elements sent to each process (integer, significant only at root ) sendtype - data type of send buffer elements (significant only at root ) (handle) recvcount - number of elements in receive buffer (integer) recvtype - data type of receive buffer elements (handle) root - rank of sending process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION scatter.c 4/5/2004 MPI_Scatter(3)","title":"MPI_Scatter"},{"location":"Dev/MPI/MPI-Lib/#mpi_scatterv","text":"MPI_Scatterv(3) MPI MPI_Scatterv(3) NAME MPI_Scatterv - Scatters a buffer in parts to all tasks in a group SYNOPSIS #include \"mpi.h\" int MPI_Scatterv ( void *sendbuf, int *sendcnts, int *displs, MPI_Datatype sendtype, void *recvbuf, int recvcnt, MPI_Datatype recvtype, int root, MPI_Comm comm ) INPUT PARAMETERS sendbuf - address of send buffer (choice, significant only at root ) sendcounts - integer array (of length group size) specifying the number of elements to send to each processor displs - integer array (of length group size). Entry i specifies the displacement (relative to sendbuf from which to take the outgo- ing data to process i sendtype - data type of send buffer elements (handle) recvcount - number of elements in receive buffer (integer) recvtype - data type of receive buffer elements (handle) root - rank of sending process (integer) comm - communicator (handle) OUTPUT PARAMETER recvbuf - address of receive buffer (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_BUFFER - Invalid buffer pointer. Usually a null buffer where one is not valid. LOCATION scatterv.c 2/21/2002 MPI_Scatterv(3)","title":"MPI_Scatterv"},{"location":"Dev/MPI/MPI-Lib/#mpi_send_init","text":"MPI_Send_init(3) MPI MPI_Send_init(3) NAME MPI_Send_init - Builds a handle for a standard send SYNOPSIS #include \"mpi.h\" int MPI_Send_init( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements sent (integer) datatype - type of each element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) Output Parameter: request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. SEE ALSO MPI_Start, MPI_Startall, MPI_Request_free LOCATION create_send.c 11/14/2001 MPI_Send_init(3)","title":"MPI_Send_init"},{"location":"Dev/MPI/MPI-Lib/#mpi_send","text":"MPI_Send(3) MPI MPI_Send(3) NAME MPI_Send - Performs a basic send SYNOPSIS #include \"mpi.h\" int MPI_Send( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (nonnegative integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) NOTES This routine may block until the message is received. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . SEE ALSO MPI_Isend, MPI_Bsend LOCATION send.c 11/14/2001 MPI_Send(3)","title":"MPI_Send"},{"location":"Dev/MPI/MPI-Lib/#mpi_sendrecv","text":"MPI_Sendrecv(3) MPI MPI_Sendrecv(3) NAME MPI_Sendrecv - Sends and receives a message SYNOPSIS #include \"mpi.h\" int MPI_Sendrecv( void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status ) INPUT PARAMETERS sendbuf - initial address of send buffer (choice) sendcount - number of elements in send buffer (integer) sendtype - type of elements in send buffer (handle) dest - rank of destination (integer) sendtag - send tag (integer) recvcount - number of elements in receive buffer (integer) recvtype - type of elements in receive buffer (handle) source - rank of source (integer) recvtag - receive tag (integer) comm - communicator (handle) OUTPUT PARAMETERS recvbuf - initial address of receive buffer (choice) status - status object (Status). This refers to the receive operation. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION sendrecv.c 11/14/2001 MPI_Sendrecv(3)","title":"MPI_Sendrecv"},{"location":"Dev/MPI/MPI-Lib/#mpi_sendrecv_replace","text":"MPI_Sendrecv_replace(3) MPI MPI_Sendrecv_replace(3) NAME MPI_Sendrecv_replace - Sends and receives using a single buffer SYNOPSIS #include \"mpi.h\" int MPI_Sendrecv_replace( void *buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status ) INPUT PARAMETERS count - number of elements in send and receive buffer (integer) datatype - type of elements in send and receive buffer (handle) dest - rank of destination (integer) sendtag - send message tag (integer) source - rank of source (integer) recvtag - receive message tag (integer) comm - communicator (handle) OUTPUT PARAMETERS buf - initial address of send and receive buffer (choice) status - status object (Status) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . MPI_ERR_TRUNCATE - Message truncated on receive. The buffer size specified was too small for the received message. This is a recoverable error in the MPICH implementation. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION sendrecv_rep.c 11/14/2001 MPI_Sendrecv_replace(3)","title":"MPI_Sendrecv_replace"},{"location":"Dev/MPI/MPI-Lib/#mpi_ssend_init","text":"MPI_Ssend_init(3) MPI MPI_Ssend_init(3) NAME MPI_Ssend_init - Builds a handle for a synchronous send SYNOPSIS #include \"mpi.h\" int MPI_Ssend_init( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements sent (integer) datatype - type of each element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) OUTPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION ssend_init.c 11/14/2001 MPI_Ssend_init(3)","title":"MPI_Ssend_init"},{"location":"Dev/MPI/MPI-Lib/#mpi_ssend","text":"MPI_Ssend(3) MPI MPI_Ssend(3) NAME MPI_Ssend - Basic synchronous send SYNOPSIS #include \"mpi.h\" int MPI_Ssend( void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm ) INPUT PARAMETERS buf - initial address of send buffer (choice) count - number of elements in send buffer (nonnegative integer) datatype - datatype of each send buffer element (handle) dest - rank of destination (integer) tag - message tag (integer) comm - communicator (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_TAG - Invalid tag argument. Tags must be non-negative; tags in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_TAG . The largest tag value is available through the the attribute MPI_TAG_UB . MPI_ERR_RANK - Invalid source or destination rank. Ranks must be between zero and the size of the communicator minus one; ranks in a receive ( MPI_Recv , MPI_Irecv , MPI_Sendrecv , etc.) may also be MPI_ANY_SOURCE . LOCATION ssend.c 11/14/2001 MPI_Ssend(3)","title":"MPI_Ssend"},{"location":"Dev/MPI/MPI-Lib/#mpi_startall","text":"MPI_Startall(3) MPI MPI_Startall(3) NAME MPI_Startall - Starts a collection of requests SYNOPSIS #include \"mpi.h\" int MPI_Startall( int count, MPI_Request array_of_requests[] ) INPUT PARAMETERS count - list length (integer) array_of_requests - array of requests (array of handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION startall.c 11/14/2001 MPI_Startall(3)","title":"MPI_Startall"},{"location":"Dev/MPI/MPI-Lib/#mpi_start","text":"MPI_Start(3) MPI MPI_Start(3) NAME MPI_Start - Initiates a communication with a persistent request handle SYNOPSIS #include \"mpi.h\" int MPI_Start( MPI_Request *request) INPUT PARAMETER request - communication request (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. LOCATION start.c 11/14/2001 MPI_Start(3)","title":"MPI_Start"},{"location":"Dev/MPI/MPI-Lib/#mpi_testall","text":"MPI_Testall(3) MPI MPI_Testall(3) NAME MPI_Testall - Tests for the completion of all previously initiated communications SYNOPSIS #include \"mpi.h\" int MPI_Testall( int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[] ) INPUT PARAMETERS count - lists length (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS flag - (logical) array_of_statuses - array of status objects (array of Status). May be MPI_STA- TUSES_IGNORE . NOTES flag is true only if all requests have completed. Otherwise, flag is false and neither the array_of_requests nor the array_of_statuses is modified. NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_IN_STATUS - The actual error value is in the MPI_Status argument. This error class is returned only from the multiple-completion routines ( MPI_Testall , MPI_Testany , MPI_Testsome , MPI_Wait- all , MPI_Waitany , and MPI_Waitsome ). The field MPI_ERROR in the status argument contains the error value or MPI_SUCCESS (no error and complete) or MPI_ERR_PENDING to indicate that the request has not completed. The MPI Standard does not specify what the result of the multiple completion routines is when an error occurs. For example, in an MPI_WAITALL , does the routine wait for all requests to either fail or complete, or does it return immediately (with the MPI definition of immediately, which means independent of actions of other MPI processes)? MPICH has chosen to make the return immediate (alternately, local in MPI terms), and to use the error class MPI_ERR_PENDING (introduced in MPI 1.1) to indicate which requests have not com- pleted. In most cases, only one request with an error will be detected in each call to an MPI routine that tests multiple requests. The requests that have not been processed (because an error occured in one of the requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING . LOCATION testall.c 2/19/2003 MPI_Testall(3)","title":"MPI_Testall"},{"location":"Dev/MPI/MPI-Lib/#mpi_testany","text":"MPI_Testany(3) MPI MPI_Testany(3) NAME MPI_Testany - Tests for completion of any previdously initiated com- munication SYNOPSIS #include \"mpi.h\" int MPI_Testany( int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status ) INPUT PARAMETERS count - list length (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS index - index of operation that completed, or MPI_UNDEFINED if none completed (integer) flag - true if one of the operations is complete (logical) status - status object (Status). May be MPI_STATUS_IGNORE . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. LOCATION testany.c 1/9/2003 MPI_Testany(3)","title":"MPI_Testany"},{"location":"Dev/MPI/MPI-Lib/#mpi_test_cancelled","text":"MPI_Test_cancelled(3) MPI MPI_Test_cancelled(3) NAME MPI_Test_cancelled - Tests to see if a request was cancelled SYNOPSIS #include \"mpi.h\" int MPI_Test_cancelled( MPI_Status *status, int *flag) INPUT PARAMETER status - status object (Status) OUTPUT PARAMETER flag - (logical) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION testcancel.c 11/14/2001 MPI_Test_cancelled(3)","title":"MPI_Test_cancelled"},{"location":"Dev/MPI/MPI-Lib/#mpi_test","text":"MPI_Test(3) MPI MPI_Test(3) NAME MPI_Test - Tests for the completion of a send or receive SYNOPSIS #include \"mpi.h\" int MPI_Test ( MPI_Request *request, int *flag, MPI_Status *status) INPUT PARAMETER request - communication request (handle) OUTPUT PARAMETER flag - true if operation completed (logical) status - status object (Status). May be MPI_STATUS_IGNORE . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION test.c 1/9/2003 MPI_Test(3)","title":"MPI_Test"},{"location":"Dev/MPI/MPI-Lib/#mpi_testsome","text":"MPI_Testsome(3) MPI MPI_Testsome(3) NAME MPI_Testsome - Tests for some given communications to complete SYNOPSIS #include \"mpi.h\" int MPI_Testsome( int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[] ) INPUT PARAMETERS incount - length of array_of_requests (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS outcount - number of completed requests (integer) array_of_indices - array of indices of operations that completed (array of inte- gers) array_of_statuses - array of status objects for operations that completed (array of Status). May be MPI_STATUSES_IGNORE . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_IN_STATUS - The actual error value is in the MPI_Status argument. This error class is returned only from the multiple-completion routines ( MPI_Testall , MPI_Testany , MPI_Testsome , MPI_Wait- all , MPI_Waitany , and MPI_Waitsome ). The field MPI_ERROR in the status argument contains the error value or MPI_SUCCESS (no error and complete) or MPI_ERR_PENDING to indicate that the request has not completed. The MPI Standard does not specify what the result of the multiple completion routines is when an error occurs. For example, in an MPI_WAITALL , does the routine wait for all requests to either fail or complete, or does it return immediately (with the MPI definition of immediately, which means independent of actions of other MPI processes)? MPICH has chosen to make the return immediate (alternately, local in MPI terms), and to use the error class MPI_ERR_PENDING (introduced in MPI 1.1) to indicate which requests have not com- pleted. In most cases, only one request with an error will be detected in each call to an MPI routine that tests multiple requests. The requests that have not been processed (because an error occured in one of the requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING . LOCATION testsome.c 1/9/2003 MPI_Testsome(3)","title":"MPI_Testsome"},{"location":"Dev/MPI/MPI-Lib/#mpi_topo_test","text":"MPI_Topo_test(3) MPI MPI_Topo_test(3) NAME MPI_Topo_test - Determines the type of topology (if any) associated with a communicator SYNOPSIS #include \"mpi.h\" int MPI_Topo_test ( MPI_Comm comm, int *top_type ) INPUT PARAMETER comm - communicator (handle) OUTPUT PARAMETER top_type - topology type of communicator comm (choice). NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO MPI_Graph_create, MPI_Cart_create LOCATION topo_test.c 11/14/2001 MPI_Topo_test(3)","title":"MPI_Topo_test"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_commit","text":"MPI_Type_commit(3) MPI MPI_Type_commit(3) NAME MPI_Type_commit - Commits the datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_commit ( MPI_Datatype *datatype ) INPUT PARAMETER datatype - datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION type_commit.c 11/14/2001 MPI_Type_commit(3)","title":"MPI_Type_commit"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_contiguous","text":"MPI_Type_contiguous(3) MPI MPI_Type_contiguous(3) NAME MPI_Type_contiguous - Creates a contiguous datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_contiguous( int count, MPI_Datatype old_type, MPI_Datatype *newtype) INPUT PARAMETERS count - replication count (nonnegative integer) oldtype - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION type_contig.c 11/14/2001 MPI_Type_contiguous(3)","title":"MPI_Type_contiguous"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_extent","text":"MPI_Type_extent(3) MPI MPI_Type_extent(3) NAME MPI_Type_extent - Returns the extent of a datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_extent( MPI_Datatype datatype, MPI_Aint *extent ) INPUT PARAMETERS datatype - datatype (handle) OUTPUT PARAMETER extent - datatype extent (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). LOCATION type_extent.c 11/14/2001 MPI_Type_extent(3)","title":"MPI_Type_extent"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_free","text":"MPI_Type_free(3) MPI MPI_Type_free(3) NAME MPI_Type_free - Frees the datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_free ( MPI_Datatype *datatype ) INPUT PARAMETER datatype - datatype that is freed (handle) PREDEFINED TYPES The MPI standard states that (in Opaque Objects) MPI provides certain predefined opaque objects and predefined, static handles to these objects. Such objects may not be destroyed. Thus, it is an error to free a predefined datatype. The same section makes it clear that it is an error to free a null datatype. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_free.c 11/14/2001 MPI_Type_free(3)","title":"MPI_Type_free"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_hindexed","text":"MPI_Type_hindexed(3) MPI MPI_Type_hindexed(3) NAME MPI_Type_hindexed - Creates an indexed datatype with offsets in bytes SYNOPSIS #include \"mpi.h\" int MPI_Type_hindexed( int count, int blocklens[], MPI_Aint indices[], MPI_Datatype old_type, MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks -- also number of entries in indices and blocklens blocklens - number of elements in each block (array of nonnegative inte- gers) indices - byte displacement of each block (array of MPI_Aint) old_type - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. Also see the discussion for MPI_Type_indexed about the indices in For- tran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_hind.c 4/7/2003 MPI_Type_hindexed(3)","title":"MPI_Type_hindexed"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_hvector","text":"MPI_Type_hvector(3) MPI MPI_Type_hvector(3) NAME MPI_Type_hvector - Creates a vector (strided) datatype with offset in bytes SYNOPSIS #include \"mpi.h\" int MPI_Type_hvector( int count, int blocklen, MPI_Aint stride, MPI_Datatype old_type, MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks (nonnegative integer) blocklength - number of elements in each block (nonnegative integer) stride - number of bytes between start of each block (integer) old_type - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION type_hvec.c 11/14/2001 MPI_Type_hvector(3)","title":"MPI_Type_hvector"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_indexed","text":"MPI_Type_indexed(3) MPI MPI_Type_indexed(3) NAME MPI_Type_indexed - Creates an indexed datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_indexed( int count, int blocklens[], int indices[], MPI_Datatype old_type, MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks -- also number of entries in indices and blocklens blocklens - number of elements in each block (array of nonnegative inte- gers) indices - displacement of each block in multiples of old_type (array of integers) old_type - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. The indices are displacements, and are based on a zero origin. A com- mon error is to do something like to following integer a(100) integer blens(10), indices(10) do i=1,10 blens(i) = 1 10 indices(i) = 1 + (i-1)*10 call MPI_TYPE_INDEXED(10,blens,indices,MPI_INTEGER,newtype,ierr) call MPI_TYPE_COMMIT(newtype,ierr) call MPI_SEND(a,1,newtype,...) expecting this to send a(1),a(11),... because the indices have values 1,11,... . Because these are displacements from the beginning of a , it actually sends a(1+1),a(1+11),... . If you wish to consider the displacements as indices into a Fortran array, consider declaring the Fortran array with a zero origin integer a(0:99) ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION type_ind.c 11/14/2001 MPI_Type_indexed(3)","title":"MPI_Type_indexed"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_lb","text":"MPI_Type_lb(3) MPI MPI_Type_lb(3) NAME MPI_Type_lb - Returns the lower-bound of a datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_lb ( MPI_Datatype datatype, MPI_Aint *displacement ) INPUT PARAMETERS datatype - datatype (handle) OUTPUT PARAMETER displacement - displacement of lower bound from origin, in bytes (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_lb.c 11/14/2001 MPI_Type_lb(3)","title":"MPI_Type_lb"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_size","text":"MPI_Type_size(3) MPI MPI_Type_size(3) NAME MPI_Type_size - Return the number of bytes occupied by entries in the datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_size ( MPI_Datatype datatype, int *size ) INPUT PARAMETERS datatype - datatype (handle) OUTPUT PARAMETER size - datatype size (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_size.c 11/14/2001 MPI_Type_size(3)","title":"MPI_Type_size"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_struct","text":"MPI_Type_struct(3) MPI MPI_Type_struct(3) NAME MPI_Type_struct - Creates a struct datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_struct( int count, int blocklens[], MPI_Aint indices[], MPI_Datatype old_types[], MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks (integer) -- also number of entries in arrays array_of_types , array_of_displacements and array_of_block- lengths blocklens - number of elements in each block (array) indices - byte displacement of each block (array) old_types - type of elements in each block (array of handles to datatype objects) OUTPUT PARAMETER newtype - new datatype (handle) NOTES If an upperbound is set explicitly by using the MPI datatype MPI_UB , the corresponding index must be positive. The MPI standard originally made vague statements about padding and alignment; this was intended to allow the simple definition of struc- tures that could be sent with a count greater than one. For example, struct { int a; char b; } foo; may have sizeof(foo) > sizeof(int) + sizeof(char) ; for example, sizeof(foo) == 2*sizeof(int) . The initial version of the MPI standard defined the extent of a datatype as including an epsilon that would have allowed an implementation to make the extent an MPI datatype for this structure equal to 2*sizeof(int) . However, since different systems might define different paddings, there was much discussion by the MPI Forum about what was the correct value of epsilon, and one suggestion was to define epsilon as zero. This would have been the best thing to do in MPI 1.0, particularly since the MPI_UB type allows the user to easily set the end of the structure. Unfortunately, this change did not make it into the final document. Currently, this routine does not add any padding, since the amount of padding needed is determined by the compiler that the user is using to build their code, not the compiler used to construct the MPI library. A later version of MPICH may provide for some natural choices of padding (e.g., multiple of the size of the largest basic member), but users are advised to never depend on this, even with vendor MPI imple- mentations. Instead, if you define a structure datatype and wish to send or receive multiple items, you should explicitly include an MPI_UB entry as the last member of the structure. For example, the following code can be used for the structure foo blen[0] = 1; indices[0] = 0; oldtypes[0] = MPI_INT; blen[1] = 1; indices[1] = &foo.b - &foo; oldtypes[1] = MPI_CHAR; blen[2] = 1; indices[2] = sizeof(foo); oldtypes[2] = MPI_UB; MPI_Type_struct( 3, blen, indices, oldtypes, &newtype ); NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_INTERN - This error is returned when some part of the MPICH implementa- tion is unable to acquire memory. LOCATION type_struct.c 7/12/2002 MPI_Type_struct(3)","title":"MPI_Type_struct"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_ub","text":"MPI_Type_ub(3) MPI MPI_Type_ub(3) NAME MPI_Type_ub - Returns the upper bound of a datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_ub ( MPI_Datatype datatype, MPI_Aint *displacement ) INPUT PARAMETERS datatype - datatype (handle) OUTPUT PARAMETER displacement - displacement of upper bound from origin, in bytes (integer) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION type_ub.c 11/14/2001 MPI_Type_ub(3)","title":"MPI_Type_ub"},{"location":"Dev/MPI/MPI-Lib/#mpi_type_vector","text":"MPI_Type_vector(3) MPI MPI_Type_vector(3) NAME MPI_Type_vector - Creates a vector (strided) datatype SYNOPSIS #include \"mpi.h\" int MPI_Type_vector( int count, int blocklen, int stride, MPI_Datatype old_type, MPI_Datatype *newtype ) INPUT PARAMETERS count - number of blocks (nonnegative integer) blocklength - number of elements in each block (nonnegative integer) stride - number of elements between start of each block (integer) oldtype - old datatype (handle) OUTPUT PARAMETER newtype - new datatype (handle) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. LOCATION type_vec.c 11/14/2001 MPI_Type_vector(3)","title":"MPI_Type_vector"},{"location":"Dev/MPI/MPI-Lib/#mpi_unpack","text":"MPI_Unpack(3) MPI MPI_Unpack(3) NAME MPI_Unpack - Unpack a datatype into contiguous memory SYNOPSIS #include \"mpi.h\" int MPI_Unpack ( void *inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm ) INPUT PARAMETERS inbuf - input buffer start (choice) insize - size of input buffer, in bytes (integer) position - current position in bytes (integer) outcount - number of items to be unpacked (integer) datatype - datatype of each output data item (handle) comm - communicator for packed message (handle) OUTPUT PARAMETER outbuf - output buffer start (choice) NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_COMM - Invalid communicator. A common error is to use a null commu- nicator in a call (not even allowed in MPI_Comm_rank ). MPI_ERR_COUNT - Invalid count argument. Count arguments must be non-negative; a count of zero is often valid. MPI_ERR_TYPE - Invalid datatype argument. May be an uncommitted MPI_Datatype (see MPI_Type_commit ). MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). SEE ALSO MPI_Pack, MPI_Pack_size LOCATION unpack.c 11/14/2001 MPI_Unpack(3)","title":"MPI_Unpack"},{"location":"Dev/MPI/MPI-Lib/#mpi_waitall","text":"MPI_Waitall(3) MPI MPI_Waitall(3) NAME MPI_Waitall - Waits for all given communications to complete SYNOPSIS #include \"mpi.h\" int MPI_Waitall( int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[] ) INPUT PARAMETERS count - lists length (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETER array_of_statuses - array of status objects (array of Status). May be MPI_STA- TUSES_IGNORE NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_IN_STATUS - The actual error value is in the MPI_Status argument. This error class is returned only from the multiple-completion rou- tines ( MPI_Testall , MPI_Testany , MPI_Testsome , MPI_Waitall , MPI_Waitany , and MPI_Waitsome ). The field MPI_ERROR in the status argument contains the error value or MPI_SUCCESS (no error and complete) or MPI_ERR_PENDING to indicate that the request has not completed. The MPI Standard does not specify what the result of the multiple completion routines is when an error occurs. For example, in an MPI_WAITALL , does the routine wait for all requests to either fail or complete, or does it return immediately (with the MPI definition of immediately, which means independent of actions of other MPI processes)? MPICH has chosen to make the return immediate (alternately, local in MPI terms), and to use the error class MPI_ERR_PENDING (introduced in MPI 1.1) to indicate which requests have not com- pleted. In most cases, only one request with an error will be detected in each call to an MPI routine that tests multiple requests. The requests that have not been processed (because an error occured in one of the requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING . MPI_ERR_PENDING - Pending request (not an error). See MPI_ERR_IN_STATUS . This value indicates that the request is not complete nor has a encountered a detected error. LOCATION waitall.c 2/24/2004 MPI_Waitall(3)","title":"MPI_Waitall"},{"location":"Dev/MPI/MPI-Lib/#mpi_waitany","text":"MPI_Waitany(3) MPI MPI_Waitany(3) NAME MPI_Waitany - Waits for any specified send or receive to complete SYNOPSIS #include \"mpi.h\" int MPI_Waitany( int count, MPI_Request array_of_requests[], int *index, MPI_Status *status ) INPUT PARAMETERS count - list length (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS index - index of handle for operation that completed (integer). In the range 0 to count-1 . In Fortran, the range is 1 to count . status - status object (Status). May be MPI_STATUS_IGNORE . NOTES If all of the requests are MPI_REQUEST_NULL , then index is returned as MPI_UNDEFINED , and status is returned as an empty status. NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION waitany.c 1/9/2003 MPI_Waitany(3)","title":"MPI_Waitany"},{"location":"Dev/MPI/MPI-Lib/#mpi_wait","text":"MPI_Wait(3) MPI MPI_Wait(3) NAME MPI_Wait - Waits for an MPI send or receive to complete SYNOPSIS #include \"mpi.h\" int MPI_Wait ( MPI_Request *request, MPI_Status *status) INPUT PARAMETER request - request (handle) OUTPUT PARAMETER status - status object (Status) . May be MPI_STATUS_IGNORE . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). LOCATION wait.c 1/9/2003 MPI_Wait(3)","title":"MPI_Wait"},{"location":"Dev/MPI/MPI-Lib/#mpi_waitsome","text":"MPI_Waitsome(3) MPI MPI_Waitsome(3) NAME MPI_Waitsome - Waits for some given communications to complete SYNOPSIS #include \"mpi.h\" int MPI_Waitsome( int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[] ) INPUT PARAMETERS incount - length of array_of_requests (integer) array_of_requests - array of requests (array of handles) OUTPUT PARAMETERS outcount - number of completed requests (integer) array_of_indices - array of indices of operations that completed (array of inte- gers) array_of_statuses - array of status objects for operations that completed (array of Status). May be MPI_STATUSES_IGNORE . NOTES The array of indicies are in the range 0 to incount - 1 for C and in the range 1 to incount for Fortran. Null requests are ignored; if all requests are null, then the routine returns with outcount set to MPI_UNDEFINED . NOTE ON STATUS FOR SEND OPERATIONS For send operations, the only use of status is for MPI_Test_cancelled or in the case that there is an error, in which case the MPI_ERROR field of status will be set. NOTES FOR FORTRAN All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK ) have an additional argument ierr at the end of the argument list. ierr is an integer and has the same meaning as the return value of the routine in C. In Fortran, MPI routines are subroutines, and are invoked with the call statement. All MPI objects (e.g., MPI_Datatype , MPI_Comm ) are of type INTEGER in Fortran. ERRORS All MPI routines (except MPI_Wtime and MPI_Wtick ) return an error value; C routines as the value of the function and Fortran routines in the last argument. Before the value is returned, the current MPI error handler is called. By default, this error handler aborts the MPI job. The error handler may be changed with MPI_Errhandler_set ; the prede- fined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarentee that an MPI program can continue past an error. MPI_SUCCESS - No error; MPI routine completed successfully. MPI_ERR_REQUEST - Invalid MPI_Request . Either null or, in the case of a MPI_Start or MPI_Startall , not a persistent request. MPI_ERR_ARG - Invalid argument. Some argument is invalid and is not identi- fied by a specific error class (e.g., MPI_ERR_RANK ). MPI_ERR_IN_STATUS - The actual error value is in the MPI_Status argument. This error class is returned only from the multiple-completion rou- tines ( MPI_Testall , MPI_Testany , MPI_Testsome , MPI_Waitall , MPI_Waitany , and MPI_Waitsome ). The field MPI_ERROR in the status argument contains the error value or MPI_SUCCESS (no error and complete) or MPI_ERR_PENDING to indicate that the request has not completed. The MPI Standard does not specify what the result of the multiple completion routines is when an error occurs. For example, in an MPI_WAITALL , does the routine wait for all requests to either fail or complete, or does it return immediately (with the MPI definition of immediately, which means independent of actions of other MPI processes)? MPICH has chosen to make the return immediate (alternately, local in MPI terms), and to use the error class MPI_ERR_PENDING (introduced in MPI 1.1) to indicate which requests have not com- pleted. In most cases, only one request with an error will be detected in each call to an MPI routine that tests multiple requests. The requests that have not been processed (because an error occured in one of the requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING . LOCATION waitsome.c 1/9/2003 MPI_Waitsome(3)","title":"MPI_Waitsome"},{"location":"Dev/MPI/MPI-Lib/#mpi_wtick","text":"MPI_Wtick(3) MPI MPI_Wtick(3) NAME MPI_Wtick - Returns the resolution of MPI_Wtime SYNOPSIS #include \"mpi.h\" double MPI_Wtick() RETURN VALUE Time in seconds of the resolution of MPI_Wtime . NOTES FOR FORTRAN This is a function, declared as DOUBLE PRECISION MPI_WTICK() in For- tran. LOCATION wtick.c 8/20/2004 MPI_Wtick(3)","title":"MPI_Wtick"},{"location":"Dev/MPI/MPI-Lib/#mpi_wtime","text":"MPI_Wtime(3) MPI MPI_Wtime(3) NAME MPI_Wtime - Returns an elapsed time on the calling processor SYNOPSIS #include \"mpi.h\" double MPI_Wtime() RETURN VALUE Time in seconds since an arbitrary time in the past. NOTES This is intended to be a high-resolution, elapsed (or wall) clock. See MPI_WTICK to determine the resolution of MPI_WTIME . If the attribute MPI_WTIME_IS_GLOBAL is defined and true, then the value is synchronized across all processes in MPI_COMM_WORLD . NOTES FOR FORTRAN This is a function, declared as DOUBLE PRECISION MPI_WTIME() in For- tran. SEE ALSO also: MPI_Wtick, MPI_Attr_get LOCATION wtime.c 11/14/2001 MPI_Wtime(3)","title":"MPI_Wtime"},{"location":"Dev/Markdown/Markdown/","text":"Generate MD file from baunch of man files for file in *.txt; do echo \"### $file\" >> result.md; echo '```' >> result.md; cat $file >> result.md; echo '```' >> result.md; echo >> result.md; done","title":"Markdown"},{"location":"Dev/Markdown/Markdown/#generate-md-file-from-baunch-of-man-files","text":"for file in *.txt; do echo \"### $file\" >> result.md; echo '```' >> result.md; cat $file >> result.md; echo '```' >> result.md; echo >> result.md; done","title":"Generate MD file from baunch of man files"},{"location":"Dev/Perl/Perl_one-liners/","text":"Useful One-Line Scripts for Perl FILE SPACING Double space a file perl -pe '$\\=\"\\n\"' perl -pe 'BEGIN { $\\=\"\\n\" }' perl -pe '$_ .= \"\\n\"' perl -pe 's/$/\\n/' perl -nE 'say' Double space a file, except the blank lines perl -pe '$_ .= \"\\n\" unless /^$/' perl -pe '$_ .= \"\\n\" if /\\S/' Triple space a file perl -pe '$\\=\"\\n\\n\"' perl -pe '$_.=\"\\n\\n\"' N-space a file perl -pe '$_.=\"\\n\"x7' Add a blank line before every line perl -pe 's//\\n/' Remove all blank lines perl -ne 'print unless /^$/' perl -lne 'print if length' perl -ne 'print if /\\S/' Remove all consecutive blank lines, leaving just one perl -00 -pe '' perl -00pe0 Compress/expand all blank lines into N consecutive ones perl -00 -pe '$_.=\"\\n\"x4' Fold a file so that every set of 10 lines becomes one tab-separated line perl -lpe '$\\ = $. % 10 ? \"\\t\" : \"\\n\"' LINE NUMBERING Number all lines in a file perl -pe '$_ = \"$. $_\"' Number only non-empty lines in a file perl -pe '$_ = ++$a.\" $_\" if /./' Number and print only non-empty lines in a file (drop empty lines) perl -ne 'print ++$a.\" $_\" if /./' Number all lines but print line numbers only non-empty lines perl -pe '$_ = \"$. $_\" if /./' Number only lines that match a pattern, print others unmodified perl -pe '$_ = ++$a.\" $_\" if /regex/' Number and print only lines that match a pattern perl -ne 'print ++$a.\" $_\" if /regex/' Number all lines, but print line numbers only for lines that match a pattern perl -pe '$_ = \"$. $_\" if /regex/' Number all lines in a file using a custom format (emulate cat -n) perl -ne 'printf \"%-5d %s\", $., $_' Print the total number of lines in a file (emulate wc -l) perl -lne 'END { print $. }' perl -le 'print $n=()=<>' perl -le 'print scalar(()=<>)' perl -le 'print scalar(@foo=<>)' perl -ne '}{print $.' perl -nE '}{say $.' Print the number of non-empty lines in a file perl -le 'print scalar(grep{/./}<>)' perl -le 'print ~~grep{/./}<>' perl -le 'print~~grep/./,<>' perl -E 'say~~grep/./,<>' Print the number of empty lines in a file perl -lne '$a++ if /^$/; END {print $a+0}' perl -le 'print scalar(grep{/^$/}<>)' perl -le 'print ~~grep{/^$/}<>' perl -E 'say~~grep{/^$/}<>' Print the number of lines in a file that match a pattern (emulate grep -c) perl -lne '$a++ if /regex/; END {print $a+0}' perl -nE '$a++ if /regex/; END {say $a+0}' CALCULATIONS Check if a number is a prime perl -lne '(1x$_) !~ /^1?$|^(11+?)\\1+$/ && print \"$_ is prime\"' Print the sum of all the fields on a line perl -MList::Util=sum -alne 'print sum @F' Print the sum of all the fields on all lines perl -MList::Util=sum -alne 'push @S,@F; END { print sum @S }' perl -MList::Util=sum -alne '$s += sum @F; END { print $s }' Shuffle all fields on a line perl -MList::Util=shuffle -alne 'print \"@{[shuffle @F]}\"' perl -MList::Util=shuffle -alne 'print join \" \", shuffle @F' Find the minimum element on a line perl -MList::Util=min -alne 'print min @F' Find the minimum element over all the lines perl -MList::Util=min -alne '@M = (@M, @F); END { print min @M }' perl -MList::Util=min -alne '$min = min @F; $rmin = $min unless defined $rmin && $min > $rmin; END { print $rmin }' Find the maximum element on a line perl -MList::Util=max -alne 'print max @F' Find the maximum element over all the lines perl -MList::Util=max -alne '@M = (@M, @F); END { print max @M }' Replace each field with its absolute value perl -alne 'print \"@{[map { abs } @F]}\"' Find the total number of fields (words) on each line perl -alne 'print scalar @F' Print the total number of fields (words) on each line followed by the line perl -alne 'print scalar @F, \" $_\"' Find the total number of fields (words) on all lines perl -alne '$t += @F; END { print $t}' Print the total number of fields that match a pattern perl -alne 'map { /regex/ && $t++ } @F; END { print $t }' perl -alne '$t += /regex/ for @F; END { print $t }' perl -alne '$t += grep /regex/, @F; END { print $t }' Print the total number of lines that match a pattern perl -lne '/regex/ && $t++; END { print $t }' Print the number PI to n decimal places perl -Mbignum=bpi -le 'print bpi(n)' Print the number PI to 39 decimal places perl -Mbignum=PI -le 'print PI' Print the number E to n decimal places perl -Mbignum=bexp -le 'print bexp(1,n+1)' Print the number E to 39 decimal places perl -Mbignum=e -le 'print e' Print UNIX time (seconds since Jan 1, 1970, 00:00:00 UTC) perl -le 'print time' Print GMT (Greenwich Mean Time) and local computer time perl -le 'print scalar gmtime' perl -le 'print scalar localtime' Print local computer time in H:M:S format perl -le 'print join \":\", (localtime)[2,1,0]' Print yesterday's date perl -MPOSIX -le '@now = localtime; $now[3] -= 1; print scalar localtime mktime @now' Print date 14 months, 9 days and 7 seconds ago perl -MPOSIX -le '@now = localtime; $now[0] -= 7; $now[4] -= 14; $now[7] -= 9; print scalar localtime mktime @now' Prepend timestamps to stdout (GMT, localtime) tail -f logfile | perl -ne 'print scalar gmtime,\" \",$_' tail -f logfile | perl -ne 'print scalar localtime,\" \",$_' Calculate factorial of 5 perl -MMath::BigInt -le 'print Math::BigInt->new(5)->bfac()' perl -le '$f = 1; $f *= $_ for 1..5; print $f' Calculate greatest common divisor (GCM) perl -MMath::BigInt=bgcd -le 'print bgcd(@list_of_numbers)' Calculate GCM of numbers 20 and 35 using Euclid's algorithm perl -le '$n = 20; $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $m' Calculate least common multiple (LCM) of numbers 35, 20 and 8 perl -MMath::BigInt=blcm -le 'print blcm(35,20,8)' Calculate LCM of 20 and 35 using Euclid's formula: n*m/gcd(n,m) perl -le '$a = $n = 20; $b = $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $a*$b/$m' Generate 10 random numbers between 5 and 15 (excluding 15) perl -le '$n=10; $min=5; $max=15; $, = \" \"; print map { int(rand($max-$min))+$min } 1..$n' Find and print all permutations of a list perl -MAlgorithm::Permute -le '$l = [1,2,3,4,5]; $p = Algorithm::Permute->new($l); print @r while @r = $p->next' Generate the power set perl -MList::PowerSet=powerset -le '@l = (1,2,3,4,5); for (@{powerset(@l)}) { print \"@$_\" }' Convert an IP address to unsigned integer perl -le '$i=3; $u += ($_<<8*$i--) for \"127.0.0.1\" =~ /(\\d+)/g; print $u' perl -le '$ip=\"127.0.0.1\"; $ip =~ s/(\\d+)\\.?/sprintf(\"%02x\", $1)/ge; print hex($ip)' perl -le 'print unpack(\"N\", 127.0.0.1)' perl -MSocket -le 'print unpack(\"N\", inet_aton(\"127.0.0.1\"))' Convert an unsigned integer to an IP address perl -MSocket -le 'print inet_ntoa(pack(\"N\", 2130706433))' perl -le '$ip = 2130706433; print join \".\", map { (($ip>>8*($_))&0xFF) } reverse 0..3' perl -le '$ip = 2130706433; $, = \".\"; print map { (($ip>>8*($_))&0xFF) } reverse 0..3' STRING CREATION AND ARRAY CREATION Generate and print the alphabet perl -le 'print a..z' perl -le 'print (\"a\"..\"z\")' perl -le '$, = \",\"; print (\"a\"..\"z\")' perl -le 'print join \",\", (\"a\"..\"z\")' Generate and print all the strings from \"a\" to \"zz\" perl -le 'print (\"a\"..\"zz\")' perl -le 'print \"aa\"..\"zz\"' Create a hex lookup table @hex = (0..9, \"a\"..\"f\") Convert a decimal number to hex using @hex lookup table perl -le '$num = 255; @hex = (0..9, \"a\"..\"f\"); while ($num) { $s = $hex[($num%16)&15].$s; $num = int $num/16 } print $s' perl -le '$hex = sprintf(\"%x\", 255); print $hex' perl -le '$num = \"ff\"; print hex $num' Generate a random 8 character password perl -le 'print map { (\"a\"..\"z\")[rand 26] } 1..8' perl -le 'print map { (\"a\"..\"z\", 0..9)[rand 36] } 1..8' Create a string of specific length perl -le 'print \"a\"x50' Create a repeated list of elements perl -le '@list = (1,2)x20; print \"@list\"' Create an array from a string @months = split ' ', \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\" @months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/ Create a string from an array @stuff = (\"hello\", 0..9, \"world\"); $string = join '-', @stuff Find the numeric values for characters in the string perl -le 'print join \", \", map { ord } split //, \"hello world\"' Convert a list of numeric ASCII values into a string perl -le '@ascii = (99, 111, 100, 105, 110, 103); print pack(\"C*\", @ascii)' perl -le '@ascii = (99, 111, 100, 105, 110, 103); print map { chr } @ascii' Generate an array with odd numbers from 1 to 100 perl -le '@odd = grep {$_ % 2 == 1} 1..100; print \"@odd\"' perl -le '@odd = grep { $_ & 1 } 1..100; print \"@odd\"' Generate an array with even numbers from 1 to 100 perl -le '@even = grep {$_ % 2 == 0} 1..100; print \"@even\"' Find the length of the string perl -le 'print length \"one-liners are great\"' Find the number of elements in an array perl -le '@array = (\"a\"..\"z\"); print scalar @array' perl -le '@array = (\"a\"..\"z\"); print $#array + 1' TEXT CONVERSION AND SUBSTITUTION ROT13 a string 'y/A-Za-z/N-ZA-Mn-za-m/' ROT 13 a file perl -lpe 'y/A-Za-z/N-ZA-Mn-za-m/' file Base64 encode a string perl -MMIME::Base64 -e 'print encode_base64(\"string\")' perl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file Base64 decode a string perl -MMIME::Base64 -le 'print decode_base64(\"base64string\")' perl -MMIME::Base64 -ne 'print decode_base64($_)' file URL-escape a string perl -MURI::Escape -le 'print uri_escape($string)' URL-unescape a string perl -MURI::Escape -le 'print uri_unescape($string)' HTML-encode a string perl -MHTML::Entities -le 'print encode_entities($string)' HTML-decode a string perl -MHTML::Entities -le 'print decode_entities($string)' Convert all text to uppercase perl -nle 'print uc' perl -ple '$_=uc' perl -nle 'print \"\\U$_\"' Convert all text to lowercase perl -nle 'print lc' perl -ple '$_=lc' perl -nle 'print \"\\L$_\"' Uppercase only the first word of each line perl -nle 'print ucfirst lc' perl -nle 'print \"\\u\\L$_\"' Invert the letter case perl -ple 'y/A-Za-z/a-zA-Z/' Camel case each line perl -ple 's/(\\w+)/\\u$1/g' perl -ple 's/(?<!['])(\\w+)/\\u\\1/g' Strip leading whitespace (spaces, tabs) from the beginning of each line perl -ple 's/^[ \\t]+//' perl -ple 's/^\\s+//' Strip trailing whitespace (space, tabs) from the end of each line perl -ple 's/[ \\t]+$//' Strip whitespace from the beginning and end of each line perl -ple 's/^[ \\t]+|[ \\t]+$//g' Convert UNIX newlines to DOS/Windows newlines perl -pe 's|\\n|\\r\\n|' Convert DOS/Windows newlines to UNIX newlines perl -pe 's|\\r\\n|\\n|' Convert UNIX newlines to Mac newlines perl -pe 's|\\n|\\r|' Substitute (find and replace) \"foo\" with \"bar\" on each line perl -pe 's/foo/bar/' Substitute (find and replace) all \"foo\"s with \"bar\" on each line perl -pe 's/foo/bar/g' Substitute (find and replace) \"foo\" with \"bar\" on lines that match \"baz\" perl -pe '/baz/ && s/foo/bar/' Binary patch a file (find and replace a given array of bytes as hex numbers) perl -pi -e 's/\\x89\\xD8\\x48\\x8B/\\x90\\x90\\x48\\x8B/g' file SELECTIVE PRINTING AND DELETING OF CERTAIN LINES Print the first line of a file (emulate head -1) perl -ne 'print; exit' Print the first 10 lines of a file (emulate head -10) perl -ne 'print if $. <= 10' perl -ne '$. <= 10 && print' perl -ne 'print if 1..10' Print the last line of a file (emulate tail -1) perl -ne '$last = $_; END { print $last }' perl -ne 'print if eof' Print the last 10 lines of a file (emulate tail -10) perl -ne 'push @a, $_; @a = @a[@a-10..$#a]; END { print @a }' Print only lines that match a regular expression perl -ne '/regex/ && print' Print only lines that do not match a regular expression perl -ne '!/regex/ && print' Print the line before a line that matches a regular expression perl -ne '/regex/ && $last && print $last; $last = $_' Print the line after a line that matches a regular expression perl -ne 'if ($p) { print; $p = 0 } $p++ if /regex/' Print lines that match regex AAA and regex BBB in any order perl -ne '/AAA/ && /BBB/ && print' Print lines that don't match match regexes AAA and BBB perl -ne '!/AAA/ && !/BBB/ && print' Print lines that match regex AAA followed by regex BBB followed by CCC perl -ne '/AAA.*BBB.*CCC/ && print' Print lines that are 80 chars or longer perl -ne 'print if length >= 80' Print lines that are less than 80 chars in length perl -ne 'print if length < 80' Print only line 13 perl -ne '$. == 13 && print && exit' Print all lines except line 27 perl -ne '$. != 27 && print' perl -ne 'print if $. != 27' Print only lines 13, 19 and 67 perl -ne 'print if $. == 13 || $. == 19 || $. == 67' perl -ne 'print if int($.) ~~ (13, 19, 67)' Print all lines between two regexes (including lines that match regex) perl -ne 'print if /regex1/../regex2/' Print all lines from line 17 to line 30 perl -ne 'print if $. >= 17 && $. <= 30' perl -ne 'print if int($.) ~~ (17..30)' perl -ne 'print if grep { $_ == $. } 17..30' Print the longest line perl -ne '$l = $_ if length($_) > length($l); END { print $l }' Print the shortest line perl -ne '$s = $_ if $. == 1; $s = $_ if length($_) < length($s); END { print $s }' Print all lines that contain a number perl -ne 'print if /\\d/' Find all lines that contain only a number perl -ne 'print if /^\\d+$/' Print all lines that contain only characters perl -ne 'print if /^[[:alpha:]]+$/ Print every second line perl -ne 'print if $. % 2' Print every second line, starting the second line perl -ne 'print if $. % 2 == 0' Print all lines that repeat perl -ne 'print if ++$a{$_} == 2' Print all unique lines perl -ne 'print unless $a{$_}++' Print the first field (word) of every line (emulate cut -f 1 -d ' ') perl -alne 'print $F[0]' HANDY REGULAR EXPRESSIONS Match something that looks like an IP address /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/ /^(\\d{1,3}\\.){3}\\d{1,3}$/ Test if a number is in range 0-255 /^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/ Match an IP address my $ip_part = qr|([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|; if ($ip =~ /^($ip_part\\.){3}$ip_part$/) { say \"valid ip\"; } Check if the string looks like an email address /\\S+@\\S+\\.\\S+/ Check if the string is a decimal number /^\\d+$/ /^[+-]?\\d+$/ /^[+-]?\\d+\\.?\\d*$/ Check if the string is a hexadecimal number /^0x[0-9a-f]+$/i Check if the string is an octal number /^0[0-7]+$/ Check if the string is binary /^[01]+$/ Check if a word appears twice in the string /(word).*\\1/ Increase all numbers by one in the string $str =~ s/(\\d+)/$1+1/ge Extract HTTP User-Agent string from the HTTP headers /^User-Agent: (.+)$/ Match printable ASCII characters /[ -~]/ Match unprintable ASCII characters /[^ -~]/ Match text between two HTML tags m|<strong>([^<]*)</strong>| m|<strong>(.*?)</strong>| Replace all tags with $html =~ s|<(/)?b>|<$1strong>|g Extract all matches from a regular expression my @matches = $text =~ /regex/g; PERL TRICKS Print the version of a Perl module perl -MModule -le 'print $Module::VERSION' perl -MLWP::UserAgent -le 'print $LWP::UserAgent::VERSION' CREDITS * Andy Lester http://www.petdance.com * Shlomi Fish http://www.shlomifish.org * Madars Virza http://www.madars.org * caffecaldo https://github.com/caffecaldo * Kirk Kimmel https://github.com/kimmel * avar https://github.com/avar * rent0n","title":"Perl one liners"},{"location":"Dev/Perl/Perl_one-liners/#useful-one-line-scripts-for-perl","text":"","title":"Useful One-Line Scripts for Perl"},{"location":"Dev/Perl/Perl_one-liners/#file-spacing","text":"Double space a file perl -pe '$\\=\"\\n\"' perl -pe 'BEGIN { $\\=\"\\n\" }' perl -pe '$_ .= \"\\n\"' perl -pe 's/$/\\n/' perl -nE 'say' Double space a file, except the blank lines perl -pe '$_ .= \"\\n\" unless /^$/' perl -pe '$_ .= \"\\n\" if /\\S/' Triple space a file perl -pe '$\\=\"\\n\\n\"' perl -pe '$_.=\"\\n\\n\"' N-space a file perl -pe '$_.=\"\\n\"x7' Add a blank line before every line perl -pe 's//\\n/' Remove all blank lines perl -ne 'print unless /^$/' perl -lne 'print if length' perl -ne 'print if /\\S/' Remove all consecutive blank lines, leaving just one perl -00 -pe '' perl -00pe0 Compress/expand all blank lines into N consecutive ones perl -00 -pe '$_.=\"\\n\"x4' Fold a file so that every set of 10 lines becomes one tab-separated line perl -lpe '$\\ = $. % 10 ? \"\\t\" : \"\\n\"'","title":"FILE SPACING"},{"location":"Dev/Perl/Perl_one-liners/#line-numbering","text":"Number all lines in a file perl -pe '$_ = \"$. $_\"' Number only non-empty lines in a file perl -pe '$_ = ++$a.\" $_\" if /./' Number and print only non-empty lines in a file (drop empty lines) perl -ne 'print ++$a.\" $_\" if /./' Number all lines but print line numbers only non-empty lines perl -pe '$_ = \"$. $_\" if /./' Number only lines that match a pattern, print others unmodified perl -pe '$_ = ++$a.\" $_\" if /regex/' Number and print only lines that match a pattern perl -ne 'print ++$a.\" $_\" if /regex/' Number all lines, but print line numbers only for lines that match a pattern perl -pe '$_ = \"$. $_\" if /regex/' Number all lines in a file using a custom format (emulate cat -n) perl -ne 'printf \"%-5d %s\", $., $_' Print the total number of lines in a file (emulate wc -l) perl -lne 'END { print $. }' perl -le 'print $n=()=<>' perl -le 'print scalar(()=<>)' perl -le 'print scalar(@foo=<>)' perl -ne '}{print $.' perl -nE '}{say $.' Print the number of non-empty lines in a file perl -le 'print scalar(grep{/./}<>)' perl -le 'print ~~grep{/./}<>' perl -le 'print~~grep/./,<>' perl -E 'say~~grep/./,<>' Print the number of empty lines in a file perl -lne '$a++ if /^$/; END {print $a+0}' perl -le 'print scalar(grep{/^$/}<>)' perl -le 'print ~~grep{/^$/}<>' perl -E 'say~~grep{/^$/}<>' Print the number of lines in a file that match a pattern (emulate grep -c) perl -lne '$a++ if /regex/; END {print $a+0}' perl -nE '$a++ if /regex/; END {say $a+0}'","title":"LINE NUMBERING"},{"location":"Dev/Perl/Perl_one-liners/#calculations","text":"Check if a number is a prime perl -lne '(1x$_) !~ /^1?$|^(11+?)\\1+$/ && print \"$_ is prime\"' Print the sum of all the fields on a line perl -MList::Util=sum -alne 'print sum @F' Print the sum of all the fields on all lines perl -MList::Util=sum -alne 'push @S,@F; END { print sum @S }' perl -MList::Util=sum -alne '$s += sum @F; END { print $s }' Shuffle all fields on a line perl -MList::Util=shuffle -alne 'print \"@{[shuffle @F]}\"' perl -MList::Util=shuffle -alne 'print join \" \", shuffle @F' Find the minimum element on a line perl -MList::Util=min -alne 'print min @F' Find the minimum element over all the lines perl -MList::Util=min -alne '@M = (@M, @F); END { print min @M }' perl -MList::Util=min -alne '$min = min @F; $rmin = $min unless defined $rmin && $min > $rmin; END { print $rmin }' Find the maximum element on a line perl -MList::Util=max -alne 'print max @F' Find the maximum element over all the lines perl -MList::Util=max -alne '@M = (@M, @F); END { print max @M }' Replace each field with its absolute value perl -alne 'print \"@{[map { abs } @F]}\"' Find the total number of fields (words) on each line perl -alne 'print scalar @F' Print the total number of fields (words) on each line followed by the line perl -alne 'print scalar @F, \" $_\"' Find the total number of fields (words) on all lines perl -alne '$t += @F; END { print $t}' Print the total number of fields that match a pattern perl -alne 'map { /regex/ && $t++ } @F; END { print $t }' perl -alne '$t += /regex/ for @F; END { print $t }' perl -alne '$t += grep /regex/, @F; END { print $t }' Print the total number of lines that match a pattern perl -lne '/regex/ && $t++; END { print $t }' Print the number PI to n decimal places perl -Mbignum=bpi -le 'print bpi(n)' Print the number PI to 39 decimal places perl -Mbignum=PI -le 'print PI' Print the number E to n decimal places perl -Mbignum=bexp -le 'print bexp(1,n+1)' Print the number E to 39 decimal places perl -Mbignum=e -le 'print e' Print UNIX time (seconds since Jan 1, 1970, 00:00:00 UTC) perl -le 'print time' Print GMT (Greenwich Mean Time) and local computer time perl -le 'print scalar gmtime' perl -le 'print scalar localtime' Print local computer time in H:M:S format perl -le 'print join \":\", (localtime)[2,1,0]' Print yesterday's date perl -MPOSIX -le '@now = localtime; $now[3] -= 1; print scalar localtime mktime @now' Print date 14 months, 9 days and 7 seconds ago perl -MPOSIX -le '@now = localtime; $now[0] -= 7; $now[4] -= 14; $now[7] -= 9; print scalar localtime mktime @now' Prepend timestamps to stdout (GMT, localtime) tail -f logfile | perl -ne 'print scalar gmtime,\" \",$_' tail -f logfile | perl -ne 'print scalar localtime,\" \",$_' Calculate factorial of 5 perl -MMath::BigInt -le 'print Math::BigInt->new(5)->bfac()' perl -le '$f = 1; $f *= $_ for 1..5; print $f' Calculate greatest common divisor (GCM) perl -MMath::BigInt=bgcd -le 'print bgcd(@list_of_numbers)' Calculate GCM of numbers 20 and 35 using Euclid's algorithm perl -le '$n = 20; $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $m' Calculate least common multiple (LCM) of numbers 35, 20 and 8 perl -MMath::BigInt=blcm -le 'print blcm(35,20,8)' Calculate LCM of 20 and 35 using Euclid's formula: n*m/gcd(n,m) perl -le '$a = $n = 20; $b = $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $a*$b/$m' Generate 10 random numbers between 5 and 15 (excluding 15) perl -le '$n=10; $min=5; $max=15; $, = \" \"; print map { int(rand($max-$min))+$min } 1..$n' Find and print all permutations of a list perl -MAlgorithm::Permute -le '$l = [1,2,3,4,5]; $p = Algorithm::Permute->new($l); print @r while @r = $p->next' Generate the power set perl -MList::PowerSet=powerset -le '@l = (1,2,3,4,5); for (@{powerset(@l)}) { print \"@$_\" }' Convert an IP address to unsigned integer perl -le '$i=3; $u += ($_<<8*$i--) for \"127.0.0.1\" =~ /(\\d+)/g; print $u' perl -le '$ip=\"127.0.0.1\"; $ip =~ s/(\\d+)\\.?/sprintf(\"%02x\", $1)/ge; print hex($ip)' perl -le 'print unpack(\"N\", 127.0.0.1)' perl -MSocket -le 'print unpack(\"N\", inet_aton(\"127.0.0.1\"))' Convert an unsigned integer to an IP address perl -MSocket -le 'print inet_ntoa(pack(\"N\", 2130706433))' perl -le '$ip = 2130706433; print join \".\", map { (($ip>>8*($_))&0xFF) } reverse 0..3' perl -le '$ip = 2130706433; $, = \".\"; print map { (($ip>>8*($_))&0xFF) } reverse 0..3'","title":"CALCULATIONS"},{"location":"Dev/Perl/Perl_one-liners/#string-creation-and-array-creation","text":"Generate and print the alphabet perl -le 'print a..z' perl -le 'print (\"a\"..\"z\")' perl -le '$, = \",\"; print (\"a\"..\"z\")' perl -le 'print join \",\", (\"a\"..\"z\")' Generate and print all the strings from \"a\" to \"zz\" perl -le 'print (\"a\"..\"zz\")' perl -le 'print \"aa\"..\"zz\"' Create a hex lookup table @hex = (0..9, \"a\"..\"f\") Convert a decimal number to hex using @hex lookup table perl -le '$num = 255; @hex = (0..9, \"a\"..\"f\"); while ($num) { $s = $hex[($num%16)&15].$s; $num = int $num/16 } print $s' perl -le '$hex = sprintf(\"%x\", 255); print $hex' perl -le '$num = \"ff\"; print hex $num' Generate a random 8 character password perl -le 'print map { (\"a\"..\"z\")[rand 26] } 1..8' perl -le 'print map { (\"a\"..\"z\", 0..9)[rand 36] } 1..8' Create a string of specific length perl -le 'print \"a\"x50' Create a repeated list of elements perl -le '@list = (1,2)x20; print \"@list\"' Create an array from a string @months = split ' ', \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\" @months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/ Create a string from an array @stuff = (\"hello\", 0..9, \"world\"); $string = join '-', @stuff Find the numeric values for characters in the string perl -le 'print join \", \", map { ord } split //, \"hello world\"' Convert a list of numeric ASCII values into a string perl -le '@ascii = (99, 111, 100, 105, 110, 103); print pack(\"C*\", @ascii)' perl -le '@ascii = (99, 111, 100, 105, 110, 103); print map { chr } @ascii' Generate an array with odd numbers from 1 to 100 perl -le '@odd = grep {$_ % 2 == 1} 1..100; print \"@odd\"' perl -le '@odd = grep { $_ & 1 } 1..100; print \"@odd\"' Generate an array with even numbers from 1 to 100 perl -le '@even = grep {$_ % 2 == 0} 1..100; print \"@even\"' Find the length of the string perl -le 'print length \"one-liners are great\"' Find the number of elements in an array perl -le '@array = (\"a\"..\"z\"); print scalar @array' perl -le '@array = (\"a\"..\"z\"); print $#array + 1'","title":"STRING CREATION AND ARRAY CREATION"},{"location":"Dev/Perl/Perl_one-liners/#text-conversion-and-substitution","text":"ROT13 a string 'y/A-Za-z/N-ZA-Mn-za-m/' ROT 13 a file perl -lpe 'y/A-Za-z/N-ZA-Mn-za-m/' file Base64 encode a string perl -MMIME::Base64 -e 'print encode_base64(\"string\")' perl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file Base64 decode a string perl -MMIME::Base64 -le 'print decode_base64(\"base64string\")' perl -MMIME::Base64 -ne 'print decode_base64($_)' file URL-escape a string perl -MURI::Escape -le 'print uri_escape($string)' URL-unescape a string perl -MURI::Escape -le 'print uri_unescape($string)' HTML-encode a string perl -MHTML::Entities -le 'print encode_entities($string)' HTML-decode a string perl -MHTML::Entities -le 'print decode_entities($string)' Convert all text to uppercase perl -nle 'print uc' perl -ple '$_=uc' perl -nle 'print \"\\U$_\"' Convert all text to lowercase perl -nle 'print lc' perl -ple '$_=lc' perl -nle 'print \"\\L$_\"' Uppercase only the first word of each line perl -nle 'print ucfirst lc' perl -nle 'print \"\\u\\L$_\"' Invert the letter case perl -ple 'y/A-Za-z/a-zA-Z/' Camel case each line perl -ple 's/(\\w+)/\\u$1/g' perl -ple 's/(?<!['])(\\w+)/\\u\\1/g' Strip leading whitespace (spaces, tabs) from the beginning of each line perl -ple 's/^[ \\t]+//' perl -ple 's/^\\s+//' Strip trailing whitespace (space, tabs) from the end of each line perl -ple 's/[ \\t]+$//' Strip whitespace from the beginning and end of each line perl -ple 's/^[ \\t]+|[ \\t]+$//g' Convert UNIX newlines to DOS/Windows newlines perl -pe 's|\\n|\\r\\n|' Convert DOS/Windows newlines to UNIX newlines perl -pe 's|\\r\\n|\\n|' Convert UNIX newlines to Mac newlines perl -pe 's|\\n|\\r|' Substitute (find and replace) \"foo\" with \"bar\" on each line perl -pe 's/foo/bar/' Substitute (find and replace) all \"foo\"s with \"bar\" on each line perl -pe 's/foo/bar/g' Substitute (find and replace) \"foo\" with \"bar\" on lines that match \"baz\" perl -pe '/baz/ && s/foo/bar/' Binary patch a file (find and replace a given array of bytes as hex numbers) perl -pi -e 's/\\x89\\xD8\\x48\\x8B/\\x90\\x90\\x48\\x8B/g' file","title":"TEXT CONVERSION AND SUBSTITUTION"},{"location":"Dev/Perl/Perl_one-liners/#selective-printing-and-deleting-of-certain-lines","text":"Print the first line of a file (emulate head -1) perl -ne 'print; exit' Print the first 10 lines of a file (emulate head -10) perl -ne 'print if $. <= 10' perl -ne '$. <= 10 && print' perl -ne 'print if 1..10' Print the last line of a file (emulate tail -1) perl -ne '$last = $_; END { print $last }' perl -ne 'print if eof' Print the last 10 lines of a file (emulate tail -10) perl -ne 'push @a, $_; @a = @a[@a-10..$#a]; END { print @a }' Print only lines that match a regular expression perl -ne '/regex/ && print' Print only lines that do not match a regular expression perl -ne '!/regex/ && print' Print the line before a line that matches a regular expression perl -ne '/regex/ && $last && print $last; $last = $_' Print the line after a line that matches a regular expression perl -ne 'if ($p) { print; $p = 0 } $p++ if /regex/' Print lines that match regex AAA and regex BBB in any order perl -ne '/AAA/ && /BBB/ && print' Print lines that don't match match regexes AAA and BBB perl -ne '!/AAA/ && !/BBB/ && print' Print lines that match regex AAA followed by regex BBB followed by CCC perl -ne '/AAA.*BBB.*CCC/ && print' Print lines that are 80 chars or longer perl -ne 'print if length >= 80' Print lines that are less than 80 chars in length perl -ne 'print if length < 80' Print only line 13 perl -ne '$. == 13 && print && exit' Print all lines except line 27 perl -ne '$. != 27 && print' perl -ne 'print if $. != 27' Print only lines 13, 19 and 67 perl -ne 'print if $. == 13 || $. == 19 || $. == 67' perl -ne 'print if int($.) ~~ (13, 19, 67)' Print all lines between two regexes (including lines that match regex) perl -ne 'print if /regex1/../regex2/' Print all lines from line 17 to line 30 perl -ne 'print if $. >= 17 && $. <= 30' perl -ne 'print if int($.) ~~ (17..30)' perl -ne 'print if grep { $_ == $. } 17..30' Print the longest line perl -ne '$l = $_ if length($_) > length($l); END { print $l }' Print the shortest line perl -ne '$s = $_ if $. == 1; $s = $_ if length($_) < length($s); END { print $s }' Print all lines that contain a number perl -ne 'print if /\\d/' Find all lines that contain only a number perl -ne 'print if /^\\d+$/' Print all lines that contain only characters perl -ne 'print if /^[[:alpha:]]+$/ Print every second line perl -ne 'print if $. % 2' Print every second line, starting the second line perl -ne 'print if $. % 2 == 0' Print all lines that repeat perl -ne 'print if ++$a{$_} == 2' Print all unique lines perl -ne 'print unless $a{$_}++' Print the first field (word) of every line (emulate cut -f 1 -d ' ') perl -alne 'print $F[0]'","title":"SELECTIVE PRINTING AND DELETING OF CERTAIN LINES"},{"location":"Dev/Perl/Perl_one-liners/#handy-regular-expressions","text":"Match something that looks like an IP address /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/ /^(\\d{1,3}\\.){3}\\d{1,3}$/ Test if a number is in range 0-255 /^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/ Match an IP address my $ip_part = qr|([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|; if ($ip =~ /^($ip_part\\.){3}$ip_part$/) { say \"valid ip\"; } Check if the string looks like an email address /\\S+@\\S+\\.\\S+/ Check if the string is a decimal number /^\\d+$/ /^[+-]?\\d+$/ /^[+-]?\\d+\\.?\\d*$/ Check if the string is a hexadecimal number /^0x[0-9a-f]+$/i Check if the string is an octal number /^0[0-7]+$/ Check if the string is binary /^[01]+$/ Check if a word appears twice in the string /(word).*\\1/ Increase all numbers by one in the string $str =~ s/(\\d+)/$1+1/ge Extract HTTP User-Agent string from the HTTP headers /^User-Agent: (.+)$/ Match printable ASCII characters /[ -~]/ Match unprintable ASCII characters /[^ -~]/ Match text between two HTML tags m|<strong>([^<]*)</strong>| m|<strong>(.*?)</strong>| Replace all tags with $html =~ s|<(/)?b>|<$1strong>|g Extract all matches from a regular expression my @matches = $text =~ /regex/g;","title":"HANDY REGULAR EXPRESSIONS"},{"location":"Dev/Perl/Perl_one-liners/#perl-tricks","text":"Print the version of a Perl module perl -MModule -le 'print $Module::VERSION' perl -MLWP::UserAgent -le 'print $LWP::UserAgent::VERSION'","title":"PERL TRICKS"},{"location":"Dev/Perl/Perl_one-liners/#credits","text":"* Andy Lester http://www.petdance.com * Shlomi Fish http://www.shlomifish.org * Madars Virza http://www.madars.org * caffecaldo https://github.com/caffecaldo * Kirk Kimmel https://github.com/kimmel * avar https://github.com/avar * rent0n","title":"CREDITS"},{"location":"Dev/Perl/Perl_scripts_for_sa/","text":"Perl tricks for system administrators Did you know that Perl is a great programming language for system administrators? Perl is platform-independent so you can do things on different operating systems without rewriting your scripts. Scripting in Perl is quick and easy, and its portability makes your scripts amazingly useful. Here are a few examples, just to get your creative juices flowing! Renaming a bunch of files Suppose you need to rename a whole bunch of files in a directory. In this case, we've got a directory full of .xml files, and we want to rename them all to .html. Easy-peasy! #!/usr/bin/perl use strict; use warnings; foreach my $file (glob \"*.xml\") { my $new = substr($file, 0, -3) . \"html\"; rename $file, $new; } Then just cd to the directory where you need to make the change, and run the script. You could put this in a cron job, if you needed to run it regularly, and it is easily enhanced to accept parameters. Speaking of accepting parameters, let's take a look at a script that does just that. Creating a Linux user account Suppose you need to regularly create Linux user accounts on your system, and the format of the username is first initial/last name, as is common in many businesses. (This is, of course, a good idea, until you get John Smith and Jane Smith working at the same company\u2014or want John to have two accounts, as he works part-time in two different departments. But humor me, okay?) Each user account needs to be in a group based on their department, and home directories are of the format /home/ / . Let's take a look at a script to do that: #!/usr/bin/env perl use strict; use warnings; my $adduser = '/usr/sbin/adduser'; use Getopt::Long qw(GetOptions); # If the user calls the script with no parameters, # give them help! if (not @ARGV) { usage(); } # Gather our options; if they specify any undefined option, # they'll get sent some help! my %opts; GetOptions(\\%opts, 'fname=s', 'lname=s', 'dept=s', 'run', ) or usage(); # Let's validate our inputs. All three parameters are # required, and must be alphabetic. # You could be clever, and do this with a foreach loop, # but let's keep it simple for now. if (not $opts{fname} or $opts{fname} !~ /^[a-zA-Z]+$/) { usage(\"First name must be alphabetic\"); } if (not $opts{lname} or $opts{lname} !~ /^[a-zA-Z]+$/) { usage(\"Last name must be alphabetic\"); } if (not $opts{dept} or $opts{dept} !~ /^[a-zA-Z]+$/) { usage(\"Department must be alphabetic\"); } # Construct the username and home directory my $username = lc( substr($opts{fname}, 0, 1) . $opts{lname}); my $home = \"/home/$opts{dept}/$username\"; # Show them what we've got ready to go. print \"Name: $opts{fname} $opts{lname}\\n\"; print \"Username: $username\\n\"; print \"Department: $opts{dept}\\n\"; print \"Home directory: $home\\n\\n\"; # use qq() here, so that the quotes in the --gecos flag # get carried into the command! my $cmd = qq($adduser --home $home --ingroup $opts{dept} \\\\ --gecos \"$opts{fname} $opts{lname}\" $username); print \"$cmd\\n\"; if ($opts{run}) { system $cmd; } else { print \"You need to add the --run flag to actually execute\\n\"; } sub usage { my ($msg) = @_; if ($msg) { print \"$msg\\n\\n\"; } print \"Usage: $0 --fname FirstName --lname LastName --dept Department --run\\n\"; exit; } As with the previous script, there are opportunities for enhancement, but something like this might be all that you need for this task. One more, just for fun! Change copyright text in every Perl source file in a directory tree Now we're going to try a mass edit. Suppose you've got a directory full of code, and each file has a copyright statement somewhere in it. (Rich Bowen wrote a great article, Copyright statements proliferate inside open source code a couple of years ago that discusses the wisdom of copyright statements in open source code. It is a good read, and I recommend it highly. But again, humor me.) You want to change that text in each and every file in the directory tree. File::Find and File::Slurp are your friends! #!/usr/bin/perl use strict; use warnings; use File::Find qw(find); use File::Slurp qw(read_file write_file); # If the user gives a directory name, use that. Otherwise, # use the current directory. my $dir = $ARGV[0] || '.'; # File::Find::find is kind of dark-arts magic. # You give it a reference to some code, # and a directory to hunt in, and it will # execute that code on every file in the # directory, and all subdirectories. In this # case, \\&change_file is the reference # to our code, a subroutine. You could, if # what you wanted to do was really short, # include it in a { } block instead. But doing # it this way is nice and readable. find( \\&change_file, $dir); sub change_file { my $name= $_; # If the file is a directory, symlink, or other # non-regular file, don't do anything if (not -f $name) { return; } # If it's not Perl, don't do anything. if (substr($name, -3) ne \".pl\") { return; } print \"$name\\n\"; # Gobble up the file, complete with carriage # returns and everything. # Be wary of this if you have very large files # on a system with limited memory! my $data = read_file($name); # Use a regex to make the change. If the string appears # more than once, this will change it everywhere! $data =~ s/Copyright Old/Copyright New/g; # Let's not ruin our original files my $backup = \"$name.bak\"; rename $name, $backup; write_file($name, $data); return; } Because of Perl's portability, you could use this script on a Windows system as well as a Linux system\u2014it Just Works because of the underlying Perl interpreter code. In our create-an-account code above, that one is not portable, but is Linux-specific because it uses Linux commands such as adduser. In my experience, I've found it useful to have a Git repository of these things somewhere that I can clone on each new system I'm working with. Over time, you'll think of changes to make to the code to enhance the capabilities, or you'll add new scripts, and Git can help you make sure that all your tools and tricks are available on all your systems. I hope these little scripts have given you some ideas how you can use Perl to make your system administration life a little easier. In addition to these longer scripts, take a look at a fantastic list of Perl one-liners, and links to other Perl magic assembled by Mischa Peterson.","title":"Perl scripts for sa"},{"location":"Dev/Perl/Perl_scripts_for_sa/#perl-tricks-for-system-administrators","text":"Did you know that Perl is a great programming language for system administrators? Perl is platform-independent so you can do things on different operating systems without rewriting your scripts. Scripting in Perl is quick and easy, and its portability makes your scripts amazingly useful. Here are a few examples, just to get your creative juices flowing! Renaming a bunch of files Suppose you need to rename a whole bunch of files in a directory. In this case, we've got a directory full of .xml files, and we want to rename them all to .html. Easy-peasy! #!/usr/bin/perl use strict; use warnings; foreach my $file (glob \"*.xml\") { my $new = substr($file, 0, -3) . \"html\"; rename $file, $new; } Then just cd to the directory where you need to make the change, and run the script. You could put this in a cron job, if you needed to run it regularly, and it is easily enhanced to accept parameters. Speaking of accepting parameters, let's take a look at a script that does just that. Creating a Linux user account Suppose you need to regularly create Linux user accounts on your system, and the format of the username is first initial/last name, as is common in many businesses. (This is, of course, a good idea, until you get John Smith and Jane Smith working at the same company\u2014or want John to have two accounts, as he works part-time in two different departments. But humor me, okay?) Each user account needs to be in a group based on their department, and home directories are of the format /home/ / . Let's take a look at a script to do that: #!/usr/bin/env perl use strict; use warnings; my $adduser = '/usr/sbin/adduser'; use Getopt::Long qw(GetOptions); # If the user calls the script with no parameters, # give them help! if (not @ARGV) { usage(); } # Gather our options; if they specify any undefined option, # they'll get sent some help! my %opts; GetOptions(\\%opts, 'fname=s', 'lname=s', 'dept=s', 'run', ) or usage(); # Let's validate our inputs. All three parameters are # required, and must be alphabetic. # You could be clever, and do this with a foreach loop, # but let's keep it simple for now. if (not $opts{fname} or $opts{fname} !~ /^[a-zA-Z]+$/) { usage(\"First name must be alphabetic\"); } if (not $opts{lname} or $opts{lname} !~ /^[a-zA-Z]+$/) { usage(\"Last name must be alphabetic\"); } if (not $opts{dept} or $opts{dept} !~ /^[a-zA-Z]+$/) { usage(\"Department must be alphabetic\"); } # Construct the username and home directory my $username = lc( substr($opts{fname}, 0, 1) . $opts{lname}); my $home = \"/home/$opts{dept}/$username\"; # Show them what we've got ready to go. print \"Name: $opts{fname} $opts{lname}\\n\"; print \"Username: $username\\n\"; print \"Department: $opts{dept}\\n\"; print \"Home directory: $home\\n\\n\"; # use qq() here, so that the quotes in the --gecos flag # get carried into the command! my $cmd = qq($adduser --home $home --ingroup $opts{dept} \\\\ --gecos \"$opts{fname} $opts{lname}\" $username); print \"$cmd\\n\"; if ($opts{run}) { system $cmd; } else { print \"You need to add the --run flag to actually execute\\n\"; } sub usage { my ($msg) = @_; if ($msg) { print \"$msg\\n\\n\"; } print \"Usage: $0 --fname FirstName --lname LastName --dept Department --run\\n\"; exit; } As with the previous script, there are opportunities for enhancement, but something like this might be all that you need for this task. One more, just for fun! Change copyright text in every Perl source file in a directory tree Now we're going to try a mass edit. Suppose you've got a directory full of code, and each file has a copyright statement somewhere in it. (Rich Bowen wrote a great article, Copyright statements proliferate inside open source code a couple of years ago that discusses the wisdom of copyright statements in open source code. It is a good read, and I recommend it highly. But again, humor me.) You want to change that text in each and every file in the directory tree. File::Find and File::Slurp are your friends! #!/usr/bin/perl use strict; use warnings; use File::Find qw(find); use File::Slurp qw(read_file write_file); # If the user gives a directory name, use that. Otherwise, # use the current directory. my $dir = $ARGV[0] || '.'; # File::Find::find is kind of dark-arts magic. # You give it a reference to some code, # and a directory to hunt in, and it will # execute that code on every file in the # directory, and all subdirectories. In this # case, \\&change_file is the reference # to our code, a subroutine. You could, if # what you wanted to do was really short, # include it in a { } block instead. But doing # it this way is nice and readable. find( \\&change_file, $dir); sub change_file { my $name= $_; # If the file is a directory, symlink, or other # non-regular file, don't do anything if (not -f $name) { return; } # If it's not Perl, don't do anything. if (substr($name, -3) ne \".pl\") { return; } print \"$name\\n\"; # Gobble up the file, complete with carriage # returns and everything. # Be wary of this if you have very large files # on a system with limited memory! my $data = read_file($name); # Use a regex to make the change. If the string appears # more than once, this will change it everywhere! $data =~ s/Copyright Old/Copyright New/g; # Let's not ruin our original files my $backup = \"$name.bak\"; rename $name, $backup; write_file($name, $data); return; } Because of Perl's portability, you could use this script on a Windows system as well as a Linux system\u2014it Just Works because of the underlying Perl interpreter code. In our create-an-account code above, that one is not portable, but is Linux-specific because it uses Linux commands such as adduser. In my experience, I've found it useful to have a Git repository of these things somewhere that I can clone on each new system I'm working with. Over time, you'll think of changes to make to the code to enhance the capabilities, or you'll add new scripts, and Git can help you make sure that all your tools and tricks are available on all your systems. I hope these little scripts have given you some ideas how you can use Perl to make your system administration life a little easier. In addition to these longer scripts, take a look at a fantastic list of Perl one-liners, and links to other Perl magic assembled by Mischa Peterson.","title":"Perl tricks for system administrators"},{"location":"Dev/Power_Shell/Azure/","text":"Install the Azure Resource Manager modules from the PowerShell Gallery Install-Module AzureRM To log in to Azure Resource Manager Login-AzureRmAccount You can also use a specific Tenant if you would like a faster log in experience Login-AzureRmAccount -TenantId xxxx To view all subscriptions for your account Get-AzureRmSubscription To select a default subscription for your current session. # This is useful when you have multiple subscriptions. Get-AzureRmSubscription -SubscriptionName \"your sub\" | Select-AzureRmSubscription View your current Azure PowerShell session context # This session state is only applicable to the current session and will not affect other sessions Get-AzureRmContext To select the default storage context for your current session Set-AzureRmCurrentStorageAccount -ResourceGroupName \"your resource group\" -StorageAccountName \"your storage account name\" View your current Azure PowerShell session context # Note: the CurrentStorageAccount is now set in your session context Get-AzureRmContext To list all of the blobs in all of your containers in all of your accounts Get-AzureRmStorageAccount | Get-AzureStorageContainer | Get-AzureStorageBlob `","title":"Azure"},{"location":"Dev/Power_Shell/Azure/#install-the-azure-resource-manager-modules-from-the-powershell-gallery","text":"Install-Module AzureRM","title":"Install the Azure Resource Manager modules from the PowerShell Gallery"},{"location":"Dev/Power_Shell/Azure/#to-log-in-to-azure-resource-manager","text":"Login-AzureRmAccount","title":"To log in to Azure Resource Manager"},{"location":"Dev/Power_Shell/Azure/#you-can-also-use-a-specific-tenant-if-you-would-like-a-faster-log-in-experience","text":"Login-AzureRmAccount -TenantId xxxx","title":"You can also use a specific Tenant if you would like a faster log in experience"},{"location":"Dev/Power_Shell/Azure/#to-view-all-subscriptions-for-your-account","text":"Get-AzureRmSubscription","title":"To view all subscriptions for your account"},{"location":"Dev/Power_Shell/Azure/#to-select-a-default-subscription-for-your-current-session","text":"# This is useful when you have multiple subscriptions. Get-AzureRmSubscription -SubscriptionName \"your sub\" | Select-AzureRmSubscription","title":"To select a default subscription for your current session."},{"location":"Dev/Power_Shell/Azure/#view-your-current-azure-powershell-session-context","text":"# This session state is only applicable to the current session and will not affect other sessions Get-AzureRmContext","title":"View your current Azure PowerShell session context"},{"location":"Dev/Power_Shell/Azure/#to-select-the-default-storage-context-for-your-current-session","text":"Set-AzureRmCurrentStorageAccount -ResourceGroupName \"your resource group\" -StorageAccountName \"your storage account name\"","title":"To select the default storage context for your current session"},{"location":"Dev/Power_Shell/Azure/#view-your-current-azure-powershell-session-context_1","text":"# Note: the CurrentStorageAccount is now set in your session context Get-AzureRmContext","title":"View your current Azure PowerShell session context"},{"location":"Dev/Power_Shell/Azure/#to-list-all-of-the-blobs-in-all-of-your-containers-in-all-of-your-accounts","text":"Get-AzureRmStorageAccount | Get-AzureStorageContainer | Get-AzureStorageBlob `","title":"To list all of the blobs in all of your containers in all of your accounts"},{"location":"Dev/Power_Shell/Misc/","text":"Windows 2008 Server R2 To release this error: Script cannot be loaded because the execution of scripts is disabled on this system. # Run as Administrator Set-ExecutionPolicy RemoteSigned # There is following parameters: # * Restricted - No scripts can be run. Windows PowerShell can be used only in interactive mode. # * AllSigned - Only scripts signed by a trusted publisher can be run. # * RemoteSigned - Downloaded scripts must be signed by a trusted publisher before they can be run. # * Unrestricted - No restrictions; all Windows PowerShell scripts can be run. Show current logged user gwmi win32_computersystem -comp $computer | select USername,Caption,Manufacturer Get_WmiObject win32_computersystem -comp $computer | select USername,Caption,Manufacturer List of logged in users (any user in any time) Get-WmiObject Win32_LoggedOnUser -ComputerName msk-sales-02 | Select __SERVER, Antecedent -Unique | %{\"{0} : {1}\\{2}\" -f $_.__SERVER, $_.Antecedent.ToString().Split('\"')[1],$_.Antecedent.ToString().Split('\"')[3]} Read from keyboard $variable=read-host \"Enter computer name:\"","title":"Misc"},{"location":"Dev/Power_Shell/Misc/#windows-2008-server-r2","text":"To release this error: Script cannot be loaded because the execution of scripts is disabled on this system. # Run as Administrator Set-ExecutionPolicy RemoteSigned # There is following parameters: # * Restricted - No scripts can be run. Windows PowerShell can be used only in interactive mode. # * AllSigned - Only scripts signed by a trusted publisher can be run. # * RemoteSigned - Downloaded scripts must be signed by a trusted publisher before they can be run. # * Unrestricted - No restrictions; all Windows PowerShell scripts can be run.","title":"Windows 2008 Server R2"},{"location":"Dev/Power_Shell/Misc/#show-current-logged-user","text":"gwmi win32_computersystem -comp $computer | select USername,Caption,Manufacturer Get_WmiObject win32_computersystem -comp $computer | select USername,Caption,Manufacturer","title":"Show current logged user"},{"location":"Dev/Power_Shell/Misc/#list-of-logged-in-users-any-user-in-any-time","text":"Get-WmiObject Win32_LoggedOnUser -ComputerName msk-sales-02 | Select __SERVER, Antecedent -Unique | %{\"{0} : {1}\\{2}\" -f $_.__SERVER, $_.Antecedent.ToString().Split('\"')[1],$_.Antecedent.ToString().Split('\"')[3]}","title":"List of logged in users (any user in any time)"},{"location":"Dev/Power_Shell/Misc/#read-from-keyboard","text":"$variable=read-host \"Enter computer name:\"","title":"Read from keyboard"},{"location":"Dev/Power_Shell/One-Liners/","text":"Copy file to bunch of servers by ip # for ($i=<1>; $i -le <254>; $i++) { scp <Path-To-File> <username>@<XXX.XXX.XXX>.$($i):<Path-On-server> } for ($i=2; $i -le 3; $i++) { scp C:\\Users\\dkiva\\Downloads\\jdk-10.0.1_linux-x64_bin.rpm divanov@172.30.30.$($i):~/jdk-10.0.1_linux-x64_bin.rpm } Unpack any tar.gz in current folder Get-Location | Get-ChildItem | ForEach-Object {tar zxf $_.Name } Kill process by name # Get-Process <ProcessName> | ForEach-Object { Stop-Process $_.Id } Get-Process tar | ForEach-Object { Stop-Process $_.Id }","title":"One Liners"},{"location":"Dev/Power_Shell/One-Liners/#copy-file-to-bunch-of-servers-by-ip","text":"# for ($i=<1>; $i -le <254>; $i++) { scp <Path-To-File> <username>@<XXX.XXX.XXX>.$($i):<Path-On-server> } for ($i=2; $i -le 3; $i++) { scp C:\\Users\\dkiva\\Downloads\\jdk-10.0.1_linux-x64_bin.rpm divanov@172.30.30.$($i):~/jdk-10.0.1_linux-x64_bin.rpm }","title":"Copy file to bunch of servers by ip"},{"location":"Dev/Power_Shell/One-Liners/#unpack-any-targz-in-current-folder","text":"Get-Location | Get-ChildItem | ForEach-Object {tar zxf $_.Name }","title":"Unpack any tar.gz in current folder"},{"location":"Dev/Power_Shell/One-Liners/#kill-process-by-name","text":"# Get-Process <ProcessName> | ForEach-Object { Stop-Process $_.Id } Get-Process tar | ForEach-Object { Stop-Process $_.Id }","title":"Kill process by name"},{"location":"Dev/Power_Shell/SSL/","text":"Enable TLS 1.1 ans 1.2 when invoking web request $AllProtocols = [System.Net.SecurityProtocolType]'Ssl3,Tls,Tls11,Tls12' [System.Net.ServicePointManager]::SecurityProtocol = $AllProtocols # Examples: (Invoke-WebRequest -Uri \"https://github.com/\").StatusCode Invoke-WebRequest -Uri \"https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311-binaries.zip\" -OutFile wix311-binaries.zip","title":"SSL"},{"location":"Dev/Power_Shell/SSL/#enable-tls-11-ans-12-when-invoking-web-request","text":"$AllProtocols = [System.Net.SecurityProtocolType]'Ssl3,Tls,Tls11,Tls12' [System.Net.ServicePointManager]::SecurityProtocol = $AllProtocols # Examples: (Invoke-WebRequest -Uri \"https://github.com/\").StatusCode Invoke-WebRequest -Uri \"https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311-binaries.zip\" -OutFile wix311-binaries.zip","title":"Enable TLS 1.1 ans 1.2 when invoking web request"},{"location":"Dev/Python/Installation/","text":"Install Python 2.7.13 on Linux wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz tar -xvf Python-2.7.13.tgz cd Python-2.7.13 ./configure make sudo make install","title":"Installation"},{"location":"Dev/Python/Installation/#install-python-2713-on-linux","text":"wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz tar -xvf Python-2.7.13.tgz cd Python-2.7.13 ./configure make sudo make install","title":"Install Python 2.7.13 on Linux"},{"location":"Dev/Python/Kivy/","text":"Python 2 and >3.5 python -m pip install --upgrade pip wheel setuptools python -m pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew python -m pip install kivy.deps.gstreamer python -m pip install kivy Python 3.5+ You will need Glew python -m pip install --upgrade pip wheel setuptools python -m pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew python -m pip install kivy.deps.gstreamer python -m pip install Cython # Python 3.5 python -m pip install https://github.com/kivy/kivy/zipball/master # Python 3.6 python -m pip install https://kivy.org/downloads/appveyor/kivy/Kivy-1.9.2.dev0-cp36-cp36m-win_amd64.whl # For x64 you need to download 64-bit version pygame from here: # http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame python -m pip install pygame-1.9.3-cp36-cp36m-win_amd64.whl Test from kivy.app import App from kivy.uix.button import Button class TestApp(App): def build(self): return Button(text='Hello World') TestApp().run()","title":"Kivy"},{"location":"Dev/Python/Kivy/#python-2-and-35","text":"python -m pip install --upgrade pip wheel setuptools python -m pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew python -m pip install kivy.deps.gstreamer python -m pip install kivy","title":"Python 2 and &gt;3.5"},{"location":"Dev/Python/Kivy/#python-35","text":"You will need Glew python -m pip install --upgrade pip wheel setuptools python -m pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew python -m pip install kivy.deps.gstreamer python -m pip install Cython # Python 3.5 python -m pip install https://github.com/kivy/kivy/zipball/master # Python 3.6 python -m pip install https://kivy.org/downloads/appveyor/kivy/Kivy-1.9.2.dev0-cp36-cp36m-win_amd64.whl # For x64 you need to download 64-bit version pygame from here: # http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame python -m pip install pygame-1.9.3-cp36-cp36m-win_amd64.whl","title":"Python 3.5+"},{"location":"Dev/Python/Kivy/#test","text":"from kivy.app import App from kivy.uix.button import Button class TestApp(App): def build(self): return Button(text='Hello World') TestApp().run()","title":"Test"},{"location":"Dev/Python/Users_and_groups/","text":"Print list of users with all user's groups #!/usr/bin/python import re #cols c0 = 2 # Separator c1 = 10 # User c2 = 3 # Separator c3 = 10 # UID c4 = 3 # Separator c5 = 54 # Groups c6 = 2 # Separator f = open(\"/etc/passwd\") t_len = c0+c1+c2+c3+c4+c5+c6 print \"-\" * t_len print '{0:34}{1:48}{2:2}'.format(\"| \",\"Users and Groups\",\" |\") print \"-\" * t_len print '{0:2}{1:10}{2:3}{3:10}{4:3}{5:54}{6:2}'.format(\"| \",\"Username\",\" | \",\"UID\",\" | \",\"Groups\",\" |\") for fline in f: groups = [] h = open(\"/etc/group\") for hline in h: if fline.split(\":\")[3] == hline.split(\":\")[2]: groups.append(hline.split(\":\")[0]) if re.search(fline.split(\":\")[0],hline) is not None: if not hline.split(\":\")[2] == fline.split(\":\")[3]: groups.append(hline.split(\":\")[0]) h.close() print '{0:2}{1:10}{2:3}{3:10}{4:3}{5:54}{6:2}'.format(\"| \",fline.split(\":\")[0],\" | \",fline.split(\":\")[2],\" | \",\",\".join(groups),\" |\") print \"-\" * t_len f.close()","title":"Users and groups"},{"location":"Dev/Python/Users_and_groups/#print-list-of-users-with-all-users-groups","text":"#!/usr/bin/python import re #cols c0 = 2 # Separator c1 = 10 # User c2 = 3 # Separator c3 = 10 # UID c4 = 3 # Separator c5 = 54 # Groups c6 = 2 # Separator f = open(\"/etc/passwd\") t_len = c0+c1+c2+c3+c4+c5+c6 print \"-\" * t_len print '{0:34}{1:48}{2:2}'.format(\"| \",\"Users and Groups\",\" |\") print \"-\" * t_len print '{0:2}{1:10}{2:3}{3:10}{4:3}{5:54}{6:2}'.format(\"| \",\"Username\",\" | \",\"UID\",\" | \",\"Groups\",\" |\") for fline in f: groups = [] h = open(\"/etc/group\") for hline in h: if fline.split(\":\")[3] == hline.split(\":\")[2]: groups.append(hline.split(\":\")[0]) if re.search(fline.split(\":\")[0],hline) is not None: if not hline.split(\":\")[2] == fline.split(\":\")[3]: groups.append(hline.split(\":\")[0]) h.close() print '{0:2}{1:10}{2:3}{3:10}{4:3}{5:54}{6:2}'.format(\"| \",fline.split(\":\")[0],\" | \",fline.split(\":\")[2],\" | \",\",\".join(groups),\" |\") print \"-\" * t_len f.close()","title":"Print list of users with all user's groups"},{"location":"Dev/Python/pip/","text":"List all packages without version with powershell $packs = $(pip freeze --local); foreach($pack in $packs) { Write-Host $pack.Substring(0, $pack.IndexOf('=')) } Update all packages with powershell $packs = $(pip freeze --local); foreach($pack in $packs) { pip install -U $pack.Substring(0, $pack.IndexOf('=')) }","title":"Pip"},{"location":"Dev/Python/pip/#list-all-packages-without-version-with-powershell","text":"$packs = $(pip freeze --local); foreach($pack in $packs) { Write-Host $pack.Substring(0, $pack.IndexOf('=')) }","title":"List all packages without version with powershell"},{"location":"Dev/Python/pip/#update-all-packages-with-powershell","text":"$packs = $(pip freeze --local); foreach($pack in $packs) { pip install -U $pack.Substring(0, $pack.IndexOf('=')) }","title":"Update all packages with powershell"},{"location":"Dev/QMake/Link_Dynamic_libraries_on_Mac/","text":"Pri file example include(Base.pri) # Loading folder with our libraries and libraries itself: LIBS += -L\"path/to/macosx/lib\" -lone.1 -ltwo.2 -lthree.3 # All Mac related stuff should be kept in separate section: mac { # Creating list of libraries to deploy in APPLICATION.App/Contents/Frameworks SupaLib.files += path/to/macosx/lib/libone.1.dylib SupaLib.files += path/to/macosx/lib/libtwo.2.dylib SupaLib.files += path/to/macosx/lib/libthree.3.dylib # Destination path for third-party libraries SupaLib.path = Contents/Frameworks # Add this libraries to final output bundle QMAKE_BUNDLE_DATA += SupaLib # Need to be sure that application will know about location of libraries QMAKE_RPATHDIR += @executable_path/../Frameworks }","title":"Link Dynamic libraries on Mac"},{"location":"Dev/QMake/Link_Dynamic_libraries_on_Mac/#pri-file-example","text":"include(Base.pri) # Loading folder with our libraries and libraries itself: LIBS += -L\"path/to/macosx/lib\" -lone.1 -ltwo.2 -lthree.3 # All Mac related stuff should be kept in separate section: mac { # Creating list of libraries to deploy in APPLICATION.App/Contents/Frameworks SupaLib.files += path/to/macosx/lib/libone.1.dylib SupaLib.files += path/to/macosx/lib/libtwo.2.dylib SupaLib.files += path/to/macosx/lib/libthree.3.dylib # Destination path for third-party libraries SupaLib.path = Contents/Frameworks # Add this libraries to final output bundle QMAKE_BUNDLE_DATA += SupaLib # Need to be sure that application will know about location of libraries QMAKE_RPATHDIR += @executable_path/../Frameworks }","title":"Pri file example"},{"location":"Dev/Ruby/Installation/","text":"via RVM on Ubuntu sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 curl -sSL https://get.rvm.io | bash -s stable source ~/.rvm/scripts/rvm rvm install 2.3.1 rvm use 2.3.1 --default ruby -v","title":"Installation"},{"location":"Dev/Ruby/Installation/#via-rvm-on-ubuntu","text":"sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 curl -sSL https://get.rvm.io | bash -s stable source ~/.rvm/scripts/rvm rvm install 2.3.1 rvm use 2.3.1 --default ruby -v","title":"via RVM on Ubuntu"},{"location":"Dev/Vbs/Kaspersky_Base_Actuality/","text":"With WMI query to get AVBasesStat path ' VBscript: ' Script to check actual date of Kaspersky Bases update ' Author : Dmitry Ivanov ' Usage : C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo <Path_TO>\\kav.vbs ' NetXMS Agent config: ' ExternalParameterShellExec = KasperskyBasesState:C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo c:\\Path_TO\\kav.vbs On Error Resume Next strComputer = \".\" strNamespace = \"\\root\\CIMV2\" strClass = \"Win32_SoftwareElement\" Set objWMIService = GetObject(\"winmgmts:\\\\\" & strComputer & strNamespace) set colItems = objWMIService.ExecQuery(_ \"Select * from \" & strClass &\" Where Name='AVBasesStatComponent'\", _ \"WQL\", wbemFlagReturnImmediately + wbemFlagForwardOnly) kavStatFile = colItems.ItemIndex(0).Path + \"kdb.stt\" Const FILE_READ = 1 Set objFSO = CreateObject(\"Scripting.FileSystemObject\") Set objStatFile = objFSO.OpenTextFile(kavStatFile, FILE_READ) kavBasesStatStr = objStatFile.ReadLine kavBasesStatArr = Split(kavBasesStatStr,\";\") kavBaseDateStr = kavBasesStatArr(1) theYear = Mid(kavBaseDateStr, 1, 4) theMonth = Mid(kavBaseDateStr, 5, 2) theDay = Mid(kavBaseDateStr, 7, 2) theHour = Mid(kavBaseDateStr, 9, 2) theMin = Mid(kavBaseDateStr, 11, 2) kavBaseDate = CDate(theDay & \"/\" & theMonth & \"/\" & theYear & \" \" & theHour & \":\" & theMin) dateNow = Now() dateTreshold = DateAdd(\"H\",-24, dateNow) IF dateNow < kavBaseDate Then Wscript.Echo \"!!!ERROR: Wrong time. Kaspersky bases from future! Check server timezone!\" ElseIF dateTreshold < kavBaseDate Then Wscript.Echo \"Yes\" Else Wscript.Echo \"No\" End If objStatFile.close() ' DEBUG 'Wscript.Echo \"kavBaseDate: \" & kavBaseDate 'Wscript.Echo \"dateNow: \" & dateNow 'Wscript.Echo \"kavBaseDateStr: \" & kavBaseDateStr 'Wscript.Echo \"dateTreshold \" & dateTreshold 'Wscript.Echo \"IF: \" & dateTreshold < kavBaseDate 'Wscript.Echo Hardcoded AVBasesStat path ' VBscript: ' Script to check actual date of Kaspersky Bases update ' Author : Dmitry Ivanov ' Usage : C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo <Path_TO>\\kav.vbs ' NetXMS Agent config: ' ExternalParameterShellExec = KasperskyBasesState:C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo c:\\Path_TO\\kav.vbs On Error Resume Next kavStatFile = \"c:\\ProgramData\\Kaspersky Lab\\KAV for Windows Servers Enterprise Edition\\8.0\\Bases\\Current\\Stat\\kdb.stt\" Const FILE_READ = 1 Set objFSO = CreateObject(\"Scripting.FileSystemObject\") Set objStatFile = objFSO.OpenTextFile(kavStatFile, FILE_READ) kavBasesStatStr = objStatFile.ReadLine kavBasesStatArr = Split(kavBasesStatStr,\";\") kavBaseDateStr = kavBasesStatArr(1) theYear = Mid(kavBaseDateStr, 1, 4) theMonth = Mid(kavBaseDateStr, 5, 2) theDay = Mid(kavBaseDateStr, 7, 2) theHour = Mid(kavBaseDateStr, 9, 2) theMin = Mid(kavBaseDateStr, 11, 2) kavBaseDate = CDate(theDay & \"/\" & theMonth & \"/\" & theYear & \" \" & theHour & \":\" & theMin) dateNow = Now() dateTreshold = DateAdd(\"H\",-24, dateNow) IF dateNow < kavBaseDate Then Wscript.Echo \"!!!ERROR: Wrong time. Kaspersky bases from future! Check server timezone!\" ElseIF dateTreshold < kavBaseDate Then Wscript.Echo \"Yes\" Else Wscript.Echo \"No\" End If objStatFile.close() ' DEBUG 'Wscript.Echo \"kavBaseDate: \" & kavBaseDate 'Wscript.Echo \"dateNow: \" & dateNow 'Wscript.Echo \"kavBaseDateStr: \" & kavBaseDateStr 'Wscript.Echo \"dateTreshold \" & dateTreshold 'Wscript.Echo \"IF: \" & dateTreshold < kavBaseDate 'Wscript.Echo","title":"Kaspersky Base Actuality"},{"location":"Dev/Vbs/Kaspersky_Base_Actuality/#with-wmi-query-to-get-avbasesstat-path","text":"' VBscript: ' Script to check actual date of Kaspersky Bases update ' Author : Dmitry Ivanov ' Usage : C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo <Path_TO>\\kav.vbs ' NetXMS Agent config: ' ExternalParameterShellExec = KasperskyBasesState:C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo c:\\Path_TO\\kav.vbs On Error Resume Next strComputer = \".\" strNamespace = \"\\root\\CIMV2\" strClass = \"Win32_SoftwareElement\" Set objWMIService = GetObject(\"winmgmts:\\\\\" & strComputer & strNamespace) set colItems = objWMIService.ExecQuery(_ \"Select * from \" & strClass &\" Where Name='AVBasesStatComponent'\", _ \"WQL\", wbemFlagReturnImmediately + wbemFlagForwardOnly) kavStatFile = colItems.ItemIndex(0).Path + \"kdb.stt\" Const FILE_READ = 1 Set objFSO = CreateObject(\"Scripting.FileSystemObject\") Set objStatFile = objFSO.OpenTextFile(kavStatFile, FILE_READ) kavBasesStatStr = objStatFile.ReadLine kavBasesStatArr = Split(kavBasesStatStr,\";\") kavBaseDateStr = kavBasesStatArr(1) theYear = Mid(kavBaseDateStr, 1, 4) theMonth = Mid(kavBaseDateStr, 5, 2) theDay = Mid(kavBaseDateStr, 7, 2) theHour = Mid(kavBaseDateStr, 9, 2) theMin = Mid(kavBaseDateStr, 11, 2) kavBaseDate = CDate(theDay & \"/\" & theMonth & \"/\" & theYear & \" \" & theHour & \":\" & theMin) dateNow = Now() dateTreshold = DateAdd(\"H\",-24, dateNow) IF dateNow < kavBaseDate Then Wscript.Echo \"!!!ERROR: Wrong time. Kaspersky bases from future! Check server timezone!\" ElseIF dateTreshold < kavBaseDate Then Wscript.Echo \"Yes\" Else Wscript.Echo \"No\" End If objStatFile.close() ' DEBUG 'Wscript.Echo \"kavBaseDate: \" & kavBaseDate 'Wscript.Echo \"dateNow: \" & dateNow 'Wscript.Echo \"kavBaseDateStr: \" & kavBaseDateStr 'Wscript.Echo \"dateTreshold \" & dateTreshold 'Wscript.Echo \"IF: \" & dateTreshold < kavBaseDate 'Wscript.Echo","title":"With WMI query to get AVBasesStat path"},{"location":"Dev/Vbs/Kaspersky_Base_Actuality/#hardcoded-avbasesstat-path","text":"' VBscript: ' Script to check actual date of Kaspersky Bases update ' Author : Dmitry Ivanov ' Usage : C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo <Path_TO>\\kav.vbs ' NetXMS Agent config: ' ExternalParameterShellExec = KasperskyBasesState:C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo c:\\Path_TO\\kav.vbs On Error Resume Next kavStatFile = \"c:\\ProgramData\\Kaspersky Lab\\KAV for Windows Servers Enterprise Edition\\8.0\\Bases\\Current\\Stat\\kdb.stt\" Const FILE_READ = 1 Set objFSO = CreateObject(\"Scripting.FileSystemObject\") Set objStatFile = objFSO.OpenTextFile(kavStatFile, FILE_READ) kavBasesStatStr = objStatFile.ReadLine kavBasesStatArr = Split(kavBasesStatStr,\";\") kavBaseDateStr = kavBasesStatArr(1) theYear = Mid(kavBaseDateStr, 1, 4) theMonth = Mid(kavBaseDateStr, 5, 2) theDay = Mid(kavBaseDateStr, 7, 2) theHour = Mid(kavBaseDateStr, 9, 2) theMin = Mid(kavBaseDateStr, 11, 2) kavBaseDate = CDate(theDay & \"/\" & theMonth & \"/\" & theYear & \" \" & theHour & \":\" & theMin) dateNow = Now() dateTreshold = DateAdd(\"H\",-24, dateNow) IF dateNow < kavBaseDate Then Wscript.Echo \"!!!ERROR: Wrong time. Kaspersky bases from future! Check server timezone!\" ElseIF dateTreshold < kavBaseDate Then Wscript.Echo \"Yes\" Else Wscript.Echo \"No\" End If objStatFile.close() ' DEBUG 'Wscript.Echo \"kavBaseDate: \" & kavBaseDate 'Wscript.Echo \"dateNow: \" & dateNow 'Wscript.Echo \"kavBaseDateStr: \" & kavBaseDateStr 'Wscript.Echo \"dateTreshold \" & dateTreshold 'Wscript.Echo \"IF: \" & dateTreshold < kavBaseDate 'Wscript.Echo","title":"Hardcoded AVBasesStat path"},{"location":"Dev/Vbs/Links/","text":"List of useful urls vbsedit","title":"Links"},{"location":"Dev/Vbs/Links/#list-of-useful-urls","text":"vbsedit","title":"List of useful urls"},{"location":"Dev/Vbs/Network/","text":"Convert Server Name to IpAddress webNodes = Array(\"server1.localdomain\",\"server2.localdomain\",\"server3.localdomain\") set objPing = GetObject(\"winmgmts:{impersonationLevel=impersonate}\").ExecQuery (\"select * from Win32_PingStatus where address = '\" & webNode & \"'\") for each objRetStatus in objPing if IsNull(objRetStatus.StatusCode) or objRetStatus.StatusCode<>0 then ipAddress = \"\" else ipAddress = objRetStatus.ProtocolAddress end if next WScript.Echo webNode & \" \" & ipAddress WScript.Echo \"https://eshop_user:8R63La1Gt2XmSRk@172.67.136.200/access/\"&\"enablers?rs=\"&ipAddress","title":"Network"},{"location":"Dev/Vbs/Network/#convert-server-name-to-ipaddress","text":"webNodes = Array(\"server1.localdomain\",\"server2.localdomain\",\"server3.localdomain\") set objPing = GetObject(\"winmgmts:{impersonationLevel=impersonate}\").ExecQuery (\"select * from Win32_PingStatus where address = '\" & webNode & \"'\") for each objRetStatus in objPing if IsNull(objRetStatus.StatusCode) or objRetStatus.StatusCode<>0 then ipAddress = \"\" else ipAddress = objRetStatus.ProtocolAddress end if next WScript.Echo webNode & \" \" & ipAddress WScript.Echo \"https://eshop_user:8R63La1Gt2XmSRk@172.67.136.200/access/\"&\"enablers?rs=\"&ipAddress","title":"Convert Server Name to IpAddress"},{"location":"Dev/Vbs/Run/","text":"Run from command line: cscript script.vbs wscript script.vbs","title":"Run"},{"location":"Dev/Vbs/Run/#run-from-command-line","text":"cscript script.vbs wscript script.vbs","title":"Run from command line:"},{"location":"Dev/Web/Redirect/","text":"Redirect through index.html <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> <html><head><meta http-equiv=Refresh content=\"0;url=/path_to_subfolder/\"></head></html> <!-- -->","title":"Redirect"},{"location":"Dev/Web/Redirect/#redirect-through-indexhtml","text":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> <html><head><meta http-equiv=Refresh content=\"0;url=/path_to_subfolder/\"></head></html> <!-- -->","title":"Redirect through index.html"},{"location":"DevOps/Ansible/","text":"Create all host_vars from inventory In this example we have 21 inventry recond in ansible inventory file. Something like this: server1 ansible_host=1.1.1.1 server2 ansible_host=1.1.1.2 server3 ansible_host=1.1.1.3 #server4 ansible_host=1.1.1.4 server5 ansible_host=1.1.1.5 server6 ansible_host=1.1.1.6 ... #server19 ansible_host=1.1.1.19 server20 ansible_host=1.1.1.20 server21 ansible_host=1.1.1.21 Some records comented, some not... And we need to create whole list of host envs for any active server: cat inventory | head -21 | awk '{print $1}' | grep -v '#' | xargs -I '{}' touch host_vars/{}","title":"Ansible"},{"location":"DevOps/Ansible/#create-all-host_vars-from-inventory","text":"In this example we have 21 inventry recond in ansible inventory file. Something like this: server1 ansible_host=1.1.1.1 server2 ansible_host=1.1.1.2 server3 ansible_host=1.1.1.3 #server4 ansible_host=1.1.1.4 server5 ansible_host=1.1.1.5 server6 ansible_host=1.1.1.6 ... #server19 ansible_host=1.1.1.19 server20 ansible_host=1.1.1.20 server21 ansible_host=1.1.1.21 Some records comented, some not... And we need to create whole list of host envs for any active server: cat inventory | head -21 | awk '{print $1}' | grep -v '#' | xargs -I '{}' touch host_vars/{}","title":"Create all host_vars from inventory"},{"location":"DevOps/Chef-Windows/","text":"Chef environment by Steven Murawski # First (from PowerShell), some basic ExecutionPolicy configuration. Then install the latest ChefDK and Chocolatey. After that, apply a basic Chef recipe to install Git, ConEmu, Visual Studio Code, 7Zip, WinMerge, and Vagrant. # Setup my execution policy for both the 64 bit and 32 bit shells set-executionpolicy remotesigned start-job -runas32 {set-executionpolicy remotesigned} | receive-job -wait # Install the latest stable ChefDK invoke-restmethod 'https://omnitruck.chef.io/install.ps1' | iex install-project chefdk -verbose # Install Chocolatey invoke-expression ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')) choco feature enable -n allowGlobalConfirmation # Get a basic setup recipe invoke-restmethod 'https://gist.githubusercontent.com/smurawski/da67107b5efd00876af7bb0c8cfe8453/raw' | out-file -encoding ascii -filepath c:/basic.rb # Use Chef Apply to setup chef-apply c:/basic.rb # After Visual Studio Code is installed, you'll want to install a couple of handy extensions: # Chef - https://marketplace.visualstudio.com/items?itemName=Pendrica.Chef # PowerShell - https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell Chef environment by Karsten M\u00fcller basic.rb chocolatey_package 'git' do package_name 'git' options '-params /GitAndUnixToolsOnPath' end packages = %w[conemu visualstudiocode 7zip winmerge vagrant autohotkey] packages.each do |pkg| chocolatey_package pkg end gems = %w[kitchen-pester kitchen-hyperv kitchen-dsc kitchen-azurerm azure-credentials pry pry-byebug pry-stack_explorer appbundle-updater] gems.each do |gem| chef_gem gem do compile_time false if respond_to?(:compile_time) end end extensions = %w[ ms-vscode.PowerShell msazurermtools.azurerm-vscode-tools Pendrica.Chef ] extensions.each do |ext| execute \"install vscode extension #{ext}\" do command \"code --install-extension #{ext}\" end end powershell_script 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force' do end modules = %w[ PSReadline ] modules.each do |mod| powershell_script \"Install-Module #{mod} -Force\" do end end directory 'C:\\Work\\Chef' do recursive true action :create end execute 'chef generate repo example_repo -p' do cwd 'C:\\Work\\Chef' end bootstrap.ps1 # Setup my execution policy for both the 64 bit and 32 bit shells set-executionpolicy remotesigned start-job -runas32 {set-executionpolicy remotesigned} | receive-job -wait # Install fixed version of ChefDK invoke-restmethod 'https://omnitruck.chef.io/install.ps1' | iex install-project chefdk -verbose -version 1.1.16 # Install Chocolatey invoke-expression ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')) choco feature enable -n allowGlobalConfirmation # Get a basic setup recipe Invoke-RestMethod -UseBasicParsing 'https://gist.githubusercontent.com/karstenmueller/0c2257684b8e6a44bac9526c52074e18/raw/a150048b7ffbfe202f90fdce446b8095b3e7858c/basic.rb' | out-file -encoding ascii -filepath c:/basic.rb # We dont need any Windows 10 Apps Get-AppxPackage | Remove-AppxPackage 2>&1>$null # Use Chef Apply to setup chef-apply c:/basic.rb write-host \"executed chef recipe c:/basic.rb\"","title":"Chef Windows"},{"location":"DevOps/Chef-Windows/#chef-environment-by-steven-murawski","text":"# First (from PowerShell), some basic ExecutionPolicy configuration. Then install the latest ChefDK and Chocolatey. After that, apply a basic Chef recipe to install Git, ConEmu, Visual Studio Code, 7Zip, WinMerge, and Vagrant. # Setup my execution policy for both the 64 bit and 32 bit shells set-executionpolicy remotesigned start-job -runas32 {set-executionpolicy remotesigned} | receive-job -wait # Install the latest stable ChefDK invoke-restmethod 'https://omnitruck.chef.io/install.ps1' | iex install-project chefdk -verbose # Install Chocolatey invoke-expression ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')) choco feature enable -n allowGlobalConfirmation # Get a basic setup recipe invoke-restmethod 'https://gist.githubusercontent.com/smurawski/da67107b5efd00876af7bb0c8cfe8453/raw' | out-file -encoding ascii -filepath c:/basic.rb # Use Chef Apply to setup chef-apply c:/basic.rb # After Visual Studio Code is installed, you'll want to install a couple of handy extensions: # Chef - https://marketplace.visualstudio.com/items?itemName=Pendrica.Chef # PowerShell - https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell","title":"Chef environment by Steven Murawski"},{"location":"DevOps/Chef-Windows/#chef-environment-by-karsten-muller","text":"basic.rb chocolatey_package 'git' do package_name 'git' options '-params /GitAndUnixToolsOnPath' end packages = %w[conemu visualstudiocode 7zip winmerge vagrant autohotkey] packages.each do |pkg| chocolatey_package pkg end gems = %w[kitchen-pester kitchen-hyperv kitchen-dsc kitchen-azurerm azure-credentials pry pry-byebug pry-stack_explorer appbundle-updater] gems.each do |gem| chef_gem gem do compile_time false if respond_to?(:compile_time) end end extensions = %w[ ms-vscode.PowerShell msazurermtools.azurerm-vscode-tools Pendrica.Chef ] extensions.each do |ext| execute \"install vscode extension #{ext}\" do command \"code --install-extension #{ext}\" end end powershell_script 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force' do end modules = %w[ PSReadline ] modules.each do |mod| powershell_script \"Install-Module #{mod} -Force\" do end end directory 'C:\\Work\\Chef' do recursive true action :create end execute 'chef generate repo example_repo -p' do cwd 'C:\\Work\\Chef' end bootstrap.ps1 # Setup my execution policy for both the 64 bit and 32 bit shells set-executionpolicy remotesigned start-job -runas32 {set-executionpolicy remotesigned} | receive-job -wait # Install fixed version of ChefDK invoke-restmethod 'https://omnitruck.chef.io/install.ps1' | iex install-project chefdk -verbose -version 1.1.16 # Install Chocolatey invoke-expression ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')) choco feature enable -n allowGlobalConfirmation # Get a basic setup recipe Invoke-RestMethod -UseBasicParsing 'https://gist.githubusercontent.com/karstenmueller/0c2257684b8e6a44bac9526c52074e18/raw/a150048b7ffbfe202f90fdce446b8095b3e7858c/basic.rb' | out-file -encoding ascii -filepath c:/basic.rb # We dont need any Windows 10 Apps Get-AppxPackage | Remove-AppxPackage 2>&1>$null # Use Chef Apply to setup chef-apply c:/basic.rb write-host \"executed chef recipe c:/basic.rb\"","title":"Chef environment by Karsten M\u00fcller"},{"location":"DevOps/Terraform/","text":"General info Mostly from BWITS/terraform-best-practices . Always Run terraform command with var-file $ cat config/dev.tfvars name = \"dev-stack\" s3_terraform_bucket = \"dev-stack-terraform\" tag_team_name = \"hello-world\" $ terraform plan -var-file=config/dev.tfvars With var-file , you can easily manage environment (dev/stag/uat/prod) variables. With var-file , you avoid to run terraform with long list of key-value pairs ( -var foo=bar ) Manage s3 backend for tfstate files Terraform doesn't support Interpolate variables in terraform backend config , normally you write a seperate script to define s3 backend bucket name for different environments, but I recommend to hard code it directly as below Add below codes in terraform configuration files. $ cat main.tf terraform { backend \"s3\" { bucket = \"terraform-state\" key = \"terraform.tfstate\" region = \"eu-central-1\" encrypt = \"true\" dynamodb_table = \"terraform-tf-state-lock\" lifecycle { prevent_destroy = true } } } Define backend variables for particular environment $ cat config/backend-dev.conf bucket = \"<unique_bucke_name>-terraform-development\" key = \"development/service-1.tfstate\" encrypt = true region = \"ap-southeast-2\" kms_key_id = \"alias/terraform\" dynamodb_table = \"terraform-lock\" bucket - s3 bucket name, has to be globally unique. key - Set some meanful names for different services and applications, such as vpc.tfstate, application_name.tfstate, etc dynamodb_table - optional when you want to enable State Locking After you set config/backend-dev.conf and config/dev.tfvars properly (for each environment). You can easily run terraform as below: env=dev terraform get -update=true terraform init -backend-config=config/backend-${env}.conf terraform plan -var-file=config/${env}.tfvars terraform apply -var-file=config/${env}.tfvars Retrieves state meta data from a remote backend Normally we have several layers to manage terraform resources, such as network, database, application layers. After you create the basic network resources, such as vpc, security group, subnets, nat gateway in vpc stack. Your database layer and applications layer should always refer the resource from vpc layer directly via terraform_remote_state data srouce. data \"terraform_remote_state\" \"vpc\" { backend = \"s3\" config{ bucket = \"${var.s3_terraform_bucket}\" key = \"${var.environment}/vpc.tfstate\" region=\"${var.aws_region}\" } } # Retrieves the vpc_id and subnet_ids directly from remote backend state files. resource \"aws_xx_xxxx\" \"main\" { # ... subnet_ids = \"${split(\",\", data.terraform_remote_state.vpc.data_subnets)}\" vpc_id = \"${data.terraform_remote_state.vpc.vpc_id}\" } Use share modules Manage terraform resource with shared modules, this will save a lot of coding time. For detail, you can start from below links: Terraform module usage Terraform module registry Terraform AWS modules terraform modules don't support count parameter currently. You can follow up this ticket for updates: https://github.com/hashicorp/terraform/issues/953 Isolate environment Sometimes, developers like to create a security group and share it to all non-prod (dev/qa) environments. Don't do that, create resources with different name for each environment and each resource. variable \"application\" { description = \"application name\" default = \"\" } variable \"environment\" { description = \"environment name\" default = \"\" } resource \"<any_resource>\" { name = \"${var.application}-${var.environment}-<resource_name>\" ... } Wth that, you will easily define the resource with meaningful and unique name, and you can build more same application stack for different developers without change a lot. For example, you update the environment to dev1, dev2, etc. Use terraform import to include as more resources you can Sometimes developers manually created resources directly. You need to mark these resource and use terraform import to include them in codes. terraform import Avoid hard code the resources A sample: account_number=\u201c123456789012\" account_alias=\"mycompany\" The current aws account id or account alias can be input directly via data sources. # The attribute `${data.aws_caller_identity.current.account_id}` will be current account number. data \"aws_caller_identity\" \"current\" {} # The attribue `${data.aws_iam_account_alias.current.account_alias}` will be current account alias # Tips: you can easly use this attribue to create terraform bucket with environment, project name, etc. data \"aws_iam_account_alias\" \"current\" {} Refer: terraform data sources Format terraform codes Always run terraform fmt to format terraform configuration files and make them neatly. I used below codes in Travis CI pipeline (you can re-use it in any pipelines) to validate and format check the codes before you can merge it to master branch. - find . -type f -name \"*.tf\" -exec dirname {} \\;|sort -u | while read m; do (terraform validate -check-variables=false \"$m\" && echo \"\u221a $m\") || exit 1 ; done - if [ `terraform fmt | wc -c` -ne 0 ]; then echo \"Some terraform files need be formatted, run 'terraform fmt' to fix\"; exit 1; fi Enable version control on terraform state files bucket Always set backend to s3 and enable version control on this bucket. If you'd like to manage terraform state bucket as well, recommend to use this repostory I wrote tf_aws_tfstate_bucket to create the bucket and replica to other regions automatically. Generate README for each module about input and output variables You needn't manually manage USAGE about input variables and outputs. terraform-docs can do this job automatically. $ brew install terraform-docs $ cd terraform/modules/vpc $ terraform-docs md . > README.md For details on how to run terraform-docs , check this repository: https://github.com/segmentio/terraform-docs There is a simple sample for you to start tf_aws_acme , the README is generatd by terraform-docs Update terraform version Hashicorp doesn't have a good qa/build/release process for their software and does not follow semantic versioning rules. For example, terraform init isn't compatible between 0.9 and 0.8. Now they are going to split providers and use \"init\" to install providers as plugin in coming version 0.10 So recommend to keep updating to latest terraform version Run terraform from docker container Terraform releases official docker containers that you can easily control which version you can run. Recommend to run terraform docker container, when you set your build job in CI/CD pipeline. TERRAFORM_IMAGE=hashicorp/terraform:0.9.8 TERRAFORM_CMD=\"docker run -ti --rm -w /app -v ${HOME}/.aws:/root/.aws -v ${HOME}/.ssh:/root/.ssh -v `pwd`:/app $TERRAFORM_IMAGE\" Troubleshooting with messy output Sometime, you applied the changes several times, the plan output always prompts there are some changes, essepecially in iam and s3 policy. It is hard to troubleshooting the problem with messy json output in one line. With the tool terraform-landscape , it improves Terraform plan output to be easier to read and understand, you can easily find out where is the problem. For details, please go through the project at https://github.com/coinbase/terraform-landscape terraform plan -var-file=${env}/${env}.tfvars -input=false -out=plan -lock=false |tee report gem install terraform_landscape landscape < report Some updates for terraform 0.10.x After Hashicorp splits terraform providers out of terraform core binary from v0.10.x, you will see errors to complain aws, template, terraform provider version are not installed when run terraform init * provider.aws: no suitable version installed version requirements: \"~> 1.0\" Please add below codes to main.tf provider \"aws\" { version = \"~> 1.0\" region = \"${var.region}\" } provider \"template\" { version = \"~> 1.0\" } provider \"terraform\" { version = \"~> 1.0\" } Useful documents you should read terraform tips & tricks: loops, if-statements, and gotchas","title":"Terraform"},{"location":"DevOps/Terraform/#general-info","text":"Mostly from BWITS/terraform-best-practices .","title":"General info"},{"location":"DevOps/Terraform/#always-run-terraform-command-with-var-file","text":"$ cat config/dev.tfvars name = \"dev-stack\" s3_terraform_bucket = \"dev-stack-terraform\" tag_team_name = \"hello-world\" $ terraform plan -var-file=config/dev.tfvars With var-file , you can easily manage environment (dev/stag/uat/prod) variables. With var-file , you avoid to run terraform with long list of key-value pairs ( -var foo=bar )","title":"Always Run terraform command with var-file"},{"location":"DevOps/Terraform/#manage-s3-backend-for-tfstate-files","text":"Terraform doesn't support Interpolate variables in terraform backend config , normally you write a seperate script to define s3 backend bucket name for different environments, but I recommend to hard code it directly as below Add below codes in terraform configuration files. $ cat main.tf terraform { backend \"s3\" { bucket = \"terraform-state\" key = \"terraform.tfstate\" region = \"eu-central-1\" encrypt = \"true\" dynamodb_table = \"terraform-tf-state-lock\" lifecycle { prevent_destroy = true } } } Define backend variables for particular environment $ cat config/backend-dev.conf bucket = \"<unique_bucke_name>-terraform-development\" key = \"development/service-1.tfstate\" encrypt = true region = \"ap-southeast-2\" kms_key_id = \"alias/terraform\" dynamodb_table = \"terraform-lock\" bucket - s3 bucket name, has to be globally unique. key - Set some meanful names for different services and applications, such as vpc.tfstate, application_name.tfstate, etc dynamodb_table - optional when you want to enable State Locking After you set config/backend-dev.conf and config/dev.tfvars properly (for each environment). You can easily run terraform as below: env=dev terraform get -update=true terraform init -backend-config=config/backend-${env}.conf terraform plan -var-file=config/${env}.tfvars terraform apply -var-file=config/${env}.tfvars","title":"Manage s3 backend for tfstate files"},{"location":"DevOps/Terraform/#retrieves-state-meta-data-from-a-remote-backend","text":"Normally we have several layers to manage terraform resources, such as network, database, application layers. After you create the basic network resources, such as vpc, security group, subnets, nat gateway in vpc stack. Your database layer and applications layer should always refer the resource from vpc layer directly via terraform_remote_state data srouce. data \"terraform_remote_state\" \"vpc\" { backend = \"s3\" config{ bucket = \"${var.s3_terraform_bucket}\" key = \"${var.environment}/vpc.tfstate\" region=\"${var.aws_region}\" } } # Retrieves the vpc_id and subnet_ids directly from remote backend state files. resource \"aws_xx_xxxx\" \"main\" { # ... subnet_ids = \"${split(\",\", data.terraform_remote_state.vpc.data_subnets)}\" vpc_id = \"${data.terraform_remote_state.vpc.vpc_id}\" }","title":"Retrieves state meta data from a remote backend"},{"location":"DevOps/Terraform/#use-share-modules","text":"Manage terraform resource with shared modules, this will save a lot of coding time. For detail, you can start from below links: Terraform module usage Terraform module registry Terraform AWS modules terraform modules don't support count parameter currently. You can follow up this ticket for updates: https://github.com/hashicorp/terraform/issues/953","title":"Use share modules"},{"location":"DevOps/Terraform/#isolate-environment","text":"Sometimes, developers like to create a security group and share it to all non-prod (dev/qa) environments. Don't do that, create resources with different name for each environment and each resource. variable \"application\" { description = \"application name\" default = \"\" } variable \"environment\" { description = \"environment name\" default = \"\" } resource \"<any_resource>\" { name = \"${var.application}-${var.environment}-<resource_name>\" ... } Wth that, you will easily define the resource with meaningful and unique name, and you can build more same application stack for different developers without change a lot. For example, you update the environment to dev1, dev2, etc.","title":"Isolate environment"},{"location":"DevOps/Terraform/#use-terraform-import-to-include-as-more-resources-you-can","text":"Sometimes developers manually created resources directly. You need to mark these resource and use terraform import to include them in codes. terraform import","title":"Use terraform import to include as more resources you can"},{"location":"DevOps/Terraform/#avoid-hard-code-the-resources","text":"A sample: account_number=\u201c123456789012\" account_alias=\"mycompany\" The current aws account id or account alias can be input directly via data sources. # The attribute `${data.aws_caller_identity.current.account_id}` will be current account number. data \"aws_caller_identity\" \"current\" {} # The attribue `${data.aws_iam_account_alias.current.account_alias}` will be current account alias # Tips: you can easly use this attribue to create terraform bucket with environment, project name, etc. data \"aws_iam_account_alias\" \"current\" {} Refer: terraform data sources","title":"Avoid hard code the resources"},{"location":"DevOps/Terraform/#format-terraform-codes","text":"Always run terraform fmt to format terraform configuration files and make them neatly. I used below codes in Travis CI pipeline (you can re-use it in any pipelines) to validate and format check the codes before you can merge it to master branch. - find . -type f -name \"*.tf\" -exec dirname {} \\;|sort -u | while read m; do (terraform validate -check-variables=false \"$m\" && echo \"\u221a $m\") || exit 1 ; done - if [ `terraform fmt | wc -c` -ne 0 ]; then echo \"Some terraform files need be formatted, run 'terraform fmt' to fix\"; exit 1; fi","title":"Format terraform codes"},{"location":"DevOps/Terraform/#enable-version-control-on-terraform-state-files-bucket","text":"Always set backend to s3 and enable version control on this bucket. If you'd like to manage terraform state bucket as well, recommend to use this repostory I wrote tf_aws_tfstate_bucket to create the bucket and replica to other regions automatically.","title":"Enable version control on terraform state files bucket"},{"location":"DevOps/Terraform/#generate-readme-for-each-module-about-input-and-output-variables","text":"You needn't manually manage USAGE about input variables and outputs. terraform-docs can do this job automatically. $ brew install terraform-docs $ cd terraform/modules/vpc $ terraform-docs md . > README.md For details on how to run terraform-docs , check this repository: https://github.com/segmentio/terraform-docs There is a simple sample for you to start tf_aws_acme , the README is generatd by terraform-docs","title":"Generate README for each module about input and output variables"},{"location":"DevOps/Terraform/#update-terraform-version","text":"Hashicorp doesn't have a good qa/build/release process for their software and does not follow semantic versioning rules. For example, terraform init isn't compatible between 0.9 and 0.8. Now they are going to split providers and use \"init\" to install providers as plugin in coming version 0.10 So recommend to keep updating to latest terraform version","title":"Update terraform version"},{"location":"DevOps/Terraform/#run-terraform-from-docker-container","text":"Terraform releases official docker containers that you can easily control which version you can run. Recommend to run terraform docker container, when you set your build job in CI/CD pipeline. TERRAFORM_IMAGE=hashicorp/terraform:0.9.8 TERRAFORM_CMD=\"docker run -ti --rm -w /app -v ${HOME}/.aws:/root/.aws -v ${HOME}/.ssh:/root/.ssh -v `pwd`:/app $TERRAFORM_IMAGE\"","title":"Run terraform from docker container"},{"location":"DevOps/Terraform/#troubleshooting-with-messy-output","text":"Sometime, you applied the changes several times, the plan output always prompts there are some changes, essepecially in iam and s3 policy. It is hard to troubleshooting the problem with messy json output in one line. With the tool terraform-landscape , it improves Terraform plan output to be easier to read and understand, you can easily find out where is the problem. For details, please go through the project at https://github.com/coinbase/terraform-landscape terraform plan -var-file=${env}/${env}.tfvars -input=false -out=plan -lock=false |tee report gem install terraform_landscape landscape < report","title":"Troubleshooting with messy output"},{"location":"DevOps/Terraform/#some-updates-for-terraform-010x","text":"After Hashicorp splits terraform providers out of terraform core binary from v0.10.x, you will see errors to complain aws, template, terraform provider version are not installed when run terraform init * provider.aws: no suitable version installed version requirements: \"~> 1.0\" Please add below codes to main.tf provider \"aws\" { version = \"~> 1.0\" region = \"${var.region}\" } provider \"template\" { version = \"~> 1.0\" } provider \"terraform\" { version = \"~> 1.0\" }","title":"Some updates for terraform 0.10.x"},{"location":"DevOps/Terraform/#useful-documents-you-should-read","text":"terraform tips & tricks: loops, if-statements, and gotchas","title":"Useful documents you should read"},{"location":"DevTools/Build/GCC/","text":"Ubuntu: GCC-5 and GCC-6 # It could be useful to remove old gcc alternatives sudo update-alternatives --remove-all gcc sudo update-alternatives --remove-all g++ # Alternatives for GCC 5 and 6 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 --slave /usr/bin/g++ g++ /usr/bin/g++-6 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 --slave /usr/bin/g++ g++ /usr/bin/g++-5 sudo update-alternatives --config gcc","title":"GCC"},{"location":"DevTools/Build/GCC/#ubuntu-gcc-5-and-gcc-6","text":"# It could be useful to remove old gcc alternatives sudo update-alternatives --remove-all gcc sudo update-alternatives --remove-all g++ # Alternatives for GCC 5 and 6 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 --slave /usr/bin/g++ g++ /usr/bin/g++-6 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 --slave /usr/bin/g++ g++ /usr/bin/g++-5 sudo update-alternatives --config gcc","title":"Ubuntu: GCC-5 and GCC-6"},{"location":"DevTools/Build/Make/","text":"Flags to configure /configure CFLAGS='-std=gnu89 -g -O2 -w' CXXFLAGS='-std=gnu++98 -g -O2 -w'","title":"Make"},{"location":"DevTools/Build/Make/#flags-to-configure","text":"/configure CFLAGS='-std=gnu89 -g -O2 -w' CXXFLAGS='-std=gnu++98 -g -O2 -w'","title":"Flags to configure"},{"location":"DevTools/Version_Control/Git-Flow/","text":"Git-Flow Links Git-Flow branching model Sample Workflow Install Git-Flow-AVH Git-Flow-AVH Instalaltion Notes Initialize workflow in Git repo $ git flow init Which branch should be used for bringing forth production releases? - develop - master - release/1.0.0 Branch name for production releases: [master] Which branch should be used for integration of the \"next release\"? - dev/feature/ISSUE-111 - develop - release/1.0.0 Branch name for \"next release\" development: [develop] How to name your supporting branch prefixes? Feature branches? [feature/] dev/feature/ Bugfix branches? [bugfix/] Release branches? [release/] Hotfix branches? [hotfix/] Support branches? [support/] Version tag prefix? [] Hooks and filters directory? [~/workspace/git-repo/.git/hooks] Finish flow Ensure that all branches are up to date with remotes #assuming that you are on release branch release=`git branch | grep \\* | cut -d ' ' -f2-` git checkout develop && git pull git checkout master && git pull git checkout $release && git pull Merge branches with command: git flow release finish --keepremote Push all branches and get back to develop: git push git checkout master && git push git push --tags git checkout develop Remove all dev branches that were merged into develop to keep only important one: git branch -r --merged origin/develop | grep origin/dev/ | sed -s 's@origin/@@' | sed -e 's/^[ \\t]*//' | tee branches_to_delete for i in `cat branches_to_delete`; do git push origin :$i; done rm branches_to_delete Hotfix git flow hotfix start 1.10.1 Switched to a new branch 'hotfix/1.10.1' Summary of actions: - A new branch 'hotfix/1.10.1' was created, based on 'master' - You are now on branch 'hotfix/1.10.1' Follow-up actions: - Bump the version number now! - Start committing your hot fixes - When done, run: git flow hotfix finish '1.10.1'","title":"Git-Flow"},{"location":"DevTools/Version_Control/Git-Flow/#git-flow","text":"","title":"Git-Flow"},{"location":"DevTools/Version_Control/Git-Flow/#links","text":"Git-Flow branching model","title":"Links"},{"location":"DevTools/Version_Control/Git-Flow/#sample-workflow","text":"","title":"Sample Workflow"},{"location":"DevTools/Version_Control/Git-Flow/#install-git-flow-avh","text":"Git-Flow-AVH Instalaltion Notes","title":"Install Git-Flow-AVH"},{"location":"DevTools/Version_Control/Git-Flow/#initialize-workflow-in-git-repo","text":"$ git flow init Which branch should be used for bringing forth production releases? - develop - master - release/1.0.0 Branch name for production releases: [master] Which branch should be used for integration of the \"next release\"? - dev/feature/ISSUE-111 - develop - release/1.0.0 Branch name for \"next release\" development: [develop] How to name your supporting branch prefixes? Feature branches? [feature/] dev/feature/ Bugfix branches? [bugfix/] Release branches? [release/] Hotfix branches? [hotfix/] Support branches? [support/] Version tag prefix? [] Hooks and filters directory? [~/workspace/git-repo/.git/hooks]","title":"Initialize workflow in Git repo"},{"location":"DevTools/Version_Control/Git-Flow/#finish-flow","text":"","title":"Finish flow"},{"location":"DevTools/Version_Control/Git-Flow/#ensure-that-all-branches-are-up-to-date-with-remotes","text":"#assuming that you are on release branch release=`git branch | grep \\* | cut -d ' ' -f2-` git checkout develop && git pull git checkout master && git pull git checkout $release && git pull","title":"Ensure that all branches are up to date with remotes"},{"location":"DevTools/Version_Control/Git-Flow/#merge-branches-with-command","text":"git flow release finish --keepremote","title":"Merge branches with command:"},{"location":"DevTools/Version_Control/Git-Flow/#push-all-branches-and-get-back-to-develop","text":"git push git checkout master && git push git push --tags git checkout develop","title":"Push all branches and get back to develop:"},{"location":"DevTools/Version_Control/Git-Flow/#remove-all-dev-branches-that-were-merged-into-develop-to-keep-only-important-one","text":"git branch -r --merged origin/develop | grep origin/dev/ | sed -s 's@origin/@@' | sed -e 's/^[ \\t]*//' | tee branches_to_delete for i in `cat branches_to_delete`; do git push origin :$i; done rm branches_to_delete","title":"Remove all dev branches that were merged into develop to keep only important one:"},{"location":"DevTools/Version_Control/Git-Flow/#hotfix","text":"git flow hotfix start 1.10.1 Switched to a new branch 'hotfix/1.10.1' Summary of actions: - A new branch 'hotfix/1.10.1' was created, based on 'master' - You are now on branch 'hotfix/1.10.1' Follow-up actions: - Bump the version number now! - Start committing your hot fixes - When done, run: git flow hotfix finish '1.10.1'","title":"Hotfix"},{"location":"DevTools/Version_Control/Git/","text":"Common Git commands Cloning # For new repos(-jN - number of simltaniuos jobs): git clone --recursive-submodules -j4 git@github.com:keepbot/docs.git git clone --recursive-submodules git@github.com:keepbot/docs.git # Ignore self signed ssl certificates git -c http.sslVerify=false clone --recursive git@github.com:keepbot/docs.git Cleaning repository # Those commands reset all changes. The repository will be the same as clone new repos. git reset --hard git clean -d -x -f Commits # Add files to commit git add <path_to_file> # Commit with comment git commit -m \"Your comment here\" # Commit with review (Will be shown as diff) git commit -v # Add changes to previous commit or change commit message git commit --amend # Add changes to previous commit without changing commit message git commit --amend --no-edit Tagging # Add tag to current commit git tag <tag_name> # Add tag to commit git tag <tag_name> <commit_hash> # Rewrite existed tag to current commit git tag --force <tag_name> # Rewrite existed tag to commit git tag --force <tag_name> <commit_hash> # Push tags to remote repository git push --tags # Overwrite tags to remote repository git push --tags --force Submodules Add and Update submodule # Add git submodule add -b <branch_name> <submodule_git_url> <local_path> # Update git submodule update --recursive --remote # Download all git submodule update --init --recursive Remove submodule # 1. Delete the relevant section from the *.gitmodules* file. [submodule \"vendor\"] path = vendor url = git://github.com/some-user/some-repo.git # 2. Stage the *.gitmodules* changes with following command: git add .gitmodules # 3.Delete the relevant section from *.git/config*: [submodule \"vendor\"] url = git://github.com/some-user/some-repo.git # 4. Remove submodule folders from repo: git rm --cached path/to/submodule rm -rf .git/modules/submodule_name # 6. Commit changes # 7. Delete files rm -rf path/to/submodule Change branch for existing submodule cd <path_to_repo> git config -f .gitmodules submodule.<local_path>.branch <branch_name> # Make sure that submodule is at the latest of branch (OR) cd <submodule_local_path> git checkout -b branch --track origin/branch git branch -u origin/master master cd <path_to_repo> git add <submodule_local_path> Branches # Create branch git checkout -b <branch_name> # Checkout branch git checkout <branch_name> # List local branches git branch # List remote branches git branch -r # List all branches git branch -a # List all merged branches git branch -a --merged # List all not merged branches git branch -a --no-merged # Remove branch git push origin --delete <branch_name> Garbage collection # Help: https://git-scm.com/docs/git-gc # Runs a number of housekeeping tasks within the current repository, such as compressing file revisions (to reduce disk space and increase performance), removing unreachable objects which may have been created from prior invocations of git add, packing refs, pruning reflog, rerere metadata or stale working trees. # Users are encouraged to run this task on a regular basis within each repository to maintain good disk space utilization and good operating performance. # Some git commands may automatically run git gc # Enable automatic garbage collection git config --global gc.auto 1 # Disable automatic garbage collection git config --global gc.auto 0 # Run garbage collector git gc # Run garbage collector to prune old file git gc --prune=now # Run garbage collector if necessary git gc --auto # Alternative ways to cleanup old references: git remote prune origin git fetch --prune Patches Create patch from commit ## The easiest version (you can specify number of commit to patch) git format-patch -1 HEAD ## Same as first, but create numbered files (00001-nnnnn) git format-patch -n HEAD^ ## Simple cat ftom stdout, works fine on most of systems, but be carfull, if you have customized terminal (color tags, special symbols, etc.) git show HEAD > path_to.patch Apply patches git apply --stat 00001-File-Name.patch git apply --check 00001-File-Name.patch git am < 0001-File-Name.patch Line endings OS-based proper config # Mac git config --global core.autocrlf input # Linux git config --global core.autocrlf input # Windows git config --global core.autocrlf true Normalize line endings # Save your current files in Git, so that none of your work is lost. git add . -u git commit -m \"Saving files before refreshing line endings\" # Remove the index and force Git to rescan the working directory. rm .git/index # Rewrite the Git index to pick up all the new line endings. git reset # Show the rewritten, normalized files. git status # Add all your changed files back, and prepare them for a commit. This is your chance to inspect which files, if any, were unchanged. git add -u # It is perfectly safe to see a lot of messages here that read # \"warning: CRLF will be replaced by LF in file.\" # Rewrite the .gitattributes file. git add .gitattributes # Commit the changes to your repository. git commit -m \"Normalize all the line endings\" Settings # System namespace git config --global user.name \"Your Name\" git config --global user.email your@e-mail.com # Repository namespace git config --local user.name \"Your Name\" git config --local user.email your@e-mail.com Update local reposytory from remote # Fentch + Merge git pull # Fetch only git fetch # Fetch changes from remote repository with modified local repository git commit -a -m \"new commentary\" git pull rebase # pull remote with overwrite local changes git fetch --all git reset --hard origin/master Working with bunch of repositories # Last commits for d in `ls`; do cd $d; git log --pretty=format:\"%h - %an, %ar : %s\" -1; cd ..; done # Mass checkout for d in `ls`; do cd $d; git checkout; cd ..; done Logs git log --pretty=format:\"%h - %an, %ar : %s\" -1 Provide separate ssh-key vim ~/.ssh/config #------ add ------ host <full_server_hostname> HostName <full_server_hostname> IdentityFile ~/.ssh/<your_custom_ssh_key> User <git_user> #---- example --- host github.com HostName github.com IdentityFile ~/.ssh/id_rsa_github User git #---------------- sudo chmod 400 ~/.ssh/<your_custom_ssh_key> Now you can clone repo","title":"Common Git commands"},{"location":"DevTools/Version_Control/Git/#common-git-commands","text":"","title":"Common Git commands"},{"location":"DevTools/Version_Control/Git/#cloning","text":"# For new repos(-jN - number of simltaniuos jobs): git clone --recursive-submodules -j4 git@github.com:keepbot/docs.git git clone --recursive-submodules git@github.com:keepbot/docs.git # Ignore self signed ssl certificates git -c http.sslVerify=false clone --recursive git@github.com:keepbot/docs.git","title":"Cloning"},{"location":"DevTools/Version_Control/Git/#cleaning-repository","text":"# Those commands reset all changes. The repository will be the same as clone new repos. git reset --hard git clean -d -x -f","title":"Cleaning repository"},{"location":"DevTools/Version_Control/Git/#commits","text":"# Add files to commit git add <path_to_file> # Commit with comment git commit -m \"Your comment here\" # Commit with review (Will be shown as diff) git commit -v # Add changes to previous commit or change commit message git commit --amend # Add changes to previous commit without changing commit message git commit --amend --no-edit","title":"Commits"},{"location":"DevTools/Version_Control/Git/#tagging","text":"# Add tag to current commit git tag <tag_name> # Add tag to commit git tag <tag_name> <commit_hash> # Rewrite existed tag to current commit git tag --force <tag_name> # Rewrite existed tag to commit git tag --force <tag_name> <commit_hash> # Push tags to remote repository git push --tags # Overwrite tags to remote repository git push --tags --force","title":"Tagging"},{"location":"DevTools/Version_Control/Git/#submodules","text":"","title":"Submodules"},{"location":"DevTools/Version_Control/Git/#add-and-update-submodule","text":"# Add git submodule add -b <branch_name> <submodule_git_url> <local_path> # Update git submodule update --recursive --remote # Download all git submodule update --init --recursive","title":"Add and Update submodule"},{"location":"DevTools/Version_Control/Git/#remove-submodule","text":"# 1. Delete the relevant section from the *.gitmodules* file. [submodule \"vendor\"] path = vendor url = git://github.com/some-user/some-repo.git # 2. Stage the *.gitmodules* changes with following command: git add .gitmodules # 3.Delete the relevant section from *.git/config*: [submodule \"vendor\"] url = git://github.com/some-user/some-repo.git # 4. Remove submodule folders from repo: git rm --cached path/to/submodule rm -rf .git/modules/submodule_name # 6. Commit changes # 7. Delete files rm -rf path/to/submodule","title":"Remove submodule"},{"location":"DevTools/Version_Control/Git/#change-branch-for-existing-submodule","text":"cd <path_to_repo> git config -f .gitmodules submodule.<local_path>.branch <branch_name> # Make sure that submodule is at the latest of branch (OR) cd <submodule_local_path> git checkout -b branch --track origin/branch git branch -u origin/master master cd <path_to_repo> git add <submodule_local_path>","title":"Change branch for existing submodule"},{"location":"DevTools/Version_Control/Git/#branches","text":"# Create branch git checkout -b <branch_name> # Checkout branch git checkout <branch_name> # List local branches git branch # List remote branches git branch -r # List all branches git branch -a # List all merged branches git branch -a --merged # List all not merged branches git branch -a --no-merged # Remove branch git push origin --delete <branch_name>","title":"Branches"},{"location":"DevTools/Version_Control/Git/#garbage-collection","text":"# Help: https://git-scm.com/docs/git-gc # Runs a number of housekeeping tasks within the current repository, such as compressing file revisions (to reduce disk space and increase performance), removing unreachable objects which may have been created from prior invocations of git add, packing refs, pruning reflog, rerere metadata or stale working trees. # Users are encouraged to run this task on a regular basis within each repository to maintain good disk space utilization and good operating performance. # Some git commands may automatically run git gc # Enable automatic garbage collection git config --global gc.auto 1 # Disable automatic garbage collection git config --global gc.auto 0 # Run garbage collector git gc # Run garbage collector to prune old file git gc --prune=now # Run garbage collector if necessary git gc --auto # Alternative ways to cleanup old references: git remote prune origin git fetch --prune","title":"Garbage collection"},{"location":"DevTools/Version_Control/Git/#patches","text":"","title":"Patches"},{"location":"DevTools/Version_Control/Git/#create-patch-from-commit","text":"## The easiest version (you can specify number of commit to patch) git format-patch -1 HEAD ## Same as first, but create numbered files (00001-nnnnn) git format-patch -n HEAD^ ## Simple cat ftom stdout, works fine on most of systems, but be carfull, if you have customized terminal (color tags, special symbols, etc.) git show HEAD > path_to.patch","title":"Create patch from commit"},{"location":"DevTools/Version_Control/Git/#apply-patches","text":"git apply --stat 00001-File-Name.patch git apply --check 00001-File-Name.patch git am < 0001-File-Name.patch","title":"Apply patches"},{"location":"DevTools/Version_Control/Git/#line-endings","text":"","title":"Line endings"},{"location":"DevTools/Version_Control/Git/#os-based-proper-config","text":"# Mac git config --global core.autocrlf input # Linux git config --global core.autocrlf input # Windows git config --global core.autocrlf true","title":"OS-based proper config"},{"location":"DevTools/Version_Control/Git/#normalize-line-endings","text":"# Save your current files in Git, so that none of your work is lost. git add . -u git commit -m \"Saving files before refreshing line endings\" # Remove the index and force Git to rescan the working directory. rm .git/index # Rewrite the Git index to pick up all the new line endings. git reset # Show the rewritten, normalized files. git status # Add all your changed files back, and prepare them for a commit. This is your chance to inspect which files, if any, were unchanged. git add -u # It is perfectly safe to see a lot of messages here that read # \"warning: CRLF will be replaced by LF in file.\" # Rewrite the .gitattributes file. git add .gitattributes # Commit the changes to your repository. git commit -m \"Normalize all the line endings\"","title":"Normalize line endings"},{"location":"DevTools/Version_Control/Git/#settings","text":"# System namespace git config --global user.name \"Your Name\" git config --global user.email your@e-mail.com # Repository namespace git config --local user.name \"Your Name\" git config --local user.email your@e-mail.com","title":"Settings"},{"location":"DevTools/Version_Control/Git/#update-local-reposytory-from-remote","text":"# Fentch + Merge git pull # Fetch only git fetch # Fetch changes from remote repository with modified local repository git commit -a -m \"new commentary\" git pull rebase # pull remote with overwrite local changes git fetch --all git reset --hard origin/master","title":"Update local reposytory from remote"},{"location":"DevTools/Version_Control/Git/#working-with-bunch-of-repositories","text":"# Last commits for d in `ls`; do cd $d; git log --pretty=format:\"%h - %an, %ar : %s\" -1; cd ..; done # Mass checkout for d in `ls`; do cd $d; git checkout; cd ..; done","title":"Working with bunch of  repositories"},{"location":"DevTools/Version_Control/Git/#logs","text":"git log --pretty=format:\"%h - %an, %ar : %s\" -1","title":"Logs"},{"location":"DevTools/Version_Control/Git/#provide-separate-ssh-key","text":"vim ~/.ssh/config #------ add ------ host <full_server_hostname> HostName <full_server_hostname> IdentityFile ~/.ssh/<your_custom_ssh_key> User <git_user> #---- example --- host github.com HostName github.com IdentityFile ~/.ssh/id_rsa_github User git #---------------- sudo chmod 400 ~/.ssh/<your_custom_ssh_key> Now you can clone repo","title":"Provide separate ssh-key"},{"location":"DevTools/Version_Control/GitHub/","text":"Independent history catalogs of git repositories # Makes a bunch of history folders formatted by the next way: <repository>-<number_of_commit>-<commit_hash> # Check commit_list.end for mistakes, you need simple list of commits git clone <repository_url> <repository> cd <repository> && git log --pretty=format:\"%h\" > ../commit_list && cd .. tac commit_list > commit_list.end i=1; for cid in `cat commit_list.end`; do cp -r <repository> <repository>-$i-$cid; cd <repository>-$i-$cid; git checkout $cid; cd ..; ((i=i+1)); done Clone all user's repositories # Get complete list of user's repositories in JSON file curl -s https://api.github.com/users/<username>/repos?per_page=200 > repo.list.json python -c \"import json,sys,os;file = open('repo.list.json' ,'r');obj = json.load(file);obj_size = len(obj);cmd = 'git clone ';[os.system(cmd + obj[x]['clone_url']) for x in range(0, obj_size)];file.close()\" # And dont forget about \"space\"(%20, \" \") in cmd = 'git clone ', it's completely nessesary # Another way to clone up to 200 user's repos(just in shell): curl -s https://api.github.com/users/keepbot/repos?per_page=200 | jq '.[] | .\"clone_url\"' | xargs -I '{}' git clone {} Generate new key-pair in current folder` sh-keygen -t rsa -b 4096 -C \"email@domain\" -f deploy_key","title":"GitHub"},{"location":"DevTools/Version_Control/GitHub/#independent-history-catalogs-of-git-repositories","text":"# Makes a bunch of history folders formatted by the next way: <repository>-<number_of_commit>-<commit_hash> # Check commit_list.end for mistakes, you need simple list of commits git clone <repository_url> <repository> cd <repository> && git log --pretty=format:\"%h\" > ../commit_list && cd .. tac commit_list > commit_list.end i=1; for cid in `cat commit_list.end`; do cp -r <repository> <repository>-$i-$cid; cd <repository>-$i-$cid; git checkout $cid; cd ..; ((i=i+1)); done","title":"Independent history catalogs of git repositories"},{"location":"DevTools/Version_Control/GitHub/#clone-all-users-repositories","text":"# Get complete list of user's repositories in JSON file curl -s https://api.github.com/users/<username>/repos?per_page=200 > repo.list.json python -c \"import json,sys,os;file = open('repo.list.json' ,'r');obj = json.load(file);obj_size = len(obj);cmd = 'git clone ';[os.system(cmd + obj[x]['clone_url']) for x in range(0, obj_size)];file.close()\" # And dont forget about \"space\"(%20, \" \") in cmd = 'git clone ', it's completely nessesary # Another way to clone up to 200 user's repos(just in shell): curl -s https://api.github.com/users/keepbot/repos?per_page=200 | jq '.[] | .\"clone_url\"' | xargs -I '{}' git clone {}","title":"Clone all user's repositories"},{"location":"DevTools/Version_Control/GitHub/#generate-new-key-pair-in-current-folder","text":"sh-keygen -t rsa -b 4096 -C \"email@domain\" -f deploy_key","title":"Generate new key-pair in current folder`"},{"location":"DevTools/Version_Control/Gitignore/","text":"Clean up repository for new gitignore git rm --cached `git ls-files -i --exclude-standard` Android development # Built application files *.apk *.ap_ # Files for the ART/Dalvik VM *.dex # Java class files *.class # Generated files bin/ gen/ out/ # Gradle files .gradle/ build/ # Local configuration file (sdk path, etc) local.properties # Log Files *.log # Android Studio Navigation editor temp files .navigation/ # Android Studio captures folder captures/ # Eclipse project files .classpath .project # Eclipse Metadata .metadata/ # Proguard folder generated by Eclipse proguard/ # Intellij| .idea - for all Android Studio environment *.iml .idea #.idea/workspace.xml #.idea/tasks.xml #.idea/libraries # Keystore files *.jks # External native build folder generated in Android Studio 2.2 and later .externalNativeBuild # NDK obj/ # MacOS .DS_Store .DS_Store? # Windows ehthumbs.db Thumbs.db # Other files .Spotlight-V100 .Trashes /*/out /*/*/build /*/*/production *.iws *.ipr *~ *.swp","title":"Gitignore"},{"location":"DevTools/Version_Control/Gitignore/#clean-up-repository-for-new-gitignore","text":"git rm --cached `git ls-files -i --exclude-standard`","title":"Clean up repository for new gitignore"},{"location":"DevTools/Version_Control/Gitignore/#android-development","text":"# Built application files *.apk *.ap_ # Files for the ART/Dalvik VM *.dex # Java class files *.class # Generated files bin/ gen/ out/ # Gradle files .gradle/ build/ # Local configuration file (sdk path, etc) local.properties # Log Files *.log # Android Studio Navigation editor temp files .navigation/ # Android Studio captures folder captures/ # Eclipse project files .classpath .project # Eclipse Metadata .metadata/ # Proguard folder generated by Eclipse proguard/ # Intellij| .idea - for all Android Studio environment *.iml .idea #.idea/workspace.xml #.idea/tasks.xml #.idea/libraries # Keystore files *.jks # External native build folder generated in Android Studio 2.2 and later .externalNativeBuild # NDK obj/ # MacOS .DS_Store .DS_Store? # Windows ehthumbs.db Thumbs.db # Other files .Spotlight-V100 .Trashes /*/out /*/*/build /*/*/production *.iws *.ipr *~ *.swp","title":"Android development"},{"location":"DevTools/Version_Control/Subversion/","text":"Get local copy svn checkout <url> <local_path> Save changes to repository svn commit -m \"log messages\" Lists directories svn list Add file to repository svn add <filename> Remove file from repository svn delete <url_to_file> Display the difference svn diff <filename> Status of your copy svn status <local_path> Display log message svn log <local_path> Rename file or directory svn move <old_filename> <new_filename> Update of your copy svn update <local_path>","title":"Subversion"},{"location":"DevTools/Version_Control/Subversion/#get-local-copy","text":"svn checkout <url> <local_path>","title":"Get local copy"},{"location":"DevTools/Version_Control/Subversion/#save-changes-to-repository","text":"svn commit -m \"log messages\"","title":"Save changes to repository"},{"location":"DevTools/Version_Control/Subversion/#lists-directories","text":"svn list","title":"Lists directories"},{"location":"DevTools/Version_Control/Subversion/#add-file-to-repository","text":"svn add <filename>","title":"Add file to repository"},{"location":"DevTools/Version_Control/Subversion/#remove-file-from-repository","text":"svn delete <url_to_file>","title":"Remove file from repository"},{"location":"DevTools/Version_Control/Subversion/#display-the-difference","text":"svn diff <filename>","title":"Display the difference"},{"location":"DevTools/Version_Control/Subversion/#status-of-your-copy","text":"svn status <local_path>","title":"Status of your copy"},{"location":"DevTools/Version_Control/Subversion/#display-log-message","text":"svn log <local_path>","title":"Display log message"},{"location":"DevTools/Version_Control/Subversion/#rename-file-or-directory","text":"svn move <old_filename> <new_filename>","title":"Rename file or directory"},{"location":"DevTools/Version_Control/Subversion/#update-of-your-copy","text":"svn update <local_path>","title":"Update of your copy"},{"location":"Education/Free_Programming_Books/Courses_EN/","text":"Index Algorithms & Data Structures Android Assembly Bash / Shell C C# C++ Clojure Compilers CUDA Data Science Databases Deep Learning Git Go Haskell HTML / CSS iOS Java JavaScript Angular.js jQuery React Redux Sails.js Lua Machine Learning Matlab Mercurial Misc .NET OCaml Perl PHP Python QB64 R RethinkDB Ruby Sails.js Scala Software Engineering SQL Swift Theory Verilog / VHDL / SystemVerilog Web Development Algorithms & Data Structures Berkeley University CS 61B: Data Structures IIT Bombay Foundation of Data Structures (CS213.1x) MIT's Design and Analysis of Algorithms (Spring 2012) - Dana Moshkovitz, Bruce Tidor MIT's Design and Analysis of Algorithms (Spring 2015) - Erik Demaine, Srini Devadas, Nancy Lynch MIT's Introduction to Algorithms (SMA 5503) (Fall 2005) - Charles Leiserson, Erik Demaine Princeton University Algorithms, Part 1 Princeton University Algorithms, Part 2 Stanford University Algorithms: Design and Analysis, Part 1 Stanford University Algorithms: Design and Analysis, Part 2 Assembly Introduction To Reverse Engineering Software Introductory Intel x86: Architecture, Assembly, Applications, & Alliteration Android Creative, Serious and Playful Science of Android Apps Learn how to program: Android - Epicodus Inc. Material design Programming Cloud Services for Android Handheld Systems Programming Mobile Applications for Android Handheld Systems pt. 1 Programming Mobile Applications for Android Handheld Systems pt. 2 Programming Mobile Services for Android Handheld Systems: Communication Programming Mobile Services for Android Handheld Systems: Concurrency Udacity Android Course Catalog Bash / Shell Bento Shell Track (Bento) Shell Scripting Tutorial C C Programming Tutorial Introduction to Computer Science C Sharp Beginning Game Programming with C# Learn how to program: C# - Epicodus Inc. C++ C++ Tutorial Google's C++ Course Introduction to C++ (MIT's opencourseware) LearnCpp.com C++ Tutorial Clojure Functional Programming with Clojure Compilers Stanford's Compilers Cuda Intro to Parallel Programming Using CUDA to Harness the Power of GPUs Data Science Advanced Data Mining with Weka MOOC Data Mining with Weka MOOC Introduction to Python for Data Science More Data Mining with Weka MOOC The Analytics Edge Databases Database Systems (MIT's opencourseware) Introduction to Databases (Stanford University) Deep Learning Convolutional Neural Networks for Visual Recognition Deep Learning for Natural Language Processing MIT 6.S094: Deep Learning for Self-Driving Cars Practical Deep Learning For Coders taught - Jeremy Howard Self-Paced Courses for Deep Learning Unsupervised Feature Learning and Deep Learning What is Deep Learning Git Bento Git Learning Track (Bento) Bento GitHub Learning Track (Bento) How to Use Git and GitHub (Udacity) Go Go Tutorial Haskell C9 : Functional Programming Fundamentals - Erik Meijer CIS 194: Introduction to Haskell - Brent Yorgey CS240h: Functional Systems in Haskell - Bryan O'Sullivan edX: Introduction to Functional Programming - Erik Meijer RWTH Aachen University: Functional Programming - J\u00fcrgen Giesl HTML / CSS Bento CSS Learning Track (Bento) Bento HTML Learning Track (Bento) Build a Personal Website with Dash Build a responsive website with Webflow Build a SaaS landing page using Skeleton Build Dynamic Websites CSS Tutorial HTML Tutorial Learn how to program: CSS - Epicodus Inc. Learn HTML5 Programming From Scratch iOS AppCoda Complete iOS Tutorial Developing iOS 7 Apps for iPhone and iPad Ray Wenderlich iOS Tutorial Java Central Connecticut State University, Introduction to CS Using Java Introduction to Java Java for Complete Beginners Java for Mobile Devices - Introducing Codename One Learn how to program: Java - Epicodus Inc. Princeton Algorithms, Part 1 Princeton Algorithms, Part 2 Problem Solving With Java JavaScript Bento JavaScript Learning Track (Bento) Egghead.io Learn how to program: JavaScript - Epicodus Inc. learn:query Angular.js Angular.js Youtube Channel CodeCademy Angular egghead.io youtube channel: Learn AngularJS with Tutorial Videos & Training Shaping up with Angular.js jQuery Bento jQuery Track (Bento) React Start Using React to Build Web Applications Redux Getting Started with Redux Sails.Js Develop web apps in Node.js and Sails.js Lua Lua Interactive Crash Course Lua Tutorial Machine Learning Google's Machine Learning Crash Course Machine Learning Mini Bootcamp Stanford University Machine Learning MATLAB MIT 18.S997 Introduction to MATLAB Programming Mercurial Hg Init: a Mercurial Tutorial - Joel Spolsky Misc Advanced Data Structures Algorithm Design and Implementation Aml-2018 Ambient Intelligence (F. Corno - L. De Russis - A. Monge Roffarello) Berkeley's CS 61B: Data Structures Berkeley's CS 162: Operating Systems and Systems Programming Berkeley's CS 169: Software Engineering Berkeley's CS 194: What is an Operating System? Bits: The Computer Science of Digital Information Caltech's Learning From data Computer Graphics Embedded Software Safety (P. Koopman) FindLectures.com - Index of conference talks by language / topic LouvainX Paradigms of Computer Programming \u2013 Abstraction and Concurrency LouvainX Paradigms of Computer Programming \u2013 Fundamentals MIT 6.S099: Artificial General Intelligence MIT Numerical Methods (2014) MIT's Artificial Intelligence MIT's Computer Language Engineering MIT's Introduction to Algorithms MIT's Mathematics for Computer Science Principles of Reactive Programming Robotics I - (A. De Luca) Stanford Cryptography I Stanford Cryptography II Stanford SEE 229 - Machine Learning .NET Learn how to program: .NET - Epicodus Inc. OCaml Cornell's Data Structures and Functional Programming Introduction to Functional Programming in OCaml Perl Perl Tutorial PHP Learn how to program: PHP - Epicodus Inc. PHP & MySQL Tutorial Python An Introduction to Interactive Programming in Python (Part 1) (Coursera) An Introduction to Interactive Programming in Python (Part 2) (Coursera) Bento Python Learning Track (Bento) Berkeley's Structure and Interpretation of Computer Programs Codesdope Google's Python Course Introduction to Computer Science and Programming (MIT's opencourseware) Introduction to Python Programming (Udacity) Learn Python Learn Python - Free Interactive Python Tutorial Learn to program in Python Learn to Program: The Fundamentals (Coursera) Learn to Program Using Python (edX) Microsoft Virtual Academy Programming for Everybody Programming Foundations with Python (Udacity) Python Course Python Programming Tutorial QB64 Game Programming with QB64 - Terry Ritchie R R Programming RethinkDB RethinkDB: Distributed Databases Ruby Learn how to program: Ruby - Epicodus Inc. RubyMonk - Interactive Ruby tutorials Scala Functional Programming Principles in Scala Principles of Reactive Programming Software Engineering Advanced Software Construction in Java Agile Development Using Ruby on Rails - Advanced Agile Development Using Ruby on Rails - Basics Software Construction in Java SQL SQL Tutorial Swift Swiftris - Build an iOS Tetris app from scratch Theory Automata Theory Udacity: Intro to Theoretical Computer Science Verilog / VHDL / SystemVerilog SOC Verification Using SystemVerilog SystemVerilog - Learn basics of SystemVerilog for Hardware Verification SystemVerilog based UVM Methodology - Learn to build UVM based Testbenches in SystemVerilog Verilog Hardware Description Language - An Introductory Course Web Development Discover Flask - Full Stack Web Development with Flask Flask(A Python Microframework) Tutorial Free Code Camp The Odin Project - Learn Web Development for Free Udacity Web Development Course Catalog","title":"Courses EN"},{"location":"Education/Free_Programming_Books/Courses_EN/#index","text":"Algorithms & Data Structures Android Assembly Bash / Shell C C# C++ Clojure Compilers CUDA Data Science Databases Deep Learning Git Go Haskell HTML / CSS iOS Java JavaScript Angular.js jQuery React Redux Sails.js Lua Machine Learning Matlab Mercurial Misc .NET OCaml Perl PHP Python QB64 R RethinkDB Ruby Sails.js Scala Software Engineering SQL Swift Theory Verilog / VHDL / SystemVerilog Web Development","title":"Index"},{"location":"Education/Free_Programming_Books/Courses_EN/#algorithms-data-structures","text":"Berkeley University CS 61B: Data Structures IIT Bombay Foundation of Data Structures (CS213.1x) MIT's Design and Analysis of Algorithms (Spring 2012) - Dana Moshkovitz, Bruce Tidor MIT's Design and Analysis of Algorithms (Spring 2015) - Erik Demaine, Srini Devadas, Nancy Lynch MIT's Introduction to Algorithms (SMA 5503) (Fall 2005) - Charles Leiserson, Erik Demaine Princeton University Algorithms, Part 1 Princeton University Algorithms, Part 2 Stanford University Algorithms: Design and Analysis, Part 1 Stanford University Algorithms: Design and Analysis, Part 2","title":"Algorithms &amp; Data Structures"},{"location":"Education/Free_Programming_Books/Courses_EN/#assembly","text":"Introduction To Reverse Engineering Software Introductory Intel x86: Architecture, Assembly, Applications, & Alliteration","title":"Assembly"},{"location":"Education/Free_Programming_Books/Courses_EN/#android","text":"Creative, Serious and Playful Science of Android Apps Learn how to program: Android - Epicodus Inc. Material design Programming Cloud Services for Android Handheld Systems Programming Mobile Applications for Android Handheld Systems pt. 1 Programming Mobile Applications for Android Handheld Systems pt. 2 Programming Mobile Services for Android Handheld Systems: Communication Programming Mobile Services for Android Handheld Systems: Concurrency Udacity Android Course Catalog","title":"Android"},{"location":"Education/Free_Programming_Books/Courses_EN/#bash-shell","text":"Bento Shell Track (Bento) Shell Scripting Tutorial","title":"Bash / Shell"},{"location":"Education/Free_Programming_Books/Courses_EN/#c","text":"C Programming Tutorial Introduction to Computer Science","title":"C"},{"location":"Education/Free_Programming_Books/Courses_EN/#c-sharp","text":"Beginning Game Programming with C# Learn how to program: C# - Epicodus Inc.","title":"C Sharp"},{"location":"Education/Free_Programming_Books/Courses_EN/#c_1","text":"C++ Tutorial Google's C++ Course Introduction to C++ (MIT's opencourseware) LearnCpp.com C++ Tutorial","title":"C++"},{"location":"Education/Free_Programming_Books/Courses_EN/#clojure","text":"Functional Programming with Clojure","title":"Clojure"},{"location":"Education/Free_Programming_Books/Courses_EN/#compilers","text":"Stanford's Compilers","title":"Compilers"},{"location":"Education/Free_Programming_Books/Courses_EN/#cuda","text":"Intro to Parallel Programming Using CUDA to Harness the Power of GPUs","title":"Cuda"},{"location":"Education/Free_Programming_Books/Courses_EN/#data-science","text":"Advanced Data Mining with Weka MOOC Data Mining with Weka MOOC Introduction to Python for Data Science More Data Mining with Weka MOOC The Analytics Edge","title":"Data Science"},{"location":"Education/Free_Programming_Books/Courses_EN/#databases","text":"Database Systems (MIT's opencourseware) Introduction to Databases (Stanford University)","title":"Databases"},{"location":"Education/Free_Programming_Books/Courses_EN/#deep-learning","text":"Convolutional Neural Networks for Visual Recognition Deep Learning for Natural Language Processing MIT 6.S094: Deep Learning for Self-Driving Cars Practical Deep Learning For Coders taught - Jeremy Howard Self-Paced Courses for Deep Learning Unsupervised Feature Learning and Deep Learning What is Deep Learning","title":"Deep Learning"},{"location":"Education/Free_Programming_Books/Courses_EN/#git","text":"Bento Git Learning Track (Bento) Bento GitHub Learning Track (Bento) How to Use Git and GitHub (Udacity)","title":"Git"},{"location":"Education/Free_Programming_Books/Courses_EN/#go","text":"Go Tutorial","title":"Go"},{"location":"Education/Free_Programming_Books/Courses_EN/#haskell","text":"C9 : Functional Programming Fundamentals - Erik Meijer CIS 194: Introduction to Haskell - Brent Yorgey CS240h: Functional Systems in Haskell - Bryan O'Sullivan edX: Introduction to Functional Programming - Erik Meijer RWTH Aachen University: Functional Programming - J\u00fcrgen Giesl","title":"Haskell"},{"location":"Education/Free_Programming_Books/Courses_EN/#html-css","text":"Bento CSS Learning Track (Bento) Bento HTML Learning Track (Bento) Build a Personal Website with Dash Build a responsive website with Webflow Build a SaaS landing page using Skeleton Build Dynamic Websites CSS Tutorial HTML Tutorial Learn how to program: CSS - Epicodus Inc. Learn HTML5 Programming From Scratch","title":"HTML / CSS"},{"location":"Education/Free_Programming_Books/Courses_EN/#ios","text":"AppCoda Complete iOS Tutorial Developing iOS 7 Apps for iPhone and iPad Ray Wenderlich iOS Tutorial","title":"iOS"},{"location":"Education/Free_Programming_Books/Courses_EN/#java","text":"Central Connecticut State University, Introduction to CS Using Java Introduction to Java Java for Complete Beginners Java for Mobile Devices - Introducing Codename One Learn how to program: Java - Epicodus Inc. Princeton Algorithms, Part 1 Princeton Algorithms, Part 2 Problem Solving With Java","title":"Java"},{"location":"Education/Free_Programming_Books/Courses_EN/#javascript","text":"Bento JavaScript Learning Track (Bento) Egghead.io Learn how to program: JavaScript - Epicodus Inc. learn:query","title":"JavaScript"},{"location":"Education/Free_Programming_Books/Courses_EN/#angularjs","text":"Angular.js Youtube Channel CodeCademy Angular egghead.io youtube channel: Learn AngularJS with Tutorial Videos & Training Shaping up with Angular.js","title":"Angular.js"},{"location":"Education/Free_Programming_Books/Courses_EN/#jquery","text":"Bento jQuery Track (Bento)","title":"jQuery"},{"location":"Education/Free_Programming_Books/Courses_EN/#react","text":"Start Using React to Build Web Applications","title":"React"},{"location":"Education/Free_Programming_Books/Courses_EN/#redux","text":"Getting Started with Redux","title":"Redux"},{"location":"Education/Free_Programming_Books/Courses_EN/#sailsjs","text":"Develop web apps in Node.js and Sails.js","title":"Sails.Js"},{"location":"Education/Free_Programming_Books/Courses_EN/#lua","text":"Lua Interactive Crash Course Lua Tutorial","title":"Lua"},{"location":"Education/Free_Programming_Books/Courses_EN/#machine-learning","text":"Google's Machine Learning Crash Course Machine Learning Mini Bootcamp Stanford University Machine Learning","title":"Machine Learning"},{"location":"Education/Free_Programming_Books/Courses_EN/#matlab","text":"MIT 18.S997 Introduction to MATLAB Programming","title":"MATLAB"},{"location":"Education/Free_Programming_Books/Courses_EN/#mercurial","text":"Hg Init: a Mercurial Tutorial - Joel Spolsky","title":"Mercurial"},{"location":"Education/Free_Programming_Books/Courses_EN/#misc","text":"Advanced Data Structures Algorithm Design and Implementation Aml-2018 Ambient Intelligence (F. Corno - L. De Russis - A. Monge Roffarello) Berkeley's CS 61B: Data Structures Berkeley's CS 162: Operating Systems and Systems Programming Berkeley's CS 169: Software Engineering Berkeley's CS 194: What is an Operating System? Bits: The Computer Science of Digital Information Caltech's Learning From data Computer Graphics Embedded Software Safety (P. Koopman) FindLectures.com - Index of conference talks by language / topic LouvainX Paradigms of Computer Programming \u2013 Abstraction and Concurrency LouvainX Paradigms of Computer Programming \u2013 Fundamentals MIT 6.S099: Artificial General Intelligence MIT Numerical Methods (2014) MIT's Artificial Intelligence MIT's Computer Language Engineering MIT's Introduction to Algorithms MIT's Mathematics for Computer Science Principles of Reactive Programming Robotics I - (A. De Luca) Stanford Cryptography I Stanford Cryptography II Stanford SEE 229 - Machine Learning","title":"Misc"},{"location":"Education/Free_Programming_Books/Courses_EN/#net","text":"Learn how to program: .NET - Epicodus Inc.","title":".NET"},{"location":"Education/Free_Programming_Books/Courses_EN/#ocaml","text":"Cornell's Data Structures and Functional Programming Introduction to Functional Programming in OCaml","title":"OCaml"},{"location":"Education/Free_Programming_Books/Courses_EN/#perl","text":"Perl Tutorial","title":"Perl"},{"location":"Education/Free_Programming_Books/Courses_EN/#php","text":"Learn how to program: PHP - Epicodus Inc. PHP & MySQL Tutorial","title":"PHP"},{"location":"Education/Free_Programming_Books/Courses_EN/#python","text":"An Introduction to Interactive Programming in Python (Part 1) (Coursera) An Introduction to Interactive Programming in Python (Part 2) (Coursera) Bento Python Learning Track (Bento) Berkeley's Structure and Interpretation of Computer Programs Codesdope Google's Python Course Introduction to Computer Science and Programming (MIT's opencourseware) Introduction to Python Programming (Udacity) Learn Python Learn Python - Free Interactive Python Tutorial Learn to program in Python Learn to Program: The Fundamentals (Coursera) Learn to Program Using Python (edX) Microsoft Virtual Academy Programming for Everybody Programming Foundations with Python (Udacity) Python Course Python Programming Tutorial","title":"Python"},{"location":"Education/Free_Programming_Books/Courses_EN/#qb64","text":"Game Programming with QB64 - Terry Ritchie","title":"QB64"},{"location":"Education/Free_Programming_Books/Courses_EN/#r","text":"R Programming","title":"R"},{"location":"Education/Free_Programming_Books/Courses_EN/#rethinkdb","text":"RethinkDB: Distributed Databases","title":"RethinkDB"},{"location":"Education/Free_Programming_Books/Courses_EN/#ruby","text":"Learn how to program: Ruby - Epicodus Inc. RubyMonk - Interactive Ruby tutorials","title":"Ruby"},{"location":"Education/Free_Programming_Books/Courses_EN/#scala","text":"Functional Programming Principles in Scala Principles of Reactive Programming","title":"Scala"},{"location":"Education/Free_Programming_Books/Courses_EN/#software-engineering","text":"Advanced Software Construction in Java Agile Development Using Ruby on Rails - Advanced Agile Development Using Ruby on Rails - Basics Software Construction in Java","title":"Software Engineering"},{"location":"Education/Free_Programming_Books/Courses_EN/#sql","text":"SQL Tutorial","title":"SQL"},{"location":"Education/Free_Programming_Books/Courses_EN/#swift","text":"Swiftris - Build an iOS Tetris app from scratch","title":"Swift"},{"location":"Education/Free_Programming_Books/Courses_EN/#theory","text":"Automata Theory Udacity: Intro to Theoretical Computer Science","title":"Theory"},{"location":"Education/Free_Programming_Books/Courses_EN/#verilog-vhdl-systemverilog","text":"SOC Verification Using SystemVerilog SystemVerilog - Learn basics of SystemVerilog for Hardware Verification SystemVerilog based UVM Methodology - Learn to build UVM based Testbenches in SystemVerilog Verilog Hardware Description Language - An Introductory Course","title":"Verilog / VHDL / SystemVerilog"},{"location":"Education/Free_Programming_Books/Courses_EN/#web-development","text":"Discover Flask - Full Stack Web Development with Flask Flask(A Python Microframework) Tutorial Free Code Camp The Odin Project - Learn Web Development for Free Udacity Web Development Course Catalog","title":"Web Development"},{"location":"Education/Free_Programming_Books/Courses_RU/","text":"Index Clojure Java PostgreSQL Python React \u0423\u0440\u043e\u0432\u043d\u0438 BEG - \u043d\u043e\u0432\u0438\u0447\u043e\u043a. \u041e\u0441\u043d\u043e\u0432\u044b. INT - \u0441\u0440\u0435\u0434\u043d\u0438\u0439. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438. ADV - \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439. \u0422\u043e\u043d\u043a\u043e\u0441\u0442\u0438. Clojure \u041a\u0443\u0440\u0441 Clojure (BEG) Java Java. \u041f\u0443\u0442\u044c \u043e\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 \u0434\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. - \u041f\u0451\u0442\u0440 \u0410\u0440\u0441\u0435\u043d\u0442\u044c\u0435\u0432 (INT) \u0412\u0432\u043e\u0434\u043d\u044b\u0439 \u043a\u0443\u0440\u0441. Java \u0432 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u044f\u0445. - \u041f\u0451\u0442\u0440 \u0410\u0440\u0441\u0435\u043d\u0442\u044c\u0435\u0432 (BEG) \u041a\u0443\u0440\u0441 \u0442\u0435\u0441\u0442 \u043f\u043e Java - \u041f\u0451\u0442\u0440 \u0410\u0440\u0441\u0435\u043d\u0442\u044c\u0435\u0432 (BEG) PostgreSQL DBA1. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PostgreSQL (BEG) DBA2. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PostgreSQL. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 (INT) DEV1. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 PostgreSQL (ADV) Hacking PostgreSQL (INT) Python Python: \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 - \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0424\u0451\u0434\u043e\u0440\u043e\u0432 (BEG) Python: \u043e\u0441\u043d\u043e\u0432\u044b \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 - Stepik (INT) \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 Python - Coursera (BEG) \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Python - Stepik (BEG) React React.js \u043a\u0443\u0440\u0441 \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 (BEG) \u0420\u043e\u0443\u0442\u0438\u043d\u0433 \u0432 react-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 (INT) \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b \u043f\u043e Redux (INT)","title":"Courses RU"},{"location":"Education/Free_Programming_Books/Courses_RU/#index","text":"Clojure Java PostgreSQL Python React","title":"Index"},{"location":"Education/Free_Programming_Books/Courses_RU/#_1","text":"BEG - \u043d\u043e\u0432\u0438\u0447\u043e\u043a. \u041e\u0441\u043d\u043e\u0432\u044b. INT - \u0441\u0440\u0435\u0434\u043d\u0438\u0439. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438. ADV - \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439. \u0422\u043e\u043d\u043a\u043e\u0441\u0442\u0438.","title":"\u0423\u0440\u043e\u0432\u043d\u0438"},{"location":"Education/Free_Programming_Books/Courses_RU/#clojure","text":"\u041a\u0443\u0440\u0441 Clojure (BEG)","title":"Clojure"},{"location":"Education/Free_Programming_Books/Courses_RU/#java","text":"Java. \u041f\u0443\u0442\u044c \u043e\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 \u0434\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. - \u041f\u0451\u0442\u0440 \u0410\u0440\u0441\u0435\u043d\u0442\u044c\u0435\u0432 (INT) \u0412\u0432\u043e\u0434\u043d\u044b\u0439 \u043a\u0443\u0440\u0441. Java \u0432 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u044f\u0445. - \u041f\u0451\u0442\u0440 \u0410\u0440\u0441\u0435\u043d\u0442\u044c\u0435\u0432 (BEG) \u041a\u0443\u0440\u0441 \u0442\u0435\u0441\u0442 \u043f\u043e Java - \u041f\u0451\u0442\u0440 \u0410\u0440\u0441\u0435\u043d\u0442\u044c\u0435\u0432 (BEG)","title":"Java"},{"location":"Education/Free_Programming_Books/Courses_RU/#postgresql","text":"DBA1. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PostgreSQL (BEG) DBA2. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PostgreSQL. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 (INT) DEV1. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 PostgreSQL (ADV) Hacking PostgreSQL (INT)","title":"PostgreSQL"},{"location":"Education/Free_Programming_Books/Courses_RU/#python","text":"Python: \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 - \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0424\u0451\u0434\u043e\u0440\u043e\u0432 (BEG) Python: \u043e\u0441\u043d\u043e\u0432\u044b \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 - Stepik (INT) \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 Python - Coursera (BEG) \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Python - Stepik (BEG)","title":"Python"},{"location":"Education/Free_Programming_Books/Courses_RU/#react","text":"React.js \u043a\u0443\u0440\u0441 \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 (BEG) \u0420\u043e\u0443\u0442\u0438\u043d\u0433 \u0432 react-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 (INT) \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b \u043f\u043e Redux (INT)","title":"React"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/","text":"Index Android C# C++ Clojure Common Lisp CSS Data Science Elixir Emacs Erlang Git Golang Gulp Haskell Javascript Angular.js Ember.js React.js Kotlin Language Agnostic PHP PostgreSQL Python Ruby Rust Vim Android Android Developers Backstage (podcast) Fragmented Podcast (podcast) C# How to program in C# - Beginner Course | Brackeys (screencast) C++ C++ Programming Video Lectures (screencast) C++ STL (screencast) CppCast (podcast) Clojure Parens of the Dead (screencast) Common Lisp Little Bits of Lisp (screencast) CSS CSS-Tricks Screencasts (screencast) Data Science Data Skeptic (podcast) Data Stories (podcast) Learning Machines 101 (podcast) Linear Digressions (podcast) O'Reilly Data Show Podcast (podcast) Partially Derivative (podcast) Talking Machines (podcast) Elixir Elixir Sips - Some free (screencast) ElixirCasts (screencast) ElixirConf 2014 (screencast) ElixirConf 2015 (screencast) Intro to Elixir (screencast) Emacs Emacs Rocks! (screencast) Erlang Erlang Factory SF Bay 2015 (screencast) Functions + Messages + Concurrency = Erlang (screencast) Thinking like an Erlanger (screencast) Git GitMinutes (podcast) Golang Build webapp without using a framework (screencast) Go An Introduction (screencast) Go and AngularJS (screeencasts) Part 1 - Hello World Part 2 - Websockets Part 3 - REST and ngResource Go Programming Tutorial (screencast) Go Time (podcast) Hacking with Andrew and Brad: an HTTP/2 client (screencast) Hacking with Andrew and Brad: tip.golang.org (screencast) Gulp Learning Gulp (screencast) Haskell The Haskell Cast (podcast) Javascript FiveJS (podcast) Free Quality Javascript video tutorials and screencasts (screencast) Front End Happy Hour (podcast) Frontend Five (podcast) JavaScript Air (podcast) JavaScript Jabber (podcast) Node Tuts - Node.JS Video Tutorials (screencast) Syntax (podcast) The Javascript Show (podcast) Angular.js Adventures in Angular - DevChat.tv (podcast) Angular Air (podcast) Ember.js Ember Weekend (podcast) React.js React Native Podcast (podcast) ReactCasts (screencast) Kotlin Kotlin Beginners Tutorials (screencast) Talking Kotlin (podcast) Language Agnostic /dev/hell (podcast) Arrested DevOps (podcast) Beats, Rye & Types (podcast) Between | Screens Podcast (podcast) BSDTalk (podcast) CodeNewbie (podcast) CodePen Radio (podcast) Coding Blocks (podcast) CTRL+CLICK CAST (podcast) Developer On Fire (podcast) Developer Tea (podcast) DevelopersHangout (podcast) FLOSS WEEKLY (podcast) Frontside the Podcast (podcast) Full Stack Radio (podcast) Functional Geekery (podcast) Garbage (podcast) IEEE Software's \"On Computing\" with Grady Booch (podcast) Learn to Code with Me (podcast) Loosely Coupled (podcast) .NET Rocks! (podcast) Open Source System Podcast (podcast) Programming Throwdown (podcast) Reactive (podcast) Security Now (podcast) Shop Talk Show (podcast) Software Engineering Daily (podcast) Software Engineering Radio (podcast) Syscast Podcast (podcast) Talking Code (podcast) Testing In The Pub (podcast) The Big Web Show (podcast) The Changelog Podcast (podcast) The Cloudcast (podcast) The Cognicast (podcast) The Creative Coding Podcast (podcast) The Cynical Developer: Weekly Technology and Software Developer Podcast (podcast) The Debug Log (podcast) The Hanselminutes podcast (podcast) The Path to Performance (podcast) The Podcast from DZone.com: \"For Developers, by Developers\" (podcast) The Silver Bullet Security Podcast with Gary McGraw (podcast) The Web Ahead (podcast) The Web Platform (podcast) This Developer's Life (podcast) ThoughtWorks (podcast) Three Devs and a Maybe (podcast) Toolsday (podcast) TTL Podcast (podcast) Web Security Warriors (podcast) PHP Laravel News Podcast (podcast) MageTalk - A Magento Podcast (podcast) PHP Roundtable (podcast) PHP Town Hall (podcast) Sound of Symfony (podcast) Voices of the ElePHPant (podcast) PostgreSQL PG Casts (screencast) Python Build applications in Python the antitextbook (screencast) Diving into Django (screencast) Import this (podcast) Podcast. init (podcast) Practical Flask Web Development Tutorials (screencast) Python Bytes (podcast) Python Test Podcast (podcast) Python Tips (screencast) Talk Python To Me - A podcast on Python and related technologies (podcast) TheNewBoston - Pygame (Python Game Development) Playlist (screencast) TheNewBoston - Python 3.4 Programming Tutorials (screencast) TheNewBoston - Python GUI with Tkinter Playlist (screencast) TheNewBoston - Python Programming Tutorials - 2.x (screencast) Try Django Tutorial (screencast) Ruby 5by5 - Ruby on Rails Podcast (podcast) Drifting Ruby (screencast) ENVY LABS - Ruby5 (podcast) Railscasts (screencast) Ruby Rogues (podcast) Ruby Tapas | Free Screencasts (screencast) The Bike Shed (podcast) The Ruby Show (podcast) Rust New Rustacean (podcast) Rusty Radio (podcast) Vim Free screencasts about the text editor Vim (screencast)","title":"Podcasts and Screencasts EN"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#index","text":"Android C# C++ Clojure Common Lisp CSS Data Science Elixir Emacs Erlang Git Golang Gulp Haskell Javascript Angular.js Ember.js React.js Kotlin Language Agnostic PHP PostgreSQL Python Ruby Rust Vim","title":"Index"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#android","text":"Android Developers Backstage (podcast) Fragmented Podcast (podcast)","title":"Android"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#c","text":"How to program in C# - Beginner Course | Brackeys (screencast)","title":"C&#x23;"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#c_1","text":"C++ Programming Video Lectures (screencast) C++ STL (screencast) CppCast (podcast)","title":"C++"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#clojure","text":"Parens of the Dead (screencast)","title":"Clojure"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#common-lisp","text":"Little Bits of Lisp (screencast)","title":"Common Lisp"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#css","text":"CSS-Tricks Screencasts (screencast)","title":"CSS"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#data-science","text":"Data Skeptic (podcast) Data Stories (podcast) Learning Machines 101 (podcast) Linear Digressions (podcast) O'Reilly Data Show Podcast (podcast) Partially Derivative (podcast) Talking Machines (podcast)","title":"Data Science"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#elixir","text":"Elixir Sips - Some free (screencast) ElixirCasts (screencast) ElixirConf 2014 (screencast) ElixirConf 2015 (screencast) Intro to Elixir (screencast)","title":"Elixir"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#emacs","text":"Emacs Rocks! (screencast)","title":"Emacs"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#erlang","text":"Erlang Factory SF Bay 2015 (screencast) Functions + Messages + Concurrency = Erlang (screencast) Thinking like an Erlanger (screencast)","title":"Erlang"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#git","text":"GitMinutes (podcast)","title":"Git"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#golang","text":"Build webapp without using a framework (screencast) Go An Introduction (screencast) Go and AngularJS (screeencasts) Part 1 - Hello World Part 2 - Websockets Part 3 - REST and ngResource Go Programming Tutorial (screencast) Go Time (podcast) Hacking with Andrew and Brad: an HTTP/2 client (screencast) Hacking with Andrew and Brad: tip.golang.org (screencast)","title":"Golang"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#gulp","text":"Learning Gulp (screencast)","title":"Gulp"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#haskell","text":"The Haskell Cast (podcast)","title":"Haskell"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#javascript","text":"FiveJS (podcast) Free Quality Javascript video tutorials and screencasts (screencast) Front End Happy Hour (podcast) Frontend Five (podcast) JavaScript Air (podcast) JavaScript Jabber (podcast) Node Tuts - Node.JS Video Tutorials (screencast) Syntax (podcast) The Javascript Show (podcast)","title":"Javascript"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#angularjs","text":"Adventures in Angular - DevChat.tv (podcast) Angular Air (podcast)","title":"Angular.js"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#emberjs","text":"Ember Weekend (podcast)","title":"Ember.js"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#reactjs","text":"React Native Podcast (podcast) ReactCasts (screencast)","title":"React.js"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#kotlin","text":"Kotlin Beginners Tutorials (screencast) Talking Kotlin (podcast)","title":"Kotlin"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#language-agnostic","text":"/dev/hell (podcast) Arrested DevOps (podcast) Beats, Rye & Types (podcast) Between | Screens Podcast (podcast) BSDTalk (podcast) CodeNewbie (podcast) CodePen Radio (podcast) Coding Blocks (podcast) CTRL+CLICK CAST (podcast) Developer On Fire (podcast) Developer Tea (podcast) DevelopersHangout (podcast) FLOSS WEEKLY (podcast) Frontside the Podcast (podcast) Full Stack Radio (podcast) Functional Geekery (podcast) Garbage (podcast) IEEE Software's \"On Computing\" with Grady Booch (podcast) Learn to Code with Me (podcast) Loosely Coupled (podcast) .NET Rocks! (podcast) Open Source System Podcast (podcast) Programming Throwdown (podcast) Reactive (podcast) Security Now (podcast) Shop Talk Show (podcast) Software Engineering Daily (podcast) Software Engineering Radio (podcast) Syscast Podcast (podcast) Talking Code (podcast) Testing In The Pub (podcast) The Big Web Show (podcast) The Changelog Podcast (podcast) The Cloudcast (podcast) The Cognicast (podcast) The Creative Coding Podcast (podcast) The Cynical Developer: Weekly Technology and Software Developer Podcast (podcast) The Debug Log (podcast) The Hanselminutes podcast (podcast) The Path to Performance (podcast) The Podcast from DZone.com: \"For Developers, by Developers\" (podcast) The Silver Bullet Security Podcast with Gary McGraw (podcast) The Web Ahead (podcast) The Web Platform (podcast) This Developer's Life (podcast) ThoughtWorks (podcast) Three Devs and a Maybe (podcast) Toolsday (podcast) TTL Podcast (podcast) Web Security Warriors (podcast)","title":"Language Agnostic"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#php","text":"Laravel News Podcast (podcast) MageTalk - A Magento Podcast (podcast) PHP Roundtable (podcast) PHP Town Hall (podcast) Sound of Symfony (podcast) Voices of the ElePHPant (podcast)","title":"PHP"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#postgresql","text":"PG Casts (screencast)","title":"PostgreSQL"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#python","text":"Build applications in Python the antitextbook (screencast) Diving into Django (screencast) Import this (podcast) Podcast. init (podcast) Practical Flask Web Development Tutorials (screencast) Python Bytes (podcast) Python Test Podcast (podcast) Python Tips (screencast) Talk Python To Me - A podcast on Python and related technologies (podcast) TheNewBoston - Pygame (Python Game Development) Playlist (screencast) TheNewBoston - Python 3.4 Programming Tutorials (screencast) TheNewBoston - Python GUI with Tkinter Playlist (screencast) TheNewBoston - Python Programming Tutorials - 2.x (screencast) Try Django Tutorial (screencast)","title":"Python"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#ruby","text":"5by5 - Ruby on Rails Podcast (podcast) Drifting Ruby (screencast) ENVY LABS - Ruby5 (podcast) Railscasts (screencast) Ruby Rogues (podcast) Ruby Tapas | Free Screencasts (screencast) The Bike Shed (podcast) The Ruby Show (podcast)","title":"Ruby"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#rust","text":"New Rustacean (podcast) Rusty Radio (podcast)","title":"Rust"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_EN/#vim","text":"Free screencasts about the text editor Vim (screencast)","title":"Vim"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/","text":"Index Android Golang Gulp Haskell Javascript Node.js PHP QA React.js Ruby Webpack \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u041d\u043e\u0432\u043e\u0441\u0442\u0438 \u0438 \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u041f\u041e Android Android Dev (Podcast) Golang GolangShow (Podcast) Gulp \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 \u043f\u043e Gulp - \u0418\u043b\u044c\u044f \u041a\u0430\u043d\u0442\u043e\u0440 (Screencast) Haskell \u0411\u0430\u043d\u0430\u043d\u044b \u0438 \u041b\u0438\u043d\u0437\u044b Javascript Devschacht (Podcast) Frontflip (Podcast) Javascript \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 (Screencast) RadioJS (Podcast) Webstandards (Podcast) Node.js \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 Node.JS - \u0418\u043b\u044c\u044f \u041a\u0430\u043d\u0442\u043e\u0440 (Screencast) PHP \u041f\u044f\u0442\u0438\u043c\u0438\u043d\u0443\u0442\u043a\u0430 PHP (Podcast) QA QAGuild (Podcast) \u041f\u043e\u0434\u043a\u0430\u0441\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u043e\u0432 (Podcast) React.js \u041e\u0441\u043d\u043e\u0432\u044b React.js - \u0420\u043e\u043c\u0430\u043d \u042f\u043a\u043e\u0431\u0447\u0443\u043a (Screencast) \u041f\u044f\u0442\u0438\u043c\u0438\u043d\u0443\u0442\u043a\u0430 React (Podcast) Ruby RubyNoName Podcast (Podcast) RubySchool (Ruby, Rails) - \u0420\u043e\u043c\u0430\u043d \u041f\u0443\u0448\u043a\u0438\u043d (Screencast) RWPod Podcast (Podcast) Scala \u0420\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u043a\u0430\u0441\u0442 \u043e Scala (Podcast) Webpack \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 Webpack - \u0418\u043b\u044c\u044f \u041a\u0430\u043d\u0442\u043e\u0440 (Screencast) \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c LinkMeUp (Podcast) Noise Security Bit (Podcast) uWebDesign (Podcast) \u041a\u0432\u0430\u043d\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 (Podcast) \u041d\u043e\u0432\u043e\u0441\u0442\u0438 \u0438 \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u041f\u041e CTOcast (Podcast) DevZen Podcast (Podcast) Software Development podCAST (Podcast) The Art Of Programming (Podcast) \u0414\u0432\u0435 \u0421\u0442\u043e\u043b\u0438\u0446\u044b - \u0423\u044e\u0442\u043d\u044b\u0439 \u043f\u043e\u0434\u043a\u0430\u0441\u0442 IT \u043f\u0430\u043d\u043a\u043e\u0432 (Podcast) \u041a\u0430\u043a \u0434\u0435\u043b\u0430\u044e\u0442 \u0438\u0433\u0440\u044b (Podcast) \u0420\u0430\u0434\u0438\u043e-\u0422 (Podcast) \u0420\u0430\u0437\u0431\u043e\u0440 \u043f\u043e\u043b\u0451\u0442\u043e\u0432 (Podcast) \u0420\u0430\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 IT \u043f\u043e\u0434\u043a\u0430\u0441\u0442 (Podcast) \u0421\u043b\u0430\u0432\u0430 + \u041f\u0430\u0448\u0430 (Podcast)","title":"Podcasts and Screencasts RU"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#index","text":"Android Golang Gulp Haskell Javascript Node.js PHP QA React.js Ruby Webpack \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u041d\u043e\u0432\u043e\u0441\u0442\u0438 \u0438 \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u041f\u041e","title":"Index"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#android","text":"Android Dev (Podcast)","title":"Android"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#golang","text":"GolangShow (Podcast)","title":"Golang"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#gulp","text":"\u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 \u043f\u043e Gulp - \u0418\u043b\u044c\u044f \u041a\u0430\u043d\u0442\u043e\u0440 (Screencast)","title":"Gulp"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#haskell","text":"\u0411\u0430\u043d\u0430\u043d\u044b \u0438 \u041b\u0438\u043d\u0437\u044b","title":"Haskell"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#javascript","text":"Devschacht (Podcast) Frontflip (Podcast) Javascript \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 (Screencast) RadioJS (Podcast) Webstandards (Podcast)","title":"Javascript"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#nodejs","text":"\u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 Node.JS - \u0418\u043b\u044c\u044f \u041a\u0430\u043d\u0442\u043e\u0440 (Screencast)","title":"Node.js"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#php","text":"\u041f\u044f\u0442\u0438\u043c\u0438\u043d\u0443\u0442\u043a\u0430 PHP (Podcast)","title":"PHP"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#qa","text":"QAGuild (Podcast) \u041f\u043e\u0434\u043a\u0430\u0441\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u043e\u0432 (Podcast)","title":"QA"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#reactjs","text":"\u041e\u0441\u043d\u043e\u0432\u044b React.js - \u0420\u043e\u043c\u0430\u043d \u042f\u043a\u043e\u0431\u0447\u0443\u043a (Screencast) \u041f\u044f\u0442\u0438\u043c\u0438\u043d\u0443\u0442\u043a\u0430 React (Podcast)","title":"React.js"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#ruby","text":"RubyNoName Podcast (Podcast) RubySchool (Ruby, Rails) - \u0420\u043e\u043c\u0430\u043d \u041f\u0443\u0448\u043a\u0438\u043d (Screencast) RWPod Podcast (Podcast)","title":"Ruby"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#scala","text":"\u0420\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u043a\u0430\u0441\u0442 \u043e Scala (Podcast)","title":"Scala"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#webpack","text":"\u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 Webpack - \u0418\u043b\u044c\u044f \u041a\u0430\u043d\u0442\u043e\u0440 (Screencast)","title":"Webpack"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#_1","text":"LinkMeUp (Podcast) Noise Security Bit (Podcast) uWebDesign (Podcast) \u041a\u0432\u0430\u043d\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 (Podcast)","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c"},{"location":"Education/Free_Programming_Books/Podcasts_and_Screencasts_RU/#_2","text":"CTOcast (Podcast) DevZen Podcast (Podcast) Software Development podCAST (Podcast) The Art Of Programming (Podcast) \u0414\u0432\u0435 \u0421\u0442\u043e\u043b\u0438\u0446\u044b - \u0423\u044e\u0442\u043d\u044b\u0439 \u043f\u043e\u0434\u043a\u0430\u0441\u0442 IT \u043f\u0430\u043d\u043a\u043e\u0432 (Podcast) \u041a\u0430\u043a \u0434\u0435\u043b\u0430\u044e\u0442 \u0438\u0433\u0440\u044b (Podcast) \u0420\u0430\u0434\u0438\u043e-\u0422 (Podcast) \u0420\u0430\u0437\u0431\u043e\u0440 \u043f\u043e\u043b\u0451\u0442\u043e\u0432 (Podcast) \u0420\u0430\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 IT \u043f\u043e\u0434\u043a\u0430\u0441\u0442 (Podcast) \u0421\u043b\u0430\u0432\u0430 + \u041f\u0430\u0448\u0430 (Podcast)","title":"\u041d\u043e\u0432\u043e\u0441\u0442\u0438 \u0438 \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u041f\u041e"},{"location":"Education/Free_Programming_Books/Problem_Sets_Competitive_Programming/","text":"Index Competitive Programming Data science Problem Sets Competitive Programming 4Clojure A2 Online Judge Caribbean Online Judge Codeabbey Codechef Codecombat Codeeval CodeFights Codeforces Coderbyte Codewars Codingame Facebook Hackercup HackerEarth Hackerrank Internet Problem Solving Contest Just another Golf Coding Kattis LeetCode Microcorruption Sphere Online Judge Topcoder Data science Kaggle Problem Sets 500 Data structures and algorithms interview questions and their solutions in C++ A2 Online Judge Advent Of Code Anarchy Golf CareerCup CheckIO Codeforces Codility Coding Bat Exercism Geeks For Geeks Google Code Jam - Practise Hacker.org HackerEarth HDU Online Judge Interactive Coding Challenge InterviewBit Kattis Leetcode Mathproblem of the Month - Bilkent University PEG Judge PKU Online Judge Ponder This! ProblemBook.NET Project Euler Python Practice Projects Rosalind Sphere Online Judge TalentBuddy Timus Online Judge URI Online Judge UVa Online Judge","title":"Problem Sets Competitive Programming"},{"location":"Education/Free_Programming_Books/Problem_Sets_Competitive_Programming/#index","text":"Competitive Programming Data science Problem Sets","title":"Index"},{"location":"Education/Free_Programming_Books/Problem_Sets_Competitive_Programming/#competitive-programming","text":"4Clojure A2 Online Judge Caribbean Online Judge Codeabbey Codechef Codecombat Codeeval CodeFights Codeforces Coderbyte Codewars Codingame Facebook Hackercup HackerEarth Hackerrank Internet Problem Solving Contest Just another Golf Coding Kattis LeetCode Microcorruption Sphere Online Judge Topcoder","title":"Competitive Programming"},{"location":"Education/Free_Programming_Books/Problem_Sets_Competitive_Programming/#data-science","text":"Kaggle","title":"Data science"},{"location":"Education/Free_Programming_Books/Problem_Sets_Competitive_Programming/#problem-sets","text":"500 Data structures and algorithms interview questions and their solutions in C++ A2 Online Judge Advent Of Code Anarchy Golf CareerCup CheckIO Codeforces Codility Coding Bat Exercism Geeks For Geeks Google Code Jam - Practise Hacker.org HackerEarth HDU Online Judge Interactive Coding Challenge InterviewBit Kattis Leetcode Mathproblem of the Month - Bilkent University PEG Judge PKU Online Judge Ponder This! ProblemBook.NET Project Euler Python Practice Projects Rosalind Sphere Online Judge TalentBuddy Timus Online Judge URI Online Judge UVa Online Judge","title":"Problem Sets"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/","text":"Index Ada Agda Alef Android APL Arduino ASP.NET MVC Assembly Language Non-X86 AutoHotkey Autotools Awk Bash Basic BETA C C# C++ Chapel Cilk Clojure COBOL CoffeeScript ColdFusion Component Pascal Cool Coq Crystal CUDA D Dart DB2 Delphi / Pascal DTrace Elasticsearch Elixir Ecto Phoenix Emacs Embedded Systems Erlang ESP8266 F# Firefox OS Force.com Forth Fortran FreeBSD Git Go Graphical user interfaces Graphics Programming GraphQL Groovy Gradle Grails Spock Framework Hack Hadoop Haskell Haxe HTML / CSS Bootstrap HTTP Icon iOS IoT Isabelle/HOL J Java Codename One JasperReports Spring Spring Boot Spring Security Wicket JavaScript Angular.js Aurelia Backbone.js Booty5.js D3.js Dojo Elm Ember.js Express.js jQuery meteor Node.js Om React React Native Redux Jenkins Julia Language Agnostic Algorithms & Data Structures Cellular Automata Cloud Computing Competitive Programming Compiler Design Database Datamining Information Retrieval Licensing Machine Learning Mathematics Misc MOOC Networking Open Source Ecosystem Operating Systems Parallel Programming Partial Evaluation Professional Development Programming Paradigms Regular Expressions Reverse Engineering Security Software Architecture Standards Theoretical Computer Science Web Performance LaTeX / TeX LaTeX TeX Limbo Linux Lisp Livecode Lua Markdown Mathematica MATLAB Maven Mercurial Mercury Meta-Lists Modelica MySQL Neo4J .NET Framework NoSQL Oberon Objective-C OCaml Octave OpenGL ES OpenMP OpenResty OpenSCAD Perl Perl 6 / Rakudo PHP PicoLisp PostgreSQL PowerShell Processing Prolog Constraint Logic Programming PureScript Python Django Flask Kivy Pandas Pyramid Tornado QML R Racket Raspberry Pi REBOL Ruby RSpec Ruby on Rails Sinatra Rust Sage Scala Lift Play Scala Scheme Scilab Scratch Sed Self Smalltalk Spark SQL (implementation agnostic) SQL Server Standard ML Subversion Swift Tcl Teradata Tizen TLA TypeScript Unix Verilog VHDL Vim Visual Basic Visual Prolog Web Services Windows 8 Windows Phone Workflow xBase (dBase / Clipper / Harbour) Meta-Lists atariarchives.org atariarchives.org makes books, information, and software for Atari and other classic computers available on the Web. Bento Bitsavers.org Bookboon: IT & Programming Cookie required. (email address requested , not required) Cheat Sheets (Free) Codingus conceptf1.blogspot.com Free Smalltalk Books, collected by St\u00e9phane Ducasse Free Tech Books IBM Redbooks InfoQ Minibooks InTech: Computer and Information Science JSBooks - directory of free javascript ebooks Learn X in Y minutes Learneroo Resources to Learn Programming Microsoft Guides to Software Microsoft Press: Free E-Books Microsoft Technologies 1, including books on Windows Azure, SharePoint, Visual Studio Guide, Windows phone development, ASP.net, Office365, etc. collection by Eric Ligman Microsoft Technologies 2, including books on Windows Azure, SharePoint, Visual Studio Guide, Windows phone development, ASP.net, etc. collection by Eric Ligman Microsoft Technologies 3, including books on Windows Azure, SharePoint, Visual Studio Guide, Windows phone development, ASP.net, etc. collection by Eric Ligman O'Reilly's Commons O'Reilly's Open Books Project Papers we love Programming - Wikibooks Red Gate Books Stef's Free Online Smalltalk Books TechBeamers.com TechBooksForFree.com The Definitive C++ Book Guide and List Theassayer.org tutorialspoint Graphics Programming Blender 3D: Noob to Pro - Wikibooks Computer Graphics from scratch - Gabriel Gambetta (:construction: in process ) DirectX manual (draft) GPU Gems Graphics Programming Black Book - Michael Abrash Introduction to Modern OpenGL Learn OpenGL - Joey de Vries Learning Modern 3D Graphics Programming - Jason L. McKesson (draft) OpenGL - Concepts and illustrations. ShaderX series - Wolfgang Engel Tutorials for modern OpenGL Graphical User Interfaces Programming with gtkmm 3 Search User Interfaces - Marti A. Hearst The GLib/GTK+ Development Platform - S\u00e9bastien Wilmet (PDF) GraphQL Fullstack GraphQL Language Agnostic Algorithms & Data Structures A Field Guide To Genetic Programming - Riccardo Poli et al. Algorithmic Graph Theory Algorithms - Wikibooks Algorithms, 4th Edition - Robert Sedgewick and Kevin Wayne Algorithms and Automatic Computing Machines (1963) - B. A. Trakhtenbrot Algorithms and Complexity - Herbert S. Wilf (PDF) Algorithms Course Materials - Jeff Erickson Analysis and Design of Algorithms - Sandeep Sen, IIT Delhi Animated Algorithm and Data Structure Visualization (Resource) Annotated Algorithms in Python: Applications in Physics, Biology, and Finance - Massimo di Pierro Binary Trees (PDF) Clever Algorithms - Jason Brownlee CS Unplugged: Computer Science without a computer Data Structures - Prof. Subhashis Banerjee, IIT Delhi Data Structures (Into Java) - Paul N. Hilfinger (PDF) Data Structures and Algorithms: Annotated Reference with Examples - G. Barnett and L. Del Tongo (PDF) Data Structures Succinctly Part 1, Syncfusion (PDF, Kindle) (email address requested , not required) Data Structures Succinctly Part 2, Syncfusion (PDF, Kindle) (email address requested , not required) Elementary Algorithms - Larry LIU Xinyu Foundations of Computer Science - Al Aho and Jeff Ullman Geometry Algorithms - Dan Sunday Handbook of Graph Drawing and Visualization Lectures Notes on Algorithm Analysis and Computational Complexity (Fourth Edition) - Ian Parberry (use form at bottom of license) LEDA: A Platform for Combinatorial and Geometric Computing - K. Mehlhorn et al. Linked List Basics (PDF) Linked List Problems (PDF) Matters Computational: Ideas, Algorithms, Source Code (PDF) Open Data Structures: An Introduction - Pat Morin Planning Algorithms Problems on Algorithms (Second Edition) - Ian Parberry (use form at bottom of license) Purely Functional Data Structures (1996) - Chris Okasaki (PDF) Sequential and parallel sorting algorithms Text Algorithms (PDF) The Algorithm Design Manual The Art of Computer Programming - Donald Knuth (fascicles, mostly volume 4) The Design of Approximation Algorithms (PDF) The Great Tree List Recursion Problem (PDF) Think Complexity (PDF) Cellular Automata A New Kind of Science - Stephen Wolfram Cellular Automata Books Cloud Computing Monitoring Modern Infrastructure (account required) Multi-tenant Applications for the Cloud, 3rd Edition OpenStack Operations Guide The Developer\u2019s Guide to Azure Competitive Programming Competitive Programmer's Handbook - Antti Laaksonen (PDF) Competitive Programming, 1st Edition (PDF) Compiler Design An Introduction to GCC - Brian Gough Basics of Compiler Design (Anniversary Edition) - Torben Mogensen Compiler Construction (PDF) Compiler Design in C (1990) - Allen Holub, Prentice Hall Compiler Design: Theory, Tools, and Examples, C/C++ Edition - Seth D. Bergmann Compiler Design: Theory, Tools, and Examples, Java Edition - Seth D. Bergmann Compiling Scala for the Java Virtual Machine - Michel Schinz (PDF) Compiling Techniques (1969) - F.R.A. Hopgood, Macdonald Crafting Interpreters (:construction:) - Bob Nystrom (HTML) Implementing Functional Languages: A Tutorial - Simon Peyton Jones, David Lester Let's Build a Compiler (PDF) Linkers and Loaders - John R. Levine Practical and Theoretical Aspects of Compiler Construction (class lectures and slides) Computer Vision Computer Vision - Dana Ballard, Chris Brown Computer Vision: Algorithms and Applications - Richard Szeliski Computer Vision: Models, Learning, and Inference - Simon J.D. Prince Programming Computer Vision with Python - Jan Erik Solem Database Big Data Now: Current Perspectives from O'Reilly Radar Database Explorations (PDF) Database Fundamentals (PDF) Databases, Types, and The Relational Model: The Third Manifesto (PDF) Foundations of Databases Readings in Database Systems, 5th Ed. Temporal Database Management - Christian S. Jensen The Theory of Relational Databases What is Database Design, Anyway? Datamining A Programmer's Guide to Data Mining - Ron Zacharski (Draft) Data Jujitsu: The Art of Turning Data into Product (email address requested , not required) Data Mining Algorithms In R - Wikibooks Internet Advertising: An Interplay among Advertisers, Online Publishers, Ad Exchanges and Web Users (PDF) Introduction to Data Science - Jeffrey Stanton Mining of Massive Datasets School of Data Handbook Theory and Applications for Advanced Text Mining Information Retrieval Information Retrieval: A Survey (PDF) Introduction to Information Retrieval Licensing Creative Commons: a user guide - Simone Aliprandi Open Source Licensing Software Freedom and Intellectual Property Law - Lawrence Rosen The Public Domain: Enclosing the Commons of the Mind - James Boyle Machine Learning A Brief Introduction to Machine Learning for Engineers - Osvaldo Simeone (PDF) A Brief Introduction to Neural Networks A Course in Machine Learning (PDF) A First Encounter with Machine Learning (PDF) An Introduction to Statistical Learning - Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani Bayesian Reasoning and Machine Learning Deep Learning - Ian Goodfellow, Yoshua Bengio and Aaron Courville Gaussian Processes for Machine Learning Information Theory, Inference, and Learning Algorithms Introduction to Machine Learning - Amnon Shashua Learn Tensorflow - Jupyter Notebooks Learning Deep Architectures for AI (PDF) Machine Learning Machine Learning, Neural and Statistical Classification Neural Networks and Deep Learning Probabilistic Models in the Study of Language (Draft, with R code) The Elements of Statistical Learning - Trevor Hastie, Robert Tibshirani, and Jerome Friedman The LION Way: Machine Learning plus Intelligent Optimization The Python Game Book Mathematics A First Course in Linear Algebra - Robert A. Beezer Advanced Algebra - Anthony W. Knapp (PDF) An Introduction to the Theory of Numbers - Leo Moser (PDF) Basic Algebra - Anthony W. Knapp (PDF) Basics of Algebra, Topology, and Differential Calculus (PDF) Bayesian Methods for Hackers - Cameron Davidson-Pilon Book of Proof - Richard Hammack (PDF) Calculus - Gilbert Strang (PDF) Calculus Made Easy - Silvanus P. Thompson (PDF) Category Theory for the Sciences CK-12 Probability and Statistics - Advanced Collaborative Statistics Computational and Inferential Thinking. The Foundations of Data Science Computational Geometry Concepts & Applications of Inferential Statistics Differential Equations - Paul Dawkins (PDF, use form to download) Elementary Differential Equations - William F. Trench (PDF) Essentials of Metaheuristics - Sean Luke Graph Theory Introduction to Probability - Charles M. Grinstead and J. Laurie Snell Introduction to Probability and Statistics Spring 2014 Introduction to Proofs - Jim Hefferon Introduction to Statistical Thought - Michael Lavine Kalman and Bayesian Filters in Python Knapsack Problems - Algorithms and Computer Implementations - Silvano Martello and Paolo Toth Lecture Notes of Linear Algebra - Dr. P. Shunmugaraj, IIT Kanpur (PDF) Linear Algebra - Dr. Arbind K Lal, IIT Kanpur (PDF) Linear Algebra (PDF) Linear Algebra by Jim Hefferon - Jim Hefferon Mathematical Logic - an Introduction (PDF) Mathematics, MTH101A - P. Shunmugaraj, IIT Kanpur Number Theory - Holden Lee MIT OpenIntro Statistics Ordinary Differential Equations - Wikibooks Power Programming with Mathematica - David B. Wagner Probability and Statistics Cookbook Probability and Statistics EBook Statistics Done Wrong - Alex Reinhart Think Bayes: Bayesian Statistics Made Simple - Allen B. Downey Think Stats: Probability and Statistics for Programmers - Allen B. Downey (using Python) Mathematics For Computer Science Discrete Structures for Computer Science: Counting, Recursion, and Probability - Michiel Smid Misc 2016 European Software Development Salary Survey (email address requested , not required) 2016 Software Development Salary Survey (email address requested , not required) 97 Things Every Programmer Should Know - Extended (Leanpub account or valid email requested) A Mathematical Theory of Communication - Claude E.Shannon Ansible Up & Running (first three chapters) (account required) Asterisk\u2122: The Definitive Guide Barcode Overview (PDF) Bitcoin and Cryptocurrency Technologies - Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller, Steven Goldfeder (PDF) Come, Let's Play: Scenario-Based Programming Using Live Sequence Charts Communicating Sequential Processes - Tony Hoare (PDF) Computer Musings (lectures by Donald Knuth) Confessions of an Unintentional CTO: Lessons in Growing a Web App - Jack Kinsella Continuous Delivery and DevOps: A Quickstart guide - Paul Swartout, Packt. (email address requested , not required) CS For All Culture \\& Empire: Digital Revolution (PDF) Design With FontForge Designing for Performance - Lara Hogan Designing Interfaces - Jennifer Tidwell DevDocs - Documents for Developers in 1 place DevOps For Dummies (IBM Edition) (PDF) Digital Signal Processing For Communications Digital Signal Processing For Engineers and Scientists Distributed systems for fun and profit Docker Jumpstart \"DYNAMIC LINKED LIBRARIES\": Paradigms of the GPL license in contemporary software - Luis A. Enr\u00edquez Essential Image Optimization - Addy Osmani Flow based Programming Foundations of Programming (PDF) Game Programming Patterns - Bob Nystrom Getting Real Getting Started with Unity 5 - Dr. Edward Lavieri, Packt. (email address requested , not required) Hacknot: Essays on Software Development - Ed Johnson High-Performance Scientific Computing (class lectures and slides) How Computers Work - R. Young How to Become a Programmer (PDF) How to Think Like a Computer Scientist - Peter Wentworth, Jeffrey Elkner, Allen B. Downey, and Chris Meyers Image Processing in C: Analyzing and Enhancing Digital Images - Dwayne Phillips Information Technology and the Networked Economy (PDF) IRPF90 Fortran code generator - Anthony Scemama Learn Programming - Antti Salonen Learn to Program Learning 30 Technologies in 30 Days: A Developer Challenge - Shekhar Gulati Learning Docker - Pethuru Raj, Jeeva S. Chelladhurai & Vinod Singh, Packt. (email address requested , not required) Linked Data Patterns: A pattern catalogue for modelling, publishing, and consuming Linked Data - Leigh Dodds, Ian Davis Magic Ink: Information Software and The Graphical Interface - Bret Victor Mastering Bitcoin - Unlocking digital currencies - Andreas M. Antonopoulos Mobile Developer's Guide to the Galaxy (Leanpub account or valid email requested) Modeling Reactive Systems with Statecharts Mother Tongues of Computer Languages (PNG) Networks, Crowds, and Markets: Reasoning About a Highly Connected World Object-Oriented Reengineering Patterns - Serge Demeyer, St\u00e9phane Ducasse and Oscar Nierstrasz Open Government;Collaboration, Transparency, and Participation in Practice Packt Publishing: A free book every day (PDF, ePub, Mobi, Kindle) (account required) PDQ: Pretty Darn Quick: An Agile, All-Purpose Methodology - Jeff Franz-Lien (Leanpub account or valid email requested) Philosophy of Computer Science (PDF) PNG: The Definitive Guide Pointers And Memory (PDF) Practical Data Analysis - Hector Cuesta, Packt. (email address requested , not required) Practical Responsive Typography - Dario Calonaci, Packt. (email address requested , not required) Principles of Computer System Design (PDF) Procedural Content Generation in Games - Noor Shaker, Julian Togelius, Mark Nelson Programming with Unicode Real-World Maintainable Software (email address requested , not required) Record-Playback Test Automation: Sahi & Selenium IDE: Critical Evaluation of Record-Playback Automation Tools - Shashikant Jagtap (Leanpub account or valid email requested) Security Engineering Small Memory Software SVG Essentials The Quest for Artificial Intelligence: A History of Ideas and Achievements - Nils J. Nilsson (PDF) Trends Shaping the London Tech Scene (email address requested , not required) What You Need to Know about Docker - Scott Gallagher, Packt. (email address requested , not required) MOOC Coursera edX FutureLearn MIT OCW NPTEL openHPI Platzi Udacity Networking 802.11ac: A Survival Guide - Matthew Gast An Introduction to Computer Networks (HTML, PDF, Kindle) Bits, Signals, and Packets: An Introduction to Digital Communications and Networks Code Connected vol.1 (PDF) (book on ZeroMQ) Computer Networking : Principles, Protocols and Practice (HTML, ePub, PDF, Kindle) High-Performance Browser Networking - Ilya Grigorik HTTP Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) HTTP2 Explained - Daniel Stenberg The TCP/IP Guide Understanding IP Addressing: Everything you ever wanted to know (PDF) ZeroMQ Guide Open Source Ecosystem Data Journalism Handbook Fintech, Open Source, and Emerging Markets Digital Banking for Everyone (email address requested , not required) Free as in Freedom: Richard Stallman and the free software revolution - Sam Williams (PDF) Free for All - Peter Wayner Free Software, Free Society: Selected Essays of Richard M. Stallman Getting Started with InnerSource (email address requested , not required) Getting started with Open source development (PDF) How to get started with open source (ePub & ODT) Innovation Happens Elsewhere - Ron Goldman, Richard P. Gabriel Open Advice: FOSS: What We Wish We Had Known When We Started Open by Design (email address requested , not required) Open Source in Brazil (email address requested , not required) Producing Open Source Software - Karl Fogel The Architecture of Open Source Applications: Vol. 1: Elegance, Evolution, and a Few Fearless Hacks; Vol. 2: Structure, Scale, and a Few More Feerless Hacks The Art of Community - Jono Bacon (PDF) The Cathedral and the Bazaar - Eric S. Raymond The Future of the Internet - Jonathan Zittrain The Open Source Way The Wealth of Networks: How Social Production Transforms Markets and Freedom - Yochai Benkler Operating systems A short introduction to operating systems (2001) - Mark Burgess (PDF) Computer Science from the Bottom Up How to Make a Computer Operating System (:construction: in process ) How to write a simple operating system in assembly language - Mike Saunders (HTML) Operating Systems and Middleware (PDF and LaTeX) Operating Systems: Three Easy Pieces (PDF) Practical File System Design: The Be File System - Dominic Giampaolo (PDF) Project Oberon: The Design of an Operating System, a Compiler, and a Computer - Niklaus Wirth & J\u00fcrg Gutknecht (PDF) The Art of Unix Programming - Eric S. Raymond The Design and Implementation of the Anykernel and Rump Kernels - Antti Kantee The little book about OS development - Erik Helin, Adam Renberg The Little Book of Semaphores - Allen B. Downey Think OS: A Brief Introduction to Operating Systems - Allen B. Downey (PDF) UNIX Application and System Programming, lecture notes - Prof. Stewart Weiss (PDF) Writing a Simple Operating System from Scratch - Nick Blundell (PDF) Xv6, a simple Unix-like teaching operating system Parallel Programming High Performance Computing - Charles Severance & Kevin Dowd (PDF, ePUB) High Performance Computing Training (LLNL materials) High-Performance Scientific Computing (class lectures and slides) Introduction to High-Performance Scientific Computing - Victor Eijkhout Introduction to Parallel Computing - Blaise Barney Is Parallel Programming Hard, And, If So, What Can You Do About It? - Paul E. McKenney Programming on Parallel Machines; GPU, Multicore, Clusters and More - Norm Matloff Kerridge (PDF) (email address requested , not required) The OpenCL Programming Book Using Concurrency and Parallelism Effectively \u2013 I - Jon Kerridge (PDF) (email address requested , not required) Using Concurrency and Parallelism Effectively \u2013 II - Jon Partial Evaluation Partial Evaluation and Automatic Program Generation - (PDF) Jones, Gomard and Sestoft Professional Development Apprenticeship Patterns: Guidance for the Aspiring Software Craftsman - David H. Hoover and Adewale Oshineye Clean Code Developer: An initiative for more professionalism in software development (:construction: in process ) Confessions of an IT Manager (RedGate, By Phil Factor) Don't Just Roll the Dice (PDF) (RedGate, By Neil Davidson) How to Do What You Love & Earn What You\u2019re Worth as a Programmer - Reginald Braithwaite Professional Software Development For Students - Mike G. Miller What I've Learned From Failure - Reginald Braithwaite Programming Paradigms Introduction to Functional Programming - J. Harrison Mostly Adequate Guide to Functional Programming Type Theory and Functional Programming Regular Expressions Learn Regex The Hard Way - Zed. A. Shaw RexEgg The 30 Minute Regex Tutorial - Jim Hollenhorst The Bastards Book of Regular Expressions: Finding Patterns in Everyday Text - Dan Nguyen (Leanpub account or valid email requested) Reverse Engineering BIOS Disassembly Ninjutsu Uncovered 1st Edition - Darmawan Salihun (PDF) Hacking the Xbox: An Introduction to Reverse Engineering - Andrew \"bunnie\" Huang iOS App Reverse Engineering (PDF) Reverse Engineering for Beginners - Dennis Yurichev (PDF) Security A Graduate Course in Applied Cryptography Crypto 101 - Crypto for everyone CryptoParty Handbook Handbook of Applied Cryptography How to deal with Passwords Intrusion Detection Systems with Snort (PDF) OpenSSL Cookbook OWASP Testing Guide 4.0 (PDF) OWASP Top 10 for .NET Developers Security Engineering Software Architecture Agile Planning: From Ideas to Story Cards - Launch School Architectural Styles and the Design of Network-based Software Architectures - Roy Thomas Fielding Best Kept Secrets of Peer Code Review Data-Oriented Design Developing Reactive Microservices (email address requested , not required) Domain Driven Design Quickly DSL Engineering: Designing, Implementing and Using Domain-Specific Languages - Markus Voelter Evolving Architectures of FinTech (email address requested , not required) Exploring CQRS and Event Sourcing - (EPUB, PDF) Guide to the Software Engineering Body of Knowledge How to Design Programs How to Write Unmaintainable Code Kanban and Scrum - making the most of both Kanban for skeptics - Nick Oostvogels (Leanpub account or valid email requested) Microservice Databases: Migrating from Relational Monolith to Distributed Data (email address requested , not required) Microservices AntiPatterns and Pitfalls (email address requested , not required) Microservices in Production (email address requested , not required) Microservices vs. Service-Oriented Architecture (email address requested , not required) Migrating to Cloud-Native Application Architectures (email address requested , not required) Naked objects - Richard Pawson (PDF) OAuth - The Big Picture Object-Oriented Reengineering Patterns - S. Demeyer, S. Ducasse and O. Nierstrasz Practicing Domain-Driven Design - Part 1 - Scott Millett (Leanpub account or valid email requested) Reactive Microservices Architecture (email address requested , not required) Scrum and XP from the Trenches Serverless apps: Architecture, patterns, and Azure implementation Site Reliability Engineering Software Architecture Patterns (email address requested , not required) Software Engineering for Internet Applications Test Driven Development, Extensive Tutorial - Grzegorz Ga\u0142\u0119zowski Web API Design Working with Web APIs - Launch School Your API Is Bad - Paddy Foran Standards Linux Standard Base UNIX - The POSIX Standard - IEEE Std 1003.1 Theoretical Computer Science Building Blocks for Theoretical Computer Science - Margaret M. Fleck Category Theory for Computing Science (PDF) Category Theory for Programmers - Bartosz Milewski (PDF) Homotopy Type Theory: Univalent Foundations of Mathematics (PDF) Introduction to Computer Science - Prof. Subhashis Banerjee, IIT Delhi Introduction to Computing Introduction to Theory of Computation - Anil Maheshwari and Michiel Smid (PDF) Models of Computation - John E. Savage Practical Foundations for Programming Languages, Preview - Robert Harper (PDF) Principles of Programming Languages - Scott F. Smith Programming and Programming Languages - Shriram Krishnamurthi Programming in Martin-L\u00f6f's Type Theory - Bengt Nordstroem Programming Languages: Application and Interpretation (2nd Edition) Semantics with Applications: A Formal Introduction - Hanne Riis Nielson, Flemming Nielson Structure and Interpretation of Computer Programs Structure and Interpretation of Computer Programs Think Complexity - Allen B. Downey Web Performance Book of Speed - Stoyan Stefanov High Performance Browser Networking - Ilya Grigorik Mature Optimization - Carlos Bueno (PDF) Ada A Guide to Ada for C and C++ Programmers (PDF) Ada Distilled (PDF) Ada Programming - Wikibooks Ada Reference Manual - ISO/IEC 8652:2012(E) Language and Standard Libraries (PDF) The Big Online Book of Linux Ada Programming Agda Agda Tutorial Alef Alef Language Reference Manual Android Agile Android Software Development - Etienne Savard (PDF, epub, mobi) Android 4 App Development Essentials Android 5 Programming by Example - Kyle Mew, Packt. (email address requested , not required) Android Developer Fundamentals Course \u2013 Concepts Android Developer Fundamentals Course \u2013 Practicals Android NDK Beginner's Guide - Second Edition - Sylvain Ratabouil, Packt. (email address requested , not required) Android NDK Game Development Cookbook - Sergey Kosarevsky & Viktor Latypov, Packt. (email address requested , not required) Android Programming Guide for Beginners (PDF - need email confirmation) Android Programming Succinctly, Syncfusion ( PDF , Kindle ) (email address requested , not required) CodePath Android Cliffnotes Coreservlets Android Programming Tutorial Expert Android and Eclipse development knowledge Google Android Developer Training RxJava for Android App Development (email address requested , not required) Styling Android The Busy Coder's Guide to Android Development (PDF - older versions) Tutorial Point Android Tutorial (PDF) APL A Practical Introduction to APL1 & APL2 A Practical Introduction to APL3 & APL4 Mastering Dyalog APL (PDF) Arduino Arduino Programming Notebook - Brian Evans C Programming for Arduino - Julien Bayle, Packt. (email address requested , not required) Introduction to Arduino Introduction to Arduino : A piece of cake! - Alan G. Smith ASP.NET MVC ASP.NET MVC Music Store Assembly Language An introduction to reverse engineering for beginners Assembly Language Succinctly (PDF) PC Assembly Language - P. A. Carter Professional Assembly Language (PDF) Programming from the Ground Up (PDF) Ralf Brown's Interrupt List Software optimization resources - A. Fog Wizard Code x86-64 Assembly Language Programming with Ubuntu - Ed Jorgensen (PDF) x86 Assembly - Wikibooks Non-X86 Easy 6502 - Nick Morgan Machine Code for Beginners [Z80 and 6502 CPUs] - Lisa Watts and Mike Wharton (PDF) (Scroll to bottom and click on book cover) Machine Language for Beginners - Richard Mansfield [6502 CPU] Programmed Introduction to MIPS Assembly Language The Second Book of Machine Language AutoHotkey AHKbook - the book for AutoHotkey AutoHotkey Official Documentation ( CHM ) Autotools Autotools Mythbuster GNU Autoconf, Automake and Libtool Awk A User's Guide for GNU AWK An Awk Primer - Wikibooks Awk - Bruce Barnett Bash Advanced Bash-Scripting Guide - M. Cooper (HTML) Bash Guide for Beginners (2008) - M. Garrels (HTML) Bash Notes for Professionals - Compiled from StackOverflow documentation (3.x) (PDF) BASH Programming (2000) - Mike G. (HTML) Bash Reference Manual (HTML) Bash tutorial - Anthony Scemama (PDF) BashGuide - Maarten Billemont (HTML) (PDF) Conquering the Command Line - Mark Bates (HTML) Getting Started with BASH (HTML) Google Shell Style Guide - Paul Armstrong (HTML) Introduction to the Command Line - Launch School (HTML) Linux Fundamentals - Paul Cobbaut (PDF) Linux Shell Scripting Tutorial - A Beginner's Handbook (2002) - Vivek G. Gite (HTML) Linux Shell Scripting Tutorial (LSST) v2.0 - Vivek Gite (HTML) Slackbook (2005) - Alan Hicks, Chris Lumens, David Cantrell and Logan Johnson (HTML, DocBook, Postscript, PDF) The Bash Academy - Maarten Billemont (HTML) The Linux Command Line - William E. Shotts, Jr. (PDF) Writing Shell Scripts - William E. Shotts, Jr. (HTML) Basic 10 PRINT CHR$(205.5+RND(1)); : GOTO 10 - Nick Montfort, Patsy Baudoin, John Bell,Ian Bogost, Jeremy Douglass, Mark C. Marino, Michael Mateas, Casey Reas, Mark Sample, Noah Vawter A beginner's guide to Gambas - John W. Rittinghouse (PDF) Pick/Basic: A Programmer's Guide - Jonathan E. Sisk Visual Basic Essentials BETA Object-Oriented Programming in the BETA Programming Language - Ole Lehrmann Madsen, Birger M\u00f8ller-Pedersen, Kristen Nygaard C 256-Color VGA Programming in C - David Brackeen A Tutorial on Pointers and Arrays in C - Ted Jensen (PDF, Zipped HTML) Beej's Guide to C Programming - B. Hall Beej's Guide to Network Programming - Using Internet Sockets - B. Hall Build Your Own Lisp C Elements of Style - Steve Oualline C for Python Programmers - Carl Burch C Programming - Wikibooks C Programming Boot Camp - Paul Gribble Deep C Essential C (PDF) Everything you need to know about pointers in C - Peter Hosey Functional C (1997) - Pieter H. Hartel, Henk Muller (PDF) Learn to Code With C - The MagPi Essentials (PDF) Modern C (PDF) Object-Oriented Programming With ANSI-C (PDF) Programming in C - Bharat Kinariwala & Tep Dobry The C book The Craft of Text Editing or A Cookbook for an Emacs - Craig A. Finseth The GNU C Programming Tutorial (PDF) The little book about OS development - Erik Helin, Adam Renberg The New C Standard - An Economic and Cultural commentary (2009) - Derek M. Jones (PDF) TONC GBA Programming - Game Boy Advance Development C Sharp C# Essentials C# Notes for Professionals - Compiled from StackOverflow documentation (3.x) C# Programming - Wikibooks C# Yellow Book (intro to programming) Creating Mobile Apps with Xamarin.Forms C# Daily Design Patterns (PDF) Data Structures and Algorithms with Object-Oriented Design Patterns in C# - Bruno Preiss Dissecting a C# Application - Christian Holm, Bernhard Spuida, Mike Kruger Fundamentals of Computer Programming with C# - Svetlin Nakov High level asynchronous programming with Reactive Extensions - Emil Petro Introduction to Rx Object Oriented Programming using C# - Simon Kendal, Bookboon. (email address requested , not required) Threading in C# Xamarin Cross-Platform Development Cookbook - George Taskos, Packt. (email address requested , not required) C++ C++ Annotations C++ Core Guidelines - Editors: Bjarne Stroustrup, Herb Sutter C++ GUI Programming With Qt 3 C++ Language C++ Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) C++ Today (email address requested , not required) C++ Tricks CS106X Programming Abstractions in C++ Financial Numerical Recipes in C++ - Bernt Arne \u00d8degaard Game Programming Patterns Google's C++ Style Guide How to make an Operating System - Samy Pesse How To Think Like a Computer Scientist: C++ Version - Allen B. Downey Introduction to Design Patterns in C++ with Qt (PDF) Joint Strike Fighter, C++ Coding Standards, by Bjarne Stroustrup (PDF) Learn C++. (PDF, Online) Matters Computational: Ideas, Algorithms, Source Code, by Jorg Arndt (PDF) Open Data Structures (In C++) (PDF) Practical C++ Metaprogramming (email address requested , not required) Software Design Using C++ - Br. David Carlson and Br. Isidore Minerd Software optimization resources by Agner Fog The Boost C++ libraries The Rook's Guide to C++ (PDF) The Ultimate Question of Programming, Refactoring, and Everything Thinking in C++, Second Edition, Vol. 1. - Bruce Eckel (Vol. 2) Chapel Chapel Tutorial Chapel Tutorial for Programmers Cilk Cilk 5.4.6 Reference Manual (PDF) Clojure A Brief Beginner\u2019s Guide To Clojure Clojure - Functional Programming for the JVM - R. Mark Volkmann Clojure by Example - Hirokuni Kim Clojure Cheat Sheet Clojure community-driven documentation Clojure Cookbook Clojure Distilled Beginner Guide Clojure for the Brave and True Clojure in Small Pieces - Rich Hickey (PDF) Clojure Koans Clojure Programming - Wikibooks ClojureScript Koans ClojureScript Unraveled (HTML) Data Sorcery with Clojure Modern cljs SICP Distilled - An idiosyncratic tour of SICP in Clojure The Clojure Style Guide COBOL COBOL Programming Fundamental (PDF) Enterprise COBOL for z/OS documentation library Introduction to the COBOL Language OpenCOBOL 1.1 - Programmer's Guide (PDF) CoffeeScript CoffeeScript Cookbook CoffeeScript Ristretto - Reginald Braithwaite (Leanpub account or valid email requested) Smooth CoffeeScript The Little Book on CoffeeScript ColdFusion CFML In 100 Minutes - J. Casimir Learn CF in a Week Component Pascal Computing Fundamentals - Stan Warford (PDF) Cool CoolAid: The Cool 2013 Reference Manual (PDF) Coq Certified Programming with Dependent Types Software Foundations Crystal Crystal for Rubyists CUDA OpenCL Programming Guide for CUDA Architecture (PDF) D D Templates Tutorial Programming in D Dart What is Dart? DB2 Getting started with DB2 Express-C (PDF) Getting started with IBM Data Studio for DB2 (PDF) Getting started with IBM DB2 development (PDF) Delphi / Pascal Essential Pascal Version 1 and 2 - M. Cant\u00f9 DTrace IllumOS Dynamic Tracing Guide Elasticsearch Elasticsearch: The Definitive Guide ( fork it on GH ) Exploring Elasticsearch Elixir 30 Days of Elixir - Tim Morgan (HTML) Elixir School (HTML) \u00c9tudes for Elixir (HTML) Getting Started Guide (HTML) (PDF, MOBI, EPUB) Joy of Elixir - Ryan Bigg (HTML) - Source (:construction: in process ) Learning Elixir - Joseph Kain Blog (HTML) Ecto Ecto Getting Started Guide (HTML) Phoenix Phoenix v1.3.0 Guide (HTML) Versioned APIs with Phoenix - Elvio Vicosa (PDF) (account required) Emacs An Introduction to Programming in Emacs Lisp, 3rd Edition GNU Emacs Lisp Reference Manual GNU Emacs Manual (PDF) Embedded Systems Control and Embedded Systems (HTML) Discovering the STM32 Microcontroller (PDF) Introduction to Microcontrollers (HTML) Erlang Concurrent Programming in ERLANG (PDF) Erlang Handbook (PDF) Erlang Programming - Wikibooks (HTML) \u00c9tudes for Erlang - J. David Eisenberg Getting Started with Erlang User's Guide (HTML) Learn You Some Erlang For Great Good - Frederic Trottier-Hebert Making reliable distributed systems in the presence of software errors - Joe Armstrong (PDF) Stuff Goes Bad: Erlang in Anger - Fred Herbert (PDF) ESP8266 Kolban's book on the ESP32 & ESP8266 (Leanpub account or valid email requested) F Sharp Analyzing and Visualizing Data with F# (PDF) F# for fun and profit (ePub) F# Programming - Wikibooks F# Succinctly, SyncFusion (PDF, Kindle) (email address requested , not required) Programming Language Concepts for Software Developers (PDF) Firefox OS Quick Guide For Firefox OS App Development: Creating HTML5 based apps for Firefox OS - Andre Garzia Force.com Developer Workbooks Force.com Fundamentals Force.com Platform Fundamentals: An Introduction to Custom Application Development in the Cloud Heroku Postgres (PDF) Forth A Beginner's Guide to Forth And so Forth... (PDF) Programming Forth (PDF) Starting Forth Thinking Forth Thoughtful Programming and Forth Fortran Introduction to fortran 95 and numerical computing: a jump-start for scientists and engineers (PDF) Self Study Guide: Programming in Fortran 95 (PDF) FreeBSD Books and Articles from FreeBSD Site The Complete FreeBSD Using C on the UNIX System - David A. Curry Git A Visual Git Reference - Mark Lodato Conversational Git git - the simple guide Git for Computer Scientists Git From The Bottom Up - J. Wiegley Git Immersion Git In The Trenches Git internals - Scott Chacon (PDF) Git Magic Git Pocket Guide - Richard E. Silverman Git Reference Git Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Git Workflows GitHub Cheat Sheet - Tim Green (Markdown) Intoduction to Git and Github - Launch School Learn Enough Git to be Dangerous - Michael Hartl Learn Git - Learn Version Control with Git - Tobias G\u00fcnther Pro Git - Scott Chacon Pro Git Reedited - Jon Forrest Ry's Git Tutorial - Ryan Hodson Think Like (a) Git: A Guide for the Perplexed Version Control by Example (Mercurial, Subversion, Verasity) Go An Introduction to Programming in Go Build Web Application with Golang Building Web Apps with Go Effective Go Go 101 - @TapirLiu Go Bootcamp - Matt Aimonetti Go by Example Go for Javascript Developers Learning Go Let's learn Go! Practical Cryptography With Go - Kyle Isom The Go Tutorial The Little Go Book Web apps in Go, the anti textbook Groovy Gradle Building Java Projects with Gradle Gradle User Guide - Hans Dockter, Adam Murdoch ( PDF ) Grails Getting Started with Grails Grails Tutorial for Beginners The Grails Framework - Reference Documentation - Graeme Rocher, Peter Ledbrook, Marc Palmer, Jeff Brown, Luke Daley, Burt Beckwith, Lari Hotari ( PDF ) Spock Framework Spock Framework Reference Documentation - Peter Niederwieser Hack Hack Documentation Hadoop Cloudera Impala - John Russel Data-Intensive Text Processing with MapReduce (Jimmy Lin and Chris Dyer) (PDF) Hadoop Explained - Aravind Shenoy, Packt. (email address requested , not required) Hadoop Illuminated - Mark Kerzner & Sujee Maniyam Programming Pig - Alan Gates Haskell A Gentle Introduction to Haskell Anatomy of Programming Languages - William R. Cook Beautiful Code, Compelling Evidence (PDF) Exploring Generic Haskell - Andres L\u00f6h (PDF) Happy Learn Haskell Tutorial Haskell - Wikibooks Haskell and Yesod Haskell no panic Haskell web Programming (Yesod tutorial) Learn Haskell Fast and Hard Learn You a Haskell for Great Good - Miran Lipovaca Parallel and Concurrent Programming in Haskell - Simon Marlow Real World Haskell Speeding Through Haskell The Haskell Road to Logic, Math and Programming (PDF) Yet Another Haskell Tutorial (PDF) Haxe Flambe Handbook Haxe and JavaScript - Matthijs Kamstra (wikibook) Haxe Manual - Haxe Foundation (PDF, HTML) HaxeFlixel Handbook (HTML) Kha Handbook HTML / CSS A beginner's guide to HTML&CSS A free guide to learn HTML and CSS Adaptive Web Design - Aaron Gustafson An advanced guide to HTML&CSS Canvassing Code Guide: Standards for developing flexible, durable, and sustainable HTML and CSS - Mark Otto Dive Into HTML5 - Mark Pilgrim ( PDF ) GA Dash Google's HTML/CSS Style Guide How to Code in HTML5 and CSS3 HTML Canvas Deep Dive - Josh Marinacci HTML Dog Tutorials HTML5 Canvas - Steve Fulton & Jeff Fulton HTML5 for Publishers - Sanders Kleinfeld HTML5 For Web Designers - Jeremy Keith HTML5 Graphing and Data Visualization Cookbook - Ben Fhala, Packt. (email address requested , not required) HTML5 Notes for Professionals - Compiled from StackOverflow documentation (3.x) HTML5 Shoot 'em Up in an Afternoon - Bryan Bibat Learn CSS Layout Learn CSS Layout the pedantic way MaintainableCSS Pro HTML5 Programming Scalable and Modular Architecture for CSS - Jonathan Snook Thinking in CSS - Aravind Shenoy, Packt. (email address requested , not required) Thinking in HTML - Aravind Shenoy, Packt. (email address requested , not required) Understanding Flexbox: Everything you need to know - Ohans Emmanuel Web Audio API - Boris Smus Bootstrap Twitter Bootstrap 3 Succinctly (PDF, Kindle) (email address requested , not required) Twitter Bootstrap Succinctly (PDF, Kindle) (email address requested , not required) HTTP Introduction to HTTP - Launch School Icon The Implementation of the Icon Programming Language iOS Cocoa Dev Central iOS 8 App Development Essentials iOS Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Mastering iOS Game Development - Miguel DeQuadros, Packt (email address requested , not required) NSHipster (Resource) Start Developing iOS Apps (Swift) (HTML) Start Developing iOS Apps Today (Objective-C) - Last updated 22.10.2013 (PDF) IoT IoT in five days- V1.1 (PDF, EPUB) Isabelle/HOL Concrete Semantics - A Proof Assistant Approach by Tobias Nipkow and Gerwin Klein (PDF) Isabelle/HOL - A Proof Assistant for Higher-Order Logic by Tobias Nipkow and Lawrence C. Paulson and Markus Wenzel (PDF) J Arithmetic by Kenneth E Iverson (PDF) Brief Reference by Chris Burke and Clifford Reiter (PDF) Calculus by Kenneth E Iverson (PDF) Computers and Mathematical Notation by Kenneth E Iverson Concrete Math Companion by Kenneth E Iverson (PDF) Easy J by Linda Alvord, Norman Thomson (PDF) ( Word DOC ) Exploring Math by Kenneth E Iverson (PDF) J for C Programmers by Henry Rich J Primer Learning J by Roger Stokes- online Math for the Layman by Kenneth E Iverson (zipped html+images) Java 3D Programming in Java - Daniel Selman (PDF) Apache Jakarta Commons: Reusable Java Components - Will Iverson (PDF) Artificial Intelligence - Foundation of Computational Agents (2010) - David Poole and Alan Mackworth Category wise tutorials - J2EE - Yong Mook Kim Core Servlets and JavaServer Pages, 2nd Ed. (2003) - Marty Hall and Larry Brown Data Structures in Java for the Principled Programmer (2007) - Duane A. Bailey (PDF) Google's Java Style Guide Introduction to Computer science using Java - Bradley Kjell Introduction to Programming in Java - Robert Sedgewick and Kevin Wayne Introduction to Programming Using Java - David J. Eck Java Application Development on Linux (2005) - Carl Albing and Michael Schwarz (PDF) Java Language and Virtual Machine Specifications - James Gosling, et al Java Notes for Professionals - Compiled from StackOverflow documentation (3.x) Java Programming for Kids - Yakov Fain Java: The Legend - Ben Evans (email address requested , not required) Learning Java (4th Edition) - Patrick Niemeyer and Daniel Leuck Microservices Best Practices for Java (PDF) Microservices for Java Developers - Christian Posta (email address requested , not required) Modern Java EE Design Patterns - Markus Eisele (email address requested , not required) Neural Network Development with Java - Alan M. F. Souza and Fabio M. Soares (email address requested , not required) Object-Oriented vs. Functional Programming - Richard Warburton (email address requested , not required) OOP - Learn Object Oriented Thinking & Programming - Rudolf Pecinovsky Open Data Structures (in Java) - Pat Morin (PDF) Processing XML with Java (A Guide to SAX, DOM, JDOM, JAXP, and TrAX) (2002) - Elliotte Rusty Harold The ABC of PDF with iText: PDF Syntax essentials - Bruno Lowagie (Leanpub account or valid email requested) The Java EE6 Tutorial (PDF) The Java EE7 Tutorial - Eric Jendrock, et al (PDF) The Java Tutorials Think Java: How to Think Like a Computer Scientist - Allen B. Downey and Chris Mayfield Welcome to Java for Python Programmers - Brad Miller Welcome to the Java Workshop (2006) - Trevor Miller Codename One Codename One Developer Guide (PDF) Create an Uber Clone in 7 Days (first 2 chapters) - Shai Almog (PDF) JasperReports The JasperReports Ultimate Guide, Third Edition (PDF) Spring Spring Framework Reference Documentation - Rod Johnson, Juergen Hoeller, Keith Donald, Colin Sampaleanu, Rob Harrop, Thomas Risberg, Alef Arendsen, Darren Davison, Dmitriy Kopylenko, Mark Pollack, Thierry Templier, Erwin Vervaet, Portia Tung, Ben Hale, Adrian Colyer, John Lewis, Costin Leau, Mark Fisher, Sam Brannen, Ramnivas Laddad, Arjen Poutsma, Chris Beams, Tareq Abedrabbo, Andy Clement, Dave Syer, Oliver Gierke, Rossen Stoyanchev, Phillip Webb, Rob Winch, Brian Clozel, Stephane Nicoll, Sebastien Deleuze ( PDF ) Spring Boot Spring Boot Reference Guide - Phillip Webb, Dave Syer, Josh Long, St\u00e9phane Nicoll, Rob Winch, Andy Wilkinson, Marcel Overdijk, Christian Dupuis ( PDF , EPUB ) Spring Security Spring Security Reference - Ben Alex, Luke Taylor, Rob Winch Wicket Official Free Online Guide for Apache Wicket framework JavaScript Basic JavaScript for the impatient programmer - Dr. Axel Rauschmayer Book of Modern Frontend Tooling Crockford's JavaScript - Douglas Crockford Dev Docs Developing Backbone.js Applications - Addy Osmani Directory of free Javascript ebooks Eloquent JavaScript 2nd edition - Marijn Haverbeke Exploring ES6 - Dr. Axel Rauschmayer Google JavaScript Style Guide Human JavaScript JavaScript Allong\u00e9 - Reginald Braithwaite JavaScript Bible (PDF) JavaScript Challenges Book JavaScript Enlightenment - Cody Lindley JavaScript ES6 and beyond - Alberto Montalesi (PDF, epub) JavaScript For Cats JavaScript Fundamentals, Plus a Dash Of JQuery - for dinner ladies JavaScript Garden (Maintained by Tim Ruffles) JavaScript Patterns Collection - Shi Chuan JavaScript Spessore - Reginald Braithwaite Javascript Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) JavaScript the Right Way jQuery Fundamentals (starts with JavaScript basics) JS Robots (PDF) Leaflet Tips and Tricks: Interactive Maps Made Easy - Malcolm Maclean Learn to Code JavaScript by Playing a Game Learning JavaScript Design Patterns - Addy Osmani Managing Space and Time with JavaScript - Book 1: The Basics - Noel Rappin Marionette Expos\u00e9: Learn to write modular Javascript applicatons using Backbone Marionette and RequireJS/AMD - Jack Killilea (Leanpub account or valid email requested) Mastering JavaScript High Performance - Chad R. Adams, Packt. (email address requested , not required) Mozilla Developer Network's JavaScript Guide O'Reilly Programming JavaScript Applications Object-Oriented JavaScript - Stoyan Stefanov, Kumar Chetan Sharma (email address requested , not required) Oh My JS - Azat Mardanov Patterns For Large-Scale JavaScript Application Architecture - Addy Osmani Speaking JavaScript - Dr. Axel Rauschmayer The JavaScript Tutorial The JavaScript Way - Baptiste Pesquet The Problem with Native JavaScript APIs Thinking in JavaScript - Aravind Shenoy, Packt. (email address requested , not required) Understanding ECMAScript 6 - Nicholas C. Zakas Understanding JavaScript OOP (Sorella) You Don't Know JS Angular.js Angular for the jQuery developer Angular.js Guide Angular.js Material Designing Angular.js Tutorial AngularJS - Step by Logical Step AngularJS Essentials - Rodrigo Branas, Packt (email address requested , not required) AngularJS Succinctly (PDF, Kindle) (email address requested , not required) AngularJs vs EmberJs AngularJS with Ruby on Rails Developing with Angular - Denys Vuika (Leanpub account or valid email requested) (:construction: in process ) Recipes with Angular.js - Frederik Dietz Seven-Part Introduction to Angular Unit Testing Best Practices in AngularJS Aurelia Beginning Aurelia - behzad (Leanpub account or valid email requested) Backbone.js A Complete guide for learning Backbone.js A pragmatic guide to Backbone.js apps Backbone Tutorials: Beginner, Intermediate and Advanced - Thomas Davis (Leanpub account or valid email requested) Backbone.js + Require.js, Modularization and Just in Time Dependency Loading, part 1 part 2 Backbone.js and socket.io Backbonejs Tutorials Building Single Page Web Apps with Backbone.js (:construction: in process ) Developing Backbone.js Applications Getting Started with Backbone.js How to share Backbone.js models with node.js Booty5.js The Booty5 HTML5 Game Maker Manual D3.js D3 Tips and Tricks - Malcolm Maclean Dashing D3.js Tutorial Interactive Data Visualization for the Web Interactive Data Visualization with D3 Dojo Dojo: The Definitive Guide - Matthew A. Russell Elm Building a Live-Validating Signup Form in Elm Elm Tutorial The Elm Architecture Ember.js AngularJs vs EmberJs DockYard Ember.js Style Guide Ember App with RailsApi Ember.js - Getting started Vic Ramon's Ember Tutorial Express.js Express.js Guide - Azat Mardanov jQuery JavaScript Fundamentals, Plus a Dash Of JQuery - for dinner ladies jQuery Novice to Ninja (PDF) jQuery Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Meteor BulletProof Meteor Your First Meteor Application, A Complete Beginner\u2019s Guide to the Meteor JavaScript Framework Node.js An Introduction to libuv - Nikhil Marathe ( PDF - ePub ) Mixu's Node Book Node Documentation Node: Up and Running - Tom Hughes-Croucher Node.js Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) The Node Beginner Book What You Need To Know About Node.js - Bruno Joseph Dmello, Packt (email address requested , not required) Om Om Tutorial React Free React on Rails course Hacking with React Intro to the React Framework Learning React.js: Getting Started and Concepts React-Bits ( vasanthk ) React Enlightenment React In-depth: An exploration of UI development React Primer Draft React Tutorial React Tutorial by Josh Finnie Part 1 Part 2 Part 3 React with ASP.NET Core Tutorial React.js Fundamentals React.js Tutorial: Now is Your Time to Try It, Right in Your Browser SurviveJS - Webpack and React The Road to learn React - Build a Hacker News App along the Way - Robin Wieruch (Leanpub account or valid email requested) markdown React Native Programming React Native (Leanpub account or valid email requested) React Native Animation Book React Native Express React Native Training Redux Full-Stack Redux Tutorial SoundCloud Application in React + Redux The Complete Redux Book - Boris Dinkevich and Ilya Gelman (Leanpub account or valid email requested) Jenkins Jenkins: The Definitive Guide (PDF) Julia Introducing Julia - Wikibooks Julia by Example - Samuel Colvin (GitHub repo) Julia language: a concise tutorial - Antonello Lobianco (GitBook) Learn Julia in Y minutes - Leah Hanson The Julia Express - Bogumi\u0142 Kami\u0144ski (PDF) LaTeX / TeX LaTeX Arbitrary LaTex Reference Begin Latex in minutes LaTeX - Wikibooks The Not So Short Introduction to LaTeX (PDF) TeX Notes On Programming in TeX - Christian Feurs\u00e4nger (PDF) TeX by Topic, A TeXnician's Reference - Victor Eijkhout TeX for the Impatient - Paul Abrahams, Kathryn Hargreaves, and Karl Berry Limbo Inferno Programming With Limbo Linux Ad Hoc Data Analysis From The Unix Command Line - Wikibooks Advanced Linux Programming (PDF) Automated Linux From Scratch Getting Started with Ubuntu GNU Autoconf, Automake and Libtool GTK+/Gnome Application Development Hardened Linux From Scratch Kali Linux: Professional Penetration-Testing Distribution Learn Enough Command Line to Be Dangerous - Michael Hartl Learning Debian GNU/Linux Linux 101 Hacks - Ramesh Natarajan (PDF) Linux Administrator's Security Guide Linux Advanced Routing & Traffic Control HOWTO Linux Device Drivers, Third Edition - Jonathan Corbet, Alessandro Rubini, and Greg Kroah-Hartman Linux from Scratch Linux Inside Linux Kernel in a Nutshell Linux Newbie Administrator Guide Linux Security for Beginners Linux Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) OpenVZ Linux virtualization (PDF) Red Hat Enterprise Linux 6 Essentials Secure Programming HOWTO - Creating Secure Software - D. A. Wheeler (HTML, PDF) Ten Steps to Linux Survival: Bash for Windows People - Jim Lehmer The Debian Administrator's Handbook The Linux Command Line (PDF) The Linux Development Platform (PDF) The Linux Kernel Module Programming Guide The Linux System Administrator's Guide Ubuntu Pocket Guide and Reference Ubuntu Server Guide (PDF) Understanding the Linux Virtual Memory Manager - Mel Gorman (HTML, PDF) UNIX Systems Programming for SVR4 - David A. Curry Upstart Intro, Cookbook and Best Practises What Every Programmer Should Know About Memory (PDF) Lisp Basic Lisp Techniques - David J. Cooper, Jr. (PDF) Casting Spels in Lisp Common Lisp: A Gentle Introduction to Symbolic Computation - David S. Touretzky (PDF, PS) Common Lisp: An Interactive Approach - Stuart C. Shapiro Common Lisp Quick Reference Common Lisp the Language, 2nd Edition Google's Common Lisp Style Guide Interpreting LISP - Gary D. Knott (PDF) Learn Lisp The Hard Way - Colin J.E. Lupton Let Over Lambda - 50 Years of Lisp - D. Hoyte Lisp Hackers: Interviews with 100x More Productive Programmers - Vsevolod Dyomkin Lisp Koans Lisp Web Tales - Pavel Penev (Leanpub account or valid email requested) On Lisp - P. Graham Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp - Peter Norvig (PDF, epub, markdown) Practical Common Lisp - P. Seibel Successful Lisp: How to Understand and Use Common Lisp - David Lamkins (PDF) The Common Lisp Cookbook The Evolution of Lisp - Guy L. Steele Jr., Richard P. Gabriel (PDF) Livecode LiveCode userguide (PDF) Lua Lua 5.1 Reference Manual Lua Programming - Wikibooks Programming in Lua (first edition) Markdown Learn Markdown - Sammy P., Aaron O. (PDF) (EPUB) (MOBI) Mathematica Mathematica\u00ae programming: an advanced introduction by Leonid Shifrin Stephen Wolfram's The Mathematica Book Vector Math for 3d Computer Graphics Wolfram Mathematica Tutorial Collection MATLAB An Interactive Introduction to MATLAB (PDF) An Introduction to MATLAB (PDF) Applications of MATLAB in Science and Engineering Experiments with MATLAB Freshman Engineering Problem Solving with MATLAB Interactive Tutorials for MATLAB, Simulink, Signal Processing, Controls, and Computational Mathematics MATLAB - A Fundamental Tool for Scientific Computing and Engineering Applications - Volume 1 MATLAB - A Ubiquitous Tool for the Practical Engineer MATLAB for Engineers: Applications in Control, Electrical Engineering, IT and Robotics MATLAB Programming - Wikibooks MATLAB Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Numerical Computing with MATLAB Physical Modeling in MATLAB - Alan B. Downey Maven Developing with Eclipse and Maven Maven by Example Maven: The Complete Reference Repository Management with Nexus Mercurial HGInit - Mercurial Tutorial by Joel Spolsky Mercurial: The Definitive Guide Mercurial: The Definitive Guide 2nd edition ( source repository ) (:construction: in process ) Mercury The Mercury Users' Guide (PDF) Modelica Modelica by Example MySQL MySQL Essentials MySQL Tutorial Excerpt (PDF) Neo4J Graph Databases (PDF) Graph Databases 2nd edition (account required) .NET Framework Entity Framework Game Creation with XNA - Wikibooks .NET for Visual FoxPro Developers .NET Performance Testing and Optimization - The Complete Guide (RedGate, By Paul Glavich and Chris Farrell) Under the Hood of .NET Memory Management (PDF) (RedGate, By Chris Farrell and Nick Harrison) Visual Studio .NET Tips and Tricks (VS 2003-2005 only) NoSQL CouchDB: The Definitive Guide Extracting Data from NoSQL Databases: A Step towards Interactive Visual Analysis of NoSQL Data - Petter Nasholm (PDF) Graph Databases Instant MongoDB - Amol Nayak, Packt. (email address requested , not required) MongoDB Koans MongoDB Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) NoSQL Databases - Christof Strauch (PDF) The Little MongoDB Book The Little Redis Book - K. Seguin (PDF, Epub) Oberon Algorithms and Data-Structures - Niklaus Wirth (PDF) Object-Oriented Programming in Oberon-2 - Hanspeter M\u00f6ssenb\u00f6ck (PDF) Programming in Oberon - Niklaus Wirth (PDF) Objective-C Google's Objective-C Style Guide Object-Oriented Programming with Objective-C Objective-C Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Programming With Objective-C Try Objective-C Book OCaml Developing Applications With Objective Caml Real World OCaml Think OCaml - Allen B. Downey and Nicholas Monje Unix System Programming in OCaml Github Repo Using, Understanding, and Unraveling The OCaml Language: From Practice to Theory and vice versa - Didier R\u00e9my Octave Octave Programming - Wikibooks OpenGL ES iPhone 3D Programming - Developing Graphical Applications with OpenGL ES - Philip Rideout OpenMP A Guide To OpenMP OpenMP Application Programming Interface Standard Version 4.0 (PDF) OpenResty Programming OpenResty OpenSCAD OpenSCAD User Manual - Wikibooks TrueOS TrueOS\u00ae Users Handbook Perl Beginning Perl Data Munging with Perl (PDF) Embedding Perl in HTML with Mason - D. Rolsky, K. Williams Essential Perl (PDF) Exploring Programming Language Architecture in Perl Extreme Perl - R. Nagier (HTML, PDF) Higher-Order Perl - M. J. Dominus (PDF) Impatient Perl Learning Perl The Hard Way Mastering Perl - brian d foy Modern Perl 5 Perl & LWP Perl 5 Internals Perl for the Web - C. Radcliff Perl Training Australia - Course Notes Plack Handbook SDL::Manual Writing Games in Perl Template Toolkit Documentation The DBIx-Class Book The PDL Book (PDF) Web Client Programming with Perl Perl 6 / Rakudo Perl 6 Introduction Perl 6 Programming - Wikibooks Think Perl 6 - Laurent Rosenfeld, with Allen B. Downey (PDF) Using Perl 6 (:construction: in process ) PHP CakePHP Framework CakePHP Cookbook 2.x (PDF) CodeIgniter Framework CodeIgniter 2.2.6 CodeIgniter 3.1.6 Drupal Framework Drupal 7 The Tiny Book of Rules (PDF) Hacking with PHP Laravel Framework Laravel 3 Laravel: Code Happy - Dayle Rees Laravel 4 Laravel: Code Bright - Dayle Rees Laravel 5 Laravel 5.x Official Documentation. Synced Daily (Leanpub account or valid email requested) Laravel Best Practices Laravel: Code Smart - Dayle Rees Laravel Collections Unraveled - Jeffrey Madsen (Leanpub account or valid email requested) PHP 5 Power Programming (PDF) PHP Best Practices PHP Internals Book PHP Pandas - Dayle Rees PHP Programming - Wikibooks PHP Security Guide PHP: The Right Way PHPUnit Manual - Sebastian Bergmann (PDF) Practical PHP Programming Practical PHP Testing Survive The Deep End: PHP Security Symfony Framework Symfony 2.8 The Symfony Book 2.8.x (PDF) Symfony 3.4 The Symfony Best practices 3.4.x (PDF) The Symfony Book 3.4.x The Symfony Getting started 3.4.x (PDF) Symfony 4.1 The Symfony Best practices 4.1.x (PDF) The Symfony Book 4.1.x The Symfony Getting started 4.1.x (PDF) Using Libsodium in PHP Projects Zend Framework Using Zend Framework 3 PicoLisp PicoLisp by Example PicoLisp Works PostgreSQL Postgres Official Documentation Postgres Succinctly (PDF, Kindle) (email address requested , not required) Practical PostgreSQL The Internals of PostgreSQL for database administrators and system developers PowerShell Creating HTML Reports in PowerShell (PDF,ePub,HTML) DevOps: The Ops Perspective (PDF, ePub, MOBI) Ditch Excel: Making Historical & Trend Reports in PowerShell (PDF, ePub, MOBI) Introduction to PowerShell for Unix People (PDF, ePub, HTML) Layman\u2019s Guide to PowerShell 2.0 remoting (PDF) Mastering PowerShell v2 PowerShell 2.0 \u2013 One CMDLET At A Time (PDF) PowerShell Notes for Professionals - Compiled from StackOverflow documentation (3.x) PowerShell Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Secrets of PowerShell Remoting (PDF, ePub, MOBI) The Big Book of PowerShell Error Handling (PDF, ePub, MOBI) The Big Book of PowerShell Gotchas (PDF, ePub, MOBI) The DSC Book (PDF, ePub, HTML) The Monad Manifesto - Annotated (PDF, ePub, MOBI) Why PowerShell? (PDF, ePub, MOBI) Windows PowerShell Networking Guide (PDF, ePub, MOBI) Processing The Nature of Code: Simulating Natural Systems with Processing Prolog Adventure in Prolog Applications of Prolog - Attila Csenki, Bookboon. (email address requested , not required) Coding Guidelines for Prolog - Michael A. Covington, Roberto Bagnara, Richard A. O'Keefe, Jan Wielemaker, Simon Price Concise Intro to Prolog Expert Systems in Prolog GNU Prolog Manual (PDF) Introduction to Prolog for Mathematicians - J. Ireson-Ireson-Paine Learn Prolog Now! Logic, Programming and Prolog (2ed) Natural Language Processing Techniques in Prolog - P. Blackburn, K. Striegnitz Prolog and Natural - Language Analysis - Fernando C. N. Pereira, Stuart M. Shieber Prolog for Programmers Prolog Problems - Werner Hett Prolog Techniques - Attila Csenki, Bookboon. (email address requested , not required) Prolog Tutorial The First 10 Prolog Programming Contests - Bart Demoen, Phuong-Lan Nguyen, Tom Schrijvers, Remko Tron\u00e7on Warren's Abstract Machine: A Tutorial Reconstruction - Hassan A\u00a8it-Kaci Constraint Logic Programming (extended Prolog) A Gentle Guide to Constraint Logic Programming via ECLiPSe PureScript PureScript By Example - Phil Freeman Python 20 Python Libraries You Aren't Using (But Should) (email address requested , not required) A Beginner's Python Tutorial - Wikibooks A Byte of Python (3.x) (HTML, PDF, EPUB, Mobi) A Guide to Python's Magic Methods - Rafe Kettler A Whirlwind Tour of Python - Jake VanderPlas (PDF) (EPUB, MOBI) Automate the Boring Stuff - Al Sweigart Biopython (PDF) Build applications in Python the antitextbook (3.x) (HTML, PDF, EPUB, Mobi) Building Machine Learning Systems with Python - Willi Richert & Luis Pedro Coelho, Packt. (email address requested , not required) Building Skills in Object-Oriented Design (Python) (PDF) (2.1.1) Building Skills in Python (PDF) (2.6) Code Like a Pythonista: Idiomatic Python CodeCademy Python Composing Programs (3.x) Data Structures and Algorithms in Python - B. R. Preiss (PDF) Dive into Python 3 - Mark Pilgrim (3.0) Dive into Python - Mark Pilgrim (2.3) From Python to NumPy Full Stack Python Functional Programming in Python (email address requested , not required) Fundamentals of Python Programming - Richard L. Halterman (PDF) (3.2) Google's Python Class (2.4 - 2.x) Google's Python Style Guide Hacking Secret Cyphers with Python - Al Sweigart (3.3) Hadoop with Python (email address requested , not required) High Performance Python (PDF) Hitchhiker's Guide to Python! (2.6) How to Make Mistakes in Python - Mike Pirnat (PDF) (1st edition) How to Think Like a Computer Scientist: Learning with Python, Interactive Edition (3.2) How to Think Like a Computer Scientist: Learning with Python - Allen B. Downey, Jeff Elkner and Chris Meyers (2.4) Think Python - Allen B. Downey (2.x & 3.0) Intermediate Python - Muhammad Yasoob Ullah Khalid (1st edition) Introduction to Programming with Python (3.3) Introduction to Programming Using Python - Cody Jackson (1st edition) (2.3) Introduction to Python - Kracekumar (2.7.3) Invent Your Own Computer Games With Python - Al Sweigart (3.1) Learn Python, Break Python Learn Python in Y minutes Learn Python The Hard Way (2.5 - 2.6) Learn to Program Using Python - Cody Jackson (PDF) Learning Python - Fabrizio Romano, Packt. (email address requested , not required) Learning to Program Lectures on scientific computing with python - J.R. Johansson (2.7) Making Games with Python & Pygame - Al Sweigart (2.7) Math for programmers (using python) Modeling Creativity: Case Studies in Python - Tom D. De Smedt (PDF) Natural Language Processing with Python (3.x) Non-Programmer's Tutorial for Python 3 - Wikibooks (3.3) Non-Programmer's Tutorial for Python 2.6 - Wikibooks (2.6) Picking a Python Version: A Manifesto (email address requested , not required) Porting to Python 3: An In-Depth Guide (2.6 - 2.x & 3.1 - 3.x) Practical Programming in Python - Jeffrey Elkner (PDF) Problem Solving with Algorithms and Data Structures using Python - Bradley N. Miller and David L. Ranum Program Arcade Games With Python And Pygame (3.3) Programming Computer Vision with Python (PDF) Python 2 Official Documentation (PDF, HTML, TEXT) (2.x) Python 2.7 quick reference - New Mexico Tech (2.7) Python 3 Official Documentation (PDF, EPUB, HTML, TEXT) (3.x) Python 3 Tutorial Python Cookbook - David Beazley Python Data Science Handbook - Jake VanderPlas (HTML, Jupyter Notebooks) Python for Econometrics - Kevin Sheppard (PDF) (2.7.5) Python for Everybody Exploring Data Using Python 3 - Charles Severance (PDF, EPUB, HTML) Python for Informatics: Exploring Information (2.7.5) Python for you and me (2.7.3) Python for you and me (3.x) Python Idioms (PDF) Python in Education (email address requested , not required) Python in Hydrology - Sat Kumar Tomer Python Koans (2.7 or 3.x) Python Module of the Week (3.x) Python Module of the Week (2.x) Python Notes for Professionals - Compiled from StackOverflow documentation (3.x) Python Practice Book (2.7.1) Python Practice Projects Python Programming - Wikibooks (2.7) Python Programming - Wikibooks (PDF) (2.6) Scipy Lecture Notes SICP in Python (3.2) Snake Wrangling For Kids (3.x) Suporting Python 3: An In-Depth Guide (2.6 - 2.x & 3.1 - 3.x) Test-Driven Web Development with Python (3.3 - 3.x) Text Processing in Python - David Mertz (2.3 - 2.x) The Coder's Apprentice: Learning Programming with Python 3 - Pieter Spronck (PDF) (3.x) The Definitive Guide to Jython, Python for the Java Platform - Josh Juneau, Jim Baker, Victor Ng, Leo Soto, Frank Wierzbicki (2.5) The Little Book of Python Anti-Patterns ( Source ) The Programming Historian - William J. Turkel, Adam Crymble and Alan MacEachern The Python Ecosystem: An Introduction The Python GTK+ 3 Tutorial The Standard Python Library - Fredrik Lundh Think Complexity - Allen B. Downey (2nd Edition) (PDF, HTML) Web2py: Complete Reference Manual, 6th Edition (pre-release) (2.5 - 2.x) Django Django 2.0 Tutorial for Beginners (2.0) Django Girls Tutorial (1.11) Django Official Documentation (PDF) (1.5) Django Official Documentation (PDF) (1.7) Django Official Documentation (PDF) (1.9) Django Official Documentation (PDF) (1.10) Djen of Django Effective Django (1.5) How to Tango With Django (1.7) Test-Driven Web Development with Python (1.8) The Django Book (1.8 & 1.11) Flask Explore Flask - Robert Picard The Flask Mega-Tutorial - Miguel Grinberg (0.9) Kivy Kivy Programming Guide Pandas Learn Pandas - Hernan Rojas (0.18.1) Pyramid Quick Tutorial for Pyramid Tornado Learn Web Programming QML Qt5 Cadaques - Juergen Bocklage-Ryannel and Johan Thelin (HTML, PDF, ePub) (:construction: in process ) R Advanced R Programming - Hadley Wickham An Introduction to Statistical Learning with Applications in R - Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani (PDF) Cookbook for R - Winston Chang Introduction to Probability and Statistics Using R - G. Jay Kerns (PDF) Learning Statistics with R - Daniel Navarro Machine Learning with R - Brett Lantz, Packt. (email address requested , not required) ModernDive - Chester Ismay and Albert Y. Kim Practical Regression and Anova using R - Julian J. Faraway (PDF) R for Data Science - Garrett Grolemund and Hadley Wickham R for Spatial Analysis (PDF) R Language for Programmers - John D. Cook R Packages - Hadley Wickham R Practicals (PDF) R Programming - Wikibooks R Programming for Data Science - Roger D. Peng (Leanpub account or valid email requested) R Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) The caret Package - Max Kuhn The R Inferno - Patrick Burns (PDF) The R Language The R Manuals Tidy Text Mining with R - Julia Silge and David Robinson Racket How to Design Programs 2e Programming Languages: Application and Interpretation The Racket Guide Raspberry Pi Raspberry Pi Cookbook for Python Programmers - Tim Cox, Packt. (PDF) (email address requested , not required) Raspberry Pi: Measure, Record, Explore - Malcolm Maclean (HTML) Raspberry Pi Users Guide - (2012) - Eben Upton (PDF) The Official Raspberry Pi Project Book (PDF) REBOL Learn REBOL - Nick Antonaccio Ruby A community-driven Ruby style guide CodeCademy Ruby Developing Games With Ruby - Tomas Varaneckas I Love Ruby Introduction to Programming with Ruby - Launch School Just Enough Ruby to Get By Learn Ruby First - Frederick John Learn Ruby the Hard Way - Zed Shaw Learn to Program - Chris Pine Mr. Neighborly's Humble Little Ruby Book Object Oriented Programming with Ruby - Launch School Practicing Ruby Programming Ruby Ruby Essentials Ruby Hacking Guide Ruby in Twenty Minutes Ruby Koans Ruby Learning Ruby Programming Ruby User's Guide Ruby Web Dev: The Other Way - Yevhen Kuzminov The Bastards Book of Ruby The Unofficial Ruby Usage Guide (at Google) - Ian Macdonald Why's (Poignant) Guide to Ruby RSpec Better Specs (RSpec Guidelines with Ruby) Ruby on Rails A community-driven Rails style guide Building REST APIs with Rails Kestrels, Quirky Birds, and Hopeless Egocentricity - Reg Braithwaite Learn Ruby on Rails as You Modify a Craigslist Clone Objects on Rails Rails Girls Guides Ruby on Rails 3.2 - Step by Step Ruby on Rails 4.0 Guide Ruby on Rails Guides Ruby on Rails Tutorial (Rails 5): Learn Web Development with Rails - Michael Hartl Upgrading to Rails 4 Sinatra Sinatra Book Rust Rust by Example Rust for Rubyists The Rust Programming Language The Rustonomicon Why Rust? (PDF) Sage Sage for Power Users - William Stein (PDF) The Sage Manuals Scala A Scala Tutorial for Java programmers (PDF) Advanced Scala with Cats - Noel Welsh and Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) Another tour of Scala Creative Scala - Noel Welsh and Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) EAI Patterns with Actor Model - Vaughn Vernon Effective Scala Essential Scala - Noel Welsh and Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) Functional Programming for Mortals - Sam Halliday Learning Scala in small bites Learning Scalaz Pro Scala: Monadic Design Patterns for the Web Programming in Scala, First Edition - by M. Odersky, L. Spoon, B. Venners PythonToScala - Rob Story S-99: Ninety-Nine Scala Problems - Phil! Gold Scala & Design Patterns: Exploring Language Expressivity - Fredrik Skeel L\u00f8kke (PDF) Scala By Example - M. Odersky (PDF) Scala Cookbook: Bonus Chapters - Alvin Alexander (PDF) Scala for Perl 5 Programmers - Breno G. de Oliveira Scala for the Impatient (A1 Scala Level chapters) - Cay S. Horstmann Scala School by Twitter Scala Tutorial (PDF) tetrix in Scala The Neophyte's Guide to Scala - Daniel Westheide The Type Astronaut's Guide to Shapeless - Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) Xtrace Lift Exploring Lift (published earlier as \"The Definitive Guide to Lift\", PDF ) Lift Lift Cookbook - Richard Dallaway Simply Lift - David Pollak (PDF) Play Scala Essential Play - Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) Play Framework Recipes - Alvin Alexander Scheme A Pamphlet Against R. Computational Intelligence in Guile Scheme An Introduction to Scheme and its Implementation Concrete Abstractions: An Introduction to Computer Science Using Scheme - M. Hailperin, B. Kaiser, K. Knight How to Design Programs Scheme Tutorial Simply Scheme: Introducing Computer Science - B. Harvey, M. Wright Sketchy LISP: An Introduction to Functional Programming in Scheme - Nils Holm (ZIP) Teach Yourself Scheme in Fixnum Days The Scheme Programming Language: Edition 3 - The Scheme Programming Language: Edition 4 Write Yourself a Scheme in 48 Hours - Wikibooks Scilab Introduction to Scilab Programming in Scilab Writing Scilab Extensions Scratch An Introductory Computing Curriculum Using Scratch Computer Science Concepts in Scratch Sed Sed - An Introduction and Tutorial Self The Self Handbook Smalltalk Deep into Pharo Dynamic Web Development with Seaside - S. Ducasse, L. Renggli, C. D. Shaffer, R. Zaccone Enterprise Pharo: a Web Perspective Numerical Methods with Pharo Pharo by Example (Smalltalk Implementation and IDE) Squeak By Example (Smalltalk Implementation and IDE) Stef's Free Online Smalltalk Books (meta-list) Spark Databricks Spark Knowledge Base Databricks Spark Reference Applications Mastering Apache Spark SQL (implementation agnostic) Developing Time-Oriented Database Applications in SQL SQL For Web Nerds SQL Notes for Professionals Use The Index, Luke!: A Guide To SQL Database Performance SQL Server Best of SQLServerCentral.com Vol 7 *(RedGate, By SQLServerCentral Authors) Brad's Sure Guide to SQL Server Maintenance Plans (RedGate, By Brad McGehee) Defensive Database Programming (PDF) (RedGate, By Alex Kuznetsov) How to Become an Exceptional DBA (RedGate, By Brad McGehee) Inside the SQL Server Query Optimizer (RedGate, By Benjamin Nevarez) Introducing Microsoft SQL Server 2008 R2 Introducing Microsoft SQL Server 2012 Introducing Microsoft SQL Server 2014 Mastering SQL Server Profiler (RedGate, By Brad McGehee) Microsoft SQL Server Notes for Professionals (Compiled from StackOverflow documentation) Performance Tuning with SQL Server Dynamic Management Views (RedGate, By Tim Ford and Louis Davidson) Protecting SQL Server Data (RedGate, By John Magnabosco) SQL Server 2012 Tutorials: Reporting Services SQL Server Backup and Restore (RedGate, By Shawn McGehee) SQL Server Concurrency: Locking, Blocking and Row Versioning (RedGate, By Kalen Delaney) SQL Server Execution Plans (PDF) (RedGate, By Grant Fritchey) SQL Server Execution Plans, Second Edition (PDF) (RedGate, By Grant Fritchey) SQL Server Hardware (RedGate, By Glenn Berry) SQL Server Internals: In-Memory OLTP (RedGate, By Kalen Delaney) SQL Server Statistics (RedGate, By Holger Schmeling) SQL Server Stumpers Vol.5 (RedGate, By SQLServerCentral Authors) SQL Server Tacklebox (RedGate, By Rodney Landrum) SQL Server Transaction Log Management (RedGate, By Tony Davis and Gail Shaw) The Art of SQL Server FILESTREAM (RedGate, By Jacob Sebastian and Sven Aelterman) Troubleshooting SQL Server: A Guide for the Accidental DBA (RedGate, By Jonathan Kehayias and Ted Krueger) Standard ML Introduction to Standard ML - Atsushi Ohori (PDF) Programming in Standard ML '97 - Stephen Gilmore, University of Edinburgh Programming in Standard ML, DRAFT - Robert Harper (PDF) SML# Document - Atsushi Ohori, Katsuhiro Ueno Subversion Subversion Version Control (PDF) Version Control with Subversion Swift Hacking with Swift Learn Swift Swift Essentials - Second Edition - Dr. Alex Blewitt, Packt (email address requested , not required) Swift Pocket Reference (email address requested , not required) Test-driven iOS Development with Swift - Dr. Dominik Hauser, Packt. (email address requested , not required) The Swift Programming Language (HTML) (iBook) Using Swift with Cocoa and Objective-C (HTML) (iBook) Tcl Tcl Programming - Richard.Suchenwirth, et. al. TclWise - Salvatore Sanfilippo Teradata Teradata Books Tizen Tizen for Dummies - Jon Lansdell, Cheng Luo, Michelle Somersville (PDF) TLA Specifying Systems: The TLA+ Language and Tools for Hardware and Software Engineers - Leslie Lamport (Postscript or PDF) TypeScript TypeScript Deep Dive TypeScript for C# Programmers TypeScript Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Unix An Introduction to Unix Commentary on the Sixth Edition UNIX Operating System - J. Lions Unix as IDE - Tom Ryder (epub, mobi) UNIX Commands and Concepts - Robert I. Pitts Unix for Poets - Kenneth Ward Church (PDF) Unix Toolbox - Colin Barschel UNIX Tutorial for Beginners Verilog Verilog Quick Reference Guide - Sutherland HDL (PDF) Verilog Tutorial VHDL Free Range VHDL - Bryan Mealy, Fabrizio Tappero (TeX and PDF) VHDL Tutorial VHDL Tutorial: Learn By Example Vim A Byte of Vim Learn Vim Progressively Learn Vimscript the Hard Way Use Vim Like A Pro - Tim Ottinger (Leanpub account or valid email requested) Vi Improved -- Vim - Steve Oualline (PDF) Vim Recipes (PDF) Vim Regular Expressions 101 Visual Basic Visual Basic Essentials Visual Prolog A Beginners' Guide to Visual Prolog Visual Prolog for Tyros Web Services RESTful Web Services (PDF) Windows 8 Programming Windows 8 Apps with HTML, CSS, and JavaScript (v1) Programming Windows 8 Apps with HTML, CSS, and JavaScript (v2, incomplete) Windows Phone Developing An Advanced Windows Phone 7.5 App That Connects To The Cloud Windows Phone 8 Development Succinctly - Matteo Pagani (PDF) Windows Phone 8.1 Development for Absolute Beginners Windows Phone Programming Blue Book Workflow Declare Peace on Virtual Machines. A guide to simplifying vm-based development on a Mac xBase (dBase / Clipper / Harbour) Application Development with Harbour - Wikibooks CA-Clipper 5.2 Norton Guide Clipper Tutorial: a Guide to Open Source Clipper(s) - Wikibooks","title":"Programming Books EN"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#index","text":"Ada Agda Alef Android APL Arduino ASP.NET MVC Assembly Language Non-X86 AutoHotkey Autotools Awk Bash Basic BETA C C# C++ Chapel Cilk Clojure COBOL CoffeeScript ColdFusion Component Pascal Cool Coq Crystal CUDA D Dart DB2 Delphi / Pascal DTrace Elasticsearch Elixir Ecto Phoenix Emacs Embedded Systems Erlang ESP8266 F# Firefox OS Force.com Forth Fortran FreeBSD Git Go Graphical user interfaces Graphics Programming GraphQL Groovy Gradle Grails Spock Framework Hack Hadoop Haskell Haxe HTML / CSS Bootstrap HTTP Icon iOS IoT Isabelle/HOL J Java Codename One JasperReports Spring Spring Boot Spring Security Wicket JavaScript Angular.js Aurelia Backbone.js Booty5.js D3.js Dojo Elm Ember.js Express.js jQuery meteor Node.js Om React React Native Redux Jenkins Julia Language Agnostic Algorithms & Data Structures Cellular Automata Cloud Computing Competitive Programming Compiler Design Database Datamining Information Retrieval Licensing Machine Learning Mathematics Misc MOOC Networking Open Source Ecosystem Operating Systems Parallel Programming Partial Evaluation Professional Development Programming Paradigms Regular Expressions Reverse Engineering Security Software Architecture Standards Theoretical Computer Science Web Performance LaTeX / TeX LaTeX TeX Limbo Linux Lisp Livecode Lua Markdown Mathematica MATLAB Maven Mercurial Mercury Meta-Lists Modelica MySQL Neo4J .NET Framework NoSQL Oberon Objective-C OCaml Octave OpenGL ES OpenMP OpenResty OpenSCAD Perl Perl 6 / Rakudo PHP PicoLisp PostgreSQL PowerShell Processing Prolog Constraint Logic Programming PureScript Python Django Flask Kivy Pandas Pyramid Tornado QML R Racket Raspberry Pi REBOL Ruby RSpec Ruby on Rails Sinatra Rust Sage Scala Lift Play Scala Scheme Scilab Scratch Sed Self Smalltalk Spark SQL (implementation agnostic) SQL Server Standard ML Subversion Swift Tcl Teradata Tizen TLA TypeScript Unix Verilog VHDL Vim Visual Basic Visual Prolog Web Services Windows 8 Windows Phone Workflow xBase (dBase / Clipper / Harbour)","title":"Index"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#meta-lists","text":"atariarchives.org atariarchives.org makes books, information, and software for Atari and other classic computers available on the Web. Bento Bitsavers.org Bookboon: IT & Programming Cookie required. (email address requested , not required) Cheat Sheets (Free) Codingus conceptf1.blogspot.com Free Smalltalk Books, collected by St\u00e9phane Ducasse Free Tech Books IBM Redbooks InfoQ Minibooks InTech: Computer and Information Science JSBooks - directory of free javascript ebooks Learn X in Y minutes Learneroo Resources to Learn Programming Microsoft Guides to Software Microsoft Press: Free E-Books Microsoft Technologies 1, including books on Windows Azure, SharePoint, Visual Studio Guide, Windows phone development, ASP.net, Office365, etc. collection by Eric Ligman Microsoft Technologies 2, including books on Windows Azure, SharePoint, Visual Studio Guide, Windows phone development, ASP.net, etc. collection by Eric Ligman Microsoft Technologies 3, including books on Windows Azure, SharePoint, Visual Studio Guide, Windows phone development, ASP.net, etc. collection by Eric Ligman O'Reilly's Commons O'Reilly's Open Books Project Papers we love Programming - Wikibooks Red Gate Books Stef's Free Online Smalltalk Books TechBeamers.com TechBooksForFree.com The Definitive C++ Book Guide and List Theassayer.org tutorialspoint","title":"Meta-Lists"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#graphics-programming","text":"Blender 3D: Noob to Pro - Wikibooks Computer Graphics from scratch - Gabriel Gambetta (:construction: in process ) DirectX manual (draft) GPU Gems Graphics Programming Black Book - Michael Abrash Introduction to Modern OpenGL Learn OpenGL - Joey de Vries Learning Modern 3D Graphics Programming - Jason L. McKesson (draft) OpenGL - Concepts and illustrations. ShaderX series - Wolfgang Engel Tutorials for modern OpenGL","title":"Graphics Programming"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#graphical-user-interfaces","text":"Programming with gtkmm 3 Search User Interfaces - Marti A. Hearst The GLib/GTK+ Development Platform - S\u00e9bastien Wilmet (PDF)","title":"Graphical User Interfaces"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#graphql","text":"Fullstack GraphQL","title":"GraphQL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#language-agnostic","text":"","title":"Language Agnostic"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#algorithms-data-structures","text":"A Field Guide To Genetic Programming - Riccardo Poli et al. Algorithmic Graph Theory Algorithms - Wikibooks Algorithms, 4th Edition - Robert Sedgewick and Kevin Wayne Algorithms and Automatic Computing Machines (1963) - B. A. Trakhtenbrot Algorithms and Complexity - Herbert S. Wilf (PDF) Algorithms Course Materials - Jeff Erickson Analysis and Design of Algorithms - Sandeep Sen, IIT Delhi Animated Algorithm and Data Structure Visualization (Resource) Annotated Algorithms in Python: Applications in Physics, Biology, and Finance - Massimo di Pierro Binary Trees (PDF) Clever Algorithms - Jason Brownlee CS Unplugged: Computer Science without a computer Data Structures - Prof. Subhashis Banerjee, IIT Delhi Data Structures (Into Java) - Paul N. Hilfinger (PDF) Data Structures and Algorithms: Annotated Reference with Examples - G. Barnett and L. Del Tongo (PDF) Data Structures Succinctly Part 1, Syncfusion (PDF, Kindle) (email address requested , not required) Data Structures Succinctly Part 2, Syncfusion (PDF, Kindle) (email address requested , not required) Elementary Algorithms - Larry LIU Xinyu Foundations of Computer Science - Al Aho and Jeff Ullman Geometry Algorithms - Dan Sunday Handbook of Graph Drawing and Visualization Lectures Notes on Algorithm Analysis and Computational Complexity (Fourth Edition) - Ian Parberry (use form at bottom of license) LEDA: A Platform for Combinatorial and Geometric Computing - K. Mehlhorn et al. Linked List Basics (PDF) Linked List Problems (PDF) Matters Computational: Ideas, Algorithms, Source Code (PDF) Open Data Structures: An Introduction - Pat Morin Planning Algorithms Problems on Algorithms (Second Edition) - Ian Parberry (use form at bottom of license) Purely Functional Data Structures (1996) - Chris Okasaki (PDF) Sequential and parallel sorting algorithms Text Algorithms (PDF) The Algorithm Design Manual The Art of Computer Programming - Donald Knuth (fascicles, mostly volume 4) The Design of Approximation Algorithms (PDF) The Great Tree List Recursion Problem (PDF) Think Complexity (PDF)","title":"Algorithms &amp; Data Structures"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#cellular-automata","text":"A New Kind of Science - Stephen Wolfram Cellular Automata Books","title":"Cellular Automata"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#cloud-computing","text":"Monitoring Modern Infrastructure (account required) Multi-tenant Applications for the Cloud, 3rd Edition OpenStack Operations Guide The Developer\u2019s Guide to Azure","title":"Cloud Computing"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#competitive-programming","text":"Competitive Programmer's Handbook - Antti Laaksonen (PDF) Competitive Programming, 1st Edition (PDF)","title":"Competitive Programming"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#compiler-design","text":"An Introduction to GCC - Brian Gough Basics of Compiler Design (Anniversary Edition) - Torben Mogensen Compiler Construction (PDF) Compiler Design in C (1990) - Allen Holub, Prentice Hall Compiler Design: Theory, Tools, and Examples, C/C++ Edition - Seth D. Bergmann Compiler Design: Theory, Tools, and Examples, Java Edition - Seth D. Bergmann Compiling Scala for the Java Virtual Machine - Michel Schinz (PDF) Compiling Techniques (1969) - F.R.A. Hopgood, Macdonald Crafting Interpreters (:construction:) - Bob Nystrom (HTML) Implementing Functional Languages: A Tutorial - Simon Peyton Jones, David Lester Let's Build a Compiler (PDF) Linkers and Loaders - John R. Levine Practical and Theoretical Aspects of Compiler Construction (class lectures and slides)","title":"Compiler Design"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#computer-vision","text":"Computer Vision - Dana Ballard, Chris Brown Computer Vision: Algorithms and Applications - Richard Szeliski Computer Vision: Models, Learning, and Inference - Simon J.D. Prince Programming Computer Vision with Python - Jan Erik Solem","title":"Computer Vision"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#database","text":"Big Data Now: Current Perspectives from O'Reilly Radar Database Explorations (PDF) Database Fundamentals (PDF) Databases, Types, and The Relational Model: The Third Manifesto (PDF) Foundations of Databases Readings in Database Systems, 5th Ed. Temporal Database Management - Christian S. Jensen The Theory of Relational Databases What is Database Design, Anyway?","title":"Database"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#datamining","text":"A Programmer's Guide to Data Mining - Ron Zacharski (Draft) Data Jujitsu: The Art of Turning Data into Product (email address requested , not required) Data Mining Algorithms In R - Wikibooks Internet Advertising: An Interplay among Advertisers, Online Publishers, Ad Exchanges and Web Users (PDF) Introduction to Data Science - Jeffrey Stanton Mining of Massive Datasets School of Data Handbook Theory and Applications for Advanced Text Mining","title":"Datamining"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#information-retrieval","text":"Information Retrieval: A Survey (PDF) Introduction to Information Retrieval","title":"Information Retrieval"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#licensing","text":"Creative Commons: a user guide - Simone Aliprandi Open Source Licensing Software Freedom and Intellectual Property Law - Lawrence Rosen The Public Domain: Enclosing the Commons of the Mind - James Boyle","title":"Licensing"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#machine-learning","text":"A Brief Introduction to Machine Learning for Engineers - Osvaldo Simeone (PDF) A Brief Introduction to Neural Networks A Course in Machine Learning (PDF) A First Encounter with Machine Learning (PDF) An Introduction to Statistical Learning - Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani Bayesian Reasoning and Machine Learning Deep Learning - Ian Goodfellow, Yoshua Bengio and Aaron Courville Gaussian Processes for Machine Learning Information Theory, Inference, and Learning Algorithms Introduction to Machine Learning - Amnon Shashua Learn Tensorflow - Jupyter Notebooks Learning Deep Architectures for AI (PDF) Machine Learning Machine Learning, Neural and Statistical Classification Neural Networks and Deep Learning Probabilistic Models in the Study of Language (Draft, with R code) The Elements of Statistical Learning - Trevor Hastie, Robert Tibshirani, and Jerome Friedman The LION Way: Machine Learning plus Intelligent Optimization The Python Game Book","title":"Machine Learning"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#mathematics","text":"A First Course in Linear Algebra - Robert A. Beezer Advanced Algebra - Anthony W. Knapp (PDF) An Introduction to the Theory of Numbers - Leo Moser (PDF) Basic Algebra - Anthony W. Knapp (PDF) Basics of Algebra, Topology, and Differential Calculus (PDF) Bayesian Methods for Hackers - Cameron Davidson-Pilon Book of Proof - Richard Hammack (PDF) Calculus - Gilbert Strang (PDF) Calculus Made Easy - Silvanus P. Thompson (PDF) Category Theory for the Sciences CK-12 Probability and Statistics - Advanced Collaborative Statistics Computational and Inferential Thinking. The Foundations of Data Science Computational Geometry Concepts & Applications of Inferential Statistics Differential Equations - Paul Dawkins (PDF, use form to download) Elementary Differential Equations - William F. Trench (PDF) Essentials of Metaheuristics - Sean Luke Graph Theory Introduction to Probability - Charles M. Grinstead and J. Laurie Snell Introduction to Probability and Statistics Spring 2014 Introduction to Proofs - Jim Hefferon Introduction to Statistical Thought - Michael Lavine Kalman and Bayesian Filters in Python Knapsack Problems - Algorithms and Computer Implementations - Silvano Martello and Paolo Toth Lecture Notes of Linear Algebra - Dr. P. Shunmugaraj, IIT Kanpur (PDF) Linear Algebra - Dr. Arbind K Lal, IIT Kanpur (PDF) Linear Algebra (PDF) Linear Algebra by Jim Hefferon - Jim Hefferon Mathematical Logic - an Introduction (PDF) Mathematics, MTH101A - P. Shunmugaraj, IIT Kanpur Number Theory - Holden Lee MIT OpenIntro Statistics Ordinary Differential Equations - Wikibooks Power Programming with Mathematica - David B. Wagner Probability and Statistics Cookbook Probability and Statistics EBook Statistics Done Wrong - Alex Reinhart Think Bayes: Bayesian Statistics Made Simple - Allen B. Downey Think Stats: Probability and Statistics for Programmers - Allen B. Downey (using Python)","title":"Mathematics"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#mathematics-for-computer-science","text":"Discrete Structures for Computer Science: Counting, Recursion, and Probability - Michiel Smid","title":"Mathematics For Computer Science"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#misc","text":"2016 European Software Development Salary Survey (email address requested , not required) 2016 Software Development Salary Survey (email address requested , not required) 97 Things Every Programmer Should Know - Extended (Leanpub account or valid email requested) A Mathematical Theory of Communication - Claude E.Shannon Ansible Up & Running (first three chapters) (account required) Asterisk\u2122: The Definitive Guide Barcode Overview (PDF) Bitcoin and Cryptocurrency Technologies - Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller, Steven Goldfeder (PDF) Come, Let's Play: Scenario-Based Programming Using Live Sequence Charts Communicating Sequential Processes - Tony Hoare (PDF) Computer Musings (lectures by Donald Knuth) Confessions of an Unintentional CTO: Lessons in Growing a Web App - Jack Kinsella Continuous Delivery and DevOps: A Quickstart guide - Paul Swartout, Packt. (email address requested , not required) CS For All Culture \\& Empire: Digital Revolution (PDF) Design With FontForge Designing for Performance - Lara Hogan Designing Interfaces - Jennifer Tidwell DevDocs - Documents for Developers in 1 place DevOps For Dummies (IBM Edition) (PDF) Digital Signal Processing For Communications Digital Signal Processing For Engineers and Scientists Distributed systems for fun and profit Docker Jumpstart \"DYNAMIC LINKED LIBRARIES\": Paradigms of the GPL license in contemporary software - Luis A. Enr\u00edquez Essential Image Optimization - Addy Osmani Flow based Programming Foundations of Programming (PDF) Game Programming Patterns - Bob Nystrom Getting Real Getting Started with Unity 5 - Dr. Edward Lavieri, Packt. (email address requested , not required) Hacknot: Essays on Software Development - Ed Johnson High-Performance Scientific Computing (class lectures and slides) How Computers Work - R. Young How to Become a Programmer (PDF) How to Think Like a Computer Scientist - Peter Wentworth, Jeffrey Elkner, Allen B. Downey, and Chris Meyers Image Processing in C: Analyzing and Enhancing Digital Images - Dwayne Phillips Information Technology and the Networked Economy (PDF) IRPF90 Fortran code generator - Anthony Scemama Learn Programming - Antti Salonen Learn to Program Learning 30 Technologies in 30 Days: A Developer Challenge - Shekhar Gulati Learning Docker - Pethuru Raj, Jeeva S. Chelladhurai & Vinod Singh, Packt. (email address requested , not required) Linked Data Patterns: A pattern catalogue for modelling, publishing, and consuming Linked Data - Leigh Dodds, Ian Davis Magic Ink: Information Software and The Graphical Interface - Bret Victor Mastering Bitcoin - Unlocking digital currencies - Andreas M. Antonopoulos Mobile Developer's Guide to the Galaxy (Leanpub account or valid email requested) Modeling Reactive Systems with Statecharts Mother Tongues of Computer Languages (PNG) Networks, Crowds, and Markets: Reasoning About a Highly Connected World Object-Oriented Reengineering Patterns - Serge Demeyer, St\u00e9phane Ducasse and Oscar Nierstrasz Open Government;Collaboration, Transparency, and Participation in Practice Packt Publishing: A free book every day (PDF, ePub, Mobi, Kindle) (account required) PDQ: Pretty Darn Quick: An Agile, All-Purpose Methodology - Jeff Franz-Lien (Leanpub account or valid email requested) Philosophy of Computer Science (PDF) PNG: The Definitive Guide Pointers And Memory (PDF) Practical Data Analysis - Hector Cuesta, Packt. (email address requested , not required) Practical Responsive Typography - Dario Calonaci, Packt. (email address requested , not required) Principles of Computer System Design (PDF) Procedural Content Generation in Games - Noor Shaker, Julian Togelius, Mark Nelson Programming with Unicode Real-World Maintainable Software (email address requested , not required) Record-Playback Test Automation: Sahi & Selenium IDE: Critical Evaluation of Record-Playback Automation Tools - Shashikant Jagtap (Leanpub account or valid email requested) Security Engineering Small Memory Software SVG Essentials The Quest for Artificial Intelligence: A History of Ideas and Achievements - Nils J. Nilsson (PDF) Trends Shaping the London Tech Scene (email address requested , not required) What You Need to Know about Docker - Scott Gallagher, Packt. (email address requested , not required)","title":"Misc"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#mooc","text":"Coursera edX FutureLearn MIT OCW NPTEL openHPI Platzi Udacity","title":"MOOC"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#networking","text":"802.11ac: A Survival Guide - Matthew Gast An Introduction to Computer Networks (HTML, PDF, Kindle) Bits, Signals, and Packets: An Introduction to Digital Communications and Networks Code Connected vol.1 (PDF) (book on ZeroMQ) Computer Networking : Principles, Protocols and Practice (HTML, ePub, PDF, Kindle) High-Performance Browser Networking - Ilya Grigorik HTTP Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) HTTP2 Explained - Daniel Stenberg The TCP/IP Guide Understanding IP Addressing: Everything you ever wanted to know (PDF) ZeroMQ Guide","title":"Networking"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#open-source-ecosystem","text":"Data Journalism Handbook Fintech, Open Source, and Emerging Markets Digital Banking for Everyone (email address requested , not required) Free as in Freedom: Richard Stallman and the free software revolution - Sam Williams (PDF) Free for All - Peter Wayner Free Software, Free Society: Selected Essays of Richard M. Stallman Getting Started with InnerSource (email address requested , not required) Getting started with Open source development (PDF) How to get started with open source (ePub & ODT) Innovation Happens Elsewhere - Ron Goldman, Richard P. Gabriel Open Advice: FOSS: What We Wish We Had Known When We Started Open by Design (email address requested , not required) Open Source in Brazil (email address requested , not required) Producing Open Source Software - Karl Fogel The Architecture of Open Source Applications: Vol. 1: Elegance, Evolution, and a Few Fearless Hacks; Vol. 2: Structure, Scale, and a Few More Feerless Hacks The Art of Community - Jono Bacon (PDF) The Cathedral and the Bazaar - Eric S. Raymond The Future of the Internet - Jonathan Zittrain The Open Source Way The Wealth of Networks: How Social Production Transforms Markets and Freedom - Yochai Benkler","title":"Open Source Ecosystem"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#operating-systems","text":"A short introduction to operating systems (2001) - Mark Burgess (PDF) Computer Science from the Bottom Up How to Make a Computer Operating System (:construction: in process ) How to write a simple operating system in assembly language - Mike Saunders (HTML) Operating Systems and Middleware (PDF and LaTeX) Operating Systems: Three Easy Pieces (PDF) Practical File System Design: The Be File System - Dominic Giampaolo (PDF) Project Oberon: The Design of an Operating System, a Compiler, and a Computer - Niklaus Wirth & J\u00fcrg Gutknecht (PDF) The Art of Unix Programming - Eric S. Raymond The Design and Implementation of the Anykernel and Rump Kernels - Antti Kantee The little book about OS development - Erik Helin, Adam Renberg The Little Book of Semaphores - Allen B. Downey Think OS: A Brief Introduction to Operating Systems - Allen B. Downey (PDF) UNIX Application and System Programming, lecture notes - Prof. Stewart Weiss (PDF) Writing a Simple Operating System from Scratch - Nick Blundell (PDF) Xv6, a simple Unix-like teaching operating system","title":"Operating systems"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#parallel-programming","text":"High Performance Computing - Charles Severance & Kevin Dowd (PDF, ePUB) High Performance Computing Training (LLNL materials) High-Performance Scientific Computing (class lectures and slides) Introduction to High-Performance Scientific Computing - Victor Eijkhout Introduction to Parallel Computing - Blaise Barney Is Parallel Programming Hard, And, If So, What Can You Do About It? - Paul E. McKenney Programming on Parallel Machines; GPU, Multicore, Clusters and More - Norm Matloff Kerridge (PDF) (email address requested , not required) The OpenCL Programming Book Using Concurrency and Parallelism Effectively \u2013 I - Jon Kerridge (PDF) (email address requested , not required) Using Concurrency and Parallelism Effectively \u2013 II - Jon","title":"Parallel Programming"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#partial-evaluation","text":"Partial Evaluation and Automatic Program Generation - (PDF) Jones, Gomard and Sestoft","title":"Partial Evaluation"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#professional-development","text":"Apprenticeship Patterns: Guidance for the Aspiring Software Craftsman - David H. Hoover and Adewale Oshineye Clean Code Developer: An initiative for more professionalism in software development (:construction: in process ) Confessions of an IT Manager (RedGate, By Phil Factor) Don't Just Roll the Dice (PDF) (RedGate, By Neil Davidson) How to Do What You Love & Earn What You\u2019re Worth as a Programmer - Reginald Braithwaite Professional Software Development For Students - Mike G. Miller What I've Learned From Failure - Reginald Braithwaite","title":"Professional Development"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#programming-paradigms","text":"Introduction to Functional Programming - J. Harrison Mostly Adequate Guide to Functional Programming Type Theory and Functional Programming","title":"Programming Paradigms"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#regular-expressions","text":"Learn Regex The Hard Way - Zed. A. Shaw RexEgg The 30 Minute Regex Tutorial - Jim Hollenhorst The Bastards Book of Regular Expressions: Finding Patterns in Everyday Text - Dan Nguyen (Leanpub account or valid email requested)","title":"Regular Expressions"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#reverse-engineering","text":"BIOS Disassembly Ninjutsu Uncovered 1st Edition - Darmawan Salihun (PDF) Hacking the Xbox: An Introduction to Reverse Engineering - Andrew \"bunnie\" Huang iOS App Reverse Engineering (PDF) Reverse Engineering for Beginners - Dennis Yurichev (PDF)","title":"Reverse Engineering"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#security","text":"A Graduate Course in Applied Cryptography Crypto 101 - Crypto for everyone CryptoParty Handbook Handbook of Applied Cryptography How to deal with Passwords Intrusion Detection Systems with Snort (PDF) OpenSSL Cookbook OWASP Testing Guide 4.0 (PDF) OWASP Top 10 for .NET Developers Security Engineering","title":"Security"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#software-architecture","text":"Agile Planning: From Ideas to Story Cards - Launch School Architectural Styles and the Design of Network-based Software Architectures - Roy Thomas Fielding Best Kept Secrets of Peer Code Review Data-Oriented Design Developing Reactive Microservices (email address requested , not required) Domain Driven Design Quickly DSL Engineering: Designing, Implementing and Using Domain-Specific Languages - Markus Voelter Evolving Architectures of FinTech (email address requested , not required) Exploring CQRS and Event Sourcing - (EPUB, PDF) Guide to the Software Engineering Body of Knowledge How to Design Programs How to Write Unmaintainable Code Kanban and Scrum - making the most of both Kanban for skeptics - Nick Oostvogels (Leanpub account or valid email requested) Microservice Databases: Migrating from Relational Monolith to Distributed Data (email address requested , not required) Microservices AntiPatterns and Pitfalls (email address requested , not required) Microservices in Production (email address requested , not required) Microservices vs. Service-Oriented Architecture (email address requested , not required) Migrating to Cloud-Native Application Architectures (email address requested , not required) Naked objects - Richard Pawson (PDF) OAuth - The Big Picture Object-Oriented Reengineering Patterns - S. Demeyer, S. Ducasse and O. Nierstrasz Practicing Domain-Driven Design - Part 1 - Scott Millett (Leanpub account or valid email requested) Reactive Microservices Architecture (email address requested , not required) Scrum and XP from the Trenches Serverless apps: Architecture, patterns, and Azure implementation Site Reliability Engineering Software Architecture Patterns (email address requested , not required) Software Engineering for Internet Applications Test Driven Development, Extensive Tutorial - Grzegorz Ga\u0142\u0119zowski Web API Design Working with Web APIs - Launch School Your API Is Bad - Paddy Foran","title":"Software Architecture"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#standards","text":"Linux Standard Base UNIX - The POSIX Standard - IEEE Std 1003.1","title":"Standards"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#theoretical-computer-science","text":"Building Blocks for Theoretical Computer Science - Margaret M. Fleck Category Theory for Computing Science (PDF) Category Theory for Programmers - Bartosz Milewski (PDF) Homotopy Type Theory: Univalent Foundations of Mathematics (PDF) Introduction to Computer Science - Prof. Subhashis Banerjee, IIT Delhi Introduction to Computing Introduction to Theory of Computation - Anil Maheshwari and Michiel Smid (PDF) Models of Computation - John E. Savage Practical Foundations for Programming Languages, Preview - Robert Harper (PDF) Principles of Programming Languages - Scott F. Smith Programming and Programming Languages - Shriram Krishnamurthi Programming in Martin-L\u00f6f's Type Theory - Bengt Nordstroem Programming Languages: Application and Interpretation (2nd Edition) Semantics with Applications: A Formal Introduction - Hanne Riis Nielson, Flemming Nielson Structure and Interpretation of Computer Programs Structure and Interpretation of Computer Programs Think Complexity - Allen B. Downey","title":"Theoretical Computer Science"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#web-performance","text":"Book of Speed - Stoyan Stefanov High Performance Browser Networking - Ilya Grigorik Mature Optimization - Carlos Bueno (PDF)","title":"Web Performance"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#ada","text":"A Guide to Ada for C and C++ Programmers (PDF) Ada Distilled (PDF) Ada Programming - Wikibooks Ada Reference Manual - ISO/IEC 8652:2012(E) Language and Standard Libraries (PDF) The Big Online Book of Linux Ada Programming","title":"Ada"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#agda","text":"Agda Tutorial","title":"Agda"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#alef","text":"Alef Language Reference Manual","title":"Alef"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#android","text":"Agile Android Software Development - Etienne Savard (PDF, epub, mobi) Android 4 App Development Essentials Android 5 Programming by Example - Kyle Mew, Packt. (email address requested , not required) Android Developer Fundamentals Course \u2013 Concepts Android Developer Fundamentals Course \u2013 Practicals Android NDK Beginner's Guide - Second Edition - Sylvain Ratabouil, Packt. (email address requested , not required) Android NDK Game Development Cookbook - Sergey Kosarevsky & Viktor Latypov, Packt. (email address requested , not required) Android Programming Guide for Beginners (PDF - need email confirmation) Android Programming Succinctly, Syncfusion ( PDF , Kindle ) (email address requested , not required) CodePath Android Cliffnotes Coreservlets Android Programming Tutorial Expert Android and Eclipse development knowledge Google Android Developer Training RxJava for Android App Development (email address requested , not required) Styling Android The Busy Coder's Guide to Android Development (PDF - older versions) Tutorial Point Android Tutorial (PDF)","title":"Android"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#apl","text":"A Practical Introduction to APL1 & APL2 A Practical Introduction to APL3 & APL4 Mastering Dyalog APL (PDF)","title":"APL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#arduino","text":"Arduino Programming Notebook - Brian Evans C Programming for Arduino - Julien Bayle, Packt. (email address requested , not required) Introduction to Arduino Introduction to Arduino : A piece of cake! - Alan G. Smith","title":"Arduino"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#aspnet-mvc","text":"ASP.NET MVC Music Store","title":"ASP.NET MVC"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#assembly-language","text":"An introduction to reverse engineering for beginners Assembly Language Succinctly (PDF) PC Assembly Language - P. A. Carter Professional Assembly Language (PDF) Programming from the Ground Up (PDF) Ralf Brown's Interrupt List Software optimization resources - A. Fog Wizard Code x86-64 Assembly Language Programming with Ubuntu - Ed Jorgensen (PDF) x86 Assembly - Wikibooks","title":"Assembly Language"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#non-x86","text":"Easy 6502 - Nick Morgan Machine Code for Beginners [Z80 and 6502 CPUs] - Lisa Watts and Mike Wharton (PDF) (Scroll to bottom and click on book cover) Machine Language for Beginners - Richard Mansfield [6502 CPU] Programmed Introduction to MIPS Assembly Language The Second Book of Machine Language","title":"Non-X86"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#autohotkey","text":"AHKbook - the book for AutoHotkey AutoHotkey Official Documentation ( CHM )","title":"AutoHotkey"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#autotools","text":"Autotools Mythbuster GNU Autoconf, Automake and Libtool","title":"Autotools"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#awk","text":"A User's Guide for GNU AWK An Awk Primer - Wikibooks Awk - Bruce Barnett","title":"Awk"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#bash","text":"Advanced Bash-Scripting Guide - M. Cooper (HTML) Bash Guide for Beginners (2008) - M. Garrels (HTML) Bash Notes for Professionals - Compiled from StackOverflow documentation (3.x) (PDF) BASH Programming (2000) - Mike G. (HTML) Bash Reference Manual (HTML) Bash tutorial - Anthony Scemama (PDF) BashGuide - Maarten Billemont (HTML) (PDF) Conquering the Command Line - Mark Bates (HTML) Getting Started with BASH (HTML) Google Shell Style Guide - Paul Armstrong (HTML) Introduction to the Command Line - Launch School (HTML) Linux Fundamentals - Paul Cobbaut (PDF) Linux Shell Scripting Tutorial - A Beginner's Handbook (2002) - Vivek G. Gite (HTML) Linux Shell Scripting Tutorial (LSST) v2.0 - Vivek Gite (HTML) Slackbook (2005) - Alan Hicks, Chris Lumens, David Cantrell and Logan Johnson (HTML, DocBook, Postscript, PDF) The Bash Academy - Maarten Billemont (HTML) The Linux Command Line - William E. Shotts, Jr. (PDF) Writing Shell Scripts - William E. Shotts, Jr. (HTML)","title":"Bash"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#basic","text":"10 PRINT CHR$(205.5+RND(1)); : GOTO 10 - Nick Montfort, Patsy Baudoin, John Bell,Ian Bogost, Jeremy Douglass, Mark C. Marino, Michael Mateas, Casey Reas, Mark Sample, Noah Vawter A beginner's guide to Gambas - John W. Rittinghouse (PDF) Pick/Basic: A Programmer's Guide - Jonathan E. Sisk Visual Basic Essentials","title":"Basic"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#beta","text":"Object-Oriented Programming in the BETA Programming Language - Ole Lehrmann Madsen, Birger M\u00f8ller-Pedersen, Kristen Nygaard","title":"BETA"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#c","text":"256-Color VGA Programming in C - David Brackeen A Tutorial on Pointers and Arrays in C - Ted Jensen (PDF, Zipped HTML) Beej's Guide to C Programming - B. Hall Beej's Guide to Network Programming - Using Internet Sockets - B. Hall Build Your Own Lisp C Elements of Style - Steve Oualline C for Python Programmers - Carl Burch C Programming - Wikibooks C Programming Boot Camp - Paul Gribble Deep C Essential C (PDF) Everything you need to know about pointers in C - Peter Hosey Functional C (1997) - Pieter H. Hartel, Henk Muller (PDF) Learn to Code With C - The MagPi Essentials (PDF) Modern C (PDF) Object-Oriented Programming With ANSI-C (PDF) Programming in C - Bharat Kinariwala & Tep Dobry The C book The Craft of Text Editing or A Cookbook for an Emacs - Craig A. Finseth The GNU C Programming Tutorial (PDF) The little book about OS development - Erik Helin, Adam Renberg The New C Standard - An Economic and Cultural commentary (2009) - Derek M. Jones (PDF) TONC GBA Programming - Game Boy Advance Development","title":"C"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#c-sharp","text":"C# Essentials C# Notes for Professionals - Compiled from StackOverflow documentation (3.x) C# Programming - Wikibooks C# Yellow Book (intro to programming) Creating Mobile Apps with Xamarin.Forms C# Daily Design Patterns (PDF) Data Structures and Algorithms with Object-Oriented Design Patterns in C# - Bruno Preiss Dissecting a C# Application - Christian Holm, Bernhard Spuida, Mike Kruger Fundamentals of Computer Programming with C# - Svetlin Nakov High level asynchronous programming with Reactive Extensions - Emil Petro Introduction to Rx Object Oriented Programming using C# - Simon Kendal, Bookboon. (email address requested , not required) Threading in C# Xamarin Cross-Platform Development Cookbook - George Taskos, Packt. (email address requested , not required)","title":"C Sharp"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#c_1","text":"C++ Annotations C++ Core Guidelines - Editors: Bjarne Stroustrup, Herb Sutter C++ GUI Programming With Qt 3 C++ Language C++ Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) C++ Today (email address requested , not required) C++ Tricks CS106X Programming Abstractions in C++ Financial Numerical Recipes in C++ - Bernt Arne \u00d8degaard Game Programming Patterns Google's C++ Style Guide How to make an Operating System - Samy Pesse How To Think Like a Computer Scientist: C++ Version - Allen B. Downey Introduction to Design Patterns in C++ with Qt (PDF) Joint Strike Fighter, C++ Coding Standards, by Bjarne Stroustrup (PDF) Learn C++. (PDF, Online) Matters Computational: Ideas, Algorithms, Source Code, by Jorg Arndt (PDF) Open Data Structures (In C++) (PDF) Practical C++ Metaprogramming (email address requested , not required) Software Design Using C++ - Br. David Carlson and Br. Isidore Minerd Software optimization resources by Agner Fog The Boost C++ libraries The Rook's Guide to C++ (PDF) The Ultimate Question of Programming, Refactoring, and Everything Thinking in C++, Second Edition, Vol. 1. - Bruce Eckel (Vol. 2)","title":"C++"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#chapel","text":"Chapel Tutorial Chapel Tutorial for Programmers","title":"Chapel"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#cilk","text":"Cilk 5.4.6 Reference Manual (PDF)","title":"Cilk"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#clojure","text":"A Brief Beginner\u2019s Guide To Clojure Clojure - Functional Programming for the JVM - R. Mark Volkmann Clojure by Example - Hirokuni Kim Clojure Cheat Sheet Clojure community-driven documentation Clojure Cookbook Clojure Distilled Beginner Guide Clojure for the Brave and True Clojure in Small Pieces - Rich Hickey (PDF) Clojure Koans Clojure Programming - Wikibooks ClojureScript Koans ClojureScript Unraveled (HTML) Data Sorcery with Clojure Modern cljs SICP Distilled - An idiosyncratic tour of SICP in Clojure The Clojure Style Guide","title":"Clojure"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#cobol","text":"COBOL Programming Fundamental (PDF) Enterprise COBOL for z/OS documentation library Introduction to the COBOL Language OpenCOBOL 1.1 - Programmer's Guide (PDF)","title":"COBOL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#coffeescript","text":"CoffeeScript Cookbook CoffeeScript Ristretto - Reginald Braithwaite (Leanpub account or valid email requested) Smooth CoffeeScript The Little Book on CoffeeScript","title":"CoffeeScript"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#coldfusion","text":"CFML In 100 Minutes - J. Casimir Learn CF in a Week","title":"ColdFusion"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#component-pascal","text":"Computing Fundamentals - Stan Warford (PDF)","title":"Component Pascal"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#cool","text":"CoolAid: The Cool 2013 Reference Manual (PDF)","title":"Cool"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#coq","text":"Certified Programming with Dependent Types Software Foundations","title":"Coq"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#crystal","text":"Crystal for Rubyists","title":"Crystal"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#cuda","text":"OpenCL Programming Guide for CUDA Architecture (PDF)","title":"CUDA"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#d","text":"D Templates Tutorial Programming in D","title":"D"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#dart","text":"What is Dart?","title":"Dart"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#db2","text":"Getting started with DB2 Express-C (PDF) Getting started with IBM Data Studio for DB2 (PDF) Getting started with IBM DB2 development (PDF)","title":"DB2"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#delphi-pascal","text":"Essential Pascal Version 1 and 2 - M. Cant\u00f9","title":"Delphi / Pascal"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#dtrace","text":"IllumOS Dynamic Tracing Guide","title":"DTrace"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#elasticsearch","text":"Elasticsearch: The Definitive Guide ( fork it on GH ) Exploring Elasticsearch","title":"Elasticsearch"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#elixir","text":"30 Days of Elixir - Tim Morgan (HTML) Elixir School (HTML) \u00c9tudes for Elixir (HTML) Getting Started Guide (HTML) (PDF, MOBI, EPUB) Joy of Elixir - Ryan Bigg (HTML) - Source (:construction: in process ) Learning Elixir - Joseph Kain Blog (HTML)","title":"Elixir"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#ecto","text":"Ecto Getting Started Guide (HTML)","title":"Ecto"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#phoenix","text":"Phoenix v1.3.0 Guide (HTML) Versioned APIs with Phoenix - Elvio Vicosa (PDF) (account required)","title":"Phoenix"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#emacs","text":"An Introduction to Programming in Emacs Lisp, 3rd Edition GNU Emacs Lisp Reference Manual GNU Emacs Manual (PDF)","title":"Emacs"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#embedded-systems","text":"Control and Embedded Systems (HTML) Discovering the STM32 Microcontroller (PDF) Introduction to Microcontrollers (HTML)","title":"Embedded Systems"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#erlang","text":"Concurrent Programming in ERLANG (PDF) Erlang Handbook (PDF) Erlang Programming - Wikibooks (HTML) \u00c9tudes for Erlang - J. David Eisenberg Getting Started with Erlang User's Guide (HTML) Learn You Some Erlang For Great Good - Frederic Trottier-Hebert Making reliable distributed systems in the presence of software errors - Joe Armstrong (PDF) Stuff Goes Bad: Erlang in Anger - Fred Herbert (PDF)","title":"Erlang"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#esp8266","text":"Kolban's book on the ESP32 & ESP8266 (Leanpub account or valid email requested)","title":"ESP8266"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#f-sharp","text":"Analyzing and Visualizing Data with F# (PDF) F# for fun and profit (ePub) F# Programming - Wikibooks F# Succinctly, SyncFusion (PDF, Kindle) (email address requested , not required) Programming Language Concepts for Software Developers (PDF)","title":"F Sharp"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#firefox-os","text":"Quick Guide For Firefox OS App Development: Creating HTML5 based apps for Firefox OS - Andre Garzia","title":"Firefox OS"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#forcecom","text":"Developer Workbooks Force.com Fundamentals Force.com Platform Fundamentals: An Introduction to Custom Application Development in the Cloud Heroku Postgres (PDF)","title":"Force.com"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#forth","text":"A Beginner's Guide to Forth And so Forth... (PDF) Programming Forth (PDF) Starting Forth Thinking Forth Thoughtful Programming and Forth","title":"Forth"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#fortran","text":"Introduction to fortran 95 and numerical computing: a jump-start for scientists and engineers (PDF) Self Study Guide: Programming in Fortran 95 (PDF)","title":"Fortran"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#freebsd","text":"Books and Articles from FreeBSD Site The Complete FreeBSD Using C on the UNIX System - David A. Curry","title":"FreeBSD"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#git","text":"A Visual Git Reference - Mark Lodato Conversational Git git - the simple guide Git for Computer Scientists Git From The Bottom Up - J. Wiegley Git Immersion Git In The Trenches Git internals - Scott Chacon (PDF) Git Magic Git Pocket Guide - Richard E. Silverman Git Reference Git Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Git Workflows GitHub Cheat Sheet - Tim Green (Markdown) Intoduction to Git and Github - Launch School Learn Enough Git to be Dangerous - Michael Hartl Learn Git - Learn Version Control with Git - Tobias G\u00fcnther Pro Git - Scott Chacon Pro Git Reedited - Jon Forrest Ry's Git Tutorial - Ryan Hodson Think Like (a) Git: A Guide for the Perplexed Version Control by Example (Mercurial, Subversion, Verasity)","title":"Git"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#go","text":"An Introduction to Programming in Go Build Web Application with Golang Building Web Apps with Go Effective Go Go 101 - @TapirLiu Go Bootcamp - Matt Aimonetti Go by Example Go for Javascript Developers Learning Go Let's learn Go! Practical Cryptography With Go - Kyle Isom The Go Tutorial The Little Go Book Web apps in Go, the anti textbook","title":"Go"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#groovy","text":"","title":"Groovy"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#gradle","text":"Building Java Projects with Gradle Gradle User Guide - Hans Dockter, Adam Murdoch ( PDF )","title":"Gradle"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#grails","text":"Getting Started with Grails Grails Tutorial for Beginners The Grails Framework - Reference Documentation - Graeme Rocher, Peter Ledbrook, Marc Palmer, Jeff Brown, Luke Daley, Burt Beckwith, Lari Hotari ( PDF )","title":"Grails"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#spock-framework","text":"Spock Framework Reference Documentation - Peter Niederwieser","title":"Spock Framework"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#hack","text":"Hack Documentation","title":"Hack"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#hadoop","text":"Cloudera Impala - John Russel Data-Intensive Text Processing with MapReduce (Jimmy Lin and Chris Dyer) (PDF) Hadoop Explained - Aravind Shenoy, Packt. (email address requested , not required) Hadoop Illuminated - Mark Kerzner & Sujee Maniyam Programming Pig - Alan Gates","title":"Hadoop"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#haskell","text":"A Gentle Introduction to Haskell Anatomy of Programming Languages - William R. Cook Beautiful Code, Compelling Evidence (PDF) Exploring Generic Haskell - Andres L\u00f6h (PDF) Happy Learn Haskell Tutorial Haskell - Wikibooks Haskell and Yesod Haskell no panic Haskell web Programming (Yesod tutorial) Learn Haskell Fast and Hard Learn You a Haskell for Great Good - Miran Lipovaca Parallel and Concurrent Programming in Haskell - Simon Marlow Real World Haskell Speeding Through Haskell The Haskell Road to Logic, Math and Programming (PDF) Yet Another Haskell Tutorial (PDF)","title":"Haskell"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#haxe","text":"Flambe Handbook Haxe and JavaScript - Matthijs Kamstra (wikibook) Haxe Manual - Haxe Foundation (PDF, HTML) HaxeFlixel Handbook (HTML) Kha Handbook","title":"Haxe"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#html-css","text":"A beginner's guide to HTML&CSS A free guide to learn HTML and CSS Adaptive Web Design - Aaron Gustafson An advanced guide to HTML&CSS Canvassing Code Guide: Standards for developing flexible, durable, and sustainable HTML and CSS - Mark Otto Dive Into HTML5 - Mark Pilgrim ( PDF ) GA Dash Google's HTML/CSS Style Guide How to Code in HTML5 and CSS3 HTML Canvas Deep Dive - Josh Marinacci HTML Dog Tutorials HTML5 Canvas - Steve Fulton & Jeff Fulton HTML5 for Publishers - Sanders Kleinfeld HTML5 For Web Designers - Jeremy Keith HTML5 Graphing and Data Visualization Cookbook - Ben Fhala, Packt. (email address requested , not required) HTML5 Notes for Professionals - Compiled from StackOverflow documentation (3.x) HTML5 Shoot 'em Up in an Afternoon - Bryan Bibat Learn CSS Layout Learn CSS Layout the pedantic way MaintainableCSS Pro HTML5 Programming Scalable and Modular Architecture for CSS - Jonathan Snook Thinking in CSS - Aravind Shenoy, Packt. (email address requested , not required) Thinking in HTML - Aravind Shenoy, Packt. (email address requested , not required) Understanding Flexbox: Everything you need to know - Ohans Emmanuel Web Audio API - Boris Smus","title":"HTML / CSS"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#bootstrap","text":"Twitter Bootstrap 3 Succinctly (PDF, Kindle) (email address requested , not required) Twitter Bootstrap Succinctly (PDF, Kindle) (email address requested , not required)","title":"Bootstrap"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#http","text":"Introduction to HTTP - Launch School","title":"HTTP"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#icon","text":"The Implementation of the Icon Programming Language","title":"Icon"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#ios","text":"Cocoa Dev Central iOS 8 App Development Essentials iOS Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Mastering iOS Game Development - Miguel DeQuadros, Packt (email address requested , not required) NSHipster (Resource) Start Developing iOS Apps (Swift) (HTML) Start Developing iOS Apps Today (Objective-C) - Last updated 22.10.2013 (PDF)","title":"iOS"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#iot","text":"IoT in five days- V1.1 (PDF, EPUB)","title":"IoT"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#isabellehol","text":"Concrete Semantics - A Proof Assistant Approach by Tobias Nipkow and Gerwin Klein (PDF) Isabelle/HOL - A Proof Assistant for Higher-Order Logic by Tobias Nipkow and Lawrence C. Paulson and Markus Wenzel (PDF)","title":"Isabelle/HOL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#j","text":"Arithmetic by Kenneth E Iverson (PDF) Brief Reference by Chris Burke and Clifford Reiter (PDF) Calculus by Kenneth E Iverson (PDF) Computers and Mathematical Notation by Kenneth E Iverson Concrete Math Companion by Kenneth E Iverson (PDF) Easy J by Linda Alvord, Norman Thomson (PDF) ( Word DOC ) Exploring Math by Kenneth E Iverson (PDF) J for C Programmers by Henry Rich J Primer Learning J by Roger Stokes- online Math for the Layman by Kenneth E Iverson (zipped html+images)","title":"J"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#java","text":"3D Programming in Java - Daniel Selman (PDF) Apache Jakarta Commons: Reusable Java Components - Will Iverson (PDF) Artificial Intelligence - Foundation of Computational Agents (2010) - David Poole and Alan Mackworth Category wise tutorials - J2EE - Yong Mook Kim Core Servlets and JavaServer Pages, 2nd Ed. (2003) - Marty Hall and Larry Brown Data Structures in Java for the Principled Programmer (2007) - Duane A. Bailey (PDF) Google's Java Style Guide Introduction to Computer science using Java - Bradley Kjell Introduction to Programming in Java - Robert Sedgewick and Kevin Wayne Introduction to Programming Using Java - David J. Eck Java Application Development on Linux (2005) - Carl Albing and Michael Schwarz (PDF) Java Language and Virtual Machine Specifications - James Gosling, et al Java Notes for Professionals - Compiled from StackOverflow documentation (3.x) Java Programming for Kids - Yakov Fain Java: The Legend - Ben Evans (email address requested , not required) Learning Java (4th Edition) - Patrick Niemeyer and Daniel Leuck Microservices Best Practices for Java (PDF) Microservices for Java Developers - Christian Posta (email address requested , not required) Modern Java EE Design Patterns - Markus Eisele (email address requested , not required) Neural Network Development with Java - Alan M. F. Souza and Fabio M. Soares (email address requested , not required) Object-Oriented vs. Functional Programming - Richard Warburton (email address requested , not required) OOP - Learn Object Oriented Thinking & Programming - Rudolf Pecinovsky Open Data Structures (in Java) - Pat Morin (PDF) Processing XML with Java (A Guide to SAX, DOM, JDOM, JAXP, and TrAX) (2002) - Elliotte Rusty Harold The ABC of PDF with iText: PDF Syntax essentials - Bruno Lowagie (Leanpub account or valid email requested) The Java EE6 Tutorial (PDF) The Java EE7 Tutorial - Eric Jendrock, et al (PDF) The Java Tutorials Think Java: How to Think Like a Computer Scientist - Allen B. Downey and Chris Mayfield Welcome to Java for Python Programmers - Brad Miller Welcome to the Java Workshop (2006) - Trevor Miller","title":"Java"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#codename-one","text":"Codename One Developer Guide (PDF) Create an Uber Clone in 7 Days (first 2 chapters) - Shai Almog (PDF)","title":"Codename One"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#jasperreports","text":"The JasperReports Ultimate Guide, Third Edition (PDF)","title":"JasperReports"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#spring","text":"Spring Framework Reference Documentation - Rod Johnson, Juergen Hoeller, Keith Donald, Colin Sampaleanu, Rob Harrop, Thomas Risberg, Alef Arendsen, Darren Davison, Dmitriy Kopylenko, Mark Pollack, Thierry Templier, Erwin Vervaet, Portia Tung, Ben Hale, Adrian Colyer, John Lewis, Costin Leau, Mark Fisher, Sam Brannen, Ramnivas Laddad, Arjen Poutsma, Chris Beams, Tareq Abedrabbo, Andy Clement, Dave Syer, Oliver Gierke, Rossen Stoyanchev, Phillip Webb, Rob Winch, Brian Clozel, Stephane Nicoll, Sebastien Deleuze ( PDF )","title":"Spring"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#spring-boot","text":"Spring Boot Reference Guide - Phillip Webb, Dave Syer, Josh Long, St\u00e9phane Nicoll, Rob Winch, Andy Wilkinson, Marcel Overdijk, Christian Dupuis ( PDF , EPUB )","title":"Spring Boot"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#spring-security","text":"Spring Security Reference - Ben Alex, Luke Taylor, Rob Winch","title":"Spring Security"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#wicket","text":"Official Free Online Guide for Apache Wicket framework","title":"Wicket"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#javascript","text":"Basic JavaScript for the impatient programmer - Dr. Axel Rauschmayer Book of Modern Frontend Tooling Crockford's JavaScript - Douglas Crockford Dev Docs Developing Backbone.js Applications - Addy Osmani Directory of free Javascript ebooks Eloquent JavaScript 2nd edition - Marijn Haverbeke Exploring ES6 - Dr. Axel Rauschmayer Google JavaScript Style Guide Human JavaScript JavaScript Allong\u00e9 - Reginald Braithwaite JavaScript Bible (PDF) JavaScript Challenges Book JavaScript Enlightenment - Cody Lindley JavaScript ES6 and beyond - Alberto Montalesi (PDF, epub) JavaScript For Cats JavaScript Fundamentals, Plus a Dash Of JQuery - for dinner ladies JavaScript Garden (Maintained by Tim Ruffles) JavaScript Patterns Collection - Shi Chuan JavaScript Spessore - Reginald Braithwaite Javascript Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) JavaScript the Right Way jQuery Fundamentals (starts with JavaScript basics) JS Robots (PDF) Leaflet Tips and Tricks: Interactive Maps Made Easy - Malcolm Maclean Learn to Code JavaScript by Playing a Game Learning JavaScript Design Patterns - Addy Osmani Managing Space and Time with JavaScript - Book 1: The Basics - Noel Rappin Marionette Expos\u00e9: Learn to write modular Javascript applicatons using Backbone Marionette and RequireJS/AMD - Jack Killilea (Leanpub account or valid email requested) Mastering JavaScript High Performance - Chad R. Adams, Packt. (email address requested , not required) Mozilla Developer Network's JavaScript Guide O'Reilly Programming JavaScript Applications Object-Oriented JavaScript - Stoyan Stefanov, Kumar Chetan Sharma (email address requested , not required) Oh My JS - Azat Mardanov Patterns For Large-Scale JavaScript Application Architecture - Addy Osmani Speaking JavaScript - Dr. Axel Rauschmayer The JavaScript Tutorial The JavaScript Way - Baptiste Pesquet The Problem with Native JavaScript APIs Thinking in JavaScript - Aravind Shenoy, Packt. (email address requested , not required) Understanding ECMAScript 6 - Nicholas C. Zakas Understanding JavaScript OOP (Sorella) You Don't Know JS","title":"JavaScript"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#angularjs","text":"Angular for the jQuery developer Angular.js Guide Angular.js Material Designing Angular.js Tutorial AngularJS - Step by Logical Step AngularJS Essentials - Rodrigo Branas, Packt (email address requested , not required) AngularJS Succinctly (PDF, Kindle) (email address requested , not required) AngularJs vs EmberJs AngularJS with Ruby on Rails Developing with Angular - Denys Vuika (Leanpub account or valid email requested) (:construction: in process ) Recipes with Angular.js - Frederik Dietz Seven-Part Introduction to Angular Unit Testing Best Practices in AngularJS","title":"Angular.js"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#aurelia","text":"Beginning Aurelia - behzad (Leanpub account or valid email requested)","title":"Aurelia"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#backbonejs","text":"A Complete guide for learning Backbone.js A pragmatic guide to Backbone.js apps Backbone Tutorials: Beginner, Intermediate and Advanced - Thomas Davis (Leanpub account or valid email requested) Backbone.js + Require.js, Modularization and Just in Time Dependency Loading, part 1 part 2 Backbone.js and socket.io Backbonejs Tutorials Building Single Page Web Apps with Backbone.js (:construction: in process ) Developing Backbone.js Applications Getting Started with Backbone.js How to share Backbone.js models with node.js","title":"Backbone.js"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#booty5js","text":"The Booty5 HTML5 Game Maker Manual","title":"Booty5.js"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#d3js","text":"D3 Tips and Tricks - Malcolm Maclean Dashing D3.js Tutorial Interactive Data Visualization for the Web Interactive Data Visualization with D3","title":"D3.js"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#dojo","text":"Dojo: The Definitive Guide - Matthew A. Russell","title":"Dojo"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#elm","text":"Building a Live-Validating Signup Form in Elm Elm Tutorial The Elm Architecture","title":"Elm"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#emberjs","text":"AngularJs vs EmberJs DockYard Ember.js Style Guide Ember App with RailsApi Ember.js - Getting started Vic Ramon's Ember Tutorial","title":"Ember.js"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#expressjs","text":"Express.js Guide - Azat Mardanov","title":"Express.js"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#jquery","text":"JavaScript Fundamentals, Plus a Dash Of JQuery - for dinner ladies jQuery Novice to Ninja (PDF) jQuery Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required)","title":"jQuery"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#meteor","text":"BulletProof Meteor Your First Meteor Application, A Complete Beginner\u2019s Guide to the Meteor JavaScript Framework","title":"Meteor"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#nodejs","text":"An Introduction to libuv - Nikhil Marathe ( PDF - ePub ) Mixu's Node Book Node Documentation Node: Up and Running - Tom Hughes-Croucher Node.js Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) The Node Beginner Book What You Need To Know About Node.js - Bruno Joseph Dmello, Packt (email address requested , not required)","title":"Node.js"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#om","text":"Om Tutorial","title":"Om"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#react","text":"Free React on Rails course Hacking with React Intro to the React Framework Learning React.js: Getting Started and Concepts React-Bits ( vasanthk ) React Enlightenment React In-depth: An exploration of UI development React Primer Draft React Tutorial React Tutorial by Josh Finnie Part 1 Part 2 Part 3 React with ASP.NET Core Tutorial React.js Fundamentals React.js Tutorial: Now is Your Time to Try It, Right in Your Browser SurviveJS - Webpack and React The Road to learn React - Build a Hacker News App along the Way - Robin Wieruch (Leanpub account or valid email requested) markdown","title":"React"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#react-native","text":"Programming React Native (Leanpub account or valid email requested) React Native Animation Book React Native Express React Native Training","title":"React Native"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#redux","text":"Full-Stack Redux Tutorial SoundCloud Application in React + Redux The Complete Redux Book - Boris Dinkevich and Ilya Gelman (Leanpub account or valid email requested)","title":"Redux"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#jenkins","text":"Jenkins: The Definitive Guide (PDF)","title":"Jenkins"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#julia","text":"Introducing Julia - Wikibooks Julia by Example - Samuel Colvin (GitHub repo) Julia language: a concise tutorial - Antonello Lobianco (GitBook) Learn Julia in Y minutes - Leah Hanson The Julia Express - Bogumi\u0142 Kami\u0144ski (PDF)","title":"Julia"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#latex-tex","text":"","title":"LaTeX / TeX"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#latex","text":"Arbitrary LaTex Reference Begin Latex in minutes LaTeX - Wikibooks The Not So Short Introduction to LaTeX (PDF)","title":"LaTeX"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#tex","text":"Notes On Programming in TeX - Christian Feurs\u00e4nger (PDF) TeX by Topic, A TeXnician's Reference - Victor Eijkhout TeX for the Impatient - Paul Abrahams, Kathryn Hargreaves, and Karl Berry","title":"TeX"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#limbo","text":"Inferno Programming With Limbo","title":"Limbo"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#linux","text":"Ad Hoc Data Analysis From The Unix Command Line - Wikibooks Advanced Linux Programming (PDF) Automated Linux From Scratch Getting Started with Ubuntu GNU Autoconf, Automake and Libtool GTK+/Gnome Application Development Hardened Linux From Scratch Kali Linux: Professional Penetration-Testing Distribution Learn Enough Command Line to Be Dangerous - Michael Hartl Learning Debian GNU/Linux Linux 101 Hacks - Ramesh Natarajan (PDF) Linux Administrator's Security Guide Linux Advanced Routing & Traffic Control HOWTO Linux Device Drivers, Third Edition - Jonathan Corbet, Alessandro Rubini, and Greg Kroah-Hartman Linux from Scratch Linux Inside Linux Kernel in a Nutshell Linux Newbie Administrator Guide Linux Security for Beginners Linux Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) OpenVZ Linux virtualization (PDF) Red Hat Enterprise Linux 6 Essentials Secure Programming HOWTO - Creating Secure Software - D. A. Wheeler (HTML, PDF) Ten Steps to Linux Survival: Bash for Windows People - Jim Lehmer The Debian Administrator's Handbook The Linux Command Line (PDF) The Linux Development Platform (PDF) The Linux Kernel Module Programming Guide The Linux System Administrator's Guide Ubuntu Pocket Guide and Reference Ubuntu Server Guide (PDF) Understanding the Linux Virtual Memory Manager - Mel Gorman (HTML, PDF) UNIX Systems Programming for SVR4 - David A. Curry Upstart Intro, Cookbook and Best Practises What Every Programmer Should Know About Memory (PDF)","title":"Linux"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#lisp","text":"Basic Lisp Techniques - David J. Cooper, Jr. (PDF) Casting Spels in Lisp Common Lisp: A Gentle Introduction to Symbolic Computation - David S. Touretzky (PDF, PS) Common Lisp: An Interactive Approach - Stuart C. Shapiro Common Lisp Quick Reference Common Lisp the Language, 2nd Edition Google's Common Lisp Style Guide Interpreting LISP - Gary D. Knott (PDF) Learn Lisp The Hard Way - Colin J.E. Lupton Let Over Lambda - 50 Years of Lisp - D. Hoyte Lisp Hackers: Interviews with 100x More Productive Programmers - Vsevolod Dyomkin Lisp Koans Lisp Web Tales - Pavel Penev (Leanpub account or valid email requested) On Lisp - P. Graham Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp - Peter Norvig (PDF, epub, markdown) Practical Common Lisp - P. Seibel Successful Lisp: How to Understand and Use Common Lisp - David Lamkins (PDF) The Common Lisp Cookbook The Evolution of Lisp - Guy L. Steele Jr., Richard P. Gabriel (PDF)","title":"Lisp"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#livecode","text":"LiveCode userguide (PDF)","title":"Livecode"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#lua","text":"Lua 5.1 Reference Manual Lua Programming - Wikibooks Programming in Lua (first edition)","title":"Lua"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#markdown","text":"Learn Markdown - Sammy P., Aaron O. (PDF) (EPUB) (MOBI)","title":"Markdown"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#mathematica","text":"Mathematica\u00ae programming: an advanced introduction by Leonid Shifrin Stephen Wolfram's The Mathematica Book Vector Math for 3d Computer Graphics Wolfram Mathematica Tutorial Collection","title":"Mathematica"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#matlab","text":"An Interactive Introduction to MATLAB (PDF) An Introduction to MATLAB (PDF) Applications of MATLAB in Science and Engineering Experiments with MATLAB Freshman Engineering Problem Solving with MATLAB Interactive Tutorials for MATLAB, Simulink, Signal Processing, Controls, and Computational Mathematics MATLAB - A Fundamental Tool for Scientific Computing and Engineering Applications - Volume 1 MATLAB - A Ubiquitous Tool for the Practical Engineer MATLAB for Engineers: Applications in Control, Electrical Engineering, IT and Robotics MATLAB Programming - Wikibooks MATLAB Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Numerical Computing with MATLAB Physical Modeling in MATLAB - Alan B. Downey","title":"MATLAB"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#maven","text":"Developing with Eclipse and Maven Maven by Example Maven: The Complete Reference Repository Management with Nexus","title":"Maven"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#mercurial","text":"HGInit - Mercurial Tutorial by Joel Spolsky Mercurial: The Definitive Guide Mercurial: The Definitive Guide 2nd edition ( source repository ) (:construction: in process )","title":"Mercurial"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#mercury","text":"The Mercury Users' Guide (PDF)","title":"Mercury"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#modelica","text":"Modelica by Example","title":"Modelica"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#mysql","text":"MySQL Essentials MySQL Tutorial Excerpt (PDF)","title":"MySQL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#neo4j","text":"Graph Databases (PDF) Graph Databases 2nd edition (account required)","title":"Neo4J"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#net-framework","text":"Entity Framework Game Creation with XNA - Wikibooks .NET for Visual FoxPro Developers .NET Performance Testing and Optimization - The Complete Guide (RedGate, By Paul Glavich and Chris Farrell) Under the Hood of .NET Memory Management (PDF) (RedGate, By Chris Farrell and Nick Harrison) Visual Studio .NET Tips and Tricks (VS 2003-2005 only)","title":".NET Framework"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#nosql","text":"CouchDB: The Definitive Guide Extracting Data from NoSQL Databases: A Step towards Interactive Visual Analysis of NoSQL Data - Petter Nasholm (PDF) Graph Databases Instant MongoDB - Amol Nayak, Packt. (email address requested , not required) MongoDB Koans MongoDB Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) NoSQL Databases - Christof Strauch (PDF) The Little MongoDB Book The Little Redis Book - K. Seguin (PDF, Epub)","title":"NoSQL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#oberon","text":"Algorithms and Data-Structures - Niklaus Wirth (PDF) Object-Oriented Programming in Oberon-2 - Hanspeter M\u00f6ssenb\u00f6ck (PDF) Programming in Oberon - Niklaus Wirth (PDF)","title":"Oberon"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#objective-c","text":"Google's Objective-C Style Guide Object-Oriented Programming with Objective-C Objective-C Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Programming With Objective-C Try Objective-C Book","title":"Objective-C"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#ocaml","text":"Developing Applications With Objective Caml Real World OCaml Think OCaml - Allen B. Downey and Nicholas Monje Unix System Programming in OCaml Github Repo Using, Understanding, and Unraveling The OCaml Language: From Practice to Theory and vice versa - Didier R\u00e9my","title":"OCaml"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#octave","text":"Octave Programming - Wikibooks","title":"Octave"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#opengl-es","text":"iPhone 3D Programming - Developing Graphical Applications with OpenGL ES - Philip Rideout","title":"OpenGL ES"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#openmp","text":"A Guide To OpenMP OpenMP Application Programming Interface Standard Version 4.0 (PDF)","title":"OpenMP"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#openresty","text":"Programming OpenResty","title":"OpenResty"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#openscad","text":"OpenSCAD User Manual - Wikibooks","title":"OpenSCAD"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#trueos","text":"TrueOS\u00ae Users Handbook","title":"TrueOS"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#perl","text":"Beginning Perl Data Munging with Perl (PDF) Embedding Perl in HTML with Mason - D. Rolsky, K. Williams Essential Perl (PDF) Exploring Programming Language Architecture in Perl Extreme Perl - R. Nagier (HTML, PDF) Higher-Order Perl - M. J. Dominus (PDF) Impatient Perl Learning Perl The Hard Way Mastering Perl - brian d foy Modern Perl 5 Perl & LWP Perl 5 Internals Perl for the Web - C. Radcliff Perl Training Australia - Course Notes Plack Handbook SDL::Manual Writing Games in Perl Template Toolkit Documentation The DBIx-Class Book The PDL Book (PDF) Web Client Programming with Perl","title":"Perl"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#perl-6-rakudo","text":"Perl 6 Introduction Perl 6 Programming - Wikibooks Think Perl 6 - Laurent Rosenfeld, with Allen B. Downey (PDF) Using Perl 6 (:construction: in process )","title":"Perl 6 / Rakudo"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#php","text":"CakePHP Framework CakePHP Cookbook 2.x (PDF) CodeIgniter Framework CodeIgniter 2.2.6 CodeIgniter 3.1.6 Drupal Framework Drupal 7 The Tiny Book of Rules (PDF) Hacking with PHP Laravel Framework Laravel 3 Laravel: Code Happy - Dayle Rees Laravel 4 Laravel: Code Bright - Dayle Rees Laravel 5 Laravel 5.x Official Documentation. Synced Daily (Leanpub account or valid email requested) Laravel Best Practices Laravel: Code Smart - Dayle Rees Laravel Collections Unraveled - Jeffrey Madsen (Leanpub account or valid email requested) PHP 5 Power Programming (PDF) PHP Best Practices PHP Internals Book PHP Pandas - Dayle Rees PHP Programming - Wikibooks PHP Security Guide PHP: The Right Way PHPUnit Manual - Sebastian Bergmann (PDF) Practical PHP Programming Practical PHP Testing Survive The Deep End: PHP Security Symfony Framework Symfony 2.8 The Symfony Book 2.8.x (PDF) Symfony 3.4 The Symfony Best practices 3.4.x (PDF) The Symfony Book 3.4.x The Symfony Getting started 3.4.x (PDF) Symfony 4.1 The Symfony Best practices 4.1.x (PDF) The Symfony Book 4.1.x The Symfony Getting started 4.1.x (PDF) Using Libsodium in PHP Projects Zend Framework Using Zend Framework 3","title":"PHP"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#picolisp","text":"PicoLisp by Example PicoLisp Works","title":"PicoLisp"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#postgresql","text":"Postgres Official Documentation Postgres Succinctly (PDF, Kindle) (email address requested , not required) Practical PostgreSQL The Internals of PostgreSQL for database administrators and system developers","title":"PostgreSQL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#powershell","text":"Creating HTML Reports in PowerShell (PDF,ePub,HTML) DevOps: The Ops Perspective (PDF, ePub, MOBI) Ditch Excel: Making Historical & Trend Reports in PowerShell (PDF, ePub, MOBI) Introduction to PowerShell for Unix People (PDF, ePub, HTML) Layman\u2019s Guide to PowerShell 2.0 remoting (PDF) Mastering PowerShell v2 PowerShell 2.0 \u2013 One CMDLET At A Time (PDF) PowerShell Notes for Professionals - Compiled from StackOverflow documentation (3.x) PowerShell Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) Secrets of PowerShell Remoting (PDF, ePub, MOBI) The Big Book of PowerShell Error Handling (PDF, ePub, MOBI) The Big Book of PowerShell Gotchas (PDF, ePub, MOBI) The DSC Book (PDF, ePub, HTML) The Monad Manifesto - Annotated (PDF, ePub, MOBI) Why PowerShell? (PDF, ePub, MOBI) Windows PowerShell Networking Guide (PDF, ePub, MOBI)","title":"PowerShell"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#processing","text":"The Nature of Code: Simulating Natural Systems with Processing","title":"Processing"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#prolog","text":"Adventure in Prolog Applications of Prolog - Attila Csenki, Bookboon. (email address requested , not required) Coding Guidelines for Prolog - Michael A. Covington, Roberto Bagnara, Richard A. O'Keefe, Jan Wielemaker, Simon Price Concise Intro to Prolog Expert Systems in Prolog GNU Prolog Manual (PDF) Introduction to Prolog for Mathematicians - J. Ireson-Ireson-Paine Learn Prolog Now! Logic, Programming and Prolog (2ed) Natural Language Processing Techniques in Prolog - P. Blackburn, K. Striegnitz Prolog and Natural - Language Analysis - Fernando C. N. Pereira, Stuart M. Shieber Prolog for Programmers Prolog Problems - Werner Hett Prolog Techniques - Attila Csenki, Bookboon. (email address requested , not required) Prolog Tutorial The First 10 Prolog Programming Contests - Bart Demoen, Phuong-Lan Nguyen, Tom Schrijvers, Remko Tron\u00e7on Warren's Abstract Machine: A Tutorial Reconstruction - Hassan A\u00a8it-Kaci","title":"Prolog"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#constraint-logic-programming-extended-prolog","text":"A Gentle Guide to Constraint Logic Programming via ECLiPSe","title":"Constraint Logic Programming (extended Prolog)"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#purescript","text":"PureScript By Example - Phil Freeman","title":"PureScript"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#python","text":"20 Python Libraries You Aren't Using (But Should) (email address requested , not required) A Beginner's Python Tutorial - Wikibooks A Byte of Python (3.x) (HTML, PDF, EPUB, Mobi) A Guide to Python's Magic Methods - Rafe Kettler A Whirlwind Tour of Python - Jake VanderPlas (PDF) (EPUB, MOBI) Automate the Boring Stuff - Al Sweigart Biopython (PDF) Build applications in Python the antitextbook (3.x) (HTML, PDF, EPUB, Mobi) Building Machine Learning Systems with Python - Willi Richert & Luis Pedro Coelho, Packt. (email address requested , not required) Building Skills in Object-Oriented Design (Python) (PDF) (2.1.1) Building Skills in Python (PDF) (2.6) Code Like a Pythonista: Idiomatic Python CodeCademy Python Composing Programs (3.x) Data Structures and Algorithms in Python - B. R. Preiss (PDF) Dive into Python 3 - Mark Pilgrim (3.0) Dive into Python - Mark Pilgrim (2.3) From Python to NumPy Full Stack Python Functional Programming in Python (email address requested , not required) Fundamentals of Python Programming - Richard L. Halterman (PDF) (3.2) Google's Python Class (2.4 - 2.x) Google's Python Style Guide Hacking Secret Cyphers with Python - Al Sweigart (3.3) Hadoop with Python (email address requested , not required) High Performance Python (PDF) Hitchhiker's Guide to Python! (2.6) How to Make Mistakes in Python - Mike Pirnat (PDF) (1st edition) How to Think Like a Computer Scientist: Learning with Python, Interactive Edition (3.2) How to Think Like a Computer Scientist: Learning with Python - Allen B. Downey, Jeff Elkner and Chris Meyers (2.4) Think Python - Allen B. Downey (2.x & 3.0) Intermediate Python - Muhammad Yasoob Ullah Khalid (1st edition) Introduction to Programming with Python (3.3) Introduction to Programming Using Python - Cody Jackson (1st edition) (2.3) Introduction to Python - Kracekumar (2.7.3) Invent Your Own Computer Games With Python - Al Sweigart (3.1) Learn Python, Break Python Learn Python in Y minutes Learn Python The Hard Way (2.5 - 2.6) Learn to Program Using Python - Cody Jackson (PDF) Learning Python - Fabrizio Romano, Packt. (email address requested , not required) Learning to Program Lectures on scientific computing with python - J.R. Johansson (2.7) Making Games with Python & Pygame - Al Sweigart (2.7) Math for programmers (using python) Modeling Creativity: Case Studies in Python - Tom D. De Smedt (PDF) Natural Language Processing with Python (3.x) Non-Programmer's Tutorial for Python 3 - Wikibooks (3.3) Non-Programmer's Tutorial for Python 2.6 - Wikibooks (2.6) Picking a Python Version: A Manifesto (email address requested , not required) Porting to Python 3: An In-Depth Guide (2.6 - 2.x & 3.1 - 3.x) Practical Programming in Python - Jeffrey Elkner (PDF) Problem Solving with Algorithms and Data Structures using Python - Bradley N. Miller and David L. Ranum Program Arcade Games With Python And Pygame (3.3) Programming Computer Vision with Python (PDF) Python 2 Official Documentation (PDF, HTML, TEXT) (2.x) Python 2.7 quick reference - New Mexico Tech (2.7) Python 3 Official Documentation (PDF, EPUB, HTML, TEXT) (3.x) Python 3 Tutorial Python Cookbook - David Beazley Python Data Science Handbook - Jake VanderPlas (HTML, Jupyter Notebooks) Python for Econometrics - Kevin Sheppard (PDF) (2.7.5) Python for Everybody Exploring Data Using Python 3 - Charles Severance (PDF, EPUB, HTML) Python for Informatics: Exploring Information (2.7.5) Python for you and me (2.7.3) Python for you and me (3.x) Python Idioms (PDF) Python in Education (email address requested , not required) Python in Hydrology - Sat Kumar Tomer Python Koans (2.7 or 3.x) Python Module of the Week (3.x) Python Module of the Week (2.x) Python Notes for Professionals - Compiled from StackOverflow documentation (3.x) Python Practice Book (2.7.1) Python Practice Projects Python Programming - Wikibooks (2.7) Python Programming - Wikibooks (PDF) (2.6) Scipy Lecture Notes SICP in Python (3.2) Snake Wrangling For Kids (3.x) Suporting Python 3: An In-Depth Guide (2.6 - 2.x & 3.1 - 3.x) Test-Driven Web Development with Python (3.3 - 3.x) Text Processing in Python - David Mertz (2.3 - 2.x) The Coder's Apprentice: Learning Programming with Python 3 - Pieter Spronck (PDF) (3.x) The Definitive Guide to Jython, Python for the Java Platform - Josh Juneau, Jim Baker, Victor Ng, Leo Soto, Frank Wierzbicki (2.5) The Little Book of Python Anti-Patterns ( Source ) The Programming Historian - William J. Turkel, Adam Crymble and Alan MacEachern The Python Ecosystem: An Introduction The Python GTK+ 3 Tutorial The Standard Python Library - Fredrik Lundh Think Complexity - Allen B. Downey (2nd Edition) (PDF, HTML) Web2py: Complete Reference Manual, 6th Edition (pre-release) (2.5 - 2.x)","title":"Python"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#django","text":"Django 2.0 Tutorial for Beginners (2.0) Django Girls Tutorial (1.11) Django Official Documentation (PDF) (1.5) Django Official Documentation (PDF) (1.7) Django Official Documentation (PDF) (1.9) Django Official Documentation (PDF) (1.10) Djen of Django Effective Django (1.5) How to Tango With Django (1.7) Test-Driven Web Development with Python (1.8) The Django Book (1.8 & 1.11)","title":"Django"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#flask","text":"Explore Flask - Robert Picard The Flask Mega-Tutorial - Miguel Grinberg (0.9)","title":"Flask"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#kivy","text":"Kivy Programming Guide","title":"Kivy"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#pandas","text":"Learn Pandas - Hernan Rojas (0.18.1)","title":"Pandas"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#pyramid","text":"Quick Tutorial for Pyramid","title":"Pyramid"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#tornado","text":"Learn Web Programming","title":"Tornado"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#qml","text":"Qt5 Cadaques - Juergen Bocklage-Ryannel and Johan Thelin (HTML, PDF, ePub) (:construction: in process )","title":"QML"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#r","text":"Advanced R Programming - Hadley Wickham An Introduction to Statistical Learning with Applications in R - Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani (PDF) Cookbook for R - Winston Chang Introduction to Probability and Statistics Using R - G. Jay Kerns (PDF) Learning Statistics with R - Daniel Navarro Machine Learning with R - Brett Lantz, Packt. (email address requested , not required) ModernDive - Chester Ismay and Albert Y. Kim Practical Regression and Anova using R - Julian J. Faraway (PDF) R for Data Science - Garrett Grolemund and Hadley Wickham R for Spatial Analysis (PDF) R Language for Programmers - John D. Cook R Packages - Hadley Wickham R Practicals (PDF) R Programming - Wikibooks R Programming for Data Science - Roger D. Peng (Leanpub account or valid email requested) R Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required) The caret Package - Max Kuhn The R Inferno - Patrick Burns (PDF) The R Language The R Manuals Tidy Text Mining with R - Julia Silge and David Robinson","title":"R"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#racket","text":"How to Design Programs 2e Programming Languages: Application and Interpretation The Racket Guide","title":"Racket"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#raspberry-pi","text":"Raspberry Pi Cookbook for Python Programmers - Tim Cox, Packt. (PDF) (email address requested , not required) Raspberry Pi: Measure, Record, Explore - Malcolm Maclean (HTML) Raspberry Pi Users Guide - (2012) - Eben Upton (PDF) The Official Raspberry Pi Project Book (PDF)","title":"Raspberry Pi"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#rebol","text":"Learn REBOL - Nick Antonaccio","title":"REBOL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#ruby","text":"A community-driven Ruby style guide CodeCademy Ruby Developing Games With Ruby - Tomas Varaneckas I Love Ruby Introduction to Programming with Ruby - Launch School Just Enough Ruby to Get By Learn Ruby First - Frederick John Learn Ruby the Hard Way - Zed Shaw Learn to Program - Chris Pine Mr. Neighborly's Humble Little Ruby Book Object Oriented Programming with Ruby - Launch School Practicing Ruby Programming Ruby Ruby Essentials Ruby Hacking Guide Ruby in Twenty Minutes Ruby Koans Ruby Learning Ruby Programming Ruby User's Guide Ruby Web Dev: The Other Way - Yevhen Kuzminov The Bastards Book of Ruby The Unofficial Ruby Usage Guide (at Google) - Ian Macdonald Why's (Poignant) Guide to Ruby","title":"Ruby"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#rspec","text":"Better Specs (RSpec Guidelines with Ruby)","title":"RSpec"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#ruby-on-rails","text":"A community-driven Rails style guide Building REST APIs with Rails Kestrels, Quirky Birds, and Hopeless Egocentricity - Reg Braithwaite Learn Ruby on Rails as You Modify a Craigslist Clone Objects on Rails Rails Girls Guides Ruby on Rails 3.2 - Step by Step Ruby on Rails 4.0 Guide Ruby on Rails Guides Ruby on Rails Tutorial (Rails 5): Learn Web Development with Rails - Michael Hartl Upgrading to Rails 4","title":"Ruby on Rails"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#sinatra","text":"Sinatra Book","title":"Sinatra"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#rust","text":"Rust by Example Rust for Rubyists The Rust Programming Language The Rustonomicon Why Rust? (PDF)","title":"Rust"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#sage","text":"Sage for Power Users - William Stein (PDF) The Sage Manuals","title":"Sage"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#scala","text":"A Scala Tutorial for Java programmers (PDF) Advanced Scala with Cats - Noel Welsh and Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) Another tour of Scala Creative Scala - Noel Welsh and Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) EAI Patterns with Actor Model - Vaughn Vernon Effective Scala Essential Scala - Noel Welsh and Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) Functional Programming for Mortals - Sam Halliday Learning Scala in small bites Learning Scalaz Pro Scala: Monadic Design Patterns for the Web Programming in Scala, First Edition - by M. Odersky, L. Spoon, B. Venners PythonToScala - Rob Story S-99: Ninety-Nine Scala Problems - Phil! Gold Scala & Design Patterns: Exploring Language Expressivity - Fredrik Skeel L\u00f8kke (PDF) Scala By Example - M. Odersky (PDF) Scala Cookbook: Bonus Chapters - Alvin Alexander (PDF) Scala for Perl 5 Programmers - Breno G. de Oliveira Scala for the Impatient (A1 Scala Level chapters) - Cay S. Horstmann Scala School by Twitter Scala Tutorial (PDF) tetrix in Scala The Neophyte's Guide to Scala - Daniel Westheide The Type Astronaut's Guide to Shapeless - Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) Xtrace","title":"Scala"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#lift","text":"Exploring Lift (published earlier as \"The Definitive Guide to Lift\", PDF ) Lift Lift Cookbook - Richard Dallaway Simply Lift - David Pollak (PDF)","title":"Lift"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#play-scala","text":"Essential Play - Dave Gurnell (PDF, HTML, EPUB) (email address requested , not required) Play Framework Recipes - Alvin Alexander","title":"Play Scala"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#scheme","text":"A Pamphlet Against R. Computational Intelligence in Guile Scheme An Introduction to Scheme and its Implementation Concrete Abstractions: An Introduction to Computer Science Using Scheme - M. Hailperin, B. Kaiser, K. Knight How to Design Programs Scheme Tutorial Simply Scheme: Introducing Computer Science - B. Harvey, M. Wright Sketchy LISP: An Introduction to Functional Programming in Scheme - Nils Holm (ZIP) Teach Yourself Scheme in Fixnum Days The Scheme Programming Language: Edition 3 - The Scheme Programming Language: Edition 4 Write Yourself a Scheme in 48 Hours - Wikibooks","title":"Scheme"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#scilab","text":"Introduction to Scilab Programming in Scilab Writing Scilab Extensions","title":"Scilab"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#scratch","text":"An Introductory Computing Curriculum Using Scratch Computer Science Concepts in Scratch","title":"Scratch"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#sed","text":"Sed - An Introduction and Tutorial","title":"Sed"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#self","text":"The Self Handbook","title":"Self"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#smalltalk","text":"Deep into Pharo Dynamic Web Development with Seaside - S. Ducasse, L. Renggli, C. D. Shaffer, R. Zaccone Enterprise Pharo: a Web Perspective Numerical Methods with Pharo Pharo by Example (Smalltalk Implementation and IDE) Squeak By Example (Smalltalk Implementation and IDE) Stef's Free Online Smalltalk Books (meta-list)","title":"Smalltalk"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#spark","text":"Databricks Spark Knowledge Base Databricks Spark Reference Applications Mastering Apache Spark","title":"Spark"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#sql-implementation-agnostic","text":"Developing Time-Oriented Database Applications in SQL SQL For Web Nerds SQL Notes for Professionals Use The Index, Luke!: A Guide To SQL Database Performance","title":"SQL (implementation agnostic)"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#sql-server","text":"Best of SQLServerCentral.com Vol 7 *(RedGate, By SQLServerCentral Authors) Brad's Sure Guide to SQL Server Maintenance Plans (RedGate, By Brad McGehee) Defensive Database Programming (PDF) (RedGate, By Alex Kuznetsov) How to Become an Exceptional DBA (RedGate, By Brad McGehee) Inside the SQL Server Query Optimizer (RedGate, By Benjamin Nevarez) Introducing Microsoft SQL Server 2008 R2 Introducing Microsoft SQL Server 2012 Introducing Microsoft SQL Server 2014 Mastering SQL Server Profiler (RedGate, By Brad McGehee) Microsoft SQL Server Notes for Professionals (Compiled from StackOverflow documentation) Performance Tuning with SQL Server Dynamic Management Views (RedGate, By Tim Ford and Louis Davidson) Protecting SQL Server Data (RedGate, By John Magnabosco) SQL Server 2012 Tutorials: Reporting Services SQL Server Backup and Restore (RedGate, By Shawn McGehee) SQL Server Concurrency: Locking, Blocking and Row Versioning (RedGate, By Kalen Delaney) SQL Server Execution Plans (PDF) (RedGate, By Grant Fritchey) SQL Server Execution Plans, Second Edition (PDF) (RedGate, By Grant Fritchey) SQL Server Hardware (RedGate, By Glenn Berry) SQL Server Internals: In-Memory OLTP (RedGate, By Kalen Delaney) SQL Server Statistics (RedGate, By Holger Schmeling) SQL Server Stumpers Vol.5 (RedGate, By SQLServerCentral Authors) SQL Server Tacklebox (RedGate, By Rodney Landrum) SQL Server Transaction Log Management (RedGate, By Tony Davis and Gail Shaw) The Art of SQL Server FILESTREAM (RedGate, By Jacob Sebastian and Sven Aelterman) Troubleshooting SQL Server: A Guide for the Accidental DBA (RedGate, By Jonathan Kehayias and Ted Krueger)","title":"SQL Server"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#standard-ml","text":"Introduction to Standard ML - Atsushi Ohori (PDF) Programming in Standard ML '97 - Stephen Gilmore, University of Edinburgh Programming in Standard ML, DRAFT - Robert Harper (PDF) SML# Document - Atsushi Ohori, Katsuhiro Ueno","title":"Standard ML"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#subversion","text":"Subversion Version Control (PDF) Version Control with Subversion","title":"Subversion"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#swift","text":"Hacking with Swift Learn Swift Swift Essentials - Second Edition - Dr. Alex Blewitt, Packt (email address requested , not required) Swift Pocket Reference (email address requested , not required) Test-driven iOS Development with Swift - Dr. Dominik Hauser, Packt. (email address requested , not required) The Swift Programming Language (HTML) (iBook) Using Swift with Cocoa and Objective-C (HTML) (iBook)","title":"Swift"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#tcl","text":"Tcl Programming - Richard.Suchenwirth, et. al. TclWise - Salvatore Sanfilippo","title":"Tcl"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#teradata","text":"Teradata Books","title":"Teradata"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#tizen","text":"Tizen for Dummies - Jon Lansdell, Cheng Luo, Michelle Somersville (PDF)","title":"Tizen"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#tla","text":"Specifying Systems: The TLA+ Language and Tools for Hardware and Software Engineers - Leslie Lamport (Postscript or PDF)","title":"TLA"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#typescript","text":"TypeScript Deep Dive TypeScript for C# Programmers TypeScript Succinctly, Syncfusion (PDF, Kindle) (email address requested , not required)","title":"TypeScript"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#unix","text":"An Introduction to Unix Commentary on the Sixth Edition UNIX Operating System - J. Lions Unix as IDE - Tom Ryder (epub, mobi) UNIX Commands and Concepts - Robert I. Pitts Unix for Poets - Kenneth Ward Church (PDF) Unix Toolbox - Colin Barschel UNIX Tutorial for Beginners","title":"Unix"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#verilog","text":"Verilog Quick Reference Guide - Sutherland HDL (PDF) Verilog Tutorial","title":"Verilog"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#vhdl","text":"Free Range VHDL - Bryan Mealy, Fabrizio Tappero (TeX and PDF) VHDL Tutorial VHDL Tutorial: Learn By Example","title":"VHDL"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#vim","text":"A Byte of Vim Learn Vim Progressively Learn Vimscript the Hard Way Use Vim Like A Pro - Tim Ottinger (Leanpub account or valid email requested) Vi Improved -- Vim - Steve Oualline (PDF) Vim Recipes (PDF) Vim Regular Expressions 101","title":"Vim"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#visual-basic","text":"Visual Basic Essentials","title":"Visual Basic"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#visual-prolog","text":"A Beginners' Guide to Visual Prolog Visual Prolog for Tyros","title":"Visual Prolog"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#web-services","text":"RESTful Web Services (PDF)","title":"Web Services"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#windows-8","text":"Programming Windows 8 Apps with HTML, CSS, and JavaScript (v1) Programming Windows 8 Apps with HTML, CSS, and JavaScript (v2, incomplete)","title":"Windows 8"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#windows-phone","text":"Developing An Advanced Windows Phone 7.5 App That Connects To The Cloud Windows Phone 8 Development Succinctly - Matteo Pagani (PDF) Windows Phone 8.1 Development for Absolute Beginners Windows Phone Programming Blue Book","title":"Windows Phone"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#workflow","text":"Declare Peace on Virtual Machines. A guide to simplifying vm-based development on a Mac","title":"Workflow"},{"location":"Education/Free_Programming_Books/Programming_Books_EN/#xbase-dbase-clipper-harbour","text":"Application Development with Harbour - Wikibooks CA-Clipper 5.2 Norton Guide Clipper Tutorial: a Guide to Open Source Clipper(s) - Wikibooks","title":"xBase (dBase / Clipper / Harbour)"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/","text":"Index 0 - Language Agnostic Open Source Ecosystem \u041e\u0431\u043b\u0430\u0447\u043d\u044b\u0435 \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u041f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u044b \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0420\u0430\u0431\u043e\u0442\u0430 c c\u0435\u0442\u044c\u044e \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438 Angular Assembly Bash C C# C++ Clojure CoffeeScript Elasticsearch Elixir Erlang Git Go Haskell HTML / CSS Bootstrap Java Android EasyMock Hibernate JDBC JUnit Maven Spring JavaScript AngularJS jQuery Node.js nuxt.js React vue.js Kotlin LaTeX Lisp MetaPost .NET NoSQL Objective-C Perl PHP CakePHP CodeIgniter Laravel Python Django R Reverse engineering Ruby RSpec Ruby on Rails Rust Scala Scilab Scratch Smalltalk SQL PostgreSQL TypeScript Unix Vim 0 - Language Agnostic 3D-\u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Blender - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 E-maxx.ru: \u0421\u0431\u043e\u0440\u043d\u0438\u043a \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043d\u0430 C++ (PDF) Scrum \u0438 XP: \u0437\u0430\u043c\u0435\u0442\u043a\u0438 \u0441 \u043f\u0435\u0440\u0435\u0434\u043e\u0432\u043e\u0439 (PDF) \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 - \u041c\u0438\u0445\u0430\u0438\u043b \u041a\u0443\u0440\u043d\u043e\u0441\u043e\u0432 (PDF) \u0417\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0421\u0430\u043c\u043e\u0443\u0447\u0438\u0442\u0435\u043b\u044c - \u041c\u043e\u0437\u0433\u043e\u0432\u043e\u0439 \u041c.\u0412. (PDF) \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0412\u0441\u0435\u0432\u043e\u043b\u043e\u0434 \u0414\u0451\u043c\u043a\u0438\u043d (PDF) \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e - \u0421\u0442\u043e\u043b\u044f\u0440\u043e\u0432 \u0410\u043d\u0434\u0440\u0435\u0439 \u0412\u0438\u043a\u0442\u043e\u0440\u043e\u0432\u0438\u0447 (:construction:) (PDF) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e HTTP - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e SOAP - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u0443\u0440\u0441. - \u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u041a\u0443\u043b\u0438\u043a\u043e\u0432 (PDF) \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 - \u041a\u0443\u0437\u044e\u0440\u0438\u043d \u041d.\u041d., \u0424\u043e\u043c\u0438\u043d \u0421.\u0410. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e \u0420\u0430\u0437\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 HTTP2 - \u0414\u0430\u043d\u0438\u044d\u043b\u044c \u0428\u0442\u0435\u043d\u0431\u0435\u0440\u0433 (PDF) Open Source Ecosystem \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u041e\u0431\u043b\u0430\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0443\u043b\u044c\u0442\u0438\u0442\u0435\u043d\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u0431\u043b\u0430\u043a\u0430, \u0438\u0437\u0434\u0430\u043d\u0438\u0435 3-\u0435 \u041f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - John Harrison \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u0436\u0443\u0440\u043d\u0430\u043b \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u041f\u043e\u0441\u043e\u0431\u0438\u0435 \u043f\u043e Ansible - Michel Blanc Angular Angular 5. \u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e - Maximilian Schwarzm\u00fcller \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Angular - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 Assembly \u0410\u0441\u0441\u0435\u043c\u0431\u043b\u0435\u0440 \u0432 Linux \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 C - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a \u0410\u0441\u0441\u0435\u043c\u0431\u043b\u0435\u0440 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432 \u041c\u0438\u043a\u0440\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u044b \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 \"\u042d\u043b\u044c\u0431\u0440\u0443\u0441\" (PDF) \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u0430\u0441\u0441\u0435\u043c\u0431\u043b\u0435\u0440\u0430 NASM \u0434\u043b\u044f \u041e\u0421 Unix - \u0410\u043d\u0434\u0440\u0435\u0439 \u0421\u0442\u043e\u043b\u044f\u0440\u043e\u0432 (PDF) Bash Advanced Bash-Scripting Guide C \u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u043e \u044f\u0437\u044b\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0421\u0438/\u0421\u0438++ - \u0414\u0435\u043d\u0438\u0441 \u042e\u0440\u0438\u0447\u0435\u0432 (PDF) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u044f\u0437\u044b\u043a\u0430 C. \u0423\u0447\u0435\u0431\u043d\u043e\u0435 \u043f\u043e\u0441\u043e\u0431\u0438\u0435 - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 (PDF) \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 (PDF) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f C - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u0438/\u0421\u0438++. \u041e\u0442 \u0434\u0438\u043b\u0435\u0442\u0430\u043d\u0442\u0430 \u0434\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u0430 - \u0420\u043e\u043c\u0430\u043d\u043e\u0432 \u0415.\u041b. \u042f\u0437\u044b\u043a \u0421\u0438 \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a C Sharp \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 C# \u0438 .NET - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0421# 7.0 \u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 .NET 4.7 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u0435\u0442\u0435\u0432\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0421# \u0438 .NET - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 C++ \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u044f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0421++ - \u0411\u044c\u0435\u0440\u043d \u0421\u0442\u0440\u0430\u0443\u0441\u0442\u0440\u0443\u043f \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u044f\u0437\u044b\u043a \u0421\u0438++ - \u0410\u043d\u0434\u0440\u0435\u0439 \u0421\u0442\u043e\u043b\u044f\u0440\u043e\u0432 (PDF) \u0412\u0432\u043e\u0434\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u0421\u0438++ - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f C++ - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e C++ - \u0411\u044c\u0435\u0440\u043d \u0421\u0442\u0440\u0430\u0443\u0441\u0442\u0440\u0443\u043f \u0423\u0440\u043e\u043a\u0438 \u043f\u043e OpenGL 3 - \u0413\u0443\u0440\u0435\u0432\u0438\u0447 \u0410\u0440\u0442\u0451\u043c Clojure \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Clojure - \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041e\u0442\u0442 CoffeeScript The Little Book on CoffeeScript - \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0410\u043d\u0434\u0440\u0435\u044f \u0420\u043e\u043c\u0430\u043d\u043e\u0432\u0430 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f CoffeeScript - Jeremy Ashkenas Elasticsearch \u0423\u0440\u043e\u043a\u0438 \u043f\u043e Elasticsearch Elixir \u0423\u0440\u043e\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Elixir Erlang \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u042d\u0440\u043b\u0430\u043d\u0433\u0435 - \u0414\u0436\u043e \u0410\u0440\u043c\u0441\u0442\u0440\u043e\u043d\u0433 Git Pro Git \u0412\u043e\u043b\u0448\u0435\u0431\u0441\u0442\u0432\u043e Git - Ben Lynn \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 Git \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Git - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 Go Go \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 The Little Go Book (\u043f\u0435\u0440\u0435\u0432\u043e\u0434) \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Go - \u041a\u0430\u043b\u0435\u0431 \u0414\u043e\u043a\u0441\u0438 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 Go - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 Go Haskell Developing Web Applications with Haskell and Yesod - \u041c\u0430\u0439\u043a\u043b \u0421\u043d\u043e\u0439\u043c\u0435\u043d Haskell: \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u0412.\u041d. \u0412\u043b\u0430\u0441\u043e\u0432 \u041e Haskell \u043f\u043e-\u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438 - \u0414\u0435\u043d\u0438\u0441 \u0428\u0435\u0432\u0447\u0435\u043d\u043a\u043e \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u043f\u043e Haskell - \u0410\u043d\u0442\u043e\u043d \u0425\u043e\u043b\u043e\u043c\u044c\u0451\u0432 \u042f\u0437\u044b\u043a \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Haskell 98 - Simon Peyton Jones HTML / CSS CSS \u0438 CSS3 - \u0415\u043b\u0435\u043d\u0430 \u041d\u0430\u0437\u0430\u0440\u043e\u0432\u0430 HTML \u0438 HTML5 - \u0415\u043b\u0435\u043d\u0430 \u041d\u0430\u0437\u0430\u0440\u043e\u0432\u0430 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e HTML5 \u0438 CSS3 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a CSS - \u0412\u043b\u0430\u0434 \u041c\u0435\u0440\u0436\u0435\u0432\u0438\u0447 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e HTML - \u0412\u043b\u0430\u0434 \u041c\u0435\u0440\u0436\u0435\u0432\u0438\u0447 Bootstrap Bootstrap 4 Java Java Basics Java Programming for Kids, Parents and Grandparents - Yakov Fain \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Java Core - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Servlets - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Java - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u0430\u043c\u043e\u0443\u0447\u0438\u0442\u0435\u043b\u044c \u043f\u043e Java \u0441 \u043d\u0443\u043b\u044f - Vertex Academy \u0421\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e Java Core \u0421\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e Java EE \u0423\u0447\u0435\u0431\u043d\u0438\u043a Java 8 - \u0424\u0451\u0434\u043e\u0440 \u0423\u0440\u0432\u0430\u043d\u043e\u0432 \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u043f\u043e Java 8 - Vertex Academy \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u043f\u043e Java 9 - Vertex Academy \u042f\u0437\u044b\u043a Java 8 Android \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0434 Android - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0423\u0440\u043e\u043a\u0438 \u043f\u043e Android EasyMock EasyMock 3 Hibernate Hibernate \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Hibernate - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 JDBC JDBC \u0438 Spring JDBC \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e JDBC - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 JUnit JUnit 4 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e JUnit - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 Maven Apache Maven \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Maven - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 Spring Spring Framework \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Spring - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 JavaScript JavaScript Garden - \u0418\u0432\u043e \u0412\u0435\u0442\u0446\u0435\u043b\u044c JavaScript \u0438 jQuery - \u0415\u043b\u0435\u043d\u0430 \u041d\u0430\u0437\u0430\u0440\u043e\u0432\u0430 \u0412\u044b\u0440\u0430\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 JavaScript - Marijn Haverbeke \u041a\u0443\u0440\u0441 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e JavaScript - bxnotes \u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u043d\u0438\u0433\u0430 \u043f\u043e WebGL - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0434\u043b\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u0445 JavaScript-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 - \u042d\u0434\u0434\u0438 \u041e\u0441\u043c\u0430\u043d\u0438 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e JavaScript - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0443\u0447\u0435\u0431\u043d\u0438\u043a JavaScript - \u0418\u043b\u044c\u044f \u041a\u0430\u043d\u0442\u043e\u0440 AngularJS \u041e\u043d\u043b\u0430\u0439\u043d-\u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e AngularJS - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 jQuery jQuery \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 - \u0410\u043d\u0442\u043e\u043d \u0428\u0435\u0432\u0447\u0443\u043a \u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u043d\u0438\u0433\u0430 \"\u0418\u0437\u0443\u0447\u0430\u0435\u043c jQuery\" - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e API jQuery Node.js Node.js \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 - Manuel Kiessling \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Node.js - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 Nuxt.js \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 React \u041f\u0443\u0442\u044c \u043a \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044e React - \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u044b\u043b\u044c\u0446\u044b\u043d (PDF, ePub, MOBI) (\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043d\u0430 Leanpub \u0438\u043b\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e React - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0423\u0440\u043e\u043a\u0438 \u043f\u043e React Vue.js \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Vue.js - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 Kotlin \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 Kotlin \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 Kotlin - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 LaTeX LaTeX, GNU/Linux \u0438 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0441\u0442\u0438\u043b\u044c (\u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0441\u0442\u0430\u0442\u0435\u0439) LaTeX \u0437\u0430 \u0442\u0440\u0438 \u0434\u043d\u044f - \u0410\u043d\u0434\u0440\u0435\u0439 \u0421\u0442\u043e\u043b\u044f\u0440\u043e\u0432 (PDF) Lisp Common Lisp Cookbook (\u043f\u0435\u0440\u0435\u0432\u043e\u0434) Lisp In Small Pieces (translation) Practical Common Lisp (\u043f\u0435\u0440\u0435\u0432\u043e\u0434) (PDF) MetaPost \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u0432 MetaPost .NET \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e ADO.NET \u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e ASP.NET Core 2.0 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e ASP.NET MVC 5 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e ASP.NET Web API 2 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e EF Core - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Entity Framework - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 NoSQL \u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u043a\u043d\u0438\u0433\u0430 \u043e MongoDB - \u041a\u0430\u0440\u043b \u0421\u0435\u0433\u0443\u0438\u043d (PDF) \u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u043a\u043d\u0438\u0433\u0430 \u043e Redis - \u041a\u0430\u0440\u043b \u0421\u0435\u0433\u0443\u0438\u043d \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e MongoDB - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 Objective-C Become an XCoder \u0425\u0440\u0435\u0441\u0442\u043e\u043c\u0430\u0442\u0438\u044f iOS \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 (PDF) \u0426\u0438\u043a\u043b \u0441\u0442\u0430\u0442\u0435\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0434 Apple iOS Perl Pragmatic Perl - \u0436\u0443\u0440\u043d\u0430\u043b \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Perl - \u041c\u0430\u0441\u043b\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440 \u0412\u0438\u043a\u0442\u043e\u0440\u043e\u0432\u0438\u0447 \u041a\u0440\u0430\u0442\u043a\u0438\u0439 \u044d\u043a\u0441\u043a\u0443\u0440\u0441 \u0432 Perl-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u0414\u043e\u043a\u0443\u0447\u0430\u0435\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 PHP PHP: \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u041f\u0443\u0442\u044c \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e PHP \u0421\u0430\u043c\u043e\u0443\u0447\u0438\u0442\u0435\u043b\u044c (\u0443\u0447\u0435\u0431\u043d\u0438\u043a) \u043f\u043e PHP CakePHP \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e CodeIgniter CodeIgniter - \u0418\u0433\u043e\u0440\u044c \u0411\u0443\u043a\u0448\u0430 Laravel \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f 5.x \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 Python Problem Solving with Algorithms and Data Structures Python. unittest - \u0410\u0431\u0434\u0440\u0430\u0445\u043c\u0430\u043d\u043e\u0432 \u041c.\u0418 Python. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 Python. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 Python. \u0423\u0440\u043e\u043a\u0438 - \u0410\u0431\u0434\u0440\u0430\u0445\u043c\u0430\u043d\u043e\u0432 \u041c.\u0418. Tkinter. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 \u0412\u0433\u043b\u0443\u0431\u044c \u044f\u0437\u044b\u043a\u0430 Python \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 Python - \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0424\u0451\u0434\u043e\u0440\u043e\u0432 (PDF) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u0430\u043c\u043e\u0443\u0447\u0438\u0442\u0435\u043b\u044c Python (PDF) \u0423\u043a\u0443\u0441 \u041f\u0438\u0442\u043e\u043d\u0430 - Swaroop C H \u0423\u0447\u0435\u0431\u043d\u0438\u043a Python 2.6 - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a Django \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e Django Girls (1.11) (HTML) (:construction: in process ) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0432\u0435\u0431-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0443 Django - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 R \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 R \u0420\u0430\u043d\u0434\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0431\u0443\u0442\u0441\u0442\u0440\u0435\u043f: \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432 \u0431\u0438\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c R. (PDF) Reverse engineering \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 reverse engineering \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 - \u0414\u0435\u043d\u0438\u0441 \u042e\u0440\u0438\u0447\u0435\u0432 (PDF) Ruby Ruby - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a Ruby Book - \u041a\u0440\u0443\u0433\u043b\u043e\u0432 \u0410. Ruby \u0437\u0430 \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u043c\u0438\u043d\u0443\u0442 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - matz \u0423\u0447\u0438\u0441\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c - \u041a\u0440\u0438\u0441 \u041f\u0430\u0439\u043d RSpec Better Specs (RSpec Guidelines with Ruby) Ruby on Rails Ruby on Rails Tutorial. \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 Rails \u043d\u0430 \u041f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u041c\u0430\u0439\u043a\u043b \u0425\u0430\u0440\u0442\u043b Ruby on Rails \u043f\u043e-\u0440\u0443\u0441\u0441\u043a\u0438 Rust Rust \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0420\u0430\u0441\u0442\u043e\u043d\u043e\u043c\u0438\u043a\u043e\u043d \u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Rust Scala Effective Scala - Marius Eriksen Scala \u0428\u043a\u043e\u043b\u0430! - Twitter \u041f\u0443\u0442\u0435\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u043d\u0435\u043e\u0444\u0438\u0442\u0430 \u043f\u043e Scala (\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0441\u0435\u0440\u0438\u0438 \u0441\u0442\u0430\u0442\u0435\u0439 \u0414\u0430\u043d\u0438\u0435\u043b\u044f \u0412\u0435\u0441\u0442\u0441\u0430\u0439\u0434\u0430) - \u0410\u043d\u0442\u043e\u043d \u0425\u043e\u043b\u043e\u043c\u044c\u0451\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Scala - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 Scilab \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Scilab \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Scilab Scratch \u041a\u0440\u0435\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (PDF) Smalltalk \u0421\u043c\u043e\u043b\u0442\u043e\u043a: \u042f\u0437\u044b\u043a \u0438 \u0435\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f - \u0410\u0434\u044d\u043b\u044c \u0413\u043e\u043b\u0434\u0431\u0435\u0440\u0433, \u0414\u044d\u0432\u0438\u0434 \u0420\u043e\u0431\u0441\u043e\u043d SQL \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 MySQL, MS SQL Server \u0438 Oracle \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 - \u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u041a\u0443\u043b\u0438\u043a\u043e\u0432 (PDF) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e MS SQL Server 2017 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e SQL - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u042f\u0437\u044b\u043a SQL. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u0443\u0440\u0441 (PDF) PostgreSQL PostgreSQL \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 (PDF) \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f (PDF) \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e PostgreSQL - Linux Format \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL - \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u0410. \u042e. \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432 TypeScript \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 Typescript \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e TypeScript - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 Unix Beyond Linux From Scratch (version 2011-12-30) Linux From Scratch (version 6.8) The Linux Kernel Module Programming Guide - Peter Jay Salzman, Michael Burian, Ori Pomerantz \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b Unix - Maurice J. Bach \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Linux. \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 - Machtelt Garrels \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0435 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 UNIX - \u041c\u043e\u0448\u043a\u043e\u0432 \u041c\u0430\u043a\u0441\u0438\u043c \u0415\u0432\u0433\u0435\u043d\u044c\u0435\u0432\u0438\u0447 \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u042f\u0434\u0440\u0430 Linux 2.4 - Tigran Aivazian \u041f\u0435\u0440\u0435\u0432\u043e\u0434 Linux kernel and C library. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Linux \u0441 \u043d\u0443\u043b\u044f - Nikolay N. Ivanov \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430 \u0434\u043b\u044f Linux - Sven Goldt, Matt Welsh \u042d\u043d\u0446\u0438\u043a\u043b\u043e\u043f\u0435\u0434\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430 Linux - \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u0430\u0443\u0442\u043e\u0432 \u042d\u043d\u0446\u0438\u043a\u043b\u043e\u043f\u0435\u0434\u0438\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u044f\u0434\u0440\u0430 Linux - Ori Pomerantz Vim \u041f\u043e\u0432\u0430\u0440\u0435\u043d\u043d\u0430\u044f \u041a\u043d\u0438\u0433\u0430 Vim - Steve Oualline \u041f\u0440\u043e\u0441\u0442\u043e \u043e Vim (PDF)","title":"Programming Books RU"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#index","text":"0 - Language Agnostic Open Source Ecosystem \u041e\u0431\u043b\u0430\u0447\u043d\u044b\u0435 \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u041f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u044b \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0420\u0430\u0431\u043e\u0442\u0430 c c\u0435\u0442\u044c\u044e \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438 Angular Assembly Bash C C# C++ Clojure CoffeeScript Elasticsearch Elixir Erlang Git Go Haskell HTML / CSS Bootstrap Java Android EasyMock Hibernate JDBC JUnit Maven Spring JavaScript AngularJS jQuery Node.js nuxt.js React vue.js Kotlin LaTeX Lisp MetaPost .NET NoSQL Objective-C Perl PHP CakePHP CodeIgniter Laravel Python Django R Reverse engineering Ruby RSpec Ruby on Rails Rust Scala Scilab Scratch Smalltalk SQL PostgreSQL TypeScript Unix Vim","title":"Index"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#0-language-agnostic","text":"3D-\u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Blender - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 E-maxx.ru: \u0421\u0431\u043e\u0440\u043d\u0438\u043a \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043d\u0430 C++ (PDF) Scrum \u0438 XP: \u0437\u0430\u043c\u0435\u0442\u043a\u0438 \u0441 \u043f\u0435\u0440\u0435\u0434\u043e\u0432\u043e\u0439 (PDF) \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 - \u041c\u0438\u0445\u0430\u0438\u043b \u041a\u0443\u0440\u043d\u043e\u0441\u043e\u0432 (PDF) \u0417\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0421\u0430\u043c\u043e\u0443\u0447\u0438\u0442\u0435\u043b\u044c - \u041c\u043e\u0437\u0433\u043e\u0432\u043e\u0439 \u041c.\u0412. (PDF) \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0412\u0441\u0435\u0432\u043e\u043b\u043e\u0434 \u0414\u0451\u043c\u043a\u0438\u043d (PDF) \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e - \u0421\u0442\u043e\u043b\u044f\u0440\u043e\u0432 \u0410\u043d\u0434\u0440\u0435\u0439 \u0412\u0438\u043a\u0442\u043e\u0440\u043e\u0432\u0438\u0447 (:construction:) (PDF) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e HTTP - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e SOAP - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u0443\u0440\u0441. - \u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u041a\u0443\u043b\u0438\u043a\u043e\u0432 (PDF) \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 - \u041a\u0443\u0437\u044e\u0440\u0438\u043d \u041d.\u041d., \u0424\u043e\u043c\u0438\u043d \u0421.\u0410.","title":"0 - Language Agnostic"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#_1","text":"\u0420\u0430\u0437\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 HTTP2 - \u0414\u0430\u043d\u0438\u044d\u043b\u044c \u0428\u0442\u0435\u043d\u0431\u0435\u0440\u0433 (PDF)","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#open-source-ecosystem","text":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c","title":"Open Source Ecosystem"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#_2","text":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0443\u043b\u044c\u0442\u0438\u0442\u0435\u043d\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u0431\u043b\u0430\u043a\u0430, \u0438\u0437\u0434\u0430\u043d\u0438\u0435 3-\u0435","title":"\u041e\u0431\u043b\u0430\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#_3","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - John Harrison \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u0436\u0443\u0440\u043d\u0430\u043b","title":"\u041f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#_4","text":"\u041f\u043e\u0441\u043e\u0431\u0438\u0435 \u043f\u043e Ansible - Michel Blanc","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#angular","text":"Angular 5. \u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e - Maximilian Schwarzm\u00fcller \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Angular - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432","title":"Angular"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#assembly","text":"\u0410\u0441\u0441\u0435\u043c\u0431\u043b\u0435\u0440 \u0432 Linux \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 C - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a \u0410\u0441\u0441\u0435\u043c\u0431\u043b\u0435\u0440 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432 \u041c\u0438\u043a\u0440\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u044b \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 \"\u042d\u043b\u044c\u0431\u0440\u0443\u0441\" (PDF) \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u0430\u0441\u0441\u0435\u043c\u0431\u043b\u0435\u0440\u0430 NASM \u0434\u043b\u044f \u041e\u0421 Unix - \u0410\u043d\u0434\u0440\u0435\u0439 \u0421\u0442\u043e\u043b\u044f\u0440\u043e\u0432 (PDF)","title":"Assembly"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#bash","text":"Advanced Bash-Scripting Guide","title":"Bash"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#c","text":"\u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u043e \u044f\u0437\u044b\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0421\u0438/\u0421\u0438++ - \u0414\u0435\u043d\u0438\u0441 \u042e\u0440\u0438\u0447\u0435\u0432 (PDF) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u044f\u0437\u044b\u043a\u0430 C. \u0423\u0447\u0435\u0431\u043d\u043e\u0435 \u043f\u043e\u0441\u043e\u0431\u0438\u0435 - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 (PDF) \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 (PDF) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f C - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u0438/\u0421\u0438++. \u041e\u0442 \u0434\u0438\u043b\u0435\u0442\u0430\u043d\u0442\u0430 \u0434\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u0430 - \u0420\u043e\u043c\u0430\u043d\u043e\u0432 \u0415.\u041b. \u042f\u0437\u044b\u043a \u0421\u0438 \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a","title":"C"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#c-sharp","text":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 C# \u0438 .NET - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0421# 7.0 \u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 .NET 4.7 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u0435\u0442\u0435\u0432\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0421# \u0438 .NET - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432","title":"C Sharp"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#c_1","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u044f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0421++ - \u0411\u044c\u0435\u0440\u043d \u0421\u0442\u0440\u0430\u0443\u0441\u0442\u0440\u0443\u043f \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u044f\u0437\u044b\u043a \u0421\u0438++ - \u0410\u043d\u0434\u0440\u0435\u0439 \u0421\u0442\u043e\u043b\u044f\u0440\u043e\u0432 (PDF) \u0412\u0432\u043e\u0434\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u0421\u0438++ - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f C++ - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e C++ - \u0411\u044c\u0435\u0440\u043d \u0421\u0442\u0440\u0430\u0443\u0441\u0442\u0440\u0443\u043f \u0423\u0440\u043e\u043a\u0438 \u043f\u043e OpenGL 3 - \u0413\u0443\u0440\u0435\u0432\u0438\u0447 \u0410\u0440\u0442\u0451\u043c","title":"C++"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#clojure","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Clojure - \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041e\u0442\u0442","title":"Clojure"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#coffeescript","text":"The Little Book on CoffeeScript - \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0410\u043d\u0434\u0440\u0435\u044f \u0420\u043e\u043c\u0430\u043d\u043e\u0432\u0430 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f CoffeeScript - Jeremy Ashkenas","title":"CoffeeScript"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#elasticsearch","text":"\u0423\u0440\u043e\u043a\u0438 \u043f\u043e Elasticsearch","title":"Elasticsearch"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#elixir","text":"\u0423\u0440\u043e\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Elixir","title":"Elixir"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#erlang","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u042d\u0440\u043b\u0430\u043d\u0433\u0435 - \u0414\u0436\u043e \u0410\u0440\u043c\u0441\u0442\u0440\u043e\u043d\u0433","title":"Erlang"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#git","text":"Pro Git \u0412\u043e\u043b\u0448\u0435\u0431\u0441\u0442\u0432\u043e Git - Ben Lynn \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 Git \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Git - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432","title":"Git"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#go","text":"Go \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 The Little Go Book (\u043f\u0435\u0440\u0435\u0432\u043e\u0434) \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Go - \u041a\u0430\u043b\u0435\u0431 \u0414\u043e\u043a\u0441\u0438 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 Go - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 Go","title":"Go"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#haskell","text":"Developing Web Applications with Haskell and Yesod - \u041c\u0430\u0439\u043a\u043b \u0421\u043d\u043e\u0439\u043c\u0435\u043d Haskell: \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u0412.\u041d. \u0412\u043b\u0430\u0441\u043e\u0432 \u041e Haskell \u043f\u043e-\u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438 - \u0414\u0435\u043d\u0438\u0441 \u0428\u0435\u0432\u0447\u0435\u043d\u043a\u043e \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u043f\u043e Haskell - \u0410\u043d\u0442\u043e\u043d \u0425\u043e\u043b\u043e\u043c\u044c\u0451\u0432 \u042f\u0437\u044b\u043a \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Haskell 98 - Simon Peyton Jones","title":"Haskell"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#html-css","text":"CSS \u0438 CSS3 - \u0415\u043b\u0435\u043d\u0430 \u041d\u0430\u0437\u0430\u0440\u043e\u0432\u0430 HTML \u0438 HTML5 - \u0415\u043b\u0435\u043d\u0430 \u041d\u0430\u0437\u0430\u0440\u043e\u0432\u0430 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e HTML5 \u0438 CSS3 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a CSS - \u0412\u043b\u0430\u0434 \u041c\u0435\u0440\u0436\u0435\u0432\u0438\u0447 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e HTML - \u0412\u043b\u0430\u0434 \u041c\u0435\u0440\u0436\u0435\u0432\u0438\u0447","title":"HTML / CSS"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#bootstrap","text":"Bootstrap 4","title":"Bootstrap"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#java","text":"Java Basics Java Programming for Kids, Parents and Grandparents - Yakov Fain \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Java Core - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Servlets - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Java - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u0430\u043c\u043e\u0443\u0447\u0438\u0442\u0435\u043b\u044c \u043f\u043e Java \u0441 \u043d\u0443\u043b\u044f - Vertex Academy \u0421\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e Java Core \u0421\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e Java EE \u0423\u0447\u0435\u0431\u043d\u0438\u043a Java 8 - \u0424\u0451\u0434\u043e\u0440 \u0423\u0440\u0432\u0430\u043d\u043e\u0432 \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u043f\u043e Java 8 - Vertex Academy \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u043f\u043e Java 9 - Vertex Academy \u042f\u0437\u044b\u043a Java 8","title":"Java"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#android","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0434 Android - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0423\u0440\u043e\u043a\u0438 \u043f\u043e Android","title":"Android"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#easymock","text":"EasyMock 3","title":"EasyMock"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#hibernate","text":"Hibernate \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Hibernate - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432","title":"Hibernate"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#jdbc","text":"JDBC \u0438 Spring JDBC \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e JDBC - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432","title":"JDBC"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#junit","text":"JUnit 4 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e JUnit - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432","title":"JUnit"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#maven","text":"Apache Maven \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Maven - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432","title":"Maven"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#spring","text":"Spring Framework \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Spring - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432","title":"Spring"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#javascript","text":"JavaScript Garden - \u0418\u0432\u043e \u0412\u0435\u0442\u0446\u0435\u043b\u044c JavaScript \u0438 jQuery - \u0415\u043b\u0435\u043d\u0430 \u041d\u0430\u0437\u0430\u0440\u043e\u0432\u0430 \u0412\u044b\u0440\u0430\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 JavaScript - Marijn Haverbeke \u041a\u0443\u0440\u0441 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e JavaScript - bxnotes \u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u043d\u0438\u0433\u0430 \u043f\u043e WebGL - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0434\u043b\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u0445 JavaScript-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 - \u042d\u0434\u0434\u0438 \u041e\u0441\u043c\u0430\u043d\u0438 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e JavaScript - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0443\u0447\u0435\u0431\u043d\u0438\u043a JavaScript - \u0418\u043b\u044c\u044f \u041a\u0430\u043d\u0442\u043e\u0440","title":"JavaScript"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#angularjs","text":"\u041e\u043d\u043b\u0430\u0439\u043d-\u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e AngularJS - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","title":"AngularJS"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#jquery","text":"jQuery \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 - \u0410\u043d\u0442\u043e\u043d \u0428\u0435\u0432\u0447\u0443\u043a \u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u043d\u0438\u0433\u0430 \"\u0418\u0437\u0443\u0447\u0430\u0435\u043c jQuery\" - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e API jQuery","title":"jQuery"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#nodejs","text":"Node.js \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 - Manuel Kiessling \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Node.js - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432","title":"Node.js"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#nuxtjs","text":"\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","title":"Nuxt.js"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#react","text":"\u041f\u0443\u0442\u044c \u043a \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044e React - \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u044b\u043b\u044c\u0446\u044b\u043d (PDF, ePub, MOBI) (\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043d\u0430 Leanpub \u0438\u043b\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e React - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0423\u0440\u043e\u043a\u0438 \u043f\u043e React","title":"React"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#vuejs","text":"\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Vue.js - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432","title":"Vue.js"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#kotlin","text":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 Kotlin \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 Kotlin - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432","title":"Kotlin"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#latex","text":"LaTeX, GNU/Linux \u0438 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0441\u0442\u0438\u043b\u044c (\u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0441\u0442\u0430\u0442\u0435\u0439) LaTeX \u0437\u0430 \u0442\u0440\u0438 \u0434\u043d\u044f - \u0410\u043d\u0434\u0440\u0435\u0439 \u0421\u0442\u043e\u043b\u044f\u0440\u043e\u0432 (PDF)","title":"LaTeX"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#lisp","text":"Common Lisp Cookbook (\u043f\u0435\u0440\u0435\u0432\u043e\u0434) Lisp In Small Pieces (translation) Practical Common Lisp (\u043f\u0435\u0440\u0435\u0432\u043e\u0434) (PDF)","title":"Lisp"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#metapost","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u0432 MetaPost","title":"MetaPost"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#net","text":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e ADO.NET \u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e ASP.NET Core 2.0 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e ASP.NET MVC 5 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e ASP.NET Web API 2 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e EF Core - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Entity Framework - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432","title":".NET"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#nosql","text":"\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u043a\u043d\u0438\u0433\u0430 \u043e MongoDB - \u041a\u0430\u0440\u043b \u0421\u0435\u0433\u0443\u0438\u043d (PDF) \u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u043a\u043d\u0438\u0433\u0430 \u043e Redis - \u041a\u0430\u0440\u043b \u0421\u0435\u0433\u0443\u0438\u043d \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e MongoDB - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432","title":"NoSQL"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#objective-c","text":"Become an XCoder \u0425\u0440\u0435\u0441\u0442\u043e\u043c\u0430\u0442\u0438\u044f iOS \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 (PDF) \u0426\u0438\u043a\u043b \u0441\u0442\u0430\u0442\u0435\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0434 Apple iOS","title":"Objective-C"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#perl","text":"Pragmatic Perl - \u0436\u0443\u0440\u043d\u0430\u043b \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Perl - \u041c\u0430\u0441\u043b\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440 \u0412\u0438\u043a\u0442\u043e\u0440\u043e\u0432\u0438\u0447 \u041a\u0440\u0430\u0442\u043a\u0438\u0439 \u044d\u043a\u0441\u043a\u0443\u0440\u0441 \u0432 Perl-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u0414\u043e\u043a\u0443\u0447\u0430\u0435\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439","title":"Perl"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#php","text":"PHP: \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u041f\u0443\u0442\u044c \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e PHP \u0421\u0430\u043c\u043e\u0443\u0447\u0438\u0442\u0435\u043b\u044c (\u0443\u0447\u0435\u0431\u043d\u0438\u043a) \u043f\u043e PHP","title":"PHP"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#cakephp","text":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e","title":"CakePHP"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#codeigniter","text":"CodeIgniter - \u0418\u0433\u043e\u0440\u044c \u0411\u0443\u043a\u0448\u0430","title":"CodeIgniter"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#laravel","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f 5.x \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","title":"Laravel"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#python","text":"Problem Solving with Algorithms and Data Structures Python. unittest - \u0410\u0431\u0434\u0440\u0430\u0445\u043c\u0430\u043d\u043e\u0432 \u041c.\u0418 Python. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 Python. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 Python. \u0423\u0440\u043e\u043a\u0438 - \u0410\u0431\u0434\u0440\u0430\u0445\u043c\u0430\u043d\u043e\u0432 \u041c.\u0418. Tkinter. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 - C. \u0428\u0430\u043f\u043e\u0448\u043d\u0438\u043a\u043e\u0432\u0430 \u0412\u0433\u043b\u0443\u0431\u044c \u044f\u0437\u044b\u043a\u0430 Python \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 Python - \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0424\u0451\u0434\u043e\u0440\u043e\u0432 (PDF) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u044f\u0437\u044b\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0421\u0430\u043c\u043e\u0443\u0447\u0438\u0442\u0435\u043b\u044c Python (PDF) \u0423\u043a\u0443\u0441 \u041f\u0438\u0442\u043e\u043d\u0430 - Swaroop C H \u0423\u0447\u0435\u0431\u043d\u0438\u043a Python 2.6 - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a","title":"Python"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#django","text":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e Django Girls (1.11) (HTML) (:construction: in process ) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0432\u0435\u0431-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0443 Django - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432","title":"Django"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#r","text":"\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 R \u0420\u0430\u043d\u0434\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0431\u0443\u0442\u0441\u0442\u0440\u0435\u043f: \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432 \u0431\u0438\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c R. (PDF)","title":"R"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#reverse-engineering","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 reverse engineering \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 - \u0414\u0435\u043d\u0438\u0441 \u042e\u0440\u0438\u0447\u0435\u0432 (PDF)","title":"Reverse engineering"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#ruby","text":"Ruby - \u0412\u0438\u043a\u0438\u0443\u0447\u0435\u0431\u043d\u0438\u043a Ruby Book - \u041a\u0440\u0443\u0433\u043b\u043e\u0432 \u0410. Ruby \u0437\u0430 \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c \u043c\u0438\u043d\u0443\u0442 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - matz \u0423\u0447\u0438\u0441\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c - \u041a\u0440\u0438\u0441 \u041f\u0430\u0439\u043d","title":"Ruby"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#rspec","text":"Better Specs (RSpec Guidelines with Ruby)","title":"RSpec"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#ruby-on-rails","text":"Ruby on Rails Tutorial. \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 Rails \u043d\u0430 \u041f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u041c\u0430\u0439\u043a\u043b \u0425\u0430\u0440\u0442\u043b Ruby on Rails \u043f\u043e-\u0440\u0443\u0441\u0441\u043a\u0438","title":"Ruby on Rails"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#rust","text":"Rust \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0420\u0430\u0441\u0442\u043e\u043d\u043e\u043c\u0438\u043a\u043e\u043d \u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Rust","title":"Rust"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#scala","text":"Effective Scala - Marius Eriksen Scala \u0428\u043a\u043e\u043b\u0430! - Twitter \u041f\u0443\u0442\u0435\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u043d\u0435\u043e\u0444\u0438\u0442\u0430 \u043f\u043e Scala (\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0441\u0435\u0440\u0438\u0438 \u0441\u0442\u0430\u0442\u0435\u0439 \u0414\u0430\u043d\u0438\u0435\u043b\u044f \u0412\u0435\u0441\u0442\u0441\u0430\u0439\u0434\u0430) - \u0410\u043d\u0442\u043e\u043d \u0425\u043e\u043b\u043e\u043c\u044c\u0451\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Scala - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432","title":"Scala"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#scilab","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Scilab \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Scilab","title":"Scilab"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#scratch","text":"\u041a\u0440\u0435\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (PDF)","title":"Scratch"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#smalltalk","text":"\u0421\u043c\u043e\u043b\u0442\u043e\u043a: \u042f\u0437\u044b\u043a \u0438 \u0435\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f - \u0410\u0434\u044d\u043b\u044c \u0413\u043e\u043b\u0434\u0431\u0435\u0440\u0433, \u0414\u044d\u0432\u0438\u0434 \u0420\u043e\u0431\u0441\u043e\u043d","title":"Smalltalk"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#sql","text":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 MySQL, MS SQL Server \u0438 Oracle \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 - \u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u041a\u0443\u043b\u0438\u043a\u043e\u0432 (PDF) \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e MS SQL Server 2017 - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e SQL - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0443\u043b\u0435\u0439\u043c\u0430\u043d\u043e\u0432 \u042f\u0437\u044b\u043a SQL. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u0443\u0440\u0441 (PDF)","title":"SQL"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#postgresql","text":"PostgreSQL \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 (PDF) \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f (PDF) \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e PostgreSQL - Linux Format \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL - \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u0410. \u042e. \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432","title":"PostgreSQL"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#typescript","text":"\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 Typescript \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e TypeScript - \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041f\u043e\u043f\u043e\u0432","title":"TypeScript"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#unix","text":"Beyond Linux From Scratch (version 2011-12-30) Linux From Scratch (version 6.8) The Linux Kernel Module Programming Guide - Peter Jay Salzman, Michael Burian, Ori Pomerantz \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b Unix - Maurice J. Bach \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Linux. \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 - Machtelt Garrels \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0435 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 UNIX - \u041c\u043e\u0448\u043a\u043e\u0432 \u041c\u0430\u043a\u0441\u0438\u043c \u0415\u0432\u0433\u0435\u043d\u044c\u0435\u0432\u0438\u0447 \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u042f\u0434\u0440\u0430 Linux 2.4 - Tigran Aivazian \u041f\u0435\u0440\u0435\u0432\u043e\u0434 Linux kernel and C library. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Linux \u0441 \u043d\u0443\u043b\u044f - Nikolay N. Ivanov \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430 \u0434\u043b\u044f Linux - Sven Goldt, Matt Welsh \u042d\u043d\u0446\u0438\u043a\u043b\u043e\u043f\u0435\u0434\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430 Linux - \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u0430\u0443\u0442\u043e\u0432 \u042d\u043d\u0446\u0438\u043a\u043b\u043e\u043f\u0435\u0434\u0438\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u044f\u0434\u0440\u0430 Linux - Ori Pomerantz","title":"Unix"},{"location":"Education/Free_Programming_Books/Programming_Books_RU/#vim","text":"\u041f\u043e\u0432\u0430\u0440\u0435\u043d\u043d\u0430\u044f \u041a\u043d\u0438\u0433\u0430 Vim - Steve Oualline \u041f\u0440\u043e\u0441\u0442\u043e \u043e Vim (PDF)","title":"Vim"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/","text":"Index Bash C C# C++ Clojure CoffeeScript Erlang F# Git GLSL Go Haskell HTML / CSS Java Javascript Angular.js Language Agnostic Operating Systems Lisp MATLAB Node NoSQL Objective-C Ocaml PHP Python Ruby Scala SQL Vim Bash Help messages will explain everything Learn Shell Programming C Learn C C Sharp Learn C# C++ CppKoans Clojure 4Clojure - Koans Clojure Koans ClojureScript Koans Try Clojure CoffeeScript Coffeescript Style Guide Smooth CoffeeScript, Interactive Edition Erlang Try Erlang F Sharp Try F# Git Githug (Tutorial in shell) Learn Git Branching Try Git GLSL The Book of Shaders Go Go Koans The Go Tutorial Haskell Try Haskell! HTML / CSS CSS Diner Flexbox Defense Flexbox Froggy Learn by doing beginner projects Learn HTML & CSS interactively Prototyping a professional website Java CodingBat code practice Learn Java Learneroo Java tutorial JavaScript ABC of JavaScript : An Interactive JavaScript Tutorial Codecademy jquery track ES6 Interactive Guide Functional Programming in Javascript Javascript interactive tutorial on CodeCademy Javascripting Learn JavaScript Learn knockout.js Learning Advanced JavaScript Try jQuery Angular.js Angular Basics AngularJS - Step by Logical Step egghead.io: Learn AngularJS with Tutorial Videos & Training Learn AngularJS with free interactive lessons Language Agnostic CodeCombat - Python, JavaScript, CoffeeScript, Clojure, Lua, Io Codility Python Tutor - Python, Java, JavaScript, TypeScript, Ruby, C, C++ The Fullstack Tutorial for GraphQL Operating systems Learning operating system development using Linux kernel and Raspberry Pi - Sergey Matyukevich (:construction: in process ) Lisp Lisp Koans MATLAB Interactive Tutorials for MATLAB, Simulink, Signal Processing, Controls, and Computational Mathematics Node Node School NoSQL MongoDB Koans Try Redis Objective-C Try Objective-C Ocaml Try Ocaml PHP CodeCademy PHP Learn PHP Python Codecademy Python course How to Think Like a Computer Scientist: Learning with Python, Interactive Edition Learn Python Learn Python Step by Step Python Koans Ruby CodeCademy Ruby Codeschool Ruby paths Ruby Koans The Odin Project Try Ruby Scala A Tour of Scala - an interactive scala tutorial Scala Exercises Selenium Selenium Tutorial - Web Automation SQL SQLBolt Vim Interactive Vim Tutorial","title":"Programming Interactive Tutorials EN"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#index","text":"Bash C C# C++ Clojure CoffeeScript Erlang F# Git GLSL Go Haskell HTML / CSS Java Javascript Angular.js Language Agnostic Operating Systems Lisp MATLAB Node NoSQL Objective-C Ocaml PHP Python Ruby Scala SQL Vim","title":"Index"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#bash","text":"Help messages will explain everything Learn Shell Programming","title":"Bash"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#c","text":"Learn C","title":"C"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#c-sharp","text":"Learn C#","title":"C Sharp"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#c_1","text":"CppKoans","title":"C++"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#clojure","text":"4Clojure - Koans Clojure Koans ClojureScript Koans Try Clojure","title":"Clojure"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#coffeescript","text":"Coffeescript Style Guide Smooth CoffeeScript, Interactive Edition","title":"CoffeeScript"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#erlang","text":"Try Erlang","title":"Erlang"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#f-sharp","text":"Try F#","title":"F Sharp"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#git","text":"Githug (Tutorial in shell) Learn Git Branching Try Git","title":"Git"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#glsl","text":"The Book of Shaders","title":"GLSL"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#go","text":"Go Koans The Go Tutorial","title":"Go"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#haskell","text":"Try Haskell!","title":"Haskell"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#html-css","text":"CSS Diner Flexbox Defense Flexbox Froggy Learn by doing beginner projects Learn HTML & CSS interactively Prototyping a professional website","title":"HTML / CSS"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#java","text":"CodingBat code practice Learn Java Learneroo Java tutorial","title":"Java"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#javascript","text":"ABC of JavaScript : An Interactive JavaScript Tutorial Codecademy jquery track ES6 Interactive Guide Functional Programming in Javascript Javascript interactive tutorial on CodeCademy Javascripting Learn JavaScript Learn knockout.js Learning Advanced JavaScript Try jQuery","title":"JavaScript"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#angularjs","text":"Angular Basics AngularJS - Step by Logical Step egghead.io: Learn AngularJS with Tutorial Videos & Training Learn AngularJS with free interactive lessons","title":"Angular.js"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#language-agnostic","text":"CodeCombat - Python, JavaScript, CoffeeScript, Clojure, Lua, Io Codility Python Tutor - Python, Java, JavaScript, TypeScript, Ruby, C, C++ The Fullstack Tutorial for GraphQL","title":"Language Agnostic"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#operating-systems","text":"Learning operating system development using Linux kernel and Raspberry Pi - Sergey Matyukevich (:construction: in process )","title":"Operating systems"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#lisp","text":"Lisp Koans","title":"Lisp"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#matlab","text":"Interactive Tutorials for MATLAB, Simulink, Signal Processing, Controls, and Computational Mathematics","title":"MATLAB"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#node","text":"Node School","title":"Node"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#nosql","text":"MongoDB Koans Try Redis","title":"NoSQL"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#objective-c","text":"Try Objective-C","title":"Objective-C"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#ocaml","text":"Try Ocaml","title":"Ocaml"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#php","text":"CodeCademy PHP Learn PHP","title":"PHP"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#python","text":"Codecademy Python course How to Think Like a Computer Scientist: Learning with Python, Interactive Edition Learn Python Learn Python Step by Step Python Koans","title":"Python"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#ruby","text":"CodeCademy Ruby Codeschool Ruby paths Ruby Koans The Odin Project Try Ruby","title":"Ruby"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#scala","text":"A Tour of Scala - an interactive scala tutorial Scala Exercises","title":"Scala"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#selenium","text":"Selenium Tutorial - Web Automation","title":"Selenium"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#sql","text":"SQLBolt","title":"SQL"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_EN/#vim","text":"Interactive Vim Tutorial","title":"Vim"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_RU/","text":"Index Git \u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Git \u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 git \u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Open source \u0432\u043e\u0440\u043a\u0448\u043e\u043f\u044b \u0423\u0447\u0438\u0442\u0435\u0441\u044c \u0432\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e!","title":"Programming Interactive Tutorials RU"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_RU/#index","text":"Git \u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","title":"Index"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_RU/#git","text":"\u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 git","title":"Git"},{"location":"Education/Free_Programming_Books/Programming_Interactive_Tutorials_RU/#-","text":"Open source \u0432\u043e\u0440\u043a\u0448\u043e\u043f\u044b \u0423\u0447\u0438\u0442\u0435\u0441\u044c \u0432\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e!","title":"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430"},{"location":"OS/AIX/","text":"Basic programs sh$ ftp ftp.software.ibm.com Name> ftp Password> your e-mail address ftp> cd aix/freeSoftware/aixtoolbox/RPMS/ppc/wget ftp> binary ftp> get wget-1.9.1-1.aix5.1.ppc.rpm ftp> quit sh$ rpm -hUv wget-1.9.1-1.aix5.1.ppc.rpm sh$ wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/ezinstall/ppc sh$ ls getapp-dev.sh getgnome.base.sh getkde3.all.sh Xsession.kde getbase.sh getkde2.all.sh getkde3.base.sh Xsession.kde2 getdesktop.base.sh getkde2.base.sh getkde3.opt.sh getgnome.apps.sh getkde2.opt.sh sh$ chmod +x get*.sh sh$ cd base sh$ ls bash-3.2-1.aix5.2.ppc.rpm rpm-3.0.5-52.aix5.3.ppc.rpm bzip2-1.0.5-3.aix5.3.ppc.rpm rpm-build-3.0.5-52.aix5.3.ppc.rpm gettext-0.10.40-8.aix5.2.ppc.rpm rpm-devel-3.0.5-52.aix5.3.ppc.rpm gzip-1.2.4a-10.aix5.2.ppc.rpm tar-1.14-2.aix5.1.ppc.rpm info-4.6-1.aix5.1.ppc.rpm unzip-5.51-1.aix5.1.ppc.rpm patch-2.5.4-4.aix4.3.ppc.rpm popt-1.7-2.aix5.1.ppc.rpm sh$ rpm -hUv unzip-5.51-1.aix5.1.ppc.rpm sh$ rpm -hUv zip-2.3-3.aix4.3.ppc.rpm sh$ rpm -hUv bash-3.2-1.aix5.2.ppc.rpm sh$ bash bash-3.2# Management # Exit from basic VIOS console to common AIX ksh oem_setup_env # Adminitration and configuration console smit #If you want to use bash as a login shell, you first have to add it to the #list of shells in /etc/security/login.cfg. #Then use `chsh` to change your individual setting. Software installation cd <path_to_package> inutoc . installp -aXY -d<path_to_package> all # Check if package is installed or not: lslpp -L <package_name> Mirroring rootvg extendvg rootvg hdisk1 mirrorvg rootvg bootlist -m normal hdisk0 hdisk1 bosboot -ad hdisk0 bosboot -ad hdisk1 # Checking bootlist -o -m normal Network Shared Ethernet adapter coming soon Hardware # Refresh hardware configuration(aix and vios respectively): cfgmgr cfgdev # Rename hard drive: rendev -l <old_name> -n <new_name> rendev -l hdisk3 -n hdisk33 # Enable PVID: chdev -l hdiskX -a pv=yes # Change reserve policy to hard drive chdev -l hdiskX -a reserve_policy=no_reserve # Clear the owning volume manager from a disk chpv -C hdiskX Virtual devices # Checking all virtual mappings to particular vhost: lsmap -vadapter vhost # Make a virtual hard drive for particular vhost: # -f - flag to forcing device creation if you're making shared hard drive mkvdev [-f] -vdev hdiskX -vadapter vhostX -dev <virtual_device_name> # Make a virtual cd-rom device for particular vhost: mkvdev -fbo -vadapter vhostX -dev <virtual_device_name> Zabbix agent # Dependencies: rpm -ivh ftp://www.oss4aix.org/latest/aix61/gettext-0.10.40-8.aix5.2.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/expat-2.1.0-1.aix5.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libgcc-4.7.2-1.aix6.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libffi-3.0.11-2.aix5.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/glib2-2.30.3-1.aix5.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libiconv-1.14-2.aix5.1.ppc.rpm # Main mkgroup zabbix useradd -g zabbix zabbix mkdir /var/run/zabbix touch /var/run/zabbix/zabbix_agentd.pid mkdir /var/log/zabbix touch /var/log/zabbix/zabbix_agentd.log chown -R zabbix:zabbix /var/log/zabbix chown -R zabbix:zabbix /var/run/zabbix chown zabbix:zabbix /etc/zabbix_agentd.conf /usr/sbin/zabbix_agentd --config /etc/zabbix_agentd.conf vi /etc/inittab zabagent:2:once:/usr/sbin/zabbix_agentd --config /etc/zabbix_agentd.conf Update BOS # Download SP and TL update # Unpack update archive to NFS folder # Mount NFS folder on target server mount <nfs_server_name>:/home/padmin /mnt/nfs # Remove old standby BOS instance # R - remove, p - preview (do not perform actual run) multibos -Rp multibos -R # Create new stanby BOS instance # X - expand file system if needed, s - setup, p - preview multibos -Xsp multibos -Xs # Check bootorder bootlist -m normal -o # Checking newly created BOS multibos -S MULTIBOS> oslevel -s MULTIBOS> exit # Update of newly created stanby BOS # X - expand file system if needed, c - custamized update, p - preview, l - location multibos -Xacp -l /mnt/nfs/update/ multibos -Xac -l /mnt/nfs/update/ # Checking updated BOS multibos -S MULTIBOS> oslevel -s MULTIBOS> exit # Umount NFS folder umount /mnt/nfs/ # Making updated stanby BOS bootable in the first place multibos -B # Reeboot and check shutdown -Fr bootinfo -v oslevel -s # If we don't like \"bos_\" prefix # Remove old BOS: multibos -R # Making new clean BOS: multibos -sX # Making new clean BOS bootable in the first palce: multibos -B # Reboot: shutdown -Fr # Checking that we booted in non-prefixed BOS: bootinfo -v # Checking that everything is updated: oslevel -s #Removing preficex BOS: multibos -R","title":"AIX"},{"location":"OS/AIX/#basic-programs","text":"sh$ ftp ftp.software.ibm.com Name> ftp Password> your e-mail address ftp> cd aix/freeSoftware/aixtoolbox/RPMS/ppc/wget ftp> binary ftp> get wget-1.9.1-1.aix5.1.ppc.rpm ftp> quit sh$ rpm -hUv wget-1.9.1-1.aix5.1.ppc.rpm sh$ wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/ezinstall/ppc sh$ ls getapp-dev.sh getgnome.base.sh getkde3.all.sh Xsession.kde getbase.sh getkde2.all.sh getkde3.base.sh Xsession.kde2 getdesktop.base.sh getkde2.base.sh getkde3.opt.sh getgnome.apps.sh getkde2.opt.sh sh$ chmod +x get*.sh sh$ cd base sh$ ls bash-3.2-1.aix5.2.ppc.rpm rpm-3.0.5-52.aix5.3.ppc.rpm bzip2-1.0.5-3.aix5.3.ppc.rpm rpm-build-3.0.5-52.aix5.3.ppc.rpm gettext-0.10.40-8.aix5.2.ppc.rpm rpm-devel-3.0.5-52.aix5.3.ppc.rpm gzip-1.2.4a-10.aix5.2.ppc.rpm tar-1.14-2.aix5.1.ppc.rpm info-4.6-1.aix5.1.ppc.rpm unzip-5.51-1.aix5.1.ppc.rpm patch-2.5.4-4.aix4.3.ppc.rpm popt-1.7-2.aix5.1.ppc.rpm sh$ rpm -hUv unzip-5.51-1.aix5.1.ppc.rpm sh$ rpm -hUv zip-2.3-3.aix4.3.ppc.rpm sh$ rpm -hUv bash-3.2-1.aix5.2.ppc.rpm sh$ bash bash-3.2#","title":"Basic programs"},{"location":"OS/AIX/#management","text":"# Exit from basic VIOS console to common AIX ksh oem_setup_env # Adminitration and configuration console smit #If you want to use bash as a login shell, you first have to add it to the #list of shells in /etc/security/login.cfg. #Then use `chsh` to change your individual setting.","title":"Management"},{"location":"OS/AIX/#software-installation","text":"cd <path_to_package> inutoc . installp -aXY -d<path_to_package> all # Check if package is installed or not: lslpp -L <package_name>","title":"Software installation"},{"location":"OS/AIX/#mirroring-rootvg","text":"extendvg rootvg hdisk1 mirrorvg rootvg bootlist -m normal hdisk0 hdisk1 bosboot -ad hdisk0 bosboot -ad hdisk1 # Checking bootlist -o -m normal","title":"Mirroring rootvg"},{"location":"OS/AIX/#network","text":"Shared Ethernet adapter coming soon","title":"Network"},{"location":"OS/AIX/#hardware","text":"# Refresh hardware configuration(aix and vios respectively): cfgmgr cfgdev # Rename hard drive: rendev -l <old_name> -n <new_name> rendev -l hdisk3 -n hdisk33 # Enable PVID: chdev -l hdiskX -a pv=yes # Change reserve policy to hard drive chdev -l hdiskX -a reserve_policy=no_reserve # Clear the owning volume manager from a disk chpv -C hdiskX","title":"Hardware"},{"location":"OS/AIX/#virtual-devices","text":"# Checking all virtual mappings to particular vhost: lsmap -vadapter vhost # Make a virtual hard drive for particular vhost: # -f - flag to forcing device creation if you're making shared hard drive mkvdev [-f] -vdev hdiskX -vadapter vhostX -dev <virtual_device_name> # Make a virtual cd-rom device for particular vhost: mkvdev -fbo -vadapter vhostX -dev <virtual_device_name>","title":"Virtual devices"},{"location":"OS/AIX/#zabbix-agent","text":"# Dependencies: rpm -ivh ftp://www.oss4aix.org/latest/aix61/gettext-0.10.40-8.aix5.2.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/expat-2.1.0-1.aix5.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libgcc-4.7.2-1.aix6.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libffi-3.0.11-2.aix5.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/glib2-2.30.3-1.aix5.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libiconv-1.14-2.aix5.1.ppc.rpm # Main mkgroup zabbix useradd -g zabbix zabbix mkdir /var/run/zabbix touch /var/run/zabbix/zabbix_agentd.pid mkdir /var/log/zabbix touch /var/log/zabbix/zabbix_agentd.log chown -R zabbix:zabbix /var/log/zabbix chown -R zabbix:zabbix /var/run/zabbix chown zabbix:zabbix /etc/zabbix_agentd.conf /usr/sbin/zabbix_agentd --config /etc/zabbix_agentd.conf vi /etc/inittab zabagent:2:once:/usr/sbin/zabbix_agentd --config /etc/zabbix_agentd.conf","title":"Zabbix agent"},{"location":"OS/AIX/#update-bos","text":"# Download SP and TL update # Unpack update archive to NFS folder # Mount NFS folder on target server mount <nfs_server_name>:/home/padmin /mnt/nfs # Remove old standby BOS instance # R - remove, p - preview (do not perform actual run) multibos -Rp multibos -R # Create new stanby BOS instance # X - expand file system if needed, s - setup, p - preview multibos -Xsp multibos -Xs # Check bootorder bootlist -m normal -o # Checking newly created BOS multibos -S MULTIBOS> oslevel -s MULTIBOS> exit # Update of newly created stanby BOS # X - expand file system if needed, c - custamized update, p - preview, l - location multibos -Xacp -l /mnt/nfs/update/ multibos -Xac -l /mnt/nfs/update/ # Checking updated BOS multibos -S MULTIBOS> oslevel -s MULTIBOS> exit # Umount NFS folder umount /mnt/nfs/ # Making updated stanby BOS bootable in the first place multibos -B # Reeboot and check shutdown -Fr bootinfo -v oslevel -s # If we don't like \"bos_\" prefix # Remove old BOS: multibos -R # Making new clean BOS: multibos -sX # Making new clean BOS bootable in the first palce: multibos -B # Reboot: shutdown -Fr # Checking that we booted in non-prefixed BOS: bootinfo -v # Checking that everything is updated: oslevel -s #Removing preficex BOS: multibos -R","title":"Update BOS"},{"location":"OS/Android/","text":"Boot device into bootloader mode adb reboot bootloader Flash new bootloader fastboot flash bootloader bootloader-flounder-3.44.1.0123.img fastboot reboot-bootloader Flash full system fastboot flash boot boot.img fastboot flash cache cache.img fastboot flash recovery recovery.img fastboot flash system system.img fastboot flash vendor vendor.img","title":"Android"},{"location":"OS/Android/#boot-device-into-bootloader-mode","text":"adb reboot bootloader","title":"Boot device into bootloader mode"},{"location":"OS/Android/#flash-new-bootloader","text":"fastboot flash bootloader bootloader-flounder-3.44.1.0123.img fastboot reboot-bootloader","title":"Flash new bootloader"},{"location":"OS/Android/#flash-full-system","text":"fastboot flash boot boot.img fastboot flash cache cache.img fastboot flash recovery recovery.img fastboot flash system system.img fastboot flash vendor vendor.img","title":"Flash full system"},{"location":"OS/FreeBSD/","text":"Build own kernel # /usr/src/sys/i386/conf - kernel config cd /usr/src make buildkernel KERNCONF=MYKERNEL make installkernel KERNCONF=MYKERNEL","title":"FreeBSD"},{"location":"OS/FreeBSD/#build-own-kernel","text":"# /usr/src/sys/i386/conf - kernel config cd /usr/src make buildkernel KERNCONF=MYKERNEL make installkernel KERNCONF=MYKERNEL","title":"Build own kernel"},{"location":"OS/Useful_UNIX_distros/","text":"Useful UNIX distros Antix and MX MX-14 \"Symbiosis\" MX-14 is the current release of MX Linux, a special version of antiX developed in full collaboration with the MEPIS Community, using the best tools and talents from each distro. It is a midweight OS designed to combine an elegant and efficient desktop with simple configuration, high stability, solid performance and medium-sized footprint. Relying on the excellent upstream work by Linux, MX-14 deploys Xfce4 as Desktop Environment on top of a Debian Stable base; ongoing backports to the Community Repos keep it current. It also incorporates the independent and innovative development products smxi and inxi. About antiX antiX is a fast, lightweight and easy to install linux live CD distribution based on Debian Testing for Intel-AMD x86 compatible systems. antiX offers users the \"antiX Magic\" in an environment suitable for old computers. So don't throw away that old computer yet! The goal of antiX is to provide a light, but fully functional and flexible free operating system for both newcomers and experienced users of Linux. It should run on most computers, ranging from 64MB old PII 266 systems with pre-configured 128MB swap to the latest powerful boxes. 128MB RAM is recommended minimum for antiX. The installer needs minimum 2.2GB hard disk size. antiX can also be used as a fast-booting rescue cd. A special XFCE edition made in collaboration with the MEPIS Community called MX-14 \"Symbiosis\" is also available. Core Linux Core is the base system which provides only a command line interface and is therefore recommended for experienced users only. Command line tools are provided so that extensions can be added to create a system with a graphical desktop environment. Ideal for servers, appliances, and custom desktops. FAI What is FAI? Main Features: * A tool for automated unattended installation. Lazy system administrators like it. * Remote network installation of different Linux flavors * Easy-to-use centralized management system for your Linux deployment. * It's fast. It only takes a few minutes for a complete installation. * Scalable. FAI users manage their computer infrastructures starting from a few computers up to several thousands of machines. * Different hardware and different configuration requirements are easy to establish using FAI. You do not need to repeat information that is shared among several machines. * Using the FAI class concept, you can group a bunch of similar machines. * Installation targets: desktops, servers, notebooks, Beowulf cluster, rendering or web server farm, Linux laboratory or classroom. * Linux rollout, mass installation and automated server provisioning are additional topics of FAI. * FAI is lightweight. No special daemons are running, no database setup is needed. It's architecture independent, since it consists only of shell, Perl and Cfengine scripts. * Easy creation of customized unattended ISO * Besides initial installations, it is used for daily maintenance, and can set up chroot environments. * Compared to tools like kickstart or cobbler for Red Hat, autoyast for SUSE or Jumpstart for SUN Solaris, FAI is much more flexible. You can tune every small part of your configuration to your local needs using hooks. Frenzy Frenzy is a \u201csystem administrator portable instrument\u201d, LiveCD based on FreeBSD OS, wich allows the administrator to boot from it and get fully functional system with wide variety of software for tunning, testing and analyzing the network, testing computer hardware and much more. GParted GParted Live is a small bootable GNU/Linux distribution for x86 based computers. It enables you to use all the features of the latest versions of the GParted application. Kali The Offensive Security Linux distributive. Successor of BackTrack Knoppix KNOPPIX is a bootable Live system on CD, DVD or USB flash drives, consisting of a representative collection of GNU/Linux software, automatic hardware detection, and support for many graphics cards, sound cards, SCSI and USB devices and other peripherals. KNOPPIX can be used as a productive Linux system for the desktop, educational CD, rescue system, or adapted and used as a platform for commercial software product demos. It is not necessary to install anything on a hard disk. Due to on-the-fly decompression, the CD can have up to 2 GB of executable software installed on it (over 9GB on the DVD \"Maxi\" edition). levinux-master Levinux is a tiny Linux server based on QEMU that doesn't require an install or admin rights on the host PC. Great for learning and appliance projects. Network Security Toolkit Welcome to the Network Security Toolkit (NST). This bootable ISO live CD/DVD (NST Live) is based on Fedora. The toolkit was designed to provide easy access to best-of-breed Open Source Network Security Applications and should run on most x86/x86_64 platforms. The main intent of developing this toolkit was to provide the security professional and network administrator with a comprehensive set of Open Source Network Security Tools. The majority of tools published in the article: Top 125 Security Tools by INSECURE.ORG are available in the toolkit. An advanced Web User Interface (WUI) is provided for system/network administration, navigation, automation, network monitoring, host geolocation, network analysis and configuration of many network and security applications found within the NST distribution. In the virtual world, NST can be used as a network security analysis validation and monitoring tool on enterprise virtual servers hosting virtual machines. PFSense The pfSense project is a free network firewall distribution, based on the FreeBSD operating system with a custom kernel and including third party free software packages for additional functionality. pfSense software, with the help of the package system, is able to provide the same functionality or more of common commercial firewalls, without any of the artificial limitations. It has successfully replaced every big name commercial firewall you can imagine in numerous installations around the world, including Check Point, Cisco PIX, Cisco ASA, Juniper, Sonicwall, Netgear, Watchguard, Astaro, and more. pfSense software includes a web interface for the configuration of all included components. There is no need for any UNIX knowledge, no need to use the command line for anything, and no need to ever manually edit any rule sets. Users familiar with commercial firewalls catch on to the web interface quickly, though there can be a learning curve for users not familiar with commercial-grade firewalls. PING (Partimage Is Not Ghost) PING is a live Linux ISO, based on the excellent Linux From Scratch (LFS) documentation. It can be burnt on a CD and booted, or integrated into a PXE / RIS environment. Several tools have been added and written, so to make this ISO the perfect choice to backup and restore whole partitions, an easy way. It sounds like Symantec Ghost(tm), but has even better features, and is totally free. Features include: Probably the best available Linux toolbox for rescuing a system; Backup and Restore partitions or files locally or to the network (MS Network Shared directory, NFS, FTP or SSHFS); Backup and Restore the BIOS data as well; Either burn a bootable CD / DVD, either integrate within a PXE / RIS environment; Possibility to Blank local admin's password; Create your own restoration bootable DVD (see the Howto Documentation); Partition and Format a disk before installing Windows (so to make sure your unattended Windows installation will happen on the right partition); Specific advantages PING brings you over DOS and Ghost : Most network cards automatically recognized by the Kernel (unlike DOS); Most CD/DVD readers automatically recognized by the Kernel (unlike DOS); You don't have to run a Ghostcast server to receive images over the network; More supported filesystems; You can store an image on several CD/DVD (CD/DVD-spanning); You can backup and restore BIOS settings too; Much much smaller than WinPE / BartPE; etc. Puppy Linux Linux is a free operating system, and Puppy Linux is a special build of Linux meant to make computing easy and fast. Puppy Linux enables you to save money while doing more work, even allowing you to do magic by recovering data from destroyed PCs or by removing malware from Windows. See these example articles: recovering files from Windows and safe Internet banking with Puppy Linux. SystemRescueCd SystemRescueCd is a Linux system rescue disk available as a bootable CD-ROM or USB stick for administrating or repairing your system and data after a crash. It aims to provide an easy way to carry out admin tasks on your computer, such as creating and editing the hard disk partitions. It comes with a lot of linux software such as system tools (parted, partimage, fstools, ...) and basic tools (editors, midnight commander, network tools). It can be used for both Linux and windows computers, and on desktops as well as servers. This rescue system requires no installation as it can be booted from a CD/DVD drive or USB stick, but it can be installed on the hard disk if you wish. The kernel supports all important file systems (ext2/ext3/ext4, reiserfs, btrfs, xfs, jfs, vfat, ntfs), as well as network filesystems (samba and nfs). Based of Gentoo and VERY useful for Gentoo installations especially for UEFI. Tails Tails is a live operating system, that you can start on almost any computer from a DVD, USB stick, or SD card. It aims at preserving your privacy and anonymity, and helps you to: use the Internet anonymously and circumvent censorship; all connections to the Internet are forced to go through the Tor network; leave no trace on the computer you are using unless you ask it explicitly; use state-of-the-art cryptographic tools to encrypt your files, emails and instant messaging. Powered by TOR","title":"Useful UNIX distros"},{"location":"OS/Useful_UNIX_distros/#useful-unix-distros","text":"","title":"Useful UNIX distros"},{"location":"OS/Useful_UNIX_distros/#antix-and-mx","text":"MX-14 \"Symbiosis\" MX-14 is the current release of MX Linux, a special version of antiX developed in full collaboration with the MEPIS Community, using the best tools and talents from each distro. It is a midweight OS designed to combine an elegant and efficient desktop with simple configuration, high stability, solid performance and medium-sized footprint. Relying on the excellent upstream work by Linux, MX-14 deploys Xfce4 as Desktop Environment on top of a Debian Stable base; ongoing backports to the Community Repos keep it current. It also incorporates the independent and innovative development products smxi and inxi. About antiX antiX is a fast, lightweight and easy to install linux live CD distribution based on Debian Testing for Intel-AMD x86 compatible systems. antiX offers users the \"antiX Magic\" in an environment suitable for old computers. So don't throw away that old computer yet! The goal of antiX is to provide a light, but fully functional and flexible free operating system for both newcomers and experienced users of Linux. It should run on most computers, ranging from 64MB old PII 266 systems with pre-configured 128MB swap to the latest powerful boxes. 128MB RAM is recommended minimum for antiX. The installer needs minimum 2.2GB hard disk size. antiX can also be used as a fast-booting rescue cd. A special XFCE edition made in collaboration with the MEPIS Community called MX-14 \"Symbiosis\" is also available.","title":"Antix and MX"},{"location":"OS/Useful_UNIX_distros/#core-linux","text":"Core is the base system which provides only a command line interface and is therefore recommended for experienced users only. Command line tools are provided so that extensions can be added to create a system with a graphical desktop environment. Ideal for servers, appliances, and custom desktops.","title":"Core Linux"},{"location":"OS/Useful_UNIX_distros/#fai","text":"What is FAI? Main Features: * A tool for automated unattended installation. Lazy system administrators like it. * Remote network installation of different Linux flavors * Easy-to-use centralized management system for your Linux deployment. * It's fast. It only takes a few minutes for a complete installation. * Scalable. FAI users manage their computer infrastructures starting from a few computers up to several thousands of machines. * Different hardware and different configuration requirements are easy to establish using FAI. You do not need to repeat information that is shared among several machines. * Using the FAI class concept, you can group a bunch of similar machines. * Installation targets: desktops, servers, notebooks, Beowulf cluster, rendering or web server farm, Linux laboratory or classroom. * Linux rollout, mass installation and automated server provisioning are additional topics of FAI. * FAI is lightweight. No special daemons are running, no database setup is needed. It's architecture independent, since it consists only of shell, Perl and Cfengine scripts. * Easy creation of customized unattended ISO * Besides initial installations, it is used for daily maintenance, and can set up chroot environments. * Compared to tools like kickstart or cobbler for Red Hat, autoyast for SUSE or Jumpstart for SUN Solaris, FAI is much more flexible. You can tune every small part of your configuration to your local needs using hooks.","title":"FAI"},{"location":"OS/Useful_UNIX_distros/#frenzy","text":"Frenzy is a \u201csystem administrator portable instrument\u201d, LiveCD based on FreeBSD OS, wich allows the administrator to boot from it and get fully functional system with wide variety of software for tunning, testing and analyzing the network, testing computer hardware and much more.","title":"Frenzy"},{"location":"OS/Useful_UNIX_distros/#gparted","text":"GParted Live is a small bootable GNU/Linux distribution for x86 based computers. It enables you to use all the features of the latest versions of the GParted application.","title":"GParted"},{"location":"OS/Useful_UNIX_distros/#kali","text":"The Offensive Security Linux distributive. Successor of BackTrack","title":"Kali"},{"location":"OS/Useful_UNIX_distros/#knoppix","text":"KNOPPIX is a bootable Live system on CD, DVD or USB flash drives, consisting of a representative collection of GNU/Linux software, automatic hardware detection, and support for many graphics cards, sound cards, SCSI and USB devices and other peripherals. KNOPPIX can be used as a productive Linux system for the desktop, educational CD, rescue system, or adapted and used as a platform for commercial software product demos. It is not necessary to install anything on a hard disk. Due to on-the-fly decompression, the CD can have up to 2 GB of executable software installed on it (over 9GB on the DVD \"Maxi\" edition).","title":"Knoppix"},{"location":"OS/Useful_UNIX_distros/#levinux-master","text":"Levinux is a tiny Linux server based on QEMU that doesn't require an install or admin rights on the host PC. Great for learning and appliance projects.","title":"levinux-master"},{"location":"OS/Useful_UNIX_distros/#network-security-toolkit","text":"Welcome to the Network Security Toolkit (NST). This bootable ISO live CD/DVD (NST Live) is based on Fedora. The toolkit was designed to provide easy access to best-of-breed Open Source Network Security Applications and should run on most x86/x86_64 platforms. The main intent of developing this toolkit was to provide the security professional and network administrator with a comprehensive set of Open Source Network Security Tools. The majority of tools published in the article: Top 125 Security Tools by INSECURE.ORG are available in the toolkit. An advanced Web User Interface (WUI) is provided for system/network administration, navigation, automation, network monitoring, host geolocation, network analysis and configuration of many network and security applications found within the NST distribution. In the virtual world, NST can be used as a network security analysis validation and monitoring tool on enterprise virtual servers hosting virtual machines.","title":"Network Security Toolkit"},{"location":"OS/Useful_UNIX_distros/#pfsense","text":"The pfSense project is a free network firewall distribution, based on the FreeBSD operating system with a custom kernel and including third party free software packages for additional functionality. pfSense software, with the help of the package system, is able to provide the same functionality or more of common commercial firewalls, without any of the artificial limitations. It has successfully replaced every big name commercial firewall you can imagine in numerous installations around the world, including Check Point, Cisco PIX, Cisco ASA, Juniper, Sonicwall, Netgear, Watchguard, Astaro, and more. pfSense software includes a web interface for the configuration of all included components. There is no need for any UNIX knowledge, no need to use the command line for anything, and no need to ever manually edit any rule sets. Users familiar with commercial firewalls catch on to the web interface quickly, though there can be a learning curve for users not familiar with commercial-grade firewalls.","title":"PFSense"},{"location":"OS/Useful_UNIX_distros/#ping-partimage-is-not-ghost","text":"PING is a live Linux ISO, based on the excellent Linux From Scratch (LFS) documentation. It can be burnt on a CD and booted, or integrated into a PXE / RIS environment. Several tools have been added and written, so to make this ISO the perfect choice to backup and restore whole partitions, an easy way. It sounds like Symantec Ghost(tm), but has even better features, and is totally free. Features include: Probably the best available Linux toolbox for rescuing a system; Backup and Restore partitions or files locally or to the network (MS Network Shared directory, NFS, FTP or SSHFS); Backup and Restore the BIOS data as well; Either burn a bootable CD / DVD, either integrate within a PXE / RIS environment; Possibility to Blank local admin's password; Create your own restoration bootable DVD (see the Howto Documentation); Partition and Format a disk before installing Windows (so to make sure your unattended Windows installation will happen on the right partition); Specific advantages PING brings you over DOS and Ghost : Most network cards automatically recognized by the Kernel (unlike DOS); Most CD/DVD readers automatically recognized by the Kernel (unlike DOS); You don't have to run a Ghostcast server to receive images over the network; More supported filesystems; You can store an image on several CD/DVD (CD/DVD-spanning); You can backup and restore BIOS settings too; Much much smaller than WinPE / BartPE; etc.","title":"PING (Partimage Is Not Ghost)"},{"location":"OS/Useful_UNIX_distros/#puppy-linux","text":"Linux is a free operating system, and Puppy Linux is a special build of Linux meant to make computing easy and fast. Puppy Linux enables you to save money while doing more work, even allowing you to do magic by recovering data from destroyed PCs or by removing malware from Windows. See these example articles: recovering files from Windows and safe Internet banking with Puppy Linux.","title":"Puppy Linux"},{"location":"OS/Useful_UNIX_distros/#systemrescuecd","text":"SystemRescueCd is a Linux system rescue disk available as a bootable CD-ROM or USB stick for administrating or repairing your system and data after a crash. It aims to provide an easy way to carry out admin tasks on your computer, such as creating and editing the hard disk partitions. It comes with a lot of linux software such as system tools (parted, partimage, fstools, ...) and basic tools (editors, midnight commander, network tools). It can be used for both Linux and windows computers, and on desktops as well as servers. This rescue system requires no installation as it can be booted from a CD/DVD drive or USB stick, but it can be installed on the hard disk if you wish. The kernel supports all important file systems (ext2/ext3/ext4, reiserfs, btrfs, xfs, jfs, vfat, ntfs), as well as network filesystems (samba and nfs). Based of Gentoo and VERY useful for Gentoo installations especially for UEFI.","title":"SystemRescueCd"},{"location":"OS/Useful_UNIX_distros/#tails","text":"Tails is a live operating system, that you can start on almost any computer from a DVD, USB stick, or SD card. It aims at preserving your privacy and anonymity, and helps you to: use the Internet anonymously and circumvent censorship; all connections to the Internet are forced to go through the Tor network; leave no trace on the computer you are using unless you ask it explicitly; use state-of-the-art cryptographic tools to encrypt your files, emails and instant messaging. Powered by TOR","title":"Tails"},{"location":"OS/Gentoo/Console_Font/","text":"Terminus emerge --ask media-fonts/terminus-font setfont ter-p32n.psf.gz vim /etc/vconsole.conf # --- vconsole.conf --- FONT=ter-p32n.psf.gz # --- END OF FILE --- GRUB USE=\"truerype\" emerge --ask --update --newuse --verbose sys-boot/grub:2 emerge --ask media-fonts/terminus-font grub-mkfont -s 32 -o /boot/grub/fonts/terminus32.pf2 /usr/share/fonts/terminus/ter-x32n.pcf.gz vim /etc/default/grub GRUB_FONT=/boot/grub/fonts/terminus32.pf2","title":"Console Font"},{"location":"OS/Gentoo/Console_Font/#terminus","text":"emerge --ask media-fonts/terminus-font setfont ter-p32n.psf.gz vim /etc/vconsole.conf # --- vconsole.conf --- FONT=ter-p32n.psf.gz # --- END OF FILE ---","title":"Terminus"},{"location":"OS/Gentoo/Console_Font/#grub","text":"USE=\"truerype\" emerge --ask --update --newuse --verbose sys-boot/grub:2 emerge --ask media-fonts/terminus-font grub-mkfont -s 32 -o /boot/grub/fonts/terminus32.pf2 /usr/share/fonts/terminus/ter-x32n.pcf.gz vim /etc/default/grub GRUB_FONT=/boot/grub/fonts/terminus32.pf2","title":"GRUB"},{"location":"OS/Gentoo/Gnome/","text":"Choose graphical profile eselect profile list eselect profile set 5 emerge --ask --update --newuse --deep world","title":"Gnome"},{"location":"OS/Gentoo/Gnome/#choose-graphical-profile","text":"eselect profile list eselect profile set 5 emerge --ask --update --newuse --deep world","title":"Choose graphical profile"},{"location":"OS/Gentoo/Installation/","text":"Downloading and burning installation media # Minimal installation image: wget http://distfiles.gentoo.org/releases/amd64/autobuilds/current-install-amd64-minimal/install-amd64-minimal-{date-here}.iso dd if=install-amd64-minimal-{date-here}.iso of=/dev/sdb-flash-drive bs=8192k && sync # Or burn it on CD: cdrecord dev=/dev/sr0 install-amd64-minimal-{date-here}.iso # If you want to use pure EFI, you should boot from EFI-compliant CD, and it isn't minimal CD. # You should use another one: # SystemRescueCd - Gentoo-based live CD (I use this one) # Offician Gentoo Live CD # Archlinux boot CD - also good choice https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/4.9.1/systemrescuecd-x86-4.9.1.iso/download dd if=systemrescuecd-x86-4.9.1.iso of=/dev/sdb-flash-drive bs=8192k && sync Boot from installation media # Enter kernel to boot: gentoo, gentoo-nofb, memtest86 boot: gentoo # [Optionally] You can choose specific hardware options like: gentoo acpi=off # acpi=on, acpi=off, console=X, dmraid=X, doapm, dopcmcia, doscsi, sda=stroke, ide=nodma, noapic, nodetect, nodhcp, nodmraid, nofirewire, nogpm, nohotplug, nokeymap, nolapic, nosata, nosmp, nosound, nousb, slowusb, # dolvm, debug, docache, doload=X, dosshd, passwd=foo, noload=X, nonfs, nox, scandelay, scandelay=X, Network configuration Like Gentoo Handbook says 'Maybe it just works'. I'm pretty sure that you have DHCP in your network environment and cable connection, but if not: # Determine network intercaces (ifconfig is also existed, but it's recomnded to use 'ip' as a next generation app) ip link show # LAN net-setup <your-network-interface> # WiFi iwconfig <your-wifi-network-interface> essid <WiFi-SSID-Name> iwconfig <your-wifi-network-interface> key s:some-password # Retrive IP dhcpcd <your-network-interface> # In case of hostName and domainName provided by the DHCP server dhcpcd -HD <your-network-interface> # Manual IP via 'ip' ip link set <your-network-interface> up ip addr add <your-IP-address>/<your-netmask> broadcast <your-brodcast-address> dev <your-network-interface> ip route add default via <your-gateway> # Manual IP via 'ifconfig' ifconfig <your-network-interface> <your-IP-address> broadcast <your-brodcast-address> netmask <your-netmask> up route add default gw <your-gateway>a # DNS servers echo \"nameserver <SNDServer1>\" > /etc/resolv.conf echo \"nameserver <DNSServer2>\" >> /etc/resolv.conf Disk partitioning It's recommended to use GPT on modern systems. # Partition scheme: # /dev/sda1 (bootloader) 2M Just in case, but I don't think it's really needed on modern EFI systems. # /dev/sda2 fat32-UFFI 1024M EFI Partition to hold more than one kernel. Yes I know that Handbook recommends 128M. # /dev/sda3 root-ext4 100% # For swap I will use swapfile, because there is no performance advantage to either a contiguous swap file or a partition, both are treated the same way. parted -a optimal /dev/sda (parted) mklabel gpt # Partition 1: Bootloader (parted) unit mib (parted) mkpart primary 1 3 (parted) name 1 grub (parted) set 1 bios_grub on # Partition 1: Boot (parted) mkpart primary 3 1027 (parted) name 2 boot (parted) set 2 boot on # Partition 1: Root (parted) mkpart primary 1027 -1 (parted) name 4 rootfs Mounting mount /dev/sda3 /mnt/gentoo mount /dev/sda2 /mnt/gentoo/boot # System remount for chrooting mount -t proc proc /mnt/gentoo/proc mount --rbind /sys /mnt/gentoo/sys mount --make-rslave /mnt/gentoo/sys mount --rbind /dev /mnt/gentoo/dev mount --make-rslave /mnt/gentoo/dev Installing Stage tarball cd /mnt/gentoo/ wget http://mirror.yandex.ru/gentoo-distfiles/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-<YYYYMMDD>.tar.bz2 tar xvjpf stage3-amd64-systemd-<YYYYMMDD>.tar.bz2 --xattrs Configuring initial options vim /mnt/gentoo/etc/portage/make.conf # --- make.conf --- CFLAGS=\"-march=native -O2 -pipe\" # Number of your CPU cores +1 MAKEOPTS=\"-j5\" # --- END OF FILE --- mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf mkdir /mnt/gentoo/etc/portage/repos.conf cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf cp -L /etc/resolv.conf /mnt/gentoo/etc/ Chrooting chroot /mnt/gentoo /bin/bash source /etc/profile Updating world emerge-webrsync emerge --sync eselect profile list # Choose aproriate profile, I reccomend use systemd profile eselect profile set 12 emerge --ask --update --deep --newuse @world Locale and TimeZone echo \"Europe/Moscow\" > /etc/timezone emerge --config sys-libs/timezone-data vim /etc/locale.gen # --- locale.gen --- en_US.UTF-8 UTF-8 ru_RU.UTF-8 UTF-8 # --- END OF FILE --- locale-gen eselect locale list eselect locale set <choose-right-number> env-update && source /etc/profile Kernel Of course you need to configure kernel from scratch, but for initial convinience I recommend to use genkernel emerge --ask sys-kernel/gentoo-sources emerge --ask sys-apps/pciutils emerge --ask sys-kernel/genkernel-next # If you use RC-based prfile: # emerge --ask sys-kernel/genkernel genkernel all emerge --ask sys-kernel/linux-firmware Fstab # Look for UUID and write it down: blkid vim /etc/fstab # --- fstab --- UUID=\"place your UUID here\" boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro,discard 0 2 UUID=\"place your UUID here\" / ext4 rw,relatime,data=ordered,discard 0 1 # --- END OF FILE Network hostnamectl set-hostname your-hostname.your-network vim /etc/hosts # --- hosts --- 127.0.0.1 your-hostname.your-network your-hostname localhost # --- END OF FILE --- emerge --ask net-misc/dhcpcd Post install emerge --ask sys-apps/mlocate passwd Bootloader echo 'GRUB_PLATFORMS=\"efi-64\"' >> /etc/portage/make.conf emerge --ask --update --newuse --verbose sys-boot/grub:2 mount -o remount /sys/firmware/efi/efivars -o rw,nosuid,nodev,noexec,noatime grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub /dev/sda grub-mkconfig -o /boot/grub/grub.cfg Umount and reboot exit umount -l /mnt/gentoo/dev{/shm,/pts,} umount -R /mnt/gentoo reboot Post reboot # Add new user useradd -m -G users,wheel,audio,cdrom,floppy,games,portage,usb,video -s /bin/bash <username> passwd <username>","title":"Installation"},{"location":"OS/Gentoo/Installation/#downloading-and-burning-installation-media","text":"# Minimal installation image: wget http://distfiles.gentoo.org/releases/amd64/autobuilds/current-install-amd64-minimal/install-amd64-minimal-{date-here}.iso dd if=install-amd64-minimal-{date-here}.iso of=/dev/sdb-flash-drive bs=8192k && sync # Or burn it on CD: cdrecord dev=/dev/sr0 install-amd64-minimal-{date-here}.iso # If you want to use pure EFI, you should boot from EFI-compliant CD, and it isn't minimal CD. # You should use another one: # SystemRescueCd - Gentoo-based live CD (I use this one) # Offician Gentoo Live CD # Archlinux boot CD - also good choice https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/4.9.1/systemrescuecd-x86-4.9.1.iso/download dd if=systemrescuecd-x86-4.9.1.iso of=/dev/sdb-flash-drive bs=8192k && sync","title":"Downloading and burning installation media"},{"location":"OS/Gentoo/Installation/#boot-from-installation-media","text":"# Enter kernel to boot: gentoo, gentoo-nofb, memtest86 boot: gentoo # [Optionally] You can choose specific hardware options like: gentoo acpi=off # acpi=on, acpi=off, console=X, dmraid=X, doapm, dopcmcia, doscsi, sda=stroke, ide=nodma, noapic, nodetect, nodhcp, nodmraid, nofirewire, nogpm, nohotplug, nokeymap, nolapic, nosata, nosmp, nosound, nousb, slowusb, # dolvm, debug, docache, doload=X, dosshd, passwd=foo, noload=X, nonfs, nox, scandelay, scandelay=X,","title":"Boot from installation media"},{"location":"OS/Gentoo/Installation/#network-configuration","text":"Like Gentoo Handbook says 'Maybe it just works'. I'm pretty sure that you have DHCP in your network environment and cable connection, but if not: # Determine network intercaces (ifconfig is also existed, but it's recomnded to use 'ip' as a next generation app) ip link show # LAN net-setup <your-network-interface> # WiFi iwconfig <your-wifi-network-interface> essid <WiFi-SSID-Name> iwconfig <your-wifi-network-interface> key s:some-password # Retrive IP dhcpcd <your-network-interface> # In case of hostName and domainName provided by the DHCP server dhcpcd -HD <your-network-interface> # Manual IP via 'ip' ip link set <your-network-interface> up ip addr add <your-IP-address>/<your-netmask> broadcast <your-brodcast-address> dev <your-network-interface> ip route add default via <your-gateway> # Manual IP via 'ifconfig' ifconfig <your-network-interface> <your-IP-address> broadcast <your-brodcast-address> netmask <your-netmask> up route add default gw <your-gateway>a # DNS servers echo \"nameserver <SNDServer1>\" > /etc/resolv.conf echo \"nameserver <DNSServer2>\" >> /etc/resolv.conf","title":"Network configuration"},{"location":"OS/Gentoo/Installation/#disk-partitioning","text":"It's recommended to use GPT on modern systems. # Partition scheme: # /dev/sda1 (bootloader) 2M Just in case, but I don't think it's really needed on modern EFI systems. # /dev/sda2 fat32-UFFI 1024M EFI Partition to hold more than one kernel. Yes I know that Handbook recommends 128M. # /dev/sda3 root-ext4 100% # For swap I will use swapfile, because there is no performance advantage to either a contiguous swap file or a partition, both are treated the same way. parted -a optimal /dev/sda (parted) mklabel gpt # Partition 1: Bootloader (parted) unit mib (parted) mkpart primary 1 3 (parted) name 1 grub (parted) set 1 bios_grub on # Partition 1: Boot (parted) mkpart primary 3 1027 (parted) name 2 boot (parted) set 2 boot on # Partition 1: Root (parted) mkpart primary 1027 -1 (parted) name 4 rootfs","title":"Disk partitioning"},{"location":"OS/Gentoo/Installation/#mounting","text":"mount /dev/sda3 /mnt/gentoo mount /dev/sda2 /mnt/gentoo/boot # System remount for chrooting mount -t proc proc /mnt/gentoo/proc mount --rbind /sys /mnt/gentoo/sys mount --make-rslave /mnt/gentoo/sys mount --rbind /dev /mnt/gentoo/dev mount --make-rslave /mnt/gentoo/dev","title":"Mounting"},{"location":"OS/Gentoo/Installation/#installing-stage-tarball","text":"cd /mnt/gentoo/ wget http://mirror.yandex.ru/gentoo-distfiles/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-<YYYYMMDD>.tar.bz2 tar xvjpf stage3-amd64-systemd-<YYYYMMDD>.tar.bz2 --xattrs","title":"Installing Stage tarball"},{"location":"OS/Gentoo/Installation/#configuring-initial-options","text":"vim /mnt/gentoo/etc/portage/make.conf # --- make.conf --- CFLAGS=\"-march=native -O2 -pipe\" # Number of your CPU cores +1 MAKEOPTS=\"-j5\" # --- END OF FILE --- mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf mkdir /mnt/gentoo/etc/portage/repos.conf cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf cp -L /etc/resolv.conf /mnt/gentoo/etc/","title":"Configuring initial options"},{"location":"OS/Gentoo/Installation/#chrooting","text":"chroot /mnt/gentoo /bin/bash source /etc/profile","title":"Chrooting"},{"location":"OS/Gentoo/Installation/#updating-world","text":"emerge-webrsync emerge --sync eselect profile list # Choose aproriate profile, I reccomend use systemd profile eselect profile set 12 emerge --ask --update --deep --newuse @world","title":"Updating world"},{"location":"OS/Gentoo/Installation/#locale-and-timezone","text":"echo \"Europe/Moscow\" > /etc/timezone emerge --config sys-libs/timezone-data vim /etc/locale.gen # --- locale.gen --- en_US.UTF-8 UTF-8 ru_RU.UTF-8 UTF-8 # --- END OF FILE --- locale-gen eselect locale list eselect locale set <choose-right-number> env-update && source /etc/profile","title":"Locale and TimeZone"},{"location":"OS/Gentoo/Installation/#kernel","text":"Of course you need to configure kernel from scratch, but for initial convinience I recommend to use genkernel emerge --ask sys-kernel/gentoo-sources emerge --ask sys-apps/pciutils emerge --ask sys-kernel/genkernel-next # If you use RC-based prfile: # emerge --ask sys-kernel/genkernel genkernel all emerge --ask sys-kernel/linux-firmware","title":"Kernel"},{"location":"OS/Gentoo/Installation/#fstab","text":"# Look for UUID and write it down: blkid vim /etc/fstab # --- fstab --- UUID=\"place your UUID here\" boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro,discard 0 2 UUID=\"place your UUID here\" / ext4 rw,relatime,data=ordered,discard 0 1 # --- END OF FILE","title":"Fstab"},{"location":"OS/Gentoo/Installation/#network","text":"hostnamectl set-hostname your-hostname.your-network vim /etc/hosts # --- hosts --- 127.0.0.1 your-hostname.your-network your-hostname localhost # --- END OF FILE --- emerge --ask net-misc/dhcpcd","title":"Network"},{"location":"OS/Gentoo/Installation/#post-install","text":"emerge --ask sys-apps/mlocate passwd","title":"Post install"},{"location":"OS/Gentoo/Installation/#bootloader","text":"echo 'GRUB_PLATFORMS=\"efi-64\"' >> /etc/portage/make.conf emerge --ask --update --newuse --verbose sys-boot/grub:2 mount -o remount /sys/firmware/efi/efivars -o rw,nosuid,nodev,noexec,noatime grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub /dev/sda grub-mkconfig -o /boot/grub/grub.cfg","title":"Bootloader"},{"location":"OS/Gentoo/Installation/#umount-and-reboot","text":"exit umount -l /mnt/gentoo/dev{/shm,/pts,} umount -R /mnt/gentoo reboot","title":"Umount and reboot"},{"location":"OS/Gentoo/Installation/#post-reboot","text":"# Add new user useradd -m -G users,wheel,audio,cdrom,floppy,games,portage,usb,video -s /bin/bash <username> passwd <username>","title":"Post reboot"},{"location":"OS/Gentoo/Portage/","text":"XX config files need updating etc-update","title":"Portage"},{"location":"OS/Gentoo/Portage/#xx-config-files-need-updating","text":"etc-update","title":"XX config files need updating"},{"location":"OS/Gentoo/Systemd/","text":"Journal failed to get machine id: No such file or directory systemd-machine-id-setup Timedatectl timedatectl set-timezone Europe/Moscow timedatectl set-ntp yes","title":"Systemd"},{"location":"OS/Gentoo/Systemd/#journal-failed-to-get-machine-id-no-such-file-or-directory","text":"systemd-machine-id-setup","title":"Journal failed to get machine id: No such file or directory"},{"location":"OS/Gentoo/Systemd/#timedatectl","text":"timedatectl set-timezone Europe/Moscow timedatectl set-ntp yes","title":"Timedatectl"},{"location":"QA/Stress_tests/Ackermann_function/","text":"C #include <stdio.h> int ackermann(int m, int n) { if (!m) return n + 1; if (!n) return ackermann(m - 1, 1); return ackermann(m - 1, ackermann(m, n - 1)); } int main() { int m, n; for (m = 0; m <= 4; m++) for (n = 0; n < 6 - m; n++) printf(\"A(%d, %d) = %d\\n\", m, n, ackermann(m, n)); return 0; } C++ #include <iostream> unsigned int ackermann(unsigned int m, unsigned int n) { if (m == 0) { return n + 1; } if (n == 0) { return ackermann(m - 1, 1); } return ackermann(m - 1, ackermann(m, n - 1)); } int main() { for (unsigned int m = 0; m < 4; ++m) { for (unsigned int n = 0; n < 30; ++n) { std::cout << \"A(\" << m << \", \" << n << \") = \" << ackermann(m, n) << \"\\n\"; } } }","title":"Ackermann function"},{"location":"QA/Stress_tests/Ackermann_function/#c","text":"#include <stdio.h> int ackermann(int m, int n) { if (!m) return n + 1; if (!n) return ackermann(m - 1, 1); return ackermann(m - 1, ackermann(m, n - 1)); } int main() { int m, n; for (m = 0; m <= 4; m++) for (n = 0; n < 6 - m; n++) printf(\"A(%d, %d) = %d\\n\", m, n, ackermann(m, n)); return 0; }","title":"C"},{"location":"QA/Stress_tests/Ackermann_function/#c_1","text":"#include <iostream> unsigned int ackermann(unsigned int m, unsigned int n) { if (m == 0) { return n + 1; } if (n == 0) { return ackermann(m - 1, 1); } return ackermann(m - 1, ackermann(m, n - 1)); } int main() { for (unsigned int m = 0; m < 4; ++m) { for (unsigned int n = 0; n < 30; ++n) { std::cout << \"A(\" << m << \", \" << n << \") = \" << ackermann(m, n) << \"\\n\"; } } }","title":"C++"},{"location":"Security/Encryption/EncFS/","text":"Encryption encfs <full_path_to_future_encrypted_folder> <full_path_to_future_unencrypted_folder> # Choose methods and password (for methods simple choose 'p' to get paranoic options) Mount encfs <full_path_to_future_encrypted_folder> <full_path_to_future_unencrypted_folder> Unmount fusermount -u <full_path_to_future_unencrypted_folder>","title":"EncFS"},{"location":"Security/Encryption/EncFS/#encryption","text":"encfs <full_path_to_future_encrypted_folder> <full_path_to_future_unencrypted_folder> # Choose methods and password (for methods simple choose 'p' to get paranoic options)","title":"Encryption"},{"location":"Security/Encryption/EncFS/#mount","text":"encfs <full_path_to_future_encrypted_folder> <full_path_to_future_unencrypted_folder>","title":"Mount"},{"location":"Security/Encryption/EncFS/#unmount","text":"fusermount -u <full_path_to_future_unencrypted_folder>","title":"Unmount"},{"location":"Security/Encryption/HSM/","text":"Generate LMK consists of 3 components. Step-By-Step. 0: Connect to Thales HMS 8000 via common Terminal Client. 1: Online> FC <Return> Insert card and press ENTER: <Return> Card already formatted, continue? [Y/N]: Y <Return> Format card for HSM settings/LMKs? [H/L]: L <Return> Erasing card Formatting card . . . Enter new PIN for Smart Card: 2134 <Return> Re-enter new PIN: 2134 <Return> Enter time [hhmmss]: 173000 <Return> - current time Enter date [ddmmyy]: 081111 <Return> Enter User ID: User1 <Return> Enter Issuer ID: ITS <Return> Format complete 2: Online> FC <Return> Insert card and press ENTER: <Return> Card already formatted, continue? [Y/N]: Y <Return> Format card for HSM settings/LMKs? [H/L]: L <Return> Erasing card Formatting card . . . Enter new PIN for Smart Card: 4356 <Return> Re-enter new PIN: 4356 <Return> Enter time [hhmmss]: 173000 <Return> Enter date [ddmmyy]: 081111 <Return> Enter User ID: User2 <Return> Enter Issuer ID: ITS <Return> Format complete 3: Online> FC <Return> Insert card and press ENTER: <Return> Card already formatted, continue? [Y/N]: Y <Return> Format card for HSM settings/LMKs? [H/L]: L <Return> Erasing card Formatting card . . . Enter new PIN for Smart Card: 5467 <Return> Re-enter new PIN: 5467 <Return> Enter time [hhmmss]: 173000 <Return> Enter date [ddmmyy]: 081111 <Return> Enter User ID: User3 <Return> Enter Issuer ID: ITS <Return> Format complete 4: Taking HSM into the Secure State 5: Secure> GK <Return> LMKs must be erased before proceeding. Erase LMKs? Y <Return> LMK component set [1-9]: 1 <Return> Enter secret value A: <Return> Enter secret value B: <Return> Enter value C: <Return> Insert blank card and enter PIN: 2134 <Return> Writing keys Checking keys Device write complete, check: XXXX XXXX XXXX XXXX Remove the smartcard and store it securely. Make another copy? [Y/N]: N <Return> X copies made. 6: Secure> GK <Return> LMKs must be erased before proceeding. Erase LMKs? Y <Return> LMK component set [1-9]: 2 <Return> Enter secret value A: <Return> Enter secret value B: <Return> Enter value C: <Return> Insert blank card and enter PIN: 4356 <Return> Writing keys Checking keys Device write complete, check: XXXX XXXX XXXX XXXX Remove the smartcard and store it securely. Make another copy? [Y/N]: N <Return> X copies made. 7: Secure> GK <Return> LMKs must be erased before proceeding. Erase LMKs? Y <Return> LMK component set [1-9]: 3 <Return> Enter secret value A: <Return> Enter secret value B: <Return> Enter value C: <Return> Insert blank card and enter PIN: 5467 <Return> Writing keys Checking keys Device write complete, check: XXXX XXXX XXXX XXXX Remove the smartcard and store it securely. Make another copy? [Y/N]: N <Return> X copies made. 8-9-10:Secure> LK <Return> LMKs must be erased before proceeding. Erase LMKs? Y <Return> Load LMK from components. Insert card and enter PIN: **** <Return> CHECK: XXXX XXXX XXXX XXXX Load more components? [Y/N]: Y <Return> Remove the smartcard. Insert the second and subsequent Smartcards and repeat the loading procedure. When all have been loaded and the HSM displays the check value, record the check value. CHECK: XXXX XXXX XXXX XXXX Load more components? [Y/N]: N <Return> Use the LO command to load LMKs into key change storage. Secure> Use the A command to put the HSM into the Authorised State in order to check the LMK components and passwords or PINs. 11: Return to online state: remove secure keys and press reset button at least 2 seconds.","title":"HSM"},{"location":"Security/Encryption/HSM/#generate-lmk-consists-of-3-components","text":"Step-By-Step. 0: Connect to Thales HMS 8000 via common Terminal Client. 1: Online> FC <Return> Insert card and press ENTER: <Return> Card already formatted, continue? [Y/N]: Y <Return> Format card for HSM settings/LMKs? [H/L]: L <Return> Erasing card Formatting card . . . Enter new PIN for Smart Card: 2134 <Return> Re-enter new PIN: 2134 <Return> Enter time [hhmmss]: 173000 <Return> - current time Enter date [ddmmyy]: 081111 <Return> Enter User ID: User1 <Return> Enter Issuer ID: ITS <Return> Format complete 2: Online> FC <Return> Insert card and press ENTER: <Return> Card already formatted, continue? [Y/N]: Y <Return> Format card for HSM settings/LMKs? [H/L]: L <Return> Erasing card Formatting card . . . Enter new PIN for Smart Card: 4356 <Return> Re-enter new PIN: 4356 <Return> Enter time [hhmmss]: 173000 <Return> Enter date [ddmmyy]: 081111 <Return> Enter User ID: User2 <Return> Enter Issuer ID: ITS <Return> Format complete 3: Online> FC <Return> Insert card and press ENTER: <Return> Card already formatted, continue? [Y/N]: Y <Return> Format card for HSM settings/LMKs? [H/L]: L <Return> Erasing card Formatting card . . . Enter new PIN for Smart Card: 5467 <Return> Re-enter new PIN: 5467 <Return> Enter time [hhmmss]: 173000 <Return> Enter date [ddmmyy]: 081111 <Return> Enter User ID: User3 <Return> Enter Issuer ID: ITS <Return> Format complete 4: Taking HSM into the Secure State 5: Secure> GK <Return> LMKs must be erased before proceeding. Erase LMKs? Y <Return> LMK component set [1-9]: 1 <Return> Enter secret value A: <Return> Enter secret value B: <Return> Enter value C: <Return> Insert blank card and enter PIN: 2134 <Return> Writing keys Checking keys Device write complete, check: XXXX XXXX XXXX XXXX Remove the smartcard and store it securely. Make another copy? [Y/N]: N <Return> X copies made. 6: Secure> GK <Return> LMKs must be erased before proceeding. Erase LMKs? Y <Return> LMK component set [1-9]: 2 <Return> Enter secret value A: <Return> Enter secret value B: <Return> Enter value C: <Return> Insert blank card and enter PIN: 4356 <Return> Writing keys Checking keys Device write complete, check: XXXX XXXX XXXX XXXX Remove the smartcard and store it securely. Make another copy? [Y/N]: N <Return> X copies made. 7: Secure> GK <Return> LMKs must be erased before proceeding. Erase LMKs? Y <Return> LMK component set [1-9]: 3 <Return> Enter secret value A: <Return> Enter secret value B: <Return> Enter value C: <Return> Insert blank card and enter PIN: 5467 <Return> Writing keys Checking keys Device write complete, check: XXXX XXXX XXXX XXXX Remove the smartcard and store it securely. Make another copy? [Y/N]: N <Return> X copies made. 8-9-10:Secure> LK <Return> LMKs must be erased before proceeding. Erase LMKs? Y <Return> Load LMK from components. Insert card and enter PIN: **** <Return> CHECK: XXXX XXXX XXXX XXXX Load more components? [Y/N]: Y <Return> Remove the smartcard. Insert the second and subsequent Smartcards and repeat the loading procedure. When all have been loaded and the HSM displays the check value, record the check value. CHECK: XXXX XXXX XXXX XXXX Load more components? [Y/N]: N <Return> Use the LO command to load LMKs into key change storage. Secure> Use the A command to put the HSM into the Authorised State in order to check the LMK components and passwords or PINs. 11: Return to online state: remove secure keys and press reset button at least 2 seconds.","title":"Generate LMK consists of 3 components."},{"location":"Security/Firewalls/FirewallD/","text":"FirewallD Status firewall-cmd --state firewall-cmd --list-all # Reload configuration firewall-cmd --reload Get security zones firewall-cmd --get-zones firewall-cmd --get-default-zone firewall-cmd --get-active-zones firewall-cmd --list-all-zones firewall-cmd --set-default-zone=<zone_name> firewall-cmd --get-zone-of-interface=<network_interface_name> Get ICMP types firewall-cmd --get-icmptypes Services firewall-cmd --get-services # List default services ls -la /usr/lib/firewalld/services/ # Add service firewall-cmd --add-service=<service_name> firewall-cmd --add-service=<service_name> --permanent # Remove service firewall-cmd --zone=<zone_name> --remove-service=<service_name> Rules firewall-cmd --permanent --add-source=<subnet> firewall-cmd --permanent --add-port=<port>/<protocol>","title":"FirewallD"},{"location":"Security/Firewalls/FirewallD/#firewalld-status","text":"firewall-cmd --state firewall-cmd --list-all # Reload configuration firewall-cmd --reload","title":"FirewallD Status"},{"location":"Security/Firewalls/FirewallD/#get-security-zones","text":"firewall-cmd --get-zones firewall-cmd --get-default-zone firewall-cmd --get-active-zones firewall-cmd --list-all-zones firewall-cmd --set-default-zone=<zone_name> firewall-cmd --get-zone-of-interface=<network_interface_name>","title":"Get security zones"},{"location":"Security/Firewalls/FirewallD/#get-icmp-types","text":"firewall-cmd --get-icmptypes","title":"Get ICMP types"},{"location":"Security/Firewalls/FirewallD/#services","text":"firewall-cmd --get-services # List default services ls -la /usr/lib/firewalld/services/ # Add service firewall-cmd --add-service=<service_name> firewall-cmd --add-service=<service_name> --permanent # Remove service firewall-cmd --zone=<zone_name> --remove-service=<service_name>","title":"Services"},{"location":"Security/Firewalls/FirewallD/#rules","text":"firewall-cmd --permanent --add-source=<subnet> firewall-cmd --permanent --add-port=<port>/<protocol>","title":"Rules"},{"location":"Security/Firewalls/IPTables/","text":"Show rules iptables -nvL iptable -t nat -nvL Autoreset by Vivek Gite Just add to crontab while remote rules configuration: crontab -e # --- */5 * * * * root /root/reset.fw >/dev/null 2>&1 reset.fw: #!/bin/bash # reset.fw - Reset firewall # set x to 0 - No reset # set x to 1 - Reset firewall # --------------------------------------------------------------------------------------------------------------- # Added support for IPV6 Firewall # --------------------------------------------------------------------------------------------------------------- # Written by Vivek Gite <vivek@nixcraft.com> # --------------------------------------------------------------------------------------------------------------- # You can copy / paste / redistribute this script under GPL version 2.0 or above # ============================================================= x=1 # set to true if it is CentOS / RHEL / Fedora box RHEL=false ### no need to edit below ### IPT=/sbin/iptables IPT6=/sbin/ip6tables if [ \"$x\" == \"1\" ]; then if [ \"$RHEL\" == \"true\" ]; then # reset firewall using redhat script /etc/init.d/iptables stop /etc/init.d/ip6tables stop else # for all other Linux distro use following rules to reset firewall ### reset ipv4 iptales ### $IPT -F $IPT -X $IPT -Z for table in $(</proc/net/ip_tables_names) do $IPT -t $table -F $IPT -t $table -X $IPT -t $table -Z done $IPT -P INPUT ACCEPT $IPT -P OUTPUT ACCEPT $IPT -P FORWARD ACCEPT ### reset ipv6 iptales ### $IPT6 -F $IPT6 -X $IPT6 -Z for table in $(</proc/net/ip6_tables_names) do $IPT6 -t $table -F $IPT6 -t $table -X $IPT6 -t $table -Z done $IPT6 -P INPUT ACCEPT $IPT6 -P OUTPUT ACCEPT $IPT6 -P FORWARD ACCEPT fi else : fi Sibple Rules iptables -I INPUT -p tcp --dport 8005 -j ACCEPT iptables -I INPUT -p tcp --dport 8009 -j ACCEPT iptables -I INPUT -p tcp --dport 8080 -j ACCEPT iptables -I INPUT -p tcp --dport 8443 -j ACCEPT ip6tables -I INPUT -p tcp --dport 8005 -j ACCEPT ip6tables -I INPUT -p tcp --dport 8009 -j ACCEPT ip6tables -I INPUT -p tcp --dport 8080 -j ACCEPT ip6tables -I INPUT -p tcp --dport 8443 -j ACCEPT service iptables save service ip6tables save","title":"IPTables"},{"location":"Security/Firewalls/IPTables/#show-rules","text":"iptables -nvL iptable -t nat -nvL","title":"Show rules"},{"location":"Security/Firewalls/IPTables/#autoreset-by-vivek-gite","text":"Just add to crontab while remote rules configuration: crontab -e # --- */5 * * * * root /root/reset.fw >/dev/null 2>&1 reset.fw: #!/bin/bash # reset.fw - Reset firewall # set x to 0 - No reset # set x to 1 - Reset firewall # --------------------------------------------------------------------------------------------------------------- # Added support for IPV6 Firewall # --------------------------------------------------------------------------------------------------------------- # Written by Vivek Gite <vivek@nixcraft.com> # --------------------------------------------------------------------------------------------------------------- # You can copy / paste / redistribute this script under GPL version 2.0 or above # ============================================================= x=1 # set to true if it is CentOS / RHEL / Fedora box RHEL=false ### no need to edit below ### IPT=/sbin/iptables IPT6=/sbin/ip6tables if [ \"$x\" == \"1\" ]; then if [ \"$RHEL\" == \"true\" ]; then # reset firewall using redhat script /etc/init.d/iptables stop /etc/init.d/ip6tables stop else # for all other Linux distro use following rules to reset firewall ### reset ipv4 iptales ### $IPT -F $IPT -X $IPT -Z for table in $(</proc/net/ip_tables_names) do $IPT -t $table -F $IPT -t $table -X $IPT -t $table -Z done $IPT -P INPUT ACCEPT $IPT -P OUTPUT ACCEPT $IPT -P FORWARD ACCEPT ### reset ipv6 iptales ### $IPT6 -F $IPT6 -X $IPT6 -Z for table in $(</proc/net/ip6_tables_names) do $IPT6 -t $table -F $IPT6 -t $table -X $IPT6 -t $table -Z done $IPT6 -P INPUT ACCEPT $IPT6 -P OUTPUT ACCEPT $IPT6 -P FORWARD ACCEPT fi else : fi","title":"Autoreset by Vivek Gite"},{"location":"Security/Firewalls/IPTables/#sibple-rules","text":"iptables -I INPUT -p tcp --dport 8005 -j ACCEPT iptables -I INPUT -p tcp --dport 8009 -j ACCEPT iptables -I INPUT -p tcp --dport 8080 -j ACCEPT iptables -I INPUT -p tcp --dport 8443 -j ACCEPT ip6tables -I INPUT -p tcp --dport 8005 -j ACCEPT ip6tables -I INPUT -p tcp --dport 8009 -j ACCEPT ip6tables -I INPUT -p tcp --dport 8080 -j ACCEPT ip6tables -I INPUT -p tcp --dport 8443 -j ACCEPT service iptables save service ip6tables save","title":"Sibple Rules"},{"location":"Security/Firewalls/PF/","text":"Enabling in FreeBSD kernel device pf device pflog device pfsync options ALTQ options ALTQ_CBQ # Class Bases Queuing (CBQ) options ALTQ_RED # Random Early Detection (RED) options ALTQ_RIO # RED In/Out options ALTQ_HFSC # Hierarchical Packet Scheduler (HFSC) options ALTQ_PRIQ # Priority Queuing (PRIQ) options ALTQ_NOPCC # Required for SMP build FreeBSD rc.conf all PF options pf_enable=\"NO\" pf_rules=\"/etc/pf.conf\" pf_program=\"/sbin/pfctl\" pf_flags=\"\" pflog_enable=\"NO\" pflog_logfile=\"/var/log/pf.log\" pflog_program=\"/sbin/pflogd\" pflog_flags=\"\" pfsync_enable=\"NO\" pfsync_syncdev=\"\" pfsync_ifconfig=\"\" Sample config # PF.CONF // BEGIN CONFIG #--------------------------- #--------------------------- # Macros #--------------------------- #--------------------------- # Network Interfaces #--------------------------- ext_if=\"em1\" # External int_if=\"em0\" # Internal #--------------------------- # ICMP allowed #--------------------------- icmp_types=\"{ echoreq, unreach}\" #--------------------------- # Networks and hosts #--------------------------- lan=\"192.168.10.0/24\" # internal network sec=\"10.10.30.0/24\" # secured network loop=\"127.0.0.0/8\" # loopback iis1=\"192.168.10.45/32\" # Development IIS server 1 iis2=\"192.168.10.46/32\" # Development IIS server 1 redmine=\"192.168.10.48/32\" # Redmine - internal team site publicated_services=\"{ 192.168.10.45/32, 192.168.10.46/32, 192.168.10.48/32, }\" allowed_inbound_ports=\"{ 22, 80, 90, 91 }\" #--------------------------- # Global options #--------------------------- set block-policy return # Default block polycy: return, drop set skip on lo0 # Loopback exception scrub in all # Normalise packets: build full packet before send to receiver; drop uncorrectly flagged packages #--------------------------- # ALTQ #--------------------------- #--------------------------- # NAT and Port Forwarding #--------------------------- nat on $ext_if from $lan to any -> ($ext_if) rdr on $ext_if proto { tcp, udp } from any to $ext_if port 90 -> $iis1 port 90 # Development IIS server 1 port forwarding rdr on $ext_if proto { tcp, udp } from any to $ext_if port 91 -> $iis1 port 91 # Development IIS server 2 port forwarding rdr on $ext_if proto { tcp, udp } from any to $ext_if port http -> $redmine port http # Redmine port forwarding #--------------------------- # FIREWALL RULES #--------------------------- antispoof quick for $ext_if # Antispoofing - drop all packets if sender addr=$ext_if addr. Key \"quick\" means that pf must aplly this rule and stop script (like IPFW works) # For future: full antispoofing: # block drop in quick on ! tun0 inet from tun0 to any # block drop in quick inet from tun0 to any # RFC 1918 \u0438 3330 block packets from 127.0.0.0/8, 240.0.0.0/4, 169.254.0.0/16 \u0438 \u0442.\u0434. block all # Block all traffic by default #--------------------------- # Local rules # -------------------------- pass out on $ext_if from $ext_if to any keep state pass in log on $ext_if from any port 22 to $ext_if port 22 keep state #--------------------------- # Internal network rules #--------------------------- pass out on $ext_if from $lan to any keep state #--------------------------- # External network rules #--------------------------- pass in log on $ext_if proto { tcp, udp } from any to $publicated_services port $allowed_inbound_ports keep state pass log inet proto icmp all icmp-type $icmp_types #--------------------------- # PF.CONF // END CONFIG","title":"PF"},{"location":"Security/Firewalls/PF/#enabling-in-freebsd-kernel","text":"device pf device pflog device pfsync options ALTQ options ALTQ_CBQ # Class Bases Queuing (CBQ) options ALTQ_RED # Random Early Detection (RED) options ALTQ_RIO # RED In/Out options ALTQ_HFSC # Hierarchical Packet Scheduler (HFSC) options ALTQ_PRIQ # Priority Queuing (PRIQ) options ALTQ_NOPCC # Required for SMP build","title":"Enabling in FreeBSD kernel"},{"location":"Security/Firewalls/PF/#freebsd-rcconf-all-pf-options","text":"pf_enable=\"NO\" pf_rules=\"/etc/pf.conf\" pf_program=\"/sbin/pfctl\" pf_flags=\"\" pflog_enable=\"NO\" pflog_logfile=\"/var/log/pf.log\" pflog_program=\"/sbin/pflogd\" pflog_flags=\"\" pfsync_enable=\"NO\" pfsync_syncdev=\"\" pfsync_ifconfig=\"\"","title":"FreeBSD rc.conf all PF options"},{"location":"Security/Firewalls/PF/#sample-config","text":"# PF.CONF // BEGIN CONFIG #--------------------------- #--------------------------- # Macros #--------------------------- #--------------------------- # Network Interfaces #--------------------------- ext_if=\"em1\" # External int_if=\"em0\" # Internal #--------------------------- # ICMP allowed #--------------------------- icmp_types=\"{ echoreq, unreach}\" #--------------------------- # Networks and hosts #--------------------------- lan=\"192.168.10.0/24\" # internal network sec=\"10.10.30.0/24\" # secured network loop=\"127.0.0.0/8\" # loopback iis1=\"192.168.10.45/32\" # Development IIS server 1 iis2=\"192.168.10.46/32\" # Development IIS server 1 redmine=\"192.168.10.48/32\" # Redmine - internal team site publicated_services=\"{ 192.168.10.45/32, 192.168.10.46/32, 192.168.10.48/32, }\" allowed_inbound_ports=\"{ 22, 80, 90, 91 }\" #--------------------------- # Global options #--------------------------- set block-policy return # Default block polycy: return, drop set skip on lo0 # Loopback exception scrub in all # Normalise packets: build full packet before send to receiver; drop uncorrectly flagged packages #--------------------------- # ALTQ #--------------------------- #--------------------------- # NAT and Port Forwarding #--------------------------- nat on $ext_if from $lan to any -> ($ext_if) rdr on $ext_if proto { tcp, udp } from any to $ext_if port 90 -> $iis1 port 90 # Development IIS server 1 port forwarding rdr on $ext_if proto { tcp, udp } from any to $ext_if port 91 -> $iis1 port 91 # Development IIS server 2 port forwarding rdr on $ext_if proto { tcp, udp } from any to $ext_if port http -> $redmine port http # Redmine port forwarding #--------------------------- # FIREWALL RULES #--------------------------- antispoof quick for $ext_if # Antispoofing - drop all packets if sender addr=$ext_if addr. Key \"quick\" means that pf must aplly this rule and stop script (like IPFW works) # For future: full antispoofing: # block drop in quick on ! tun0 inet from tun0 to any # block drop in quick inet from tun0 to any # RFC 1918 \u0438 3330 block packets from 127.0.0.0/8, 240.0.0.0/4, 169.254.0.0/16 \u0438 \u0442.\u0434. block all # Block all traffic by default #--------------------------- # Local rules # -------------------------- pass out on $ext_if from $ext_if to any keep state pass in log on $ext_if from any port 22 to $ext_if port 22 keep state #--------------------------- # Internal network rules #--------------------------- pass out on $ext_if from $lan to any keep state #--------------------------- # External network rules #--------------------------- pass in log on $ext_if proto { tcp, udp } from any to $publicated_services port $allowed_inbound_ports keep state pass log inet proto icmp all icmp-type $icmp_types #--------------------------- # PF.CONF // END CONFIG","title":"Sample config"},{"location":"Security/GPG/Windows/","text":"Using GPG4Win With git gpg --full-generate-key git config --global gpg.program \"C:\\Program Files (x86)\\Gpg4win\\..\\GnuPG\\bin\\gpg.exe\" gpg --list-secret-keys --keyid-format LONG git config --global user.signingkey {YourKeyID} Export gpg --list-secret-keys --keyid-format LONG gpg --armor --export 21788557EE03EA8E > key.pub gpg --armor --export-secret-keys 21788557EE03EA8E > private.key gpg --export-ownertrust > otrust.txt Emport gpg --import private.key GitHub key wget https://github.com/web-flow.gpg gpg --import .\\web-flow.gpg rm .\\web-flow.gpg","title":"Using GPG4Win"},{"location":"Security/GPG/Windows/#using-gpg4win","text":"","title":"Using GPG4Win"},{"location":"Security/GPG/Windows/#with-git","text":"gpg --full-generate-key git config --global gpg.program \"C:\\Program Files (x86)\\Gpg4win\\..\\GnuPG\\bin\\gpg.exe\" gpg --list-secret-keys --keyid-format LONG git config --global user.signingkey {YourKeyID}","title":"With git"},{"location":"Security/GPG/Windows/#export","text":"gpg --list-secret-keys --keyid-format LONG gpg --armor --export 21788557EE03EA8E > key.pub gpg --armor --export-secret-keys 21788557EE03EA8E > private.key gpg --export-ownertrust > otrust.txt","title":"Export"},{"location":"Security/GPG/Windows/#emport","text":"gpg --import private.key","title":"Emport"},{"location":"Security/GPG/Windows/#github-key","text":"wget https://github.com/web-flow.gpg gpg --import .\\web-flow.gpg rm .\\web-flow.gpg","title":"GitHub key"},{"location":"Security/OpenSSL/Common/","text":"View PEM encoded certificate openssl x509 -in certname.pem -text -noout openssl x509 -in certname.cer -text -noout openssl x509 -in certname.crt -text -noout View DER encoded Certificate openssl x509 -in certname.der -inform der -text -noout PEM to DER openssl x509 -in certname.crt -outform der -out cert.der DER to PEM openssl x509 -in certname.crt -inform der -outform pem -out cert.pem","title":"Common"},{"location":"Security/OpenSSL/Common/#view-pem-encoded-certificate","text":"openssl x509 -in certname.pem -text -noout openssl x509 -in certname.cer -text -noout openssl x509 -in certname.crt -text -noout","title":"View PEM encoded certificate"},{"location":"Security/OpenSSL/Common/#view-der-encoded-certificate","text":"openssl x509 -in certname.der -inform der -text -noout","title":"View DER encoded Certificate"},{"location":"Security/OpenSSL/Common/#pem-to-der","text":"openssl x509 -in certname.crt -outform der -out cert.der","title":"PEM to DER"},{"location":"Security/OpenSSL/Common/#der-to-pem","text":"openssl x509 -in certname.crt -inform der -outform pem -out cert.pem","title":"DER to PEM"},{"location":"Security/OpenSSL/PFX/","text":"Export PEM openssl pkcs12 -in certname.pfx -clcerts -nokeys -out certname.pem [-nodes] Export private key openssl pkcs12 -in certname.pfx -nocerts -out certname.key [-nodes] Export CAs openssl pkcs12 -in certname.pfx -cacerts -nokeys -out certname.ca Export chain openssl pkcs12 -in certname.pfx -out full_chain.pem [-nodes] Create PFX container from PEM chain openssl pkcs12 -export -out certname.pfx -in full_chain.pem","title":"PFX"},{"location":"Security/OpenSSL/PFX/#export-pem","text":"openssl pkcs12 -in certname.pfx -clcerts -nokeys -out certname.pem [-nodes]","title":"Export PEM"},{"location":"Security/OpenSSL/PFX/#export-private-key","text":"openssl pkcs12 -in certname.pfx -nocerts -out certname.key [-nodes]","title":"Export private key"},{"location":"Security/OpenSSL/PFX/#export-cas","text":"openssl pkcs12 -in certname.pfx -cacerts -nokeys -out certname.ca","title":"Export CAs"},{"location":"Security/OpenSSL/PFX/#export-chain","text":"openssl pkcs12 -in certname.pfx -out full_chain.pem [-nodes]","title":"Export chain"},{"location":"Security/OpenSSL/PFX/#create-pfx-container-from-pem-chain","text":"openssl pkcs12 -export -out certname.pfx -in full_chain.pem","title":"Create PFX container from PEM chain"},{"location":"Security/OpenSSL/Troubleshooting/","text":"Troubleshoot SSL Connections Remove password from SSL certificate openssl rsa -<algorithm> -in secured.key -out unsecured.key Get SSL info about URL # SNI openssl s_client -showcerts -servername www.example.com -connect www.example.com:<port|443> # Not SNI openssl s_client -showcerts -connect www.example.com:<port|443> # Connetc with self-signed certificates openssl s_client -showcerts -key self-signed.key -cert self-signed.cert -connect www.example.com:<port|443>","title":"Troubleshoot SSL Connections"},{"location":"Security/OpenSSL/Troubleshooting/#troubleshoot-ssl-connections","text":"","title":"Troubleshoot SSL Connections"},{"location":"Security/OpenSSL/Troubleshooting/#remove-password-from-ssl-certificate","text":"openssl rsa -<algorithm> -in secured.key -out unsecured.key","title":"Remove password from SSL certificate"},{"location":"Security/OpenSSL/Troubleshooting/#get-ssl-info-about-url","text":"# SNI openssl s_client -showcerts -servername www.example.com -connect www.example.com:<port|443> # Not SNI openssl s_client -showcerts -connect www.example.com:<port|443> # Connetc with self-signed certificates openssl s_client -showcerts -key self-signed.key -cert self-signed.cert -connect www.example.com:<port|443>","title":"Get SSL info about URL"},{"location":"Security/SELinux/Common/","text":"Disabling SELinux sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux && cat /etc/sysconfig/selinux","title":"Common"},{"location":"Security/SELinux/Common/#disabling-selinux","text":"sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux && cat /etc/sysconfig/selinux","title":"Disabling SELinux"},{"location":"Security/SSH/Common/","text":"Public key authentication # On remote: mkdir ~/.ssh chmod 755 ~/.ssh # On local cat ~/.ssh/id_rsa.pub > /tmp/pubkeytmp scp /tmp/pubkeytmp <username>@<hostname>:~/.ssh/authorized_keys rm /tmp/pubkeytmp Avoid checking rsa key of remote host ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null <IP ADDRESS>","title":"Common"},{"location":"Security/SSH/Common/#public-key-authentication","text":"# On remote: mkdir ~/.ssh chmod 755 ~/.ssh # On local cat ~/.ssh/id_rsa.pub > /tmp/pubkeytmp scp /tmp/pubkeytmp <username>@<hostname>:~/.ssh/authorized_keys rm /tmp/pubkeytmp","title":"Public key authentication"},{"location":"Security/SSH/Common/#avoid-checking-rsa-key-of-remote-host","text":"ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null <IP ADDRESS>","title":"Avoid checking rsa key of remote host"},{"location":"Tech/Audit/Fork_unavailable/","text":"Fork: Resource temporarily unavailable on AIX To investigate the promles you need to run this bunch of commands: cat /etc/passwd From root you need to look at limint of every active user: ulimit -a su oracle -c \"ulimit -a\" su mongod -c \"ulimit -a\" su userX -c \"ulimit -a\" Look at system wide defined limits: cat /etc/security/limits Look at kernel parameters, especially on maxuproc lsattr -El sys0 Look at count of running processes by user: ps -f -l -uroot | wc -l ps -f -l -uoracle | wc -l ps -f -l -umongod | wc -l ps -f -l -uuserX | wc -l And after all look at avaible mamory and swap: svmon -G -O unit=MB","title":"Fork unavailable"},{"location":"Tech/Audit/Fork_unavailable/#fork-resource-temporarily-unavailable-on-aix","text":"To investigate the promles you need to run this bunch of commands: cat /etc/passwd From root you need to look at limint of every active user: ulimit -a su oracle -c \"ulimit -a\" su mongod -c \"ulimit -a\" su userX -c \"ulimit -a\" Look at system wide defined limits: cat /etc/security/limits Look at kernel parameters, especially on maxuproc lsattr -El sys0 Look at count of running processes by user: ps -f -l -uroot | wc -l ps -f -l -uoracle | wc -l ps -f -l -umongod | wc -l ps -f -l -uuserX | wc -l And after all look at avaible mamory and swap: svmon -G -O unit=MB","title":"Fork: Resource temporarily unavailable on AIX"},{"location":"Tech/Audit/Hardware_info/","text":"All hardware hwinfo RAW Devices # ISO to USB: dd bs=4M if=/path/to/<iso_image> of=/dev/sdX && sync CPU lscpu cat /proc/cpuinfo RAM # Basic commands: vmstat -s cat /proc/meminfo free -m # Sum of used RAM ps -eo rss,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(\"%13.2f Mb \",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf(\"%s \",$x) } print \"\" }' | awk '{print $1}' | paste -sd+ | bc # Clean RAM buffer and swap cache sync && echo 3 > /proc/sys/vm/drop_caches VM To check if server's environment is virtual or real you can use stanasrd Linux commands cat /proc/scsi/scsi Attached devices: Host: scsi2 Channel: 00 Id: 00 Lun: 00 Vendor: VMware Model: Virtual disk Rev: 1.0 Type: Direct-Access ANSI SCSI revision: 02 Host: scsi1 Channel: 00 Id: 00 Lun: 00 Vendor: NECVMWar Model: VMware IDE CDR10 Rev: 1.00 Type: CD-ROM ANSI SCSI revision: 05 ethtool -i eth0 driver: vmxnet3 version: 1.1.30.0-k-NAPI firmware-version: bus-info: 0000:03:00.0 supports-statistics: yes supports-test: no supports-eeprom-access: no supports-register-dump: yes supports-priv-flags: no dmidecode | grep -i vmware Manufacturer: VMware, Inc. Product Name: VMware Virtual Platform Serial Number: VMware-42 28 f6 4e 92 c6 36 0a-2e 21 47 23 85 9f 5d 64 Description: VMware SVGA II","title":"Hardware info"},{"location":"Tech/Audit/Hardware_info/#all-hardware","text":"hwinfo","title":"All hardware"},{"location":"Tech/Audit/Hardware_info/#raw-devices","text":"# ISO to USB: dd bs=4M if=/path/to/<iso_image> of=/dev/sdX && sync","title":"RAW Devices"},{"location":"Tech/Audit/Hardware_info/#cpu","text":"lscpu cat /proc/cpuinfo","title":"CPU"},{"location":"Tech/Audit/Hardware_info/#ram","text":"# Basic commands: vmstat -s cat /proc/meminfo free -m # Sum of used RAM ps -eo rss,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(\"%13.2f Mb \",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf(\"%s \",$x) } print \"\" }' | awk '{print $1}' | paste -sd+ | bc # Clean RAM buffer and swap cache sync && echo 3 > /proc/sys/vm/drop_caches","title":"RAM"},{"location":"Tech/Audit/Hardware_info/#vm","text":"To check if server's environment is virtual or real you can use stanasrd Linux commands cat /proc/scsi/scsi Attached devices: Host: scsi2 Channel: 00 Id: 00 Lun: 00 Vendor: VMware Model: Virtual disk Rev: 1.0 Type: Direct-Access ANSI SCSI revision: 02 Host: scsi1 Channel: 00 Id: 00 Lun: 00 Vendor: NECVMWar Model: VMware IDE CDR10 Rev: 1.00 Type: CD-ROM ANSI SCSI revision: 05 ethtool -i eth0 driver: vmxnet3 version: 1.1.30.0-k-NAPI firmware-version: bus-info: 0000:03:00.0 supports-statistics: yes supports-test: no supports-eeprom-access: no supports-register-dump: yes supports-priv-flags: no dmidecode | grep -i vmware Manufacturer: VMware, Inc. Product Name: VMware Virtual Platform Serial Number: VMware-42 28 f6 4e 92 c6 36 0a-2e 21 47 23 85 9f 5d 64 Description: VMware SVGA II","title":"VM"},{"location":"Tech/Audit/Processes/","text":"Wait until proceses will gone while true; do clear; ps -ef | grep <process>; sleep 5; done Kill all proesses with certain name ps ax | grep http | awk '{print $1}' | xargs kill","title":"Processes"},{"location":"Tech/Audit/Processes/#wait-until-proceses-will-gone","text":"while true; do clear; ps -ef | grep <process>; sleep 5; done","title":"Wait until proceses will gone"},{"location":"Tech/Audit/Processes/#kill-all-proesses-with-certain-name","text":"ps ax | grep http | awk '{print $1}' | xargs kill","title":"Kill all proesses with certain name"},{"location":"Tech/Audit/Reboot_Investigation/","text":"Why is my server rebooted? last reboot sudo lastcomm | egrep 'reboot|shutdown' who -b sa crontab -e less /var/log/secure last -x | less last -x | grep shutdown | less less /var/log/messages journalctl utmpdump /var/log/wtmp | egrep 'shutdown|reboot|runlevel' journalctl --since=\"2016-6-28 12:00:00\"","title":"Reboot Investigation"},{"location":"Tech/Audit/Reboot_Investigation/#why-is-my-server-rebooted","text":"last reboot sudo lastcomm | egrep 'reboot|shutdown' who -b sa crontab -e less /var/log/secure last -x | less last -x | grep shutdown | less less /var/log/messages journalctl utmpdump /var/log/wtmp | egrep 'shutdown|reboot|runlevel' journalctl --since=\"2016-6-28 12:00:00\"","title":"Why is my server rebooted?"},{"location":"Tech/Backup/TSM/","text":"Queries # Check backup q ev * * # Check path q path # Check drive q dri # Status q stat # Tape status q vol # Check volumes in the tape library q libvol # Check processes q pro # Cancel process can pro (<process>) # Check pools q stg # Check working sessions q sess # Cancel session can sess (<session>) # Shedule backup q eve domain name schedulename # Viwe assigned nodes in a Tivoli server q node # Check backup space utilized for each file system of a server q filespace # View activity log q actlog q act begind=mm/dd/yyyy begint=hh:mm:ss endd= mm/dd/yyyy endt=hh:mm:ss q act begind=today-1 begint=00:00 q act search=transferred begint=00:00 q act search=nodenam # Get detailed drive report q drive f=d # Get detailed information about tape library q library f=d # Get requests q req # Reply to request reply (<request>) # Schedule q sched q sched f=d q sched * type=admin f=d Unload tape Configure Library \u2192 Drive \u2192 []Power ON Configure Library \u2192 Drive \u2192 [X]Power ON Wait for 5 minutes until tape will be rewinded # Move tape to empty slot Manage Library \u2192 Move Media How to get logs # Library logs Service \u2192 View Logs Save Service Dump # Drive logs Service Library \u2192 Save Drive Dump Changes # Path (set online) #Drive1: UPD PATH TSM DRIVE01 SRCT=SERVer DESTT=DRIVE LIBR=TS3100 ONL=Y #Drive2: UPD PATH TSM DRIVE02 SRCT=SERVer DESTT=DRIVE LIBR=TS3100 ONL=Y # Update drive status to online update path sourceservername TAPE0 srct=server destt=drive libr=ts3200 online=yes # Drive (set online) #Drive1: UPD DRI TS3100 DRIVE01 ONL=Y #Drive2: UPD DRI TS3100 DRIVE02 ONL=Y # Change a library volume ( L41117L4 ) status to scratch from private UPDATE LIBVOLUME TS3200 L41117L4 STATUS=SCRATCH # Change a tivoli login password of a node update node nodename \"admin\" domain=domainname forcepwreset=Yes # Add new tape L41116L4 to a storagepool define vol storagepoolname L41116L4 # Delete data inside a tape media L41116L4 delete volume L41116L4 discarddata=yes # Set serial number of a drive in tape library UPDATE DRIVE TS3200 TAPE0 ELEMENT=autodetect ONLINE=Yes WWN=\"2002000E11107B6C\" SERIAL=autodetect # Detect label of a tape in tape library label libvol t3200 checkin=scratch labelsource=barcode search=bulk waittime=0 # Remove tape media from tape library checkout libvol ts3200 VOLLIST=A00015L3,A00019L3 CHECKLABEL=YES REMOVE=YES # Add and label new tapes into library LABEL libvol TS3200 search=yes labelsource=barcode overwrite=NO checkin=SCRATCH WAITTIME=0 # Assign a tape drive to a server UPDATE PATH servername TAPE0 SRCTYPE=SERVER DESTTYPE=DRIVE LIBRARY=TS3200 DEVICE=\\\\.\\Tape0 ONLINE=YES AUTODETECT=no Creating backups # Create a new schedule backup (incremental) for a node UPDATE SCHEDULE domainname nodename desc=\"daily incremental backup for a server\" action=Incremental options=-subdir=yes objects=\"\"/fs1/*\" \"/fs2/*\" \"/home/user1/*\"\" priority=5startdate=mm/dd/yyyy starttime=hh:mm duration=1 duru=Houperiod=1 perunits=Day dayofweek=Any expiration=never # Full backup of Tivoli database manually to file on local disk backup db dev=FILECLASS type=full Startup # Start Tivoly on AIX cd /usr/tivoli/tsm/client/ba/bin nohup dsmc sched & nohup dsmcad & cd /usr/tivoli/tsm/StorageAgent/bin nohup ./dsmsta & ps -ef | grep dsm If tape is not shown checkin libvolume TS3100 search=yes status=scratch checkin libvolume TS3100 search=yes status=private","title":"TSM"},{"location":"Tech/Backup/TSM/#queries","text":"# Check backup q ev * * # Check path q path # Check drive q dri # Status q stat # Tape status q vol # Check volumes in the tape library q libvol # Check processes q pro # Cancel process can pro (<process>) # Check pools q stg # Check working sessions q sess # Cancel session can sess (<session>) # Shedule backup q eve domain name schedulename # Viwe assigned nodes in a Tivoli server q node # Check backup space utilized for each file system of a server q filespace # View activity log q actlog q act begind=mm/dd/yyyy begint=hh:mm:ss endd= mm/dd/yyyy endt=hh:mm:ss q act begind=today-1 begint=00:00 q act search=transferred begint=00:00 q act search=nodenam # Get detailed drive report q drive f=d # Get detailed information about tape library q library f=d # Get requests q req # Reply to request reply (<request>) # Schedule q sched q sched f=d q sched * type=admin f=d","title":"Queries"},{"location":"Tech/Backup/TSM/#unload-tape","text":"Configure Library \u2192 Drive \u2192 []Power ON Configure Library \u2192 Drive \u2192 [X]Power ON Wait for 5 minutes until tape will be rewinded # Move tape to empty slot Manage Library \u2192 Move Media","title":"Unload tape"},{"location":"Tech/Backup/TSM/#how-to-get-logs","text":"# Library logs Service \u2192 View Logs Save Service Dump # Drive logs Service Library \u2192 Save Drive Dump","title":"How to get logs"},{"location":"Tech/Backup/TSM/#changes","text":"# Path (set online) #Drive1: UPD PATH TSM DRIVE01 SRCT=SERVer DESTT=DRIVE LIBR=TS3100 ONL=Y #Drive2: UPD PATH TSM DRIVE02 SRCT=SERVer DESTT=DRIVE LIBR=TS3100 ONL=Y # Update drive status to online update path sourceservername TAPE0 srct=server destt=drive libr=ts3200 online=yes # Drive (set online) #Drive1: UPD DRI TS3100 DRIVE01 ONL=Y #Drive2: UPD DRI TS3100 DRIVE02 ONL=Y # Change a library volume ( L41117L4 ) status to scratch from private UPDATE LIBVOLUME TS3200 L41117L4 STATUS=SCRATCH # Change a tivoli login password of a node update node nodename \"admin\" domain=domainname forcepwreset=Yes # Add new tape L41116L4 to a storagepool define vol storagepoolname L41116L4 # Delete data inside a tape media L41116L4 delete volume L41116L4 discarddata=yes # Set serial number of a drive in tape library UPDATE DRIVE TS3200 TAPE0 ELEMENT=autodetect ONLINE=Yes WWN=\"2002000E11107B6C\" SERIAL=autodetect # Detect label of a tape in tape library label libvol t3200 checkin=scratch labelsource=barcode search=bulk waittime=0 # Remove tape media from tape library checkout libvol ts3200 VOLLIST=A00015L3,A00019L3 CHECKLABEL=YES REMOVE=YES # Add and label new tapes into library LABEL libvol TS3200 search=yes labelsource=barcode overwrite=NO checkin=SCRATCH WAITTIME=0 # Assign a tape drive to a server UPDATE PATH servername TAPE0 SRCTYPE=SERVER DESTTYPE=DRIVE LIBRARY=TS3200 DEVICE=\\\\.\\Tape0 ONLINE=YES AUTODETECT=no","title":"Changes"},{"location":"Tech/Backup/TSM/#creating-backups","text":"# Create a new schedule backup (incremental) for a node UPDATE SCHEDULE domainname nodename desc=\"daily incremental backup for a server\" action=Incremental options=-subdir=yes objects=\"\"/fs1/*\" \"/fs2/*\" \"/home/user1/*\"\" priority=5startdate=mm/dd/yyyy starttime=hh:mm duration=1 duru=Houperiod=1 perunits=Day dayofweek=Any expiration=never # Full backup of Tivoli database manually to file on local disk backup db dev=FILECLASS type=full","title":"Creating backups"},{"location":"Tech/Backup/TSM/#startup","text":"# Start Tivoly on AIX cd /usr/tivoli/tsm/client/ba/bin nohup dsmc sched & nohup dsmcad & cd /usr/tivoli/tsm/StorageAgent/bin nohup ./dsmsta & ps -ef | grep dsm","title":"Startup"},{"location":"Tech/Backup/TSM/#if-tape-is-not-shown","text":"checkin libvolume TS3100 search=yes status=scratch checkin libvolume TS3100 search=yes status=private","title":"If tape is not shown"},{"location":"Tech/Backup/Tape/","text":"Rewind tape drive mt -f /dev/st0 rewind Backup directory tar -czvf /dev/st0 /<directory_for_backup> List files on tape tar -tzf /dev/st0 Restore mt -f /dev/st0 rewind tar -xzf /dev/st0 <file_or_dir_to_restore> Unload mt -f /dev/st0 offline Status mt -f /dev/st0 status Erase mt -f /dev/st0 erase Get position mt -f /dev/st0 tell Moves # End mt -f /dev/nst0 eod # Previous mt -f /dev/nst0 bsfm 1 # Next mt -f /dev/nst0 fsf 1","title":"Tape"},{"location":"Tech/Backup/Tape/#rewind-tape-drive","text":"mt -f /dev/st0 rewind","title":"Rewind tape drive"},{"location":"Tech/Backup/Tape/#backup-directory","text":"tar -czvf /dev/st0 /<directory_for_backup>","title":"Backup directory"},{"location":"Tech/Backup/Tape/#list-files-on-tape","text":"tar -tzf /dev/st0","title":"List files on tape"},{"location":"Tech/Backup/Tape/#restore","text":"mt -f /dev/st0 rewind tar -xzf /dev/st0 <file_or_dir_to_restore>","title":"Restore"},{"location":"Tech/Backup/Tape/#unload","text":"mt -f /dev/st0 offline","title":"Unload"},{"location":"Tech/Backup/Tape/#status","text":"mt -f /dev/st0 status","title":"Status"},{"location":"Tech/Backup/Tape/#erase","text":"mt -f /dev/st0 erase","title":"Erase"},{"location":"Tech/Backup/Tape/#get-position","text":"mt -f /dev/st0 tell","title":"Get position"},{"location":"Tech/Backup/Tape/#moves","text":"# End mt -f /dev/nst0 eod # Previous mt -f /dev/nst0 bsfm 1 # Next mt -f /dev/nst0 fsf 1","title":"Moves"},{"location":"Tech/Backup/Veeam/","text":"PowerShell script to perform scheduled backup on free version of Veeam & \"C:\\Program Files\\Veeam\\Backup and Replication\\Backup\\Initialize-VeeamToolkit.ps1\" # Set-Variable -name 1 -value \"<ESXi(orVsphere)_server_address>\" Set-Variable -name STORAGE_REPO -value \"<name_of_predefined_veeam_storage_ropository>\" # Find-VBRViEntity -Name \"name_of_virtual_machine_here\" | Start-VBRZip -BackupRepository $STORAGE_REPO -RunAsync -AutoDelete In1Week -DisableQuiesce # Outpul example: # PS C:\\Users\\monitor> Set-Variable -name 1 -value \"192.168.168.100\" # PS C:\\Users\\monitor> Set-Variable -name DISKF -value \"DISK_F_HUGE\" # PS C:\\Users\\monitor> Find-VBRViEntity -Name \"SUPERSERVER-01\" | Start-VBRZip -BackupRepository $DISKF -RunAsync -AutoDelete In1Week -DisableQuiesce # #Job Name State Start Time End Time Result #-------- ----- ---------- -------- ------ #SUPERSERVER-01_2016-1... Starting 13.12.2016 15:42:08 01.01.1900 0:00:00 None","title":"Veeam"},{"location":"Tech/Backup/Veeam/#powershell-script-to-perform-scheduled-backup-on-free-version-of-veeam","text":"& \"C:\\Program Files\\Veeam\\Backup and Replication\\Backup\\Initialize-VeeamToolkit.ps1\" # Set-Variable -name 1 -value \"<ESXi(orVsphere)_server_address>\" Set-Variable -name STORAGE_REPO -value \"<name_of_predefined_veeam_storage_ropository>\" # Find-VBRViEntity -Name \"name_of_virtual_machine_here\" | Start-VBRZip -BackupRepository $STORAGE_REPO -RunAsync -AutoDelete In1Week -DisableQuiesce # Outpul example: # PS C:\\Users\\monitor> Set-Variable -name 1 -value \"192.168.168.100\" # PS C:\\Users\\monitor> Set-Variable -name DISKF -value \"DISK_F_HUGE\" # PS C:\\Users\\monitor> Find-VBRViEntity -Name \"SUPERSERVER-01\" | Start-VBRZip -BackupRepository $DISKF -RunAsync -AutoDelete In1Week -DisableQuiesce # #Job Name State Start Time End Time Result #-------- ----- ---------- -------- ------ #SUPERSERVER-01_2016-1... Starting 13.12.2016 15:42:08 01.01.1900 0:00:00 None","title":"PowerShell script to perform scheduled backup on free version of Veeam"},{"location":"Tech/BigData/Zookeper_grow/","text":"Adding 2 nodes to an existing 3-node ZooKeeper ensemble without losing the Quorum Since many deployments may start out with 3 nodes and so little is known about how to grow a cluster from 3 memebrs to 5 members without losing the existing Quorum, here is an example of how this might be achieved. Step 1: Have a healthy 3-node ensemble Ensure all 3 nodes are up, one is the leader, and all are in sync Initial setup: sudo apt-get update sudo apt-get install -y openjdk-6-jre-headless vim mkdir ~/zook cd ~/zook wget http://apache.claz.org/zookeeper/zookeeper-3.4.5/zookeeper-3.4.5.tar.gz # You may wish to choose a closer mirror tar xzf zookeeper-3.4.5.tar.gz for i in `seq 5` ; do mkdir conf$i ; echo $i > conf$i/myid ; done tickTime=2000 dataDir=/home/user/zook/conf1 clientPort=2181 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf1/zoo.cfg tickTime=2000 dataDir=/home/user/zook/conf2 clientPort=2182 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf2/zoo.cfg tickTime=2000 dataDir=/home/user/zook/conf3 clientPort=2183 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf3/zoo.cfg Step 2: Set up 2 new nodes to join the cluster Start the service, see the nodes join the cluster, snapshot the data and become active. tickTime=2000 dataDir=/home/user/zook/conf4 clientPort=2184 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 server.4=localhost:2884:3884 server.5=localhost:2885:3885 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf4/zoo.cfg tickTime=2000 dataDir=/home/user/zook/conf5 clientPort=2185 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 server.4=localhost:2884:3884 server.5=localhost:2885:3885 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf5/zoo.cfg Step 3: Add the 2 new nodes config to existing cluster for i in `seq 3` ;do vim conf$i/zoo.cfg ; done server.4=localhost:2884:3884 server.5=localhost:2885:3885 Save files. Step 4: Restart Followers with new config # Stop this instance with Ctrl+C, then run zookeeper-3.4.5/bin/zkServer.sh start-foreground conf2/zoo.cfg Ensure that is joins the ensemble, repeat with other Follower. # Ctrl+C zookeeper-3.4.5/bin/zkServer.sh start-foreground conf3/zoo.cfg Step 5: Restart the Leader Ensure that all 4 nodes have network conenctivity to each other on the designated ports, and then bounce the Leader. # Ctrl+C zookeeper-3.4.5/bin/zkServer.sh start-foreground conf1/zoo.cfg","title":"Zookeper grow"},{"location":"Tech/BigData/Zookeper_grow/#adding-2-nodes-to-an-existing-3-node-zookeeper-ensemble-without-losing-the-quorum","text":"Since many deployments may start out with 3 nodes and so little is known about how to grow a cluster from 3 memebrs to 5 members without losing the existing Quorum, here is an example of how this might be achieved.","title":"Adding 2 nodes to an existing 3-node ZooKeeper ensemble without losing the Quorum"},{"location":"Tech/BigData/Zookeper_grow/#step-1-have-a-healthy-3-node-ensemble","text":"Ensure all 3 nodes are up, one is the leader, and all are in sync Initial setup: sudo apt-get update sudo apt-get install -y openjdk-6-jre-headless vim mkdir ~/zook cd ~/zook wget http://apache.claz.org/zookeeper/zookeeper-3.4.5/zookeeper-3.4.5.tar.gz # You may wish to choose a closer mirror tar xzf zookeeper-3.4.5.tar.gz for i in `seq 5` ; do mkdir conf$i ; echo $i > conf$i/myid ; done tickTime=2000 dataDir=/home/user/zook/conf1 clientPort=2181 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf1/zoo.cfg tickTime=2000 dataDir=/home/user/zook/conf2 clientPort=2182 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf2/zoo.cfg tickTime=2000 dataDir=/home/user/zook/conf3 clientPort=2183 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf3/zoo.cfg","title":"Step 1: Have a healthy 3-node ensemble"},{"location":"Tech/BigData/Zookeper_grow/#step-2-set-up-2-new-nodes-to-join-the-cluster","text":"Start the service, see the nodes join the cluster, snapshot the data and become active. tickTime=2000 dataDir=/home/user/zook/conf4 clientPort=2184 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 server.4=localhost:2884:3884 server.5=localhost:2885:3885 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf4/zoo.cfg tickTime=2000 dataDir=/home/user/zook/conf5 clientPort=2185 initLimit=50 syncLimit=200 server.1=localhost:2881:3881 server.2=localhost:2882:3882 server.3=localhost:2883:3883 server.4=localhost:2884:3884 server.5=localhost:2885:3885 zookeeper-3.4.5/bin/zkServer.sh start-foreground conf5/zoo.cfg","title":"Step 2: Set up 2 new nodes to join the cluster"},{"location":"Tech/BigData/Zookeper_grow/#step-3-add-the-2-new-nodes-config-to-existing-cluster","text":"for i in `seq 3` ;do vim conf$i/zoo.cfg ; done server.4=localhost:2884:3884 server.5=localhost:2885:3885 Save files.","title":"Step 3: Add the 2 new nodes config to existing cluster"},{"location":"Tech/BigData/Zookeper_grow/#step-4-restart-followers-with-new-config","text":"# Stop this instance with Ctrl+C, then run zookeeper-3.4.5/bin/zkServer.sh start-foreground conf2/zoo.cfg Ensure that is joins the ensemble, repeat with other Follower. # Ctrl+C zookeeper-3.4.5/bin/zkServer.sh start-foreground conf3/zoo.cfg","title":"Step 4: Restart Followers with new config"},{"location":"Tech/BigData/Zookeper_grow/#step-5-restart-the-leader","text":"Ensure that all 4 nodes have network conenctivity to each other on the designated ports, and then bounce the Leader. # Ctrl+C zookeeper-3.4.5/bin/zkServer.sh start-foreground conf1/zoo.cfg","title":"Step 5: Restart the Leader"},{"location":"Tech/Messaging/Email_Telnet/","text":"Send email Original at Mediatemple TIP: We use the domain example.com as an example. Be sure to replace with your own domain. Open your command prompt. Now, connect with telnet using the following command: telnet example.com 25 Type ehlo example.com. Some servers also accept helo in place of ehlo. ehlo example.com Type mail from: username@example.com: mail from: username@example.com Type rcpt to: friend@hotmail.com, friend2@yahoo.com (replace with your actual recipient name): rcpt to: friend@hotmail.com, friend2@yahoo.com To write the message - type data, followed by your subject and message. To end the message, put a period on a line by itself and press enter: data Subject: My Telnet Test Email Hello, This is an email sent by using the telnet command. Your friend, Me . Type quit to exit telnet. quit How to check or read email Original at Mediatemple * Open your command prompt. At the command prompt, type in telnet example.com 110 Type user and the email address (username@example.com) of the user for which you wish to view emails: user username@example.com Then type in pass followed by your password: pass yourpasswordgoeshere Type list to bring up a list of your emails: list You will see a list of items with labels like \"1 897\" and \"2 5136.\" Here is an example: list +OK POP3 clients that break here, they violate STD53. 1 897 2 5136 3 1884 4 2973 5 2595 6 3063 7 3509 8 2283 9 1926 10 2763 11 1795 12 2780 13 2342 14 2342 15 2342 16 3833 17 2211 18 793 19 797 20 2599 . If you wish to read an email message such as 2 5136, you can type the following: retr 2 If you want to delete a message such as 1 897, type dele 1: dele 1 When you are done checking your email, type quit. quit","title":"Email Telnet"},{"location":"Tech/Messaging/Email_Telnet/#send-email","text":"Original at Mediatemple TIP: We use the domain example.com as an example. Be sure to replace with your own domain. Open your command prompt. Now, connect with telnet using the following command: telnet example.com 25 Type ehlo example.com. Some servers also accept helo in place of ehlo. ehlo example.com Type mail from: username@example.com: mail from: username@example.com Type rcpt to: friend@hotmail.com, friend2@yahoo.com (replace with your actual recipient name): rcpt to: friend@hotmail.com, friend2@yahoo.com To write the message - type data, followed by your subject and message. To end the message, put a period on a line by itself and press enter: data Subject: My Telnet Test Email Hello, This is an email sent by using the telnet command. Your friend, Me . Type quit to exit telnet. quit","title":"Send email"},{"location":"Tech/Messaging/Email_Telnet/#how-to-check-or-read-email","text":"Original at Mediatemple * Open your command prompt. At the command prompt, type in telnet example.com 110 Type user and the email address (username@example.com) of the user for which you wish to view emails: user username@example.com Then type in pass followed by your password: pass yourpasswordgoeshere Type list to bring up a list of your emails: list You will see a list of items with labels like \"1 897\" and \"2 5136.\" Here is an example: list +OK POP3 clients that break here, they violate STD53. 1 897 2 5136 3 1884 4 2973 5 2595 6 3063 7 3509 8 2283 9 1926 10 2763 11 1795 12 2780 13 2342 14 2342 15 2342 16 3833 17 2211 18 793 19 797 20 2599 . If you wish to read an email message such as 2 5136, you can type the following: retr 2 If you want to delete a message such as 1 897, type dele 1: dele 1 When you are done checking your email, type quit. quit","title":"How to check or read email"},{"location":"Tech/Messaging/Postfix/","text":"Show configuration ~ # postconf Show only non-default values ~ # postconf -n Display all default values ~ # postconf -d List map lookup types ~ # postconf -m Show queue mqilq postqueue -p","title":"Postfix"},{"location":"Tech/Messaging/Postfix/#show-configuration","text":"~ # postconf","title":"Show configuration"},{"location":"Tech/Messaging/Postfix/#show-only-non-default-values","text":"~ # postconf -n","title":"Show only non-default values"},{"location":"Tech/Messaging/Postfix/#display-all-default-values","text":"~ # postconf -d","title":"Display all default values"},{"location":"Tech/Messaging/Postfix/#list-map-lookup-types","text":"~ # postconf -m","title":"List map lookup types"},{"location":"Tech/Messaging/Postfix/#show-queue","text":"mqilq postqueue -p","title":"Show queue"},{"location":"Tech/Messaging/SMS/","text":"Via minicom minicom -s AT+CMGF=1 AT+CMGS=\"+xxxxxxxxxx\" Write message here. <ctrl+z> SMSd smssend +xxxxxxxxxxx 'One-Line Test 02' > /dev/null 2>&1 Example smsd.conf. Read the manual for a description devices = xenium0 logfile = /var/log/smsd/smsd.log loglevel = 2 #user = smstools user = nagios # 3.1.5 introduced smart logging # once your configuration is OK, set log level lower (5 is good in most cases) smart_logging = yes infofile = /run/smsd/smsd.working pidfile = /run/smsd/smsd.pid [xenium0] device = /dev/ttyUSB0 #pin = 1122 pin = ignore baudrate = 115200 rtscts = no #init = ATE0 #init = at+cpms=\"sm\",\"sm\",\"\" #init = AT+CMGF=1 loglevel_lac_ci = 8 incoming = yes incoming = high","title":"SMS"},{"location":"Tech/Messaging/SMS/#via-minicom","text":"minicom -s AT+CMGF=1 AT+CMGS=\"+xxxxxxxxxx\" Write message here. <ctrl+z>","title":"Via minicom"},{"location":"Tech/Messaging/SMS/#smsd","text":"smssend +xxxxxxxxxxx 'One-Line Test 02' > /dev/null 2>&1 Example smsd.conf. Read the manual for a description devices = xenium0 logfile = /var/log/smsd/smsd.log loglevel = 2 #user = smstools user = nagios # 3.1.5 introduced smart logging # once your configuration is OK, set log level lower (5 is good in most cases) smart_logging = yes infofile = /run/smsd/smsd.working pidfile = /run/smsd/smsd.pid [xenium0] device = /dev/ttyUSB0 #pin = 1122 pin = ignore baudrate = 115200 rtscts = no #init = ATE0 #init = at+cpms=\"sm\",\"sm\",\"\" #init = AT+CMGF=1 loglevel_lac_ci = 8 incoming = yes incoming = high","title":"SMSd"},{"location":"Tech/Monitoring/80_tools_for_monitoring/","text":"Top This is a small tool which is pre-installed on many unix systems. When you want an overview of all the processes or threads running in the system: top is a good tool. Order processes on different criteria \u2013 the default of which is CPU. htop Htop is essentially an enhanced version of top. It\u2019s easier to sort by processes. It\u2019s visually easier to understand and has built in commands for common things you would like to do. Plus it\u2019s fully interactive. atop Atop monitors all processes much like top and htop, unlike top and htop however it has daily logging of the processes for long-term analysis. It also shows resource consumption by all processes. It will also highlight resources that have reached a critical load. apachetop Apachetop monitors the overall performance of your apache webserver. It\u2019s largely based on mytop. It displays current number of reads, writes and the overall number of requests processed. ftptop ftptop gives you basic information of all the current ftp connections to your server such as the total amount of sessions, how many are uploading and downloading and who the client is. mytop mytop is a neat tool for monitoring threads and performance of mysql. It gives you a live look into the database and what queries it\u2019s processing in real time. powertop powertop helps you diagnose issues that has to do with power consumption and power management. It can also help you experiment with power management settings to achieve the most efficient settings for your server. You switch tabs with the tab key. iotop iotop checks the I/O usage information and gives you a top-like interface to that. It displays columns on read and write and each row represents a process. It also displays the percentage of time the process spent while swapping in and while waiting on I/O. ntopng ntopng is the next generation of ntop and the tool provides a graphical user interface via the browser for network monitoring. It can do stuff such as: geolocate hosts, get network traffic and show ip traffic distribution and analyze it. iftop iftop is similar to top, but instead of mainly checking for cpu usage it listens to network traffic on selected network interfaces and displays a table of current usage. It can be handy for answering questions such as \u201cWhy on earth is my internet connection so slow?!\u201d. jnettop jnettop visualises network traffic in much the same way as iftop does. It also supports customizable text output and a machine-friendly mode to support further analysis. bandwidthd BandwidthD tracks usage of TCP/IP network subnets and visualises that in the browser by building a html page with graphs in png. There is a database driven system that supports searching, filtering, multiple sensors and custom reports. EtherApe EtherApe displays network traffic graphically, the more talkative the bigger the node. It either captures live traffic or can read it from a tcpdump. The displayed can also be refined using a network filter with pcap syntax. ethtool ethtool is used for displaying and modifying some parameters of the network interface controllers. It can also be used to diagnose Ethernet devices and get more statistics from the devices. NetHogs NetHogs breaks down network traffic per protocol or per subnet. It then groups by process. So if there\u2019s a surge in network traffic you can fire up NetHogs and see which process is causing it. iptraf iptraf gathers a variety of metrics such as TCP connection packet and byte count, interface statistics and activity indicators, TCP/UDP traffic breakdowns and station packet and byte counts. ngrep ngrep is grep but for the network layer. It\u2019s pcap aware and will allow to specify extended regular or hexadecimal expressions to match against packets of . MRTG MRTG was orginally developed to monitor router traffic, but now it\u2019s able to monitor other network related things as well. It typically collects every five minutes and then generates a html page. It also has the capability of sending warning emails. bmon Bmon monitors and helps you debug networks. It captures network related statistics and presents it in human friendly way. You can also interact with bmon through curses or through scripting. traceroute Traceroute is a built-in tool for displaying the route and measuring the delay of packets across a network. IPTState IPTState allows you to watch where traffic that crosses your iptables is going and then sort that by different criteria as you please. The tool also allows you to delete states from the table. darkstat Darkstat captures network traffic and calculates statistics about usage. The reports are served over a simple HTTP server and gives you a nice graphical user interface of the graphs. vnStat vnStat is a network traffic monitor that uses statistics provided by the kernel which ensures light use of system resources. The gathered statistics persists through system reboots. It has color options for the artistic sysadmins. netstat Netstat is a built-in tool that displays TCP network connections, routing tables and a number of network interfaces. It\u2019s used to find problems in the network. ss Instead of using netstat, it\u2019s however preferable to use ss. The ss command is capable of showing more information than netstat and is actually faster. If you want a summary statistics you can use the command ss -s. nmap Nmap allows you to scan your server for open ports or detect which OS is being used. But you could also use this for SQL injection vulnerabilities, network discovery and other means related to penetration testing. MTR MTR combines the functionality of traceroute and the ping tool into a single network diagnostic tool. When using the tool it will limit the number hops individual packets has to travel while also listening to their expiry. It then repeats this every second. tcpdump tcpdump will output a description of the contents of the packet it just captured which matches the expression that you provided in the command. You can also save the this data for further analysis. Justniffer Justniffer is a tcp packet sniffer. You can choose whether you would like to collect low-level data or high-level data with this sniffer. It also allows you to generate logs in customizable way. You could for instance mimic the access log that apache has. Server Density Our server monitoring tool! It has a web interface that allows you to set alerts and view graphs for all system and network metrics. You can also set up monitoring of websites whether they are up or down. Server Density allows you to set permissions for users and you can extend your monitoring with our plugin infrastructure or api. The service already supports Nagios plugins. OpenNMS OpenNMS has four main functional areas: event management and notifications; discovery and provisioning; service monitoring and data collection. It\u2019s designed to be customizable to work in a variety of network environments. SysUsage SysUsage monitors your system continuously via Sar and other system commands. It also allows notifications to alarm you once a threshold is reached. SysUsage itself can be run from a centralized place where all the collected statistics are also being stored. It has a web interface where you can view all the stats. brainypdm brainypdm is a data management and monitoring tool that has the capability to gather data from nagios or another generic source to make graphs. It\u2019s cross-platform, has custom graphs and is web based. PCP PCP has the capability of collating metrics from multiple hosts and does so efficiently. It also has a plugin framework so you can make it collect specific metrics that is important to you. You can access graph data through either a web interface or a GUI. Good for monitoring large systems. KDE system guard This tool is both a system monitor and task manager. You can view server metrics from several machines through the worksheet and if a process needs to be killed or if you need to start a process it can be done within KDE system guard. Munin Munin is both a network and a system monitoring tool which offers alerts for when metrics go beyond a given threshold. It uses RRDtool to create the graphs and it has web interface to display these graphs. Its emphasis is on plug and play capabilities with a number of plugins available. Nagios Nagios is system and network monitoring tool that helps you monitor monitor your many servers. It has support for alerting for when things go wrong. It also has many plugins written for the platform. Zenoss Zenoss provides a web interface that allows you to monitor all system and network metrics. Moreover it discovers network resources and changes in network configurations. It has alerts for you to take action on and it supports the Nagios plugins. Cacti (And one for luck!) Cacti is network graphing solution that uses the RRDtool data storage. It allows a user to poll services at predetermined intervals and graph the result. Cacti can be extended to monitor a source of your choice through shell scripts. Zabbix Zabbix is an open source infrastructure monitoring solution. It can use most databases out there to store the monitoring statistics. The Core is written in C and has a frontend in PHP. If you don\u2019t like installing an agent, Zabbix might be an option for you. nmon nmon either outputs the data on screen or saves it in a comma separated file. You can display CPU, memory, network, filesystems, top processes. The data can also be added to a RRD database for further analysis. conky Conky monitors a plethora of different OS stats. It has support for IMAP and POP3 and even support for many popular music players! For the handy person you could extend it with your own scripts or programs using Lua. Glances Glances monitors your system and aims to present a maximum amount of information in a minimum amount of space. It has the capability to function in a client/server mode as well as monitoring remotely. It also has a web interface. saidar Saidar is a very small tool that gives you basic information about your system resources. It displays a full screen of the standard system resources. The emphasis for saidar is being as simple as possible. RRDtool RRDtool is a tool developed to handle round-robin databases or RRD. RRD aims to handle time-series data like CPU load, temperatures etc. This tool provides a way to extract RRD data in a graphical format. monit Monit has the capability of sending you alerts as well as restarting services if they run into trouble. It\u2019s possible to perform any type of check you could write a script for with monit and it has a web user interface to ease your eyes. Linux process explorer Linux process explorer is akin to the activity monitor for OSX or the windows equivalent. It aims to be more usable than top or ps. You can view each process and see how much memory usage or CPU it uses. df df is an abbreviation for disk free and is pre-installed program in all unix systems used to display the amount of available disk space for filesystems which the user have access to. discus Discus is similar to df however it aims to improve df by making it prettier using fancy features as colors, graphs and smart formatting of numbers. xosview xosview is a classic system monitoring tool and it gives you a simple overview of all the different parts of the including IRQ. Dstat Dstat aims to be a replacement for vmstat, iostat, netstat and ifstat. It allows you to view all of your system resources in real-time. The data can then be exported into csv. Most importantly dstat allows for plugins and could thus be extended into areas not yet known to mankind. Net-SNMP SNMP is the protocol \u2018simple network management protocol\u2019 and the Net-SNMP tool suite helps you collect accurate information about your servers using this protocol. incron Incron allows you to monitor a directory tree and then take action on those changes. If you wanted to copy files to directory \u2018b\u2019 once new files appeared in directory \u2018a\u2019 that\u2019s exactly what incron does. monitorix Monitorix is lightweight system monitoring tool. It helps you monitor a single machine and gives you a wealth of metrics. It also has a built-in HTTP server to view graphs and a reporting mechanism of all metrics. vmstat vmstat or virtual memory statistics is a small built-in tool that monitors and displays a summary about the memory in the machine. uptime This small command that quickly gives you information about how long the machine has been running, how many users currently are logged on and the system load average for the past 1, 5 and 15 minutes. mpstat mpstat is a built-in tool that monitors cpu usage. The most common command is using mpstat -P ALL which gives you the usage of all the cores. You can also get an interval update of the CPU usage. pmap pmap is a built-in tool that reports the memory map of a process. You can use this command to find out causes of memory bottlenecks. ps The ps command will give you an overview of all the current processes. You can easily select all processes using the command ps -A sar sar is a part of the sysstat package and helps you to collect, report and save different system metrics. With different commands it will give you CPU, memory and I/O usage among other things. collectl Similar to sar collectl collects performance metrics for your machine. By default it shows cpu, network and disk stats but it collects a lot more. The difference to sar is collectl is able to deal with times below 1 second, it can be fed into a plotting tool directly and collectl monitors processes more extensively. iostat iostat is also part of the sysstat package. This command is used for monitoring system input/output. The reports themselves can be used to change system configurations to better balance input/output load between hard drives in your machine. free This is a built-in command that displays the total amount of free and used physical memory on your machine. It also displays the buffers used by the kernel at that given moment. /Proc file system The proc file system gives you a peek into kernel statistics. From these statistics you can get detailed information about the different hardware devices on your machine. Take a look at the full list of the proc file statistics GKrellM GKrellm is a gui application that monitor the status of your hardware such CPU, main memory, hard disks, network interfaces and many other things. It can also monitor and launch a mail reader of your choice. Gnome system monitor Gnome system monitor is a basic system monitoring tool that has features looking at process dependencies from a tree view, kill or renice processes and graphs of all server metrics. GoAccess GoAccess is a real-time web log analyzer which analyzes the access log from either apache, nginx or amazon cloudfront. It\u2019s also possible to output the data into HTML, JSON or CSV. It will give you general statistics, top visitors, 404s, geolocation and many other things. Logwatch Logwatch is a log analysis system. It parses through your system\u2019s logs and creates a report analyzing the areas that you specify. It can give you daily reports with short digests of the activities taking place on your machine. Swatch Much like Logwatch Swatch also monitors your logs, but instead of giving reports it watches for regular expression and notifies you via mail or the console when there is a match. It could be used for intruder detection for example. MultiTail MultiTail helps you monitor logfiles in multiple windows. You can merge two or more of these logfiles into one. It will also use colors to display the logfiles for easier reading with the help of regular expressions. acct or psacct acct or psacct (depending on if you use apt-get or yum) allows you to monitor all the commands a users executes inside the system including CPU and memory time. Once installed you get that summary with the command \u2018sa\u2019. whowatch Similar to acct this tool monitors users on your system and allows you to see in real time what commands and processes they are using. It gives you a tree structure of all the processes and so you can see exactly what\u2019s happening. strace strace is used to diagnose, debug and monitor interactions between processes. The most common thing to do is making strace print a list of system calls made by the program which is useful if the program does not behave as expected. DTrace DTrace is the big brother of strace. It dynamically patches live running instructions with instrumentation code. This allows you to do in-depth performance analysis and troubleshooting. However, it\u2019s not for the weak of heart as there is a 1200 book written on the topic. webmin Webmin is a web-based system administration tool. It removes the need to manually edit unix configuration files and lets you manage the system remotely if need be. It has a couple of monitoring modules that you can attach to it. stat Stat is a built-in tool for displaying status information of files and file systems. It will give you information such as when the file was modified, accessed or changed. ifconfig ifconfig is a built-in tool used to configure the network interfaces. Behind the scenes network monitor tools use ifconfig to set it into promiscuous mode to capture all packets. You can do it yourself with ifconfig eth0 promisc and return to normal mode with ifconfig eth0 -promisc. ulimit ulimit is a built-in tool that monitors system resources and keeps a limit so any of the monitored resources don\u2019t go overboard. For instance making a fork bomb where a properly configured ulimit is in place would be totally fine. cpulimit CPUlimit is a small tool that monitors and then limits the CPU usage of a process. It\u2019s particularly useful to make batch jobs not eat up too many CPU cycles. lshw lshw is a small built-in tool extract detailed information about the hardware configuration of the machine. It can output everything from CPU version and speed to mainboard configuration. w W is a built-in command that displays information about the users currently using the machine and their processes. lsof lsof is a built-in tool that gives you a list of all open files and network connections. From there you can narrow it down to files opened by processes, based on the process name, by a specific user or perhaps kill all processes that belongs to a specific user. collectd Collectd is a Unix daemon that collects all your monitoring statistics. It uses a modular design and plugins to fill in any niche monitoring. This way collectd stays as lightweight and customizable as possible. Observium Observium is an auto-discovering network monitoring platform supporting a wide range of hardware platforms and operating systems. Observium focuses on providing a beautiful and powerful yet simple and intuitive interface to the health and status of your network. Nload It\u2019s a command line tool that monitors network throughput. It\u2019s neat because it visualizes the in and and outgoing traffic using two graphs and some additional useful data like total amount of transferred data. You can install it with yum install nload or 1 sudo apt-get install nload SmokePing SmokePing keeps track of the network latencies of your network and it visualises them too. There are a wide range of latency measurement plugins developed for SmokePing. If a GUI is important to you it\u2019s there is an ongoing development to make that happen. MobaXterm If you\u2019re working in windows environment day in and day out. You may feel limited by the terminal Windows provides. MobaXterm comes to the rescue and allows you to use many of the terminal commands commonly found in Linux. Which will help you tremendously in your monitoring needs! Shinken monitoring Shinken is a monitoring framework which is a total rewrite of Nagios in python. It aims to enhance flexibility and managing a large environment. While still keeping all your nagios configuration and plugins.","title":"80 tools for monitoring"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#top","text":"This is a small tool which is pre-installed on many unix systems. When you want an overview of all the processes or threads running in the system: top is a good tool. Order processes on different criteria \u2013 the default of which is CPU.","title":"Top"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#htop","text":"Htop is essentially an enhanced version of top. It\u2019s easier to sort by processes. It\u2019s visually easier to understand and has built in commands for common things you would like to do. Plus it\u2019s fully interactive.","title":"htop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#atop","text":"Atop monitors all processes much like top and htop, unlike top and htop however it has daily logging of the processes for long-term analysis. It also shows resource consumption by all processes. It will also highlight resources that have reached a critical load.","title":"atop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#apachetop","text":"Apachetop monitors the overall performance of your apache webserver. It\u2019s largely based on mytop. It displays current number of reads, writes and the overall number of requests processed.","title":"apachetop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#ftptop","text":"ftptop gives you basic information of all the current ftp connections to your server such as the total amount of sessions, how many are uploading and downloading and who the client is.","title":"ftptop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#mytop","text":"mytop is a neat tool for monitoring threads and performance of mysql. It gives you a live look into the database and what queries it\u2019s processing in real time.","title":"mytop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#powertop","text":"powertop helps you diagnose issues that has to do with power consumption and power management. It can also help you experiment with power management settings to achieve the most efficient settings for your server. You switch tabs with the tab key.","title":"powertop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#iotop","text":"iotop checks the I/O usage information and gives you a top-like interface to that. It displays columns on read and write and each row represents a process. It also displays the percentage of time the process spent while swapping in and while waiting on I/O.","title":"iotop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#ntopng","text":"ntopng is the next generation of ntop and the tool provides a graphical user interface via the browser for network monitoring. It can do stuff such as: geolocate hosts, get network traffic and show ip traffic distribution and analyze it.","title":"ntopng"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#iftop","text":"iftop is similar to top, but instead of mainly checking for cpu usage it listens to network traffic on selected network interfaces and displays a table of current usage. It can be handy for answering questions such as \u201cWhy on earth is my internet connection so slow?!\u201d.","title":"iftop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#jnettop","text":"jnettop visualises network traffic in much the same way as iftop does. It also supports customizable text output and a machine-friendly mode to support further analysis.","title":"jnettop"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#bandwidthd","text":"BandwidthD tracks usage of TCP/IP network subnets and visualises that in the browser by building a html page with graphs in png. There is a database driven system that supports searching, filtering, multiple sensors and custom reports.","title":"bandwidthd"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#etherape","text":"EtherApe displays network traffic graphically, the more talkative the bigger the node. It either captures live traffic or can read it from a tcpdump. The displayed can also be refined using a network filter with pcap syntax.","title":"EtherApe"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#ethtool","text":"ethtool is used for displaying and modifying some parameters of the network interface controllers. It can also be used to diagnose Ethernet devices and get more statistics from the devices.","title":"ethtool"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#nethogs","text":"NetHogs breaks down network traffic per protocol or per subnet. It then groups by process. So if there\u2019s a surge in network traffic you can fire up NetHogs and see which process is causing it.","title":"NetHogs"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#iptraf","text":"iptraf gathers a variety of metrics such as TCP connection packet and byte count, interface statistics and activity indicators, TCP/UDP traffic breakdowns and station packet and byte counts.","title":"iptraf"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#ngrep","text":"ngrep is grep but for the network layer. It\u2019s pcap aware and will allow to specify extended regular or hexadecimal expressions to match against packets of .","title":"ngrep"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#mrtg","text":"MRTG was orginally developed to monitor router traffic, but now it\u2019s able to monitor other network related things as well. It typically collects every five minutes and then generates a html page. It also has the capability of sending warning emails.","title":"MRTG"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#bmon","text":"Bmon monitors and helps you debug networks. It captures network related statistics and presents it in human friendly way. You can also interact with bmon through curses or through scripting.","title":"bmon"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#traceroute","text":"Traceroute is a built-in tool for displaying the route and measuring the delay of packets across a network.","title":"traceroute"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#iptstate","text":"IPTState allows you to watch where traffic that crosses your iptables is going and then sort that by different criteria as you please. The tool also allows you to delete states from the table.","title":"IPTState"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#darkstat","text":"Darkstat captures network traffic and calculates statistics about usage. The reports are served over a simple HTTP server and gives you a nice graphical user interface of the graphs.","title":"darkstat"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#vnstat","text":"vnStat is a network traffic monitor that uses statistics provided by the kernel which ensures light use of system resources. The gathered statistics persists through system reboots. It has color options for the artistic sysadmins.","title":"vnStat"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#netstat","text":"Netstat is a built-in tool that displays TCP network connections, routing tables and a number of network interfaces. It\u2019s used to find problems in the network.","title":"netstat"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#ss","text":"Instead of using netstat, it\u2019s however preferable to use ss. The ss command is capable of showing more information than netstat and is actually faster. If you want a summary statistics you can use the command ss -s.","title":"ss"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#nmap","text":"Nmap allows you to scan your server for open ports or detect which OS is being used. But you could also use this for SQL injection vulnerabilities, network discovery and other means related to penetration testing.","title":"nmap"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#mtr","text":"MTR combines the functionality of traceroute and the ping tool into a single network diagnostic tool. When using the tool it will limit the number hops individual packets has to travel while also listening to their expiry. It then repeats this every second.","title":"MTR"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#tcpdump","text":"tcpdump will output a description of the contents of the packet it just captured which matches the expression that you provided in the command. You can also save the this data for further analysis.","title":"tcpdump"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#justniffer","text":"Justniffer is a tcp packet sniffer. You can choose whether you would like to collect low-level data or high-level data with this sniffer. It also allows you to generate logs in customizable way. You could for instance mimic the access log that apache has.","title":"Justniffer"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#server-density","text":"Our server monitoring tool! It has a web interface that allows you to set alerts and view graphs for all system and network metrics. You can also set up monitoring of websites whether they are up or down. Server Density allows you to set permissions for users and you can extend your monitoring with our plugin infrastructure or api. The service already supports Nagios plugins.","title":"Server Density"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#opennms","text":"OpenNMS has four main functional areas: event management and notifications; discovery and provisioning; service monitoring and data collection. It\u2019s designed to be customizable to work in a variety of network environments.","title":"OpenNMS"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#sysusage","text":"SysUsage monitors your system continuously via Sar and other system commands. It also allows notifications to alarm you once a threshold is reached. SysUsage itself can be run from a centralized place where all the collected statistics are also being stored. It has a web interface where you can view all the stats.","title":"SysUsage"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#brainypdm","text":"brainypdm is a data management and monitoring tool that has the capability to gather data from nagios or another generic source to make graphs. It\u2019s cross-platform, has custom graphs and is web based.","title":"brainypdm"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#pcp","text":"PCP has the capability of collating metrics from multiple hosts and does so efficiently. It also has a plugin framework so you can make it collect specific metrics that is important to you. You can access graph data through either a web interface or a GUI. Good for monitoring large systems.","title":"PCP"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#kde-system-guard","text":"This tool is both a system monitor and task manager. You can view server metrics from several machines through the worksheet and if a process needs to be killed or if you need to start a process it can be done within KDE system guard.","title":"KDE system guard"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#munin","text":"Munin is both a network and a system monitoring tool which offers alerts for when metrics go beyond a given threshold. It uses RRDtool to create the graphs and it has web interface to display these graphs. Its emphasis is on plug and play capabilities with a number of plugins available.","title":"Munin"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#nagios","text":"Nagios is system and network monitoring tool that helps you monitor monitor your many servers. It has support for alerting for when things go wrong. It also has many plugins written for the platform.","title":"Nagios"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#zenoss","text":"Zenoss provides a web interface that allows you to monitor all system and network metrics. Moreover it discovers network resources and changes in network configurations. It has alerts for you to take action on and it supports the Nagios plugins.","title":"Zenoss"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#cacti","text":"(And one for luck!) Cacti is network graphing solution that uses the RRDtool data storage. It allows a user to poll services at predetermined intervals and graph the result. Cacti can be extended to monitor a source of your choice through shell scripts.","title":"Cacti"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#zabbix","text":"Zabbix is an open source infrastructure monitoring solution. It can use most databases out there to store the monitoring statistics. The Core is written in C and has a frontend in PHP. If you don\u2019t like installing an agent, Zabbix might be an option for you.","title":"Zabbix"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#nmon","text":"nmon either outputs the data on screen or saves it in a comma separated file. You can display CPU, memory, network, filesystems, top processes. The data can also be added to a RRD database for further analysis.","title":"nmon"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#conky","text":"Conky monitors a plethora of different OS stats. It has support for IMAP and POP3 and even support for many popular music players! For the handy person you could extend it with your own scripts or programs using Lua.","title":"conky"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#glances","text":"Glances monitors your system and aims to present a maximum amount of information in a minimum amount of space. It has the capability to function in a client/server mode as well as monitoring remotely. It also has a web interface.","title":"Glances"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#saidar","text":"Saidar is a very small tool that gives you basic information about your system resources. It displays a full screen of the standard system resources. The emphasis for saidar is being as simple as possible.","title":"saidar"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#rrdtool","text":"RRDtool is a tool developed to handle round-robin databases or RRD. RRD aims to handle time-series data like CPU load, temperatures etc. This tool provides a way to extract RRD data in a graphical format.","title":"RRDtool"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#monit","text":"Monit has the capability of sending you alerts as well as restarting services if they run into trouble. It\u2019s possible to perform any type of check you could write a script for with monit and it has a web user interface to ease your eyes.","title":"monit"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#linux-process-explorer","text":"Linux process explorer is akin to the activity monitor for OSX or the windows equivalent. It aims to be more usable than top or ps. You can view each process and see how much memory usage or CPU it uses.","title":"Linux process explorer"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#df","text":"df is an abbreviation for disk free and is pre-installed program in all unix systems used to display the amount of available disk space for filesystems which the user have access to.","title":"df"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#discus","text":"Discus is similar to df however it aims to improve df by making it prettier using fancy features as colors, graphs and smart formatting of numbers.","title":"discus"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#xosview","text":"xosview is a classic system monitoring tool and it gives you a simple overview of all the different parts of the including IRQ.","title":"xosview"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#dstat","text":"Dstat aims to be a replacement for vmstat, iostat, netstat and ifstat. It allows you to view all of your system resources in real-time. The data can then be exported into csv. Most importantly dstat allows for plugins and could thus be extended into areas not yet known to mankind.","title":"Dstat"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#net-snmp","text":"SNMP is the protocol \u2018simple network management protocol\u2019 and the Net-SNMP tool suite helps you collect accurate information about your servers using this protocol.","title":"Net-SNMP"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#incron","text":"Incron allows you to monitor a directory tree and then take action on those changes. If you wanted to copy files to directory \u2018b\u2019 once new files appeared in directory \u2018a\u2019 that\u2019s exactly what incron does.","title":"incron"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#monitorix","text":"Monitorix is lightweight system monitoring tool. It helps you monitor a single machine and gives you a wealth of metrics. It also has a built-in HTTP server to view graphs and a reporting mechanism of all metrics.","title":"monitorix"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#vmstat","text":"vmstat or virtual memory statistics is a small built-in tool that monitors and displays a summary about the memory in the machine.","title":"vmstat"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#uptime","text":"This small command that quickly gives you information about how long the machine has been running, how many users currently are logged on and the system load average for the past 1, 5 and 15 minutes.","title":"uptime"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#mpstat","text":"mpstat is a built-in tool that monitors cpu usage. The most common command is using mpstat -P ALL which gives you the usage of all the cores. You can also get an interval update of the CPU usage.","title":"mpstat"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#pmap","text":"pmap is a built-in tool that reports the memory map of a process. You can use this command to find out causes of memory bottlenecks.","title":"pmap"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#ps","text":"The ps command will give you an overview of all the current processes. You can easily select all processes using the command ps -A","title":"ps"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#sar","text":"sar is a part of the sysstat package and helps you to collect, report and save different system metrics. With different commands it will give you CPU, memory and I/O usage among other things.","title":"sar"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#collectl","text":"Similar to sar collectl collects performance metrics for your machine. By default it shows cpu, network and disk stats but it collects a lot more. The difference to sar is collectl is able to deal with times below 1 second, it can be fed into a plotting tool directly and collectl monitors processes more extensively.","title":"collectl"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#iostat","text":"iostat is also part of the sysstat package. This command is used for monitoring system input/output. The reports themselves can be used to change system configurations to better balance input/output load between hard drives in your machine.","title":"iostat"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#free","text":"This is a built-in command that displays the total amount of free and used physical memory on your machine. It also displays the buffers used by the kernel at that given moment.","title":"free"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#proc-file-system","text":"The proc file system gives you a peek into kernel statistics. From these statistics you can get detailed information about the different hardware devices on your machine. Take a look at the full list of the proc file statistics","title":"/Proc file system"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#gkrellm","text":"GKrellm is a gui application that monitor the status of your hardware such CPU, main memory, hard disks, network interfaces and many other things. It can also monitor and launch a mail reader of your choice.","title":"GKrellM"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#gnome-system-monitor","text":"Gnome system monitor is a basic system monitoring tool that has features looking at process dependencies from a tree view, kill or renice processes and graphs of all server metrics.","title":"Gnome system monitor"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#goaccess","text":"GoAccess is a real-time web log analyzer which analyzes the access log from either apache, nginx or amazon cloudfront. It\u2019s also possible to output the data into HTML, JSON or CSV. It will give you general statistics, top visitors, 404s, geolocation and many other things.","title":"GoAccess"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#logwatch","text":"Logwatch is a log analysis system. It parses through your system\u2019s logs and creates a report analyzing the areas that you specify. It can give you daily reports with short digests of the activities taking place on your machine.","title":"Logwatch"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#swatch","text":"Much like Logwatch Swatch also monitors your logs, but instead of giving reports it watches for regular expression and notifies you via mail or the console when there is a match. It could be used for intruder detection for example.","title":"Swatch"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#multitail","text":"MultiTail helps you monitor logfiles in multiple windows. You can merge two or more of these logfiles into one. It will also use colors to display the logfiles for easier reading with the help of regular expressions.","title":"MultiTail"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#acct-or-psacct","text":"acct or psacct (depending on if you use apt-get or yum) allows you to monitor all the commands a users executes inside the system including CPU and memory time. Once installed you get that summary with the command \u2018sa\u2019.","title":"acct or psacct"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#whowatch","text":"Similar to acct this tool monitors users on your system and allows you to see in real time what commands and processes they are using. It gives you a tree structure of all the processes and so you can see exactly what\u2019s happening.","title":"whowatch"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#strace","text":"strace is used to diagnose, debug and monitor interactions between processes. The most common thing to do is making strace print a list of system calls made by the program which is useful if the program does not behave as expected.","title":"strace"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#dtrace","text":"DTrace is the big brother of strace. It dynamically patches live running instructions with instrumentation code. This allows you to do in-depth performance analysis and troubleshooting. However, it\u2019s not for the weak of heart as there is a 1200 book written on the topic.","title":"DTrace"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#webmin","text":"Webmin is a web-based system administration tool. It removes the need to manually edit unix configuration files and lets you manage the system remotely if need be. It has a couple of monitoring modules that you can attach to it.","title":"webmin"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#stat","text":"Stat is a built-in tool for displaying status information of files and file systems. It will give you information such as when the file was modified, accessed or changed.","title":"stat"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#ifconfig","text":"ifconfig is a built-in tool used to configure the network interfaces. Behind the scenes network monitor tools use ifconfig to set it into promiscuous mode to capture all packets. You can do it yourself with ifconfig eth0 promisc and return to normal mode with ifconfig eth0 -promisc.","title":"ifconfig"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#ulimit","text":"ulimit is a built-in tool that monitors system resources and keeps a limit so any of the monitored resources don\u2019t go overboard. For instance making a fork bomb where a properly configured ulimit is in place would be totally fine.","title":"ulimit"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#cpulimit","text":"CPUlimit is a small tool that monitors and then limits the CPU usage of a process. It\u2019s particularly useful to make batch jobs not eat up too many CPU cycles.","title":"cpulimit"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#lshw","text":"lshw is a small built-in tool extract detailed information about the hardware configuration of the machine. It can output everything from CPU version and speed to mainboard configuration.","title":"lshw"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#w","text":"W is a built-in command that displays information about the users currently using the machine and their processes.","title":"w"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#lsof","text":"lsof is a built-in tool that gives you a list of all open files and network connections. From there you can narrow it down to files opened by processes, based on the process name, by a specific user or perhaps kill all processes that belongs to a specific user.","title":"lsof"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#collectd","text":"Collectd is a Unix daemon that collects all your monitoring statistics. It uses a modular design and plugins to fill in any niche monitoring. This way collectd stays as lightweight and customizable as possible.","title":"collectd"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#observium","text":"Observium is an auto-discovering network monitoring platform supporting a wide range of hardware platforms and operating systems. Observium focuses on providing a beautiful and powerful yet simple and intuitive interface to the health and status of your network.","title":"Observium"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#nload","text":"It\u2019s a command line tool that monitors network throughput. It\u2019s neat because it visualizes the in and and outgoing traffic using two graphs and some additional useful data like total amount of transferred data. You can install it with yum install nload or 1 sudo apt-get install nload","title":"Nload"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#smokeping","text":"SmokePing keeps track of the network latencies of your network and it visualises them too. There are a wide range of latency measurement plugins developed for SmokePing. If a GUI is important to you it\u2019s there is an ongoing development to make that happen.","title":"SmokePing"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#mobaxterm","text":"If you\u2019re working in windows environment day in and day out. You may feel limited by the terminal Windows provides. MobaXterm comes to the rescue and allows you to use many of the terminal commands commonly found in Linux. Which will help you tremendously in your monitoring needs!","title":"MobaXterm"},{"location":"Tech/Monitoring/80_tools_for_monitoring/#shinken-monitoring","text":"Shinken is a monitoring framework which is a total rewrite of Nagios in python. It aims to enhance flexibility and managing a large environment. While still keeping all your nagios configuration and plugins.","title":"Shinken monitoring"},{"location":"Tech/Monitoring/Nagios/","text":"Convert Nagios server logs to human-readable format cat <path_to_nagios_log_file> | perl -pe 's/(\\d+)/localtime($1)/e' Check TCP port from remote Windows PC Download check_tcp.exe to C:\\Program Files\\NSClient++\\ Create PowerShell external script - check_tcp_port : $exe = 'C:\\Program Files\\NSClient++\\check_tcp.exe' $arg1 = '-H' $arg2 = '<place_remote_host_ip_here' $arg3 = '-p' $arg4 = '<place_remote_tcp_port_here>' $arg5 = '-w' $arg6 = '100' $arg7 = '-c' $arg8 = '1000' $cmd = $arg1 + \" \" + $arg2 + \" \" + $arg3 + \" \" + $arg4 + \" \" + $arg5 + \" \" + $arg6 + \" \" + $arg7 + \" \" + $arg8 $process = New-Object -TypeName System.Diagnostics.Process $process.StartInfo.FileName = $exe $process.StartInfo.Arguments = $cmd $process.StartInfo.RedirectStandardOutput = $true $process.StartInfo.UseShellExecute = $false $status = $process.Start() $process.WaitForExit() $process.StandardOutput.ReadToEnd() exit $process.ExitCode Make a record in Nagion Agent configuration file: [/settings/external scripts/scripts] check_tcp_port = cmd /c echo scripts\\check_tcp_mq.ps1; exit($lastexitcode) | powershell.exe -command -","title":"Nagios"},{"location":"Tech/Monitoring/Nagios/#convert-nagios-server-logs-to-human-readable-format","text":"cat <path_to_nagios_log_file> | perl -pe 's/(\\d+)/localtime($1)/e'","title":"Convert Nagios server logs to human-readable format"},{"location":"Tech/Monitoring/Nagios/#check-tcp-port-from-remote-windows-pc","text":"Download check_tcp.exe to C:\\Program Files\\NSClient++\\ Create PowerShell external script - check_tcp_port : $exe = 'C:\\Program Files\\NSClient++\\check_tcp.exe' $arg1 = '-H' $arg2 = '<place_remote_host_ip_here' $arg3 = '-p' $arg4 = '<place_remote_tcp_port_here>' $arg5 = '-w' $arg6 = '100' $arg7 = '-c' $arg8 = '1000' $cmd = $arg1 + \" \" + $arg2 + \" \" + $arg3 + \" \" + $arg4 + \" \" + $arg5 + \" \" + $arg6 + \" \" + $arg7 + \" \" + $arg8 $process = New-Object -TypeName System.Diagnostics.Process $process.StartInfo.FileName = $exe $process.StartInfo.Arguments = $cmd $process.StartInfo.RedirectStandardOutput = $true $process.StartInfo.UseShellExecute = $false $status = $process.Start() $process.WaitForExit() $process.StandardOutput.ReadToEnd() exit $process.ExitCode Make a record in Nagion Agent configuration file: [/settings/external scripts/scripts] check_tcp_port = cmd /c echo scripts\\check_tcp_mq.ps1; exit($lastexitcode) | powershell.exe -command -","title":"Check TCP port from remote Windows PC"},{"location":"Tech/Monitoring/NetXMS/","text":"Web console cd /opt/ wget http://apache-mirror.rbc.ru/pub/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz tar zxvf apache-tomcat-7.0.70.tar.gz iptables -I INPUT -p tcp --dport 8005 -j ACCEPT iptables -I INPUT -p tcp --dport 8009 -j ACCEPT iptables -I INPUT -p tcp --dport 8080 -j ACCEPT iptables -I INPUT -p tcp --dport 8443 -j ACCEPT /opt/apache-tomcat-7.0.70/bin/startup.sh # ...Wait until tomcat is started... wget -O /opt/apache-tomcat-7.0.70/webapps/nxmc-2.0.5.war http://www.netxms.org/download/webui/nxmc-2.0.5.war http://<ip_address>:8080/nxmc-2.0.5/nxmc WMI Scripts #Query: /usr/local/bin/nxget 192.168.122.252 \"WMI.Query(root\\CIMV2,SELECT * FROM XXX)\" External parameter ExternalParameterShellExec = KasperskyBasesState:C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo c:\\Path_TO\\kav.vbs SQL queries parsing from the log-file # Print queries execution time. Change \"SELECT\" to keyword you want. grep \"SELECT\" <log-file> | grep -oP '[0-9]* ms' | awk '{print $1}' # Extarct all SQL-Inserts to file grep -oP '\\\"INSERT INTO.*' <log-file> > insert.sql # Extract all SQL-Selects to file grep -oP '\\\"SELECT.*' <log-file> > select.sql # Extract all other than inserts and selects t file grep -v '\\\"SELECT.*' <log-file> | grep -v '\\\"INSERT INTO.*' > other.sql # Extarct all SQL-Explains to file grep -oP '\\\"EXPLAIN.*' other.sql > explain.sql # Extarct all SQL-Updates to file grep -v '\\\"EXPLAIN.*' other.sql | grep -oP '\\\"UPDATE.*' > update.sql # Extarct all SQL-Deletes to file grep -v '\\\"EXPLAIN.*' other.sql | grep -v '\\\"UPDATE.*' | grep -oP '\\\"DELETE.*' > delete.sql # Extarct all SQL-Merges to file grep -v '\\\"EXPLAIN.*' other.sql | grep -v '\\\"UPDATE.*' | grep -v '\\\"DELETE.*' | grep -oP '\\\"MERGE.*' > merge.sql Installation MySQL Database mysql -u root -p mysql mysql> CREATE DATABASE netxms; mysql> GRANT ALL ON netxms.* TO netxms@localhost IDENTIFIED BY 'netxms'; mysql> \\q Installation from source tar zxvf netxms-x.x.x.tar.gz #tar zxvf netxms-2.0.6.tar.gz cd netxms-x.x.x #cd netxms-2.0.6 # You need MySQl or MariadDB development packages for installation with \"mysql\" option # On CentOS7 something like: # yum install mysql55-mysql-devel # yum install mariadb-devel sh ./configure --with-server --with-mysql --with-agent --prefix=<path_to_custom_dir> #sh ./configure --with-server --with-mysql --with-agent --prefix=/home/soft/netxms make make install vim /etc/netxmsd.conf --- DBDriver = <path_to_netxms_prefix>/lib/libnxddr_mysql.so #DBDriver = /home/soft/netxms/lib/libnxddr_mysql.so DBServer = localhost DBName = netxms DBLogin = netxms DBPassword = netxms LogFailedSQLQueries = yes LogFile = <path_to_netxms_prefix>/var/netxms.log #LogFile = /home/soft/netxms/var/netxms.log --- vim /etc/nxagentd.conf --- MasterServers = 127.0.0.1, localhost, centos-02.keeobot.net LogFile = <path_to_netxms_prefix>/var/nxagentd.log #LogFile = /home/soft/netxms/var/nxagentd.log --- touch <path_to_log_files> #touch /home/soft/netxms/var/netxms.log #touch /home/soft/netxms/var/nxagentd.log <path_to_netxms_prefix>/bin/nxdbmgr init <path_to_netxms_prefix>/sql/dbinit_mysql.sql #/home/soft/netxms/bin/nxdbmgr init /home/soft/netxms/share/netxms/sql/dbinit_mysql.sql <path_to_netxms_prefix>/bin/nxagentd -D6 -d <path_to_netxms_prefix>/bin/netxmsd -D6 -d #/home/soft/netxms/bin/nxagentd -D6 -d #/home/soft/netxms/bin/netxmsd -D6 -d Compile NXAgent with Mongo-C-Driver cd /opt # Mongo-C-Driver wget https://github.com/mongodb/mongo-c-driver/releases/download/1.6.0/mongo-c-driver-1.6.0.tar.gz tar xzvf mongo-c-driver-1.6.0.tar.gz && cd mongo-c-driver-1.6.0 ./configure --prefix=/opt/mongo-c-driver make && make install #NetXMS Agent with Mongo and SNMP git clone http://git.netxms.org/public/netxms.git nxbuild cd nxbuild git checkout stable-2.0 ./configure --with-agent --with-mongodb=/opt/mongo-c-driver --with-snmp --prefix=/opt/netxms make && make install","title":"NetXMS"},{"location":"Tech/Monitoring/NetXMS/#web-console","text":"cd /opt/ wget http://apache-mirror.rbc.ru/pub/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz tar zxvf apache-tomcat-7.0.70.tar.gz iptables -I INPUT -p tcp --dport 8005 -j ACCEPT iptables -I INPUT -p tcp --dport 8009 -j ACCEPT iptables -I INPUT -p tcp --dport 8080 -j ACCEPT iptables -I INPUT -p tcp --dport 8443 -j ACCEPT /opt/apache-tomcat-7.0.70/bin/startup.sh # ...Wait until tomcat is started... wget -O /opt/apache-tomcat-7.0.70/webapps/nxmc-2.0.5.war http://www.netxms.org/download/webui/nxmc-2.0.5.war http://<ip_address>:8080/nxmc-2.0.5/nxmc","title":"Web console"},{"location":"Tech/Monitoring/NetXMS/#wmi-scripts","text":"#Query: /usr/local/bin/nxget 192.168.122.252 \"WMI.Query(root\\CIMV2,SELECT * FROM XXX)\"","title":"WMI Scripts"},{"location":"Tech/Monitoring/NetXMS/#external-parameter","text":"ExternalParameterShellExec = KasperskyBasesState:C:\\Windows\\System32\\cscript.exe //E:VBscript //NoLogo c:\\Path_TO\\kav.vbs","title":"External parameter"},{"location":"Tech/Monitoring/NetXMS/#sql-queries-parsing-from-the-log-file","text":"# Print queries execution time. Change \"SELECT\" to keyword you want. grep \"SELECT\" <log-file> | grep -oP '[0-9]* ms' | awk '{print $1}' # Extarct all SQL-Inserts to file grep -oP '\\\"INSERT INTO.*' <log-file> > insert.sql # Extract all SQL-Selects to file grep -oP '\\\"SELECT.*' <log-file> > select.sql # Extract all other than inserts and selects t file grep -v '\\\"SELECT.*' <log-file> | grep -v '\\\"INSERT INTO.*' > other.sql # Extarct all SQL-Explains to file grep -oP '\\\"EXPLAIN.*' other.sql > explain.sql # Extarct all SQL-Updates to file grep -v '\\\"EXPLAIN.*' other.sql | grep -oP '\\\"UPDATE.*' > update.sql # Extarct all SQL-Deletes to file grep -v '\\\"EXPLAIN.*' other.sql | grep -v '\\\"UPDATE.*' | grep -oP '\\\"DELETE.*' > delete.sql # Extarct all SQL-Merges to file grep -v '\\\"EXPLAIN.*' other.sql | grep -v '\\\"UPDATE.*' | grep -v '\\\"DELETE.*' | grep -oP '\\\"MERGE.*' > merge.sql","title":"SQL queries parsing from the log-file"},{"location":"Tech/Monitoring/NetXMS/#installation","text":"MySQL Database mysql -u root -p mysql mysql> CREATE DATABASE netxms; mysql> GRANT ALL ON netxms.* TO netxms@localhost IDENTIFIED BY 'netxms'; mysql> \\q Installation from source tar zxvf netxms-x.x.x.tar.gz #tar zxvf netxms-2.0.6.tar.gz cd netxms-x.x.x #cd netxms-2.0.6 # You need MySQl or MariadDB development packages for installation with \"mysql\" option # On CentOS7 something like: # yum install mysql55-mysql-devel # yum install mariadb-devel sh ./configure --with-server --with-mysql --with-agent --prefix=<path_to_custom_dir> #sh ./configure --with-server --with-mysql --with-agent --prefix=/home/soft/netxms make make install vim /etc/netxmsd.conf --- DBDriver = <path_to_netxms_prefix>/lib/libnxddr_mysql.so #DBDriver = /home/soft/netxms/lib/libnxddr_mysql.so DBServer = localhost DBName = netxms DBLogin = netxms DBPassword = netxms LogFailedSQLQueries = yes LogFile = <path_to_netxms_prefix>/var/netxms.log #LogFile = /home/soft/netxms/var/netxms.log --- vim /etc/nxagentd.conf --- MasterServers = 127.0.0.1, localhost, centos-02.keeobot.net LogFile = <path_to_netxms_prefix>/var/nxagentd.log #LogFile = /home/soft/netxms/var/nxagentd.log --- touch <path_to_log_files> #touch /home/soft/netxms/var/netxms.log #touch /home/soft/netxms/var/nxagentd.log <path_to_netxms_prefix>/bin/nxdbmgr init <path_to_netxms_prefix>/sql/dbinit_mysql.sql #/home/soft/netxms/bin/nxdbmgr init /home/soft/netxms/share/netxms/sql/dbinit_mysql.sql <path_to_netxms_prefix>/bin/nxagentd -D6 -d <path_to_netxms_prefix>/bin/netxmsd -D6 -d #/home/soft/netxms/bin/nxagentd -D6 -d #/home/soft/netxms/bin/netxmsd -D6 -d","title":"Installation"},{"location":"Tech/Monitoring/NetXMS/#compile-nxagent-with-mongo-c-driver","text":"cd /opt # Mongo-C-Driver wget https://github.com/mongodb/mongo-c-driver/releases/download/1.6.0/mongo-c-driver-1.6.0.tar.gz tar xzvf mongo-c-driver-1.6.0.tar.gz && cd mongo-c-driver-1.6.0 ./configure --prefix=/opt/mongo-c-driver make && make install #NetXMS Agent with Mongo and SNMP git clone http://git.netxms.org/public/netxms.git nxbuild cd nxbuild git checkout stable-2.0 ./configure --with-agent --with-mongodb=/opt/mongo-c-driver --with-snmp --prefix=/opt/netxms make && make install","title":"Compile NXAgent with Mongo-C-Driver"},{"location":"Tech/Monitoring/Zabbix/","text":"Agent on AIX 6.1 Dependences: 1) gettext rpm -ivh ftp://www.oss4aix.org/latest/aix61/gettext-0.10.40-8.aix5.2.ppc.rpm 2) expat rpm -ivh ftp://www.oss4aix.org/compatible/aix61/expat-2.1.0-1.aix5.1.ppc.rpm 3) glib2 rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libgcc-4.7.2-1.aix6.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libffi-3.0.11-2.aix5.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/glib2-2.30.3-1.aix5.1.ppc.rpm 4) libconv rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libiconv-1.14-2.aix5.1.ppc.rpm Install zabbix agent: Unpack zabbix_agents_2.0.3.aix6100.powerpc.tar.gz on server and move files to their locations (bin, sbin) Upload your zabbix_agentd.conf to /etc mkgroup zabbix useradd -g zabbix zabbix \u2514R\u2514\u2500\u2514x\u2514t\u2514p\u2514u\u2514} \u2514~\u2514u\u2514\u2500\u2514q\u2514x\u2514\u2500\u2514t\u2514y\u2514}\u2514\u2588\u2514u \u2514t\u2514y\u2514\u250c\u2514u\u2514{\u2514\u2514\u2514\u2500\u2514\u250c\u2514y\u2514y, \u2514\u251c\u2514p\u2514z\u2514|\u2514\u2588 \u2514y \u2514\u2518\u2514\u2510\u2514\u2514\u2514p\u2514~\u2514p\u2514r\u2514|\u2514y\u2514r\u2514p\u2514u\u2514} \u2514\u2502\u2514\u250c\u2514p\u2514r\u2514p: mkdir /var/run/zabbix touch /var/run/zabbix/zabbix_agentd.pid mkdir /var/log/zabbix touch /var/log/zabbix/zabbix_agentd.log chown -R zabbix:zabbix /var/log/zabbix chown -R zabbix:zabbix /var/run/zabbix chown zabbix:zabbix /etc/zabbix_agentd.conf Run: /usr/sbin/zabbix_agentd --config /etc/zabbix_agentd.conf Autostart: vi /etc/inittab zabagent:2:once:/usr/sbin/zabbix_agentd --config /etc/zabbix_agentd.conf SMTP 1) Get SendEmail(http://caspian.dotconf.net/menu/Software/SendEmail/) 2) Create a script \"zabbix_sendemail\" (chmod 755) in the AlertScriptsPath folder specified by /etc/zabbix/zabbix_server.conf -------------------------------------- #!/bin/sh export smtpemailfrom=zabbix@yourdomain.com export zabbixemailto=$1 export zabbixsubject=$2 export zabbixbody=$3 export smtpserver=yoursmtpserver.com export smtplogin=smtpuser export smtppass=smtppassword /usr/bin/sendEmail -f $smtpemailfrom -t $zabbixemailto -u $zabbixsubject -m $zabbixbody -s $smtpserver:25 -xu $smtplogin -xp $smtppass -------------------------------------- 3) Set the Action (Configurations / Actions in the php frontend) 4) Set the Media Type (Administration / Media types in the php frontend) script to zabbix_sendemail 5) Add the Media to the user (Administration / Users / user in php frontend)","title":"Zabbix"},{"location":"Tech/Monitoring/Zabbix/#agent-on-aix-61","text":"Dependences: 1) gettext rpm -ivh ftp://www.oss4aix.org/latest/aix61/gettext-0.10.40-8.aix5.2.ppc.rpm 2) expat rpm -ivh ftp://www.oss4aix.org/compatible/aix61/expat-2.1.0-1.aix5.1.ppc.rpm 3) glib2 rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libgcc-4.7.2-1.aix6.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libffi-3.0.11-2.aix5.1.ppc.rpm rpm -ivh ftp://www.oss4aix.org/compatible/aix61/glib2-2.30.3-1.aix5.1.ppc.rpm 4) libconv rpm -ivh ftp://www.oss4aix.org/compatible/aix61/libiconv-1.14-2.aix5.1.ppc.rpm Install zabbix agent: Unpack zabbix_agents_2.0.3.aix6100.powerpc.tar.gz on server and move files to their locations (bin, sbin) Upload your zabbix_agentd.conf to /etc mkgroup zabbix useradd -g zabbix zabbix \u2514R\u2514\u2500\u2514x\u2514t\u2514p\u2514u\u2514} \u2514~\u2514u\u2514\u2500\u2514q\u2514x\u2514\u2500\u2514t\u2514y\u2514}\u2514\u2588\u2514u \u2514t\u2514y\u2514\u250c\u2514u\u2514{\u2514\u2514\u2514\u2500\u2514\u250c\u2514y\u2514y, \u2514\u251c\u2514p\u2514z\u2514|\u2514\u2588 \u2514y \u2514\u2518\u2514\u2510\u2514\u2514\u2514p\u2514~\u2514p\u2514r\u2514|\u2514y\u2514r\u2514p\u2514u\u2514} \u2514\u2502\u2514\u250c\u2514p\u2514r\u2514p: mkdir /var/run/zabbix touch /var/run/zabbix/zabbix_agentd.pid mkdir /var/log/zabbix touch /var/log/zabbix/zabbix_agentd.log chown -R zabbix:zabbix /var/log/zabbix chown -R zabbix:zabbix /var/run/zabbix chown zabbix:zabbix /etc/zabbix_agentd.conf Run: /usr/sbin/zabbix_agentd --config /etc/zabbix_agentd.conf Autostart: vi /etc/inittab zabagent:2:once:/usr/sbin/zabbix_agentd --config /etc/zabbix_agentd.conf","title":"Agent on AIX 6.1"},{"location":"Tech/Monitoring/Zabbix/#smtp","text":"1) Get SendEmail(http://caspian.dotconf.net/menu/Software/SendEmail/) 2) Create a script \"zabbix_sendemail\" (chmod 755) in the AlertScriptsPath folder specified by /etc/zabbix/zabbix_server.conf -------------------------------------- #!/bin/sh export smtpemailfrom=zabbix@yourdomain.com export zabbixemailto=$1 export zabbixsubject=$2 export zabbixbody=$3 export smtpserver=yoursmtpserver.com export smtplogin=smtpuser export smtppass=smtppassword /usr/bin/sendEmail -f $smtpemailfrom -t $zabbixemailto -u $zabbixsubject -m $zabbixbody -s $smtpserver:25 -xu $smtplogin -xp $smtppass -------------------------------------- 3) Set the Action (Configurations / Actions in the php frontend) 4) Set the Media Type (Administration / Media types in the php frontend) script to zabbix_sendemail 5) Add the Media to the user (Administration / Users / user in php frontend)","title":"SMTP"},{"location":"Tech/Network/Common/","text":"NetworkManager: show connection info nmcli device show eth0 Check own IP address curl -s checkip.dyndns.org Share current folder over HTTP python2 -m SimpleHTTPServer 8080 python3 -mhttp.server 8080","title":"Common"},{"location":"Tech/Network/Common/#networkmanager-show-connection-info","text":"nmcli device show eth0","title":"NetworkManager: show connection info"},{"location":"Tech/Network/Common/#check-own-ip-address","text":"curl -s checkip.dyndns.org","title":"Check own IP address"},{"location":"Tech/Network/Common/#share-current-folder-over-http","text":"python2 -m SimpleHTTPServer 8080 python3 -mhttp.server 8080","title":"Share current folder over HTTP"},{"location":"Tech/Network/DNS/","text":"Get ip addresses host <hostname> | grep \" has address \"| cut -d\" \" -f4","title":"DNS"},{"location":"Tech/Network/DNS/#get-ip-addresses","text":"host <hostname> | grep \" has address \"| cut -d\" \" -f4","title":"Get ip addresses"},{"location":"Tech/Network/KEMP/","text":"Some REST commands # Disable Real server curl -k -X GET https://username:password@ip_address/access/disablers?rs=realServerIP # Enable Real server curl -k -X GET https://username:password@ip_address/access/enablers?rs=realServerIP # Get any parameter curl -k -X GET https://username:password@ip_address/access/get?param=parameterName","title":"KEMP"},{"location":"Tech/Network/KEMP/#some-rest-commands","text":"# Disable Real server curl -k -X GET https://username:password@ip_address/access/disablers?rs=realServerIP # Enable Real server curl -k -X GET https://username:password@ip_address/access/enablers?rs=realServerIP # Get any parameter curl -k -X GET https://username:password@ip_address/access/get?param=parameterName","title":"Some REST commands"},{"location":"Tech/Network/NTP/","text":"ntp.conf in Ansible way driftfile /var/lib/ntp/ntp.drift {% for ntp_server in net_ntp_servers %} server {{ ntp_server }} burst iburst minpoll 4 maxpoll 6 {% endfor %} restrict default kod nomodify notrap nopeer noquery restrict -6 default kod nomodify notrap nopeer noquery --- net_ntp_servers: - 0.ru.pool.ntp.org - 1.ru.pool.ntp.org - 2.ru.pool.ntp.org - 3.ru.pool.ntp.org ntp.conf common driftfile /var/lib/ntp/ntp.drift server 0.ru.pool.ntp.org burst iburst minpoll 4 maxpoll 6 server 1.ru.pool.ntp.org burst iburst minpoll 4 maxpoll 6 server 2.ru.pool.ntp.org burst iburst minpoll 4 maxpoll 6 server 3.ru.pool.ntp.org burst iburst minpoll 4 maxpoll 6 restrict default kod nomodify notrap nopeer noquery restrict -6 default kod nomodify notrap nopeer noquery","title":"NTP"},{"location":"Tech/Network/NTP/#ntpconf-in-ansible-way","text":"driftfile /var/lib/ntp/ntp.drift {% for ntp_server in net_ntp_servers %} server {{ ntp_server }} burst iburst minpoll 4 maxpoll 6 {% endfor %} restrict default kod nomodify notrap nopeer noquery restrict -6 default kod nomodify notrap nopeer noquery --- net_ntp_servers: - 0.ru.pool.ntp.org - 1.ru.pool.ntp.org - 2.ru.pool.ntp.org - 3.ru.pool.ntp.org","title":"ntp.conf in Ansible way"},{"location":"Tech/Network/NTP/#ntpconf-common","text":"driftfile /var/lib/ntp/ntp.drift server 0.ru.pool.ntp.org burst iburst minpoll 4 maxpoll 6 server 1.ru.pool.ntp.org burst iburst minpoll 4 maxpoll 6 server 2.ru.pool.ntp.org burst iburst minpoll 4 maxpoll 6 server 3.ru.pool.ntp.org burst iburst minpoll 4 maxpoll 6 restrict default kod nomodify notrap nopeer noquery restrict -6 default kod nomodify notrap nopeer noquery","title":"ntp.conf common"},{"location":"Tech/Network/Ports/","text":"Test bunch of hosts for open ports cat > /tmp/ips-to-test.txt <<-EOF 1.1.1.1 2.2.2.2 3.3.3.3 4.4.4.4 5.5.5.5 6.6.6.6 EOF for line in `cat /tmp/ips-to-test.txt`; do nc -z -v -w5 ${line} 443; sleep 1; done Common sudo netstat -tunapl Which process uses port Linux # Find out PID via ss ss -nltp | grep <port> # Find out PID via deprecated netstat: netstat -tulpn | grep <port> # Find out particular binary ls -l /proc/<pid>/exe # Find out full run command ps -ef | grep <PID> AIX lsof -i:<port> ps -ef | grep <pid> Windows netstat -aon | findstr \"<port>\" pslist <PID> Which port is used by a process Unix sudo lsof -i -P -n | grep LISTEN | grep <process> # Remember about sudo: root access rights is required to see at non-current-user processes sudo netstat -tulpn | grep LISTEN | grep <process> # For FreeBSD or MacOS: sudo netstat -anp tcp | grep LISTEN | grep <process> sudo netstat -anp udp | grep LISTEN | grep <process> # Use flags -T fot TCP -U for UDP or both. You can use any IP address instead localhost. sudo nmap -sTU -O localhost Windows netstat -bano | findstr /R /C:\"[LISTING]\" | findstr /R /C:\"<process>\"","title":"Ports"},{"location":"Tech/Network/Ports/#test-bunch-of-hosts-for-open-ports","text":"cat > /tmp/ips-to-test.txt <<-EOF 1.1.1.1 2.2.2.2 3.3.3.3 4.4.4.4 5.5.5.5 6.6.6.6 EOF for line in `cat /tmp/ips-to-test.txt`; do nc -z -v -w5 ${line} 443; sleep 1; done","title":"Test bunch of hosts for open ports"},{"location":"Tech/Network/Ports/#common","text":"sudo netstat -tunapl","title":"Common"},{"location":"Tech/Network/Ports/#which-process-uses-port","text":"","title":"Which process uses port"},{"location":"Tech/Network/Ports/#linux","text":"# Find out PID via ss ss -nltp | grep <port> # Find out PID via deprecated netstat: netstat -tulpn | grep <port> # Find out particular binary ls -l /proc/<pid>/exe # Find out full run command ps -ef | grep <PID>","title":"Linux"},{"location":"Tech/Network/Ports/#aix","text":"lsof -i:<port> ps -ef | grep <pid>","title":"AIX"},{"location":"Tech/Network/Ports/#windows","text":"netstat -aon | findstr \"<port>\" pslist <PID>","title":"Windows"},{"location":"Tech/Network/Ports/#which-port-is-used-by-a-process","text":"","title":"Which port is used by a process"},{"location":"Tech/Network/Ports/#unix","text":"sudo lsof -i -P -n | grep LISTEN | grep <process> # Remember about sudo: root access rights is required to see at non-current-user processes sudo netstat -tulpn | grep LISTEN | grep <process> # For FreeBSD or MacOS: sudo netstat -anp tcp | grep LISTEN | grep <process> sudo netstat -anp udp | grep LISTEN | grep <process> # Use flags -T fot TCP -U for UDP or both. You can use any IP address instead localhost. sudo nmap -sTU -O localhost","title":"Unix"},{"location":"Tech/Network/Ports/#windows_1","text":"netstat -bano | findstr /R /C:\"[LISTING]\" | findstr /R /C:\"<process>\"","title":"Windows"},{"location":"Tech/Network/SNMP/","text":"SNMP snmpwalk -mALL -v2c -ctkM0nit0ring 10.20.30.3 interfaces.ifTable.ifEntry.ifOperStatus","title":"SNMP"},{"location":"Tech/Network/SNMP/#snmp","text":"snmpwalk -mALL -v2c -ctkM0nit0ring 10.20.30.3 interfaces.ifTable.ifEntry.ifOperStatus","title":"SNMP"},{"location":"Tech/Network/WiFi/","text":"WPA Supplicant wpa_supplicant -Dnl80211 -iwlp2s0 -c/etc/wpa_supplicant/wpa_supplicant.conf & cat /etc/wpa_supplicant/wpa_supplicant.conf # This network configuration was written by net-setup modules=\"wpa_supplicant\" wpa_supplicant_wlp2s0=\"-Dnl80211\" config_wlp2s0=\"dhcp\" ctrl_interface=/var/run/wpa_supplicant ctrl_interface_group=0 ap_scan=1 network={ ssid=\"MTS_2140184\" psk=\"0000000000\" priority=5 }","title":"WiFi"},{"location":"Tech/Network/WiFi/#wpa-supplicant","text":"wpa_supplicant -Dnl80211 -iwlp2s0 -c/etc/wpa_supplicant/wpa_supplicant.conf & cat /etc/wpa_supplicant/wpa_supplicant.conf # This network configuration was written by net-setup modules=\"wpa_supplicant\" wpa_supplicant_wlp2s0=\"-Dnl80211\" config_wlp2s0=\"dhcp\" ctrl_interface=/var/run/wpa_supplicant ctrl_interface_group=0 ap_scan=1 network={ ssid=\"MTS_2140184\" psk=\"0000000000\" priority=5 }","title":"WPA Supplicant"},{"location":"Tech/Network/tcpdump/","text":"Common commands tcpdump -ttttnnvvS -i any port XXX and host XX.XX.XX.XX Capyure TCPDUMP (with all commands use '| head' optionally) Capture bunch of packets tcpdump -w capture.pcap Show list of unique tcp or udp connections ip addresses tcpdump -nn -r capture.pcap 'tcp or udp' | cut -f 3 -d \" \" | cut -f 1-4 -d \".\" | sort | uniq | sort -nr Show list of unique destinations with SYN flag(\u2018tcp[13]=2\u2019) tcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 5 -d \" \" | sort | uniq -c | sort -nr Show list of unique sources with SYN flag(\u2018tcp[13]=2\u2019) tcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 3 -d \" \" | cut -f 1-4 -d \".\" | sort | uniq -c | sort -nr Search for plain texts (-A) tcpdump -Ann -r capture.pcap 'dst port 25 or dst port 514 or dst port 110 or dst port 21 or dst port 53 or dst port 80' Search for top level domains (optiolally for names only: | grep -E '[a-z]') tcpdump -nn -r capture.pcap 'port 53' | grep -Ev '(com|ru|net|org|gov|mil|arpa)' | cut -f 9 -d \" \" Investigate HTTP traffic tcpdump -Ann -r capture.pcap 'port 80' | grep 'HTTP' | grep -Ev '(GET|HEAD)' Search HTTP traffic for user-agent list tcpdump -Ann -r capture.pcap 'port 80' | grep -Ei 'user-agent' | sort | uniq -c | sort -n tcpdump -Ann -r capture.pcap 'port 80' | sed -n '/Mozilla/,$p' Pcap repository (-C filesize in MBytes, -W number of files, -G time in seconds, %s timestamp) sudo -b tcpdump -nn -i eth0 -w capture.pcap -C 1 -W 5 sudo -b tcpdump -nn -i eth0 -w capture-%s.pcap -G 600 -W 5 # Dealing with pcap files for capfile in $(ls *.pcap); do tcpdump -nnr $capfile 'dst port 53'; done","title":"Tcpdump"},{"location":"Tech/Network/tcpdump/#common-commands","text":"tcpdump -ttttnnvvS -i any port XXX and host XX.XX.XX.XX","title":"Common commands"},{"location":"Tech/Network/tcpdump/#capyure-tcpdump-with-all-commands-use-head-optionally","text":"","title":"Capyure TCPDUMP (with all commands use '| head' optionally)"},{"location":"Tech/Network/tcpdump/#capture-bunch-of-packets","text":"tcpdump -w capture.pcap","title":"Capture bunch of packets"},{"location":"Tech/Network/tcpdump/#show-list-of-unique-tcp-or-udp-connections-ip-addresses","text":"tcpdump -nn -r capture.pcap 'tcp or udp' | cut -f 3 -d \" \" | cut -f 1-4 -d \".\" | sort | uniq | sort -nr","title":"Show list of unique tcp or udp connections ip addresses"},{"location":"Tech/Network/tcpdump/#show-list-of-unique-destinations-with-syn-flagtcp132","text":"tcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 5 -d \" \" | sort | uniq -c | sort -nr","title":"Show list of unique destinations with SYN flag(\u2018tcp[13]=2\u2019)"},{"location":"Tech/Network/tcpdump/#show-list-of-unique-sources-with-syn-flagtcp132","text":"tcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 3 -d \" \" | cut -f 1-4 -d \".\" | sort | uniq -c | sort -nr","title":"Show list of unique sources with SYN flag(\u2018tcp[13]=2\u2019)"},{"location":"Tech/Network/tcpdump/#search-for-plain-texts-a","text":"tcpdump -Ann -r capture.pcap 'dst port 25 or dst port 514 or dst port 110 or dst port 21 or dst port 53 or dst port 80'","title":"Search for plain texts (-A)"},{"location":"Tech/Network/tcpdump/#search-for-top-level-domains-optiolally-for-names-only-grep-e-a-z","text":"tcpdump -nn -r capture.pcap 'port 53' | grep -Ev '(com|ru|net|org|gov|mil|arpa)' | cut -f 9 -d \" \"","title":"Search for top level domains (optiolally for names only: | grep -E '[a-z]')"},{"location":"Tech/Network/tcpdump/#investigate-http-traffic","text":"tcpdump -Ann -r capture.pcap 'port 80' | grep 'HTTP' | grep -Ev '(GET|HEAD)'","title":"Investigate HTTP traffic"},{"location":"Tech/Network/tcpdump/#search-http-traffic-for-user-agent-list","text":"tcpdump -Ann -r capture.pcap 'port 80' | grep -Ei 'user-agent' | sort | uniq -c | sort -n tcpdump -Ann -r capture.pcap 'port 80' | sed -n '/Mozilla/,$p'","title":"Search HTTP traffic for user-agent list"},{"location":"Tech/Network/tcpdump/#pcap-repository-c-filesize-in-mbytes-w-number-of-files-g-time-in-seconds-s-timestamp","text":"sudo -b tcpdump -nn -i eth0 -w capture.pcap -C 1 -W 5 sudo -b tcpdump -nn -i eth0 -w capture-%s.pcap -G 600 -W 5 # Dealing with pcap files for capfile in $(ls *.pcap); do tcpdump -nnr $capfile 'dst port 53'; done","title":"Pcap repository (-C filesize in MBytes, -W number of files, -G time in seconds, %s timestamp)"},{"location":"Tech/Package_Management/Apt/","text":"This section describes work with Debian-based Linux distributives like: Debian Linux, Ubuntu Linux, Astra Linux, Linux Mint Apt # Show installed packages apt --installed list # Search for software apt-cache search <pattern> # Install package apt-get install <package_name> Dpkg # To get a list of packages installed locally do this in your terminal: dpkg --get-selections | grep -v deinstall # To get a list of a specific package installed: dpkg --get-selections | grep postgres # To save that list to a text file called packages on your desktop do this in your terminal: dpkg --get-selections | grep -v deinstall > ~/Desktop/packages # Alternatively, simply use dpkg -l Python alternatives sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.4 1 sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 sudo update-alternatives --config python","title":"Apt"},{"location":"Tech/Package_Management/Apt/#apt","text":"# Show installed packages apt --installed list # Search for software apt-cache search <pattern> # Install package apt-get install <package_name>","title":"Apt"},{"location":"Tech/Package_Management/Apt/#dpkg","text":"# To get a list of packages installed locally do this in your terminal: dpkg --get-selections | grep -v deinstall # To get a list of a specific package installed: dpkg --get-selections | grep postgres # To save that list to a text file called packages on your desktop do this in your terminal: dpkg --get-selections | grep -v deinstall > ~/Desktop/packages # Alternatively, simply use dpkg -l","title":"Dpkg"},{"location":"Tech/Package_Management/Apt/#python-alternatives","text":"sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.4 1 sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 sudo update-alternatives --config python","title":"Python alternatives"},{"location":"Tech/Package_Management/PIP/","text":"Install pip install <package_name> pip3 install <package_name> Update pip install -U <package_name> pip3 install -U <package_name> Update all pip freeze --local | grep -v '^\\-e' | cut -d = -f 1 | xargs -n1 pip install -U pip3 freeze --local | grep -v '^\\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U","title":"PIP"},{"location":"Tech/Package_Management/PIP/#install","text":"pip install <package_name> pip3 install <package_name>","title":"Install"},{"location":"Tech/Package_Management/PIP/#update","text":"pip install -U <package_name> pip3 install -U <package_name>","title":"Update"},{"location":"Tech/Package_Management/PIP/#update-all","text":"pip freeze --local | grep -v '^\\-e' | cut -d = -f 1 | xargs -n1 pip install -U pip3 freeze --local | grep -v '^\\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U","title":"Update all"},{"location":"Tech/Package_Management/Pacman/","text":"Pacman # Search for software pacman -Ss <pattern> # Install package pacman -S <package_name> # Update the system pacman -Syu # Remove orphaned packages (Be careful, double check for list of deleted packages) pacman -Rscn $(pacman -Qtdq) pacman -Sc pacman-optimize && sync # Show all pacages whitc now installed as dependencies pacman -Qet AUR package installation git clone https://aur.archlinux.org/<packiage_name> cd <package_name> makepkg -sri # In case of error like: # <package>.tar.gz ... FAILED (unknown public key 0000000000000000) gpg --recv-key 0000000000000000 # Or manually check key and skip key verification vith makepkg pacman-key --verify <sig_file> makepkg --skippgpcheck -sri Some Python packages exist in filesystem # First method: mv /usr/lib/python2.7/site-packages/<package> /tmp/removed_py/ # Second method: pip freeze | xargs pip uninstall -y pip freeze | grep -v \"^-e\" | xargs pip uninstall -y # Then you can update your Arch #yaourt -Syu --aur pacman -Syu ca-certificates-utils: /etc/ssl/certs/ca-certificates.crt exists in filesystem mv /etc/ssl/certs/ca-certificates.crt /tmp #yaourt -Syu --aur pacman -Syu Sort installed packages by size pacman -Qi | egrep '^(Name|Installed)' | cut -f2 -d':' | paste - - | column -t | sort -nrk 2 | grep MiB | less","title":"Pacman"},{"location":"Tech/Package_Management/Pacman/#pacman","text":"# Search for software pacman -Ss <pattern> # Install package pacman -S <package_name> # Update the system pacman -Syu # Remove orphaned packages (Be careful, double check for list of deleted packages) pacman -Rscn $(pacman -Qtdq) pacman -Sc pacman-optimize && sync # Show all pacages whitc now installed as dependencies pacman -Qet","title":"Pacman"},{"location":"Tech/Package_Management/Pacman/#aur-package-installation","text":"git clone https://aur.archlinux.org/<packiage_name> cd <package_name> makepkg -sri # In case of error like: # <package>.tar.gz ... FAILED (unknown public key 0000000000000000) gpg --recv-key 0000000000000000 # Or manually check key and skip key verification vith makepkg pacman-key --verify <sig_file> makepkg --skippgpcheck -sri","title":"AUR package installation"},{"location":"Tech/Package_Management/Pacman/#some-python-packages-exist-in-filesystem","text":"# First method: mv /usr/lib/python2.7/site-packages/<package> /tmp/removed_py/ # Second method: pip freeze | xargs pip uninstall -y pip freeze | grep -v \"^-e\" | xargs pip uninstall -y # Then you can update your Arch #yaourt -Syu --aur pacman -Syu","title":"Some Python packages exist in filesystem"},{"location":"Tech/Package_Management/Pacman/#ca-certificates-utils-etcsslcertsca-certificatescrt-exists-in-filesystem","text":"mv /etc/ssl/certs/ca-certificates.crt /tmp #yaourt -Syu --aur pacman -Syu","title":"ca-certificates-utils: /etc/ssl/certs/ca-certificates.crt exists in filesystem"},{"location":"Tech/Package_Management/Pacman/#sort-installed-packages-by-size","text":"pacman -Qi | egrep '^(Name|Installed)' | cut -f2 -d':' | paste - - | column -t | sort -nrk 2 | grep MiB | less","title":"Sort installed packages by size"},{"location":"Tech/Package_Management/Yum/","text":"This section describes work with RHEL-based Linux distributives like: Red Hat Enterprise Linux, Oracle Linux, CentOS Linux, Scientific Linux, Fermi Linux, ROSA Linux, CERN Linux Yum # Search for software yum search <pattern> # Install package yum install <package_name> # Repair \"Error: database disk image is malformed\" yum clean dbcache # Clean all yum cache yum clean all # Remove packages with dependencies: #add \"clean_requirements_on_remove=1\" to /etc/yum.conf EPEL repository # RHEL-based version 7 (two options) rpm -hUv https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum insall epel-release # RHEL-based version 6 rpm -hUv https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm # RHEL-based version 5 rpm -hUv https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm","title":"Yum"},{"location":"Tech/Package_Management/Yum/#yum","text":"# Search for software yum search <pattern> # Install package yum install <package_name> # Repair \"Error: database disk image is malformed\" yum clean dbcache # Clean all yum cache yum clean all # Remove packages with dependencies: #add \"clean_requirements_on_remove=1\" to /etc/yum.conf","title":"Yum"},{"location":"Tech/Package_Management/Yum/#epel-repository","text":"# RHEL-based version 7 (two options) rpm -hUv https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum insall epel-release # RHEL-based version 6 rpm -hUv https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm # RHEL-based version 5 rpm -hUv https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm","title":"EPEL repository"},{"location":"Tech/Project_Management/Redmine/","text":"Installation on CentOS 7 Dependencies # For Ruby yum \"Devleopment Tools\" # For Redmine yum install ImageMagick ImageMagick-devel libcurl-devel httpd-devel httpd mariadb-devel mariadb-server zlib-devel zlib Ruby mkdir ~/dst && cd dst wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.3.tar.gz tar xzvf ruby-2.3.3.tar.gz && cd ruby-2.3.3 # Configure from root! Bacause sometime it doesn't see zlib ./configure make make install MariaDB Database systemctl enable --now mariadb.service firewall-cmd --add-service=mysql --permanent firewall-cmd --reload vi /etc/my.cnf # --- VI --- [mysqld] character-set-server=utf8 # ---------- mysql_secure_installation Set root password? [Y/n] Y Remove anonymous users? [Y/n] Y Disallow root login remotely? [Y/n] Y Remove test database and access to it? [Y/n] Y Reload privilege tables now? [Y/n] Y mysql -u root -p Enter password: ***** # --- SQL --- CREATE DATABASE redmine CHARACTER SET utf8; GRANT ALL PRIVILEGES ON redmine.* TO redmine@'localhost' IDENTIFIED BY 'my_password'; FLUSH PRIVILEGES; EXIT; # ----------- Web server rm -f /etc/httpd/conf.d/welcome.conf vi /etc/httpd/conf/httpd.con # --- VI --- # Change those values # Line 86 ServerAdmin your@emain.name # Line 95 ServerName www.your-server-name:80 # Line 151 AllowOverride All # Line 164 DirectoryIndex index.html index.cgi index.php # At the end of file ServerTokens Prod KeepAlive On # ---------- systemctl enable --now httpd.service firewall-cmd --add-service=http --permanent firewall-cmd --reload Redmine cd ~/dst wget --no-check-certificate https://redmine.org/releases/redmine-3.3.2.tar.gz tar xzvf redmine-3.3.2.tar.gz mv redmine-3.3.2 /var/www/redmine vi /var/www/redmine/config/database.yml # --- VI --- production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"my_password\" encoding: utf8 # ---------- vi /var/www/redmine/config/configuration.yml # --- VI --- production: email_delivery: delivery_method: :smtp smtp_settings: address: \"your.email.server.name\" port: 25 authentication: :login domain: 'your.domain.name' user_name: 'username@your.domain.name' password: 'your-email-password' enable_starttls_auto: false # ---------- cd /var/www/redmine/ gem install bundler --no-rdoc --no-ri bundle install --without development test postgresql sqlite bundle exec rake generate_secret_token RAILS_ENV=production bundle exec rake db:migrate RAILS_ENV=production gem install passenger --no-rdoc --no-ri passenger-install-apache2-module vi /etc/httpd/conf.d/passenger.conf # --- VI --- LoadModule passenger_module /usr/local/lib/ruby/gems/2.3.0/gems/passenger-5.1.2/buildout/apache2/mod_passenger.so <IfModule mod_passenger.c> PassengerRoot /usr/local/lib/ruby/gems/2.3.0/gems/passenger-5.1.2 PassengerDefaultRuby /usr/local/bin/ruby </IfModule> NameVirtualHost *:80 <VirtualHost *:80> ServerName redmine.pupupon.com DocumentRoot /var/www/redmine/public </VirtualHost> # ---------- chown -R apache:apache /var/www/redmine chmod -R 777 /var/www/redmine/tmp systemctl restart httpd # http://your.redmone.server # Initial username/password \"admin/admin\" Email truncate diff --git a/app/models/mail_handler.rb b/app/models/mail_handler.rb index 520183c..717e49b 100644 --- a/app/models/mail_handler.rb +++ b/app/models/mail_handler.rb @@ -441,12 +441,20 @@ # Removes the email body of text after the truncation configurations. def cleanup_body(body) - delimiters = Setting.mail_handler_body_delimiters.to_s.split(/[\\r\\n]+/).reject(&:blank?).map {|s| Regexp.escape(s)} - unless delimiters.empty? - regex = Regexp.new(\"^[> ]*(#{ delimiters.join('|') })\\s*[\\r\\n].*\", Regexp::MULTILINE) - body = body.gsub(regex, '') + address = Setting.mail_from + regex_arr = [ + Regexp.new(\"From:\\s*\" + Regexp.escape(address), Regexp::IGNORECASE), + Regexp.new(\"<\" + Regexp.escape(address) + \">\", Regexp::IGNORECASE), + Regexp.new(Regexp.escape(address) + \"\\s+wrote:\", Regexp::IGNORECASE), + Regexp.new(\"^.*On.*(\\n)?wrote:$\", Regexp::IGNORECASE), + Regexp.new(\"-+original\\s+message-+\\s*$\", Regexp::IGNORECASE), + Regexp.new(\"from:\\s*$\", Regexp::IGNORECASE) + ] + body_length = body.length + index = regex_arr.inject(body_length) do |min, regex| + [(body.index(regex) || body_length), min].min end - body.strip + body[0, index].strip end def find_assignee_from_keyword(keyword, issue)","title":"Redmine"},{"location":"Tech/Project_Management/Redmine/#installation-on-centos-7","text":"","title":"Installation on CentOS 7"},{"location":"Tech/Project_Management/Redmine/#dependencies","text":"# For Ruby yum \"Devleopment Tools\" # For Redmine yum install ImageMagick ImageMagick-devel libcurl-devel httpd-devel httpd mariadb-devel mariadb-server zlib-devel zlib","title":"Dependencies"},{"location":"Tech/Project_Management/Redmine/#ruby","text":"mkdir ~/dst && cd dst wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.3.tar.gz tar xzvf ruby-2.3.3.tar.gz && cd ruby-2.3.3 # Configure from root! Bacause sometime it doesn't see zlib ./configure make make install","title":"Ruby"},{"location":"Tech/Project_Management/Redmine/#mariadb-database","text":"systemctl enable --now mariadb.service firewall-cmd --add-service=mysql --permanent firewall-cmd --reload vi /etc/my.cnf # --- VI --- [mysqld] character-set-server=utf8 # ---------- mysql_secure_installation Set root password? [Y/n] Y Remove anonymous users? [Y/n] Y Disallow root login remotely? [Y/n] Y Remove test database and access to it? [Y/n] Y Reload privilege tables now? [Y/n] Y mysql -u root -p Enter password: ***** # --- SQL --- CREATE DATABASE redmine CHARACTER SET utf8; GRANT ALL PRIVILEGES ON redmine.* TO redmine@'localhost' IDENTIFIED BY 'my_password'; FLUSH PRIVILEGES; EXIT; # -----------","title":"MariaDB Database"},{"location":"Tech/Project_Management/Redmine/#web-server","text":"rm -f /etc/httpd/conf.d/welcome.conf vi /etc/httpd/conf/httpd.con # --- VI --- # Change those values # Line 86 ServerAdmin your@emain.name # Line 95 ServerName www.your-server-name:80 # Line 151 AllowOverride All # Line 164 DirectoryIndex index.html index.cgi index.php # At the end of file ServerTokens Prod KeepAlive On # ---------- systemctl enable --now httpd.service firewall-cmd --add-service=http --permanent firewall-cmd --reload","title":"Web server"},{"location":"Tech/Project_Management/Redmine/#redmine","text":"cd ~/dst wget --no-check-certificate https://redmine.org/releases/redmine-3.3.2.tar.gz tar xzvf redmine-3.3.2.tar.gz mv redmine-3.3.2 /var/www/redmine vi /var/www/redmine/config/database.yml # --- VI --- production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"my_password\" encoding: utf8 # ---------- vi /var/www/redmine/config/configuration.yml # --- VI --- production: email_delivery: delivery_method: :smtp smtp_settings: address: \"your.email.server.name\" port: 25 authentication: :login domain: 'your.domain.name' user_name: 'username@your.domain.name' password: 'your-email-password' enable_starttls_auto: false # ---------- cd /var/www/redmine/ gem install bundler --no-rdoc --no-ri bundle install --without development test postgresql sqlite bundle exec rake generate_secret_token RAILS_ENV=production bundle exec rake db:migrate RAILS_ENV=production gem install passenger --no-rdoc --no-ri passenger-install-apache2-module vi /etc/httpd/conf.d/passenger.conf # --- VI --- LoadModule passenger_module /usr/local/lib/ruby/gems/2.3.0/gems/passenger-5.1.2/buildout/apache2/mod_passenger.so <IfModule mod_passenger.c> PassengerRoot /usr/local/lib/ruby/gems/2.3.0/gems/passenger-5.1.2 PassengerDefaultRuby /usr/local/bin/ruby </IfModule> NameVirtualHost *:80 <VirtualHost *:80> ServerName redmine.pupupon.com DocumentRoot /var/www/redmine/public </VirtualHost> # ---------- chown -R apache:apache /var/www/redmine chmod -R 777 /var/www/redmine/tmp systemctl restart httpd # http://your.redmone.server # Initial username/password \"admin/admin\"","title":"Redmine"},{"location":"Tech/Project_Management/Redmine/#email-truncate","text":"diff --git a/app/models/mail_handler.rb b/app/models/mail_handler.rb index 520183c..717e49b 100644 --- a/app/models/mail_handler.rb +++ b/app/models/mail_handler.rb @@ -441,12 +441,20 @@ # Removes the email body of text after the truncation configurations. def cleanup_body(body) - delimiters = Setting.mail_handler_body_delimiters.to_s.split(/[\\r\\n]+/).reject(&:blank?).map {|s| Regexp.escape(s)} - unless delimiters.empty? - regex = Regexp.new(\"^[> ]*(#{ delimiters.join('|') })\\s*[\\r\\n].*\", Regexp::MULTILINE) - body = body.gsub(regex, '') + address = Setting.mail_from + regex_arr = [ + Regexp.new(\"From:\\s*\" + Regexp.escape(address), Regexp::IGNORECASE), + Regexp.new(\"<\" + Regexp.escape(address) + \">\", Regexp::IGNORECASE), + Regexp.new(Regexp.escape(address) + \"\\s+wrote:\", Regexp::IGNORECASE), + Regexp.new(\"^.*On.*(\\n)?wrote:$\", Regexp::IGNORECASE), + Regexp.new(\"-+original\\s+message-+\\s*$\", Regexp::IGNORECASE), + Regexp.new(\"from:\\s*$\", Regexp::IGNORECASE) + ] + body_length = body.length + index = regex_arr.inject(body_length) do |min, regex| + [(body.index(regex) || body_length), min].min end - body.strip + body[0, index].strip end def find_assignee_from_keyword(keyword, issue)","title":"Email truncate"},{"location":"Tech/Storage_and_filesystems/Extend_Ext4_Partition/","text":"Check current partition table fdisk -l /dev/vda Disk /dev/vda: 5368 MB, 5368709120 bytes, 10485760 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0000811f Device Boot Start End Blocks Id System /dev/vda1 * 2048 10485759 5241856 83 Linux lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 603M 0 rom vda 253:0 0 5G 0 disk \u2514\u2500vda1 253:1 0 5G 0 part / Check current partition size df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 4.8G 2.5G 2.2G 54% / devtmpfs 488M 0 488M 0% /dev tmpfs 497M 0 497M 0% /dev/shm tmpfs 497M 6.5M 490M 2% /run tmpfs 497M 0 497M 0% /sys/fs/cgroup tmpfs 100M 0 100M 0% /run/user/0 Resize hard drive Rescan devices under root (sudo doesn't work). In some cases reboot is needed echo \"- - -\" > /sys/class/scsi_host/host0/scan echo \"- - -\" > /sys/class/scsi_host/host1/scan echo \"- - -\" > /sys/class/scsi_host/hostX/scan Check extended partition table Check your partition after resizing. Write down Start and End segment of your target partition: fdisk -l /dev/vda Disk /dev/vda: 6442 MB, 6442450944 bytes, 12582912 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0000811f Device Boot Start End Blocks Id System /dev/vda1 * 2048 10485759 5241856 83 Linux lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 603M 0 rom vda 253:0 0 6G 0 disk \u2514\u2500vda1 253:1 0 5G 0 part / Recreate partition with new End Run fdisk /dev/vda Delete old partition: Command (m for help): d # If you have multiple partition you have to choose partition which you want to resize Selected partition 1 Partition 1 is deleted Check for changes: Command (m for help): p Disk /dev/vda: 6442 MB, 6442450944 bytes, 12582912 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0000811f Device Boot Start End Blocks Id System Create new extended partition: Command (m for help): n Partition type: p primary (0 primary, 0 extended, 4 free) e extended Select (default p): p Partition number (1-4, default 1): 1 First sector (2048-12582911, default 2048): Using default value 2048 Last sector, +sectors or +size{K,M,G} (2048-12582911, default 12582911): Using default value 12582911 Partition 1 of type Linux and of size 6 GiB is set Check for changes: Command (m for help): p Disk /dev/vda: 6442 MB, 6442450944 bytes, 12582912 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0000811f Device Boot Start End Blocks Id System /dev/vda1 2048 12582911 6290432 83 Linux Write changes and exit: Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: Device or resource busy. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) Syncing disks. !!!Reboot the system to inform kernel about changes in partition table!!! Resize file system resize2fs /dev/vda1 resize2fs 1.42.9 (28-Dec-2013) Filesystem at /dev/vda1 is mounted on /; on-line resizing required old_desc_blocks = 1, new_desc_blocks = 1 The filesystem on /dev/vda1 is now 1572608 blocks long. Check current partition lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 603M 0 rom vda 253:0 0 6G 0 disk \u2514\u2500vda1 253:1 0 6G 0 part / df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 5.8G 2.5G 3.1G 45% / devtmpfs 488M 0 488M 0% /dev tmpfs 497M 0 497M 0% /dev/shm tmpfs 497M 6.5M 490M 2% /run tmpfs 497M 0 497M 0% /sys/fs/cgroup tmpfs 100M 0 100M 0% /run/user/0","title":"Extend Ext4 Partition"},{"location":"Tech/Storage_and_filesystems/Extend_Ext4_Partition/#check-current-partition-table","text":"fdisk -l /dev/vda Disk /dev/vda: 5368 MB, 5368709120 bytes, 10485760 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0000811f Device Boot Start End Blocks Id System /dev/vda1 * 2048 10485759 5241856 83 Linux lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 603M 0 rom vda 253:0 0 5G 0 disk \u2514\u2500vda1 253:1 0 5G 0 part /","title":"Check current partition table"},{"location":"Tech/Storage_and_filesystems/Extend_Ext4_Partition/#check-current-partition-size","text":"df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 4.8G 2.5G 2.2G 54% / devtmpfs 488M 0 488M 0% /dev tmpfs 497M 0 497M 0% /dev/shm tmpfs 497M 6.5M 490M 2% /run tmpfs 497M 0 497M 0% /sys/fs/cgroup tmpfs 100M 0 100M 0% /run/user/0","title":"Check current partition size"},{"location":"Tech/Storage_and_filesystems/Extend_Ext4_Partition/#resize-hard-drive","text":"Rescan devices under root (sudo doesn't work). In some cases reboot is needed echo \"- - -\" > /sys/class/scsi_host/host0/scan echo \"- - -\" > /sys/class/scsi_host/host1/scan echo \"- - -\" > /sys/class/scsi_host/hostX/scan","title":"Resize hard drive"},{"location":"Tech/Storage_and_filesystems/Extend_Ext4_Partition/#check-extended-partition-table","text":"Check your partition after resizing. Write down Start and End segment of your target partition: fdisk -l /dev/vda Disk /dev/vda: 6442 MB, 6442450944 bytes, 12582912 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0000811f Device Boot Start End Blocks Id System /dev/vda1 * 2048 10485759 5241856 83 Linux lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 603M 0 rom vda 253:0 0 6G 0 disk \u2514\u2500vda1 253:1 0 5G 0 part /","title":"Check extended partition table"},{"location":"Tech/Storage_and_filesystems/Extend_Ext4_Partition/#recreate-partition-with-new-end","text":"Run fdisk /dev/vda Delete old partition: Command (m for help): d # If you have multiple partition you have to choose partition which you want to resize Selected partition 1 Partition 1 is deleted Check for changes: Command (m for help): p Disk /dev/vda: 6442 MB, 6442450944 bytes, 12582912 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0000811f Device Boot Start End Blocks Id System Create new extended partition: Command (m for help): n Partition type: p primary (0 primary, 0 extended, 4 free) e extended Select (default p): p Partition number (1-4, default 1): 1 First sector (2048-12582911, default 2048): Using default value 2048 Last sector, +sectors or +size{K,M,G} (2048-12582911, default 12582911): Using default value 12582911 Partition 1 of type Linux and of size 6 GiB is set Check for changes: Command (m for help): p Disk /dev/vda: 6442 MB, 6442450944 bytes, 12582912 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x0000811f Device Boot Start End Blocks Id System /dev/vda1 2048 12582911 6290432 83 Linux Write changes and exit: Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: Device or resource busy. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) Syncing disks. !!!Reboot the system to inform kernel about changes in partition table!!!","title":"Recreate partition with new End"},{"location":"Tech/Storage_and_filesystems/Extend_Ext4_Partition/#resize-file-system","text":"resize2fs /dev/vda1 resize2fs 1.42.9 (28-Dec-2013) Filesystem at /dev/vda1 is mounted on /; on-line resizing required old_desc_blocks = 1, new_desc_blocks = 1 The filesystem on /dev/vda1 is now 1572608 blocks long.","title":"Resize file system"},{"location":"Tech/Storage_and_filesystems/Extend_Ext4_Partition/#check-current-partition","text":"lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 603M 0 rom vda 253:0 0 6G 0 disk \u2514\u2500vda1 253:1 0 6G 0 part / df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 5.8G 2.5G 3.1G 45% / devtmpfs 488M 0 488M 0% /dev tmpfs 497M 0 497M 0% /dev/shm tmpfs 497M 6.5M 490M 2% /run tmpfs 497M 0 497M 0% /sys/fs/cgroup tmpfs 100M 0 100M 0% /run/user/0","title":"Check current partition"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/","text":"Change permisions recursively You can use a simple Script find <path_to_folder> -type f -print -exec chmod 644 {} \\; find <path_to_folder> -type d -print -exec chmod 755 {} \\; # Union find /home/tmp -type f -print -exec chmod 644 {} \\; && find /home/tmp -type d -print -exec chmod 755 {} \\; Count files find . -type f | wc -l ls | wc -l Remove file list ls | xargs rm Remove file suffix \"filename\"+\"suffix\" for i in `find . -type f -name \"*<suffix>*\"`; do dst=`echo $i | sed s/<suffix>//`;mv $i $dst; done Move all files in one level directory in certain folder to another find /<path_to_folder>/* -prune -type f | xargs -I '{}' mv {} /<path_to_destination_folder>/archive/. Search for certain file contents find . -type f -name \"*conf\" -exec echo {} \\; -exec grep 192.168.0.1:3389 {} \\; Show directories content recursively ls -R /path | awk ' /:$/&&f{s=$0;f=0} /:$/&&!f{sub(/:$/,\"\");s=$0;f=1;next} NF&&f{ print s\"/\"$0 }' Make dirs with indexes for i in 0{1..9} {10..39}; do mkdir delete-$i; cd delete-$i; touch del-file-$i; cd ..; done Create bunch of files from list in a file: # Predefined number of records head -<number_of_lines> inventory | awk '{ print $1 }' | xargs -I '{}' touch <destination_folder>/{} #E.g. head -10 inventory | awk '{ print $1 }' | xargs -I '{}' touch host_vars/{} # Whole list from file cat <filename> | awk '{ print $1 }' | xargs -I '{}' touch <destination_folder>/{} #E.g. cat inventory | awk '{ print $1 }' | xargs -I '{}' touch host_vars/{} Move bunch of folders ls -1d <space separeated folder list> | xargs -I '{}' mv {} <destination> #E.g. ls -1d command_line dotfiles-srv programmming-examples shell_scripts | xargs -I '{}' mv {} github/ Mounts #Show information about mounted file systems with 'column' examples** df -h | column -t mount -l | column -t Sum of root folders du -s * 2>/dev/null | awk '{print $1}' | paste -sd+ | bc Mass change extension of files for file in *.txt; do mv \"$file\" \"`basename \"$file\" .txt`.md\"; done Split file split <OPTION> <FILE> <PREFIX> OPTIONS: -aN, --suffix-length=N - length of numeric suffix. See \"-d for suffices\". Default 2. -bN, --bytes=N - Amount of bytes in each of file. There is some interesting way to produce sucficies: K, KB, M, MB, G, GB, T, TB etc., where all values with \"B\" multiply amount to 1024xx, and without \"B\" - to 1000xx, so 1M=1024KB 1MB=1000KB, 1G=1024MB 1GB=1000MB. See MiB and MB explanation in wiki. -d, --numeric-suffixes - enables numeric suffices <PREFIX>00, <PREFIX>01, <PREFIX>.02, etc., (with default prefix: \u044500, \u044501, \u044502, \u044503, etc.) -lN, --lines=N - If you doesn't split files by bytes, then you split it by lines. So this option set amout of line in result file. Default 1000. Example split -b 8GB -d archive.tar.gz archive.tar.gz. archive.tar.gz.00 archive.tar.gz.01 archive.tar.gz.02 archive.tar.gz.03 Joining all similarly prefixed files For example, \"_tar.gz.1of2\" and \"_tar.gz.2of2\". # Unix cat \"FileName_tar.gz.1of3\" \"FileName_tar.gz.2of3\" \"FileName_tar.gz.3of3\" > \"FileName.tar.gz\" # Windows copy /b \"FileName_tar.gz.1of3\"+\"FileName_tar.gz.2of3\"+\"FileName_tar.gz.3of3\" \"FileName.tar.gz\"","title":"Files in Unix"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#change-permisions-recursively","text":"You can use a simple Script find <path_to_folder> -type f -print -exec chmod 644 {} \\; find <path_to_folder> -type d -print -exec chmod 755 {} \\; # Union find /home/tmp -type f -print -exec chmod 644 {} \\; && find /home/tmp -type d -print -exec chmod 755 {} \\;","title":"Change permisions recursively"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#count-files","text":"find . -type f | wc -l ls | wc -l","title":"Count files"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#remove-file-list","text":"ls | xargs rm","title":"Remove file list"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#remove-file-suffix-filenamesuffix","text":"for i in `find . -type f -name \"*<suffix>*\"`; do dst=`echo $i | sed s/<suffix>//`;mv $i $dst; done","title":"Remove file suffix \"filename\"+\"suffix\""},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#move-all-files-in-one-level-directory-in-certain-folder-to-another","text":"find /<path_to_folder>/* -prune -type f | xargs -I '{}' mv {} /<path_to_destination_folder>/archive/.","title":"Move all files in one level directory in certain folder to another"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#search-for-certain-file-contents","text":"find . -type f -name \"*conf\" -exec echo {} \\; -exec grep 192.168.0.1:3389 {} \\;","title":"Search for certain file contents"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#show-directories-content-recursively","text":"ls -R /path | awk ' /:$/&&f{s=$0;f=0} /:$/&&!f{sub(/:$/,\"\");s=$0;f=1;next} NF&&f{ print s\"/\"$0 }'","title":"Show directories content recursively"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#make-dirs-with-indexes","text":"for i in 0{1..9} {10..39}; do mkdir delete-$i; cd delete-$i; touch del-file-$i; cd ..; done","title":"Make dirs with indexes"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#create-bunch-of-files-from-list-in-a-file","text":"# Predefined number of records head -<number_of_lines> inventory | awk '{ print $1 }' | xargs -I '{}' touch <destination_folder>/{} #E.g. head -10 inventory | awk '{ print $1 }' | xargs -I '{}' touch host_vars/{} # Whole list from file cat <filename> | awk '{ print $1 }' | xargs -I '{}' touch <destination_folder>/{} #E.g. cat inventory | awk '{ print $1 }' | xargs -I '{}' touch host_vars/{}","title":"Create bunch of files from list in a file:"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#move-bunch-of-folders","text":"ls -1d <space separeated folder list> | xargs -I '{}' mv {} <destination> #E.g. ls -1d command_line dotfiles-srv programmming-examples shell_scripts | xargs -I '{}' mv {} github/","title":"Move bunch of folders"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#mounts","text":"#Show information about mounted file systems with 'column' examples** df -h | column -t mount -l | column -t","title":"Mounts"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#sum-of-root-folders","text":"du -s * 2>/dev/null | awk '{print $1}' | paste -sd+ | bc","title":"Sum of root folders"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#mass-change-extension-of-files","text":"for file in *.txt; do mv \"$file\" \"`basename \"$file\" .txt`.md\"; done","title":"Mass change extension of files"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#split-file","text":"split <OPTION> <FILE> <PREFIX> OPTIONS: -aN, --suffix-length=N - length of numeric suffix. See \"-d for suffices\". Default 2. -bN, --bytes=N - Amount of bytes in each of file. There is some interesting way to produce sucficies: K, KB, M, MB, G, GB, T, TB etc., where all values with \"B\" multiply amount to 1024xx, and without \"B\" - to 1000xx, so 1M=1024KB 1MB=1000KB, 1G=1024MB 1GB=1000MB. See MiB and MB explanation in wiki. -d, --numeric-suffixes - enables numeric suffices <PREFIX>00, <PREFIX>01, <PREFIX>.02, etc., (with default prefix: \u044500, \u044501, \u044502, \u044503, etc.) -lN, --lines=N - If you doesn't split files by bytes, then you split it by lines. So this option set amout of line in result file. Default 1000. Example split -b 8GB -d archive.tar.gz archive.tar.gz. archive.tar.gz.00 archive.tar.gz.01 archive.tar.gz.02 archive.tar.gz.03","title":"Split file"},{"location":"Tech/Storage_and_filesystems/Files_in_Unix/#joining-all-similarly-prefixed-files","text":"For example, \"_tar.gz.1of2\" and \"_tar.gz.2of2\". # Unix cat \"FileName_tar.gz.1of3\" \"FileName_tar.gz.2of3\" \"FileName_tar.gz.3of3\" > \"FileName.tar.gz\" # Windows copy /b \"FileName_tar.gz.1of3\"+\"FileName_tar.gz.2of3\"+\"FileName_tar.gz.3of3\" \"FileName.tar.gz\"","title":"Joining all similarly prefixed files"},{"location":"Tech/Storage_and_filesystems/GPFS/","text":"Instalaltion on AIX # on each node: cd /<path_to_gpfs_base_package>/base-3-5/ inutoc . installp -aXY -d/<path_to_gpfs_base_package>/base-3-5 all cd /<path_to_gpfs_fix_package>/fix-3-5-10/ inutoc . installp -aXY -d/<path_to_gpfs_fix_package>/fix-3-5-10 all lslpp -L gpfs.\\* Creating cluster # You need to setup paswordless shh connection between nodes # Add this path to /etc/environment on each node export PATH=$PATH:/usr/lpp/mmfs/bin mmcrcluster -N <PRIMARY_NODE_HOSTNAME>:manager-quorum -p PRIMARY_NODE_HOSTNAME -r /usr/bin/ssh -R /usr/bin/scp mmchlicense server --accept -N PRIMARY_NODE_HOSTNAME mmstartup -a mmaddnode -N <SECONDARY_NODE_HOSTNAME> mmaddnode -N <THIRDARY_NODE_HOSTNAME> mmaddnode -N <N-ARY_NODE_HOSTNAME> mmchcluster -s <SECONDARY_NODE_HOSTNAME> mmchlicense server --accept -N <SECONDARY_NODE_HOSTNAME> mmchlicense server --accept -N <THIRDARY_NODE_HOSTNAME> mmchlicense server --accept -N <N-ARY_NODE_HOSTNAME> mmstartup -N <SECONDARY_NODE_HOSTNAME> mmstartup -N <THIRDARY_NODE_HOSTNAME> mmstartup -N <N-ARY_NODE_HOSTNAME> mmchnode --quorum --manager -N <SECONDARY_NODE_HOSTNAME> # To check status of cluster: mmlscluster mmgetstate -a Create GPFS mirror partition # On primary node: mkdir /etc/gpfs vi /etc/gpfs/diskdesk.txt ### --insert in diskdesk.txt-- hdiskX:::dataAndMetadata:1:nsd1: hdiskY:::dataAndMetadata:2:nsd2: ### --end of insert-- mmcrnsd -F /etc/gpfs/diskdesk.txt mmshutdown -a mmchconfig tiebreakerdisks=\"nsd1;nsd2\" mmstartup -a mmcrfs /mnt/gpfs gpfsfs -F /etc/gpfs/diskdesk.txt -A yes -B 512K -M2 -m2 -R2 -r2 -n 2 -N 50000 mmlsconfig mmmount all -a mmchconfig minQuorumNodes=2 df -g Autostart GPFS mmchconfig autoload=yes Increase Inodes mmchfs <fsname> -F 1M Change hostname on GPFS nodes [Preface] #Old names: 10.10.10.10 OLD-SRV-NAME-01 10.10.10.10 OLD-SRV-NAME-02 #New names: 10.10.10.10 NEW-SRV-NAME-01 10.10.10.10 NEW-SRV-NAME-02 [Preface] Stop all services which use GPFS [On each node] add new names to /etc/hosts (old ones keep too) 10.10.10.10 NEW-SRV-NAME-01 10.10.10.11 NEW-SRV-NAME-02 [On master node] Shut down GPFS-cluster mmshutdown -a [On master node] Run command for configuration changing # Change interface names to names placed after \"-N\" key mmchnode --admin-interface=OLD-SRV-NAME-01 --daemon-interface=prodctx1 -N NEW-SRV-NAME-01 mmchnode --admin-interface=OLD-SRV-NAME-01 --daemon-interface=prodctx2 -N NEW-SRV-NAME-02 [On master node] Start GPFS-cluster mmstartup -a [On master node] Check cluster details and make sure that names were changed mmlscluster mmgetstate -a [On each node] If everything right remove old records from /etc/hosts [On maser node] Recheck than everything still OK mmshutdown -a mmstartup -a mmlscluster mmgetstate -a","title":"GPFS"},{"location":"Tech/Storage_and_filesystems/GPFS/#instalaltion-on-aix","text":"# on each node: cd /<path_to_gpfs_base_package>/base-3-5/ inutoc . installp -aXY -d/<path_to_gpfs_base_package>/base-3-5 all cd /<path_to_gpfs_fix_package>/fix-3-5-10/ inutoc . installp -aXY -d/<path_to_gpfs_fix_package>/fix-3-5-10 all lslpp -L gpfs.\\*","title":"Instalaltion on AIX"},{"location":"Tech/Storage_and_filesystems/GPFS/#creating-cluster","text":"# You need to setup paswordless shh connection between nodes # Add this path to /etc/environment on each node export PATH=$PATH:/usr/lpp/mmfs/bin mmcrcluster -N <PRIMARY_NODE_HOSTNAME>:manager-quorum -p PRIMARY_NODE_HOSTNAME -r /usr/bin/ssh -R /usr/bin/scp mmchlicense server --accept -N PRIMARY_NODE_HOSTNAME mmstartup -a mmaddnode -N <SECONDARY_NODE_HOSTNAME> mmaddnode -N <THIRDARY_NODE_HOSTNAME> mmaddnode -N <N-ARY_NODE_HOSTNAME> mmchcluster -s <SECONDARY_NODE_HOSTNAME> mmchlicense server --accept -N <SECONDARY_NODE_HOSTNAME> mmchlicense server --accept -N <THIRDARY_NODE_HOSTNAME> mmchlicense server --accept -N <N-ARY_NODE_HOSTNAME> mmstartup -N <SECONDARY_NODE_HOSTNAME> mmstartup -N <THIRDARY_NODE_HOSTNAME> mmstartup -N <N-ARY_NODE_HOSTNAME> mmchnode --quorum --manager -N <SECONDARY_NODE_HOSTNAME> # To check status of cluster: mmlscluster mmgetstate -a","title":"Creating cluster"},{"location":"Tech/Storage_and_filesystems/GPFS/#create-gpfs-mirror-partition","text":"# On primary node: mkdir /etc/gpfs vi /etc/gpfs/diskdesk.txt ### --insert in diskdesk.txt-- hdiskX:::dataAndMetadata:1:nsd1: hdiskY:::dataAndMetadata:2:nsd2: ### --end of insert-- mmcrnsd -F /etc/gpfs/diskdesk.txt mmshutdown -a mmchconfig tiebreakerdisks=\"nsd1;nsd2\" mmstartup -a mmcrfs /mnt/gpfs gpfsfs -F /etc/gpfs/diskdesk.txt -A yes -B 512K -M2 -m2 -R2 -r2 -n 2 -N 50000 mmlsconfig mmmount all -a mmchconfig minQuorumNodes=2 df -g","title":"Create GPFS mirror partition"},{"location":"Tech/Storage_and_filesystems/GPFS/#autostart-gpfs","text":"mmchconfig autoload=yes","title":"Autostart GPFS"},{"location":"Tech/Storage_and_filesystems/GPFS/#increase-inodes","text":"mmchfs <fsname> -F 1M","title":"Increase Inodes"},{"location":"Tech/Storage_and_filesystems/GPFS/#change-hostname-on-gpfs-nodes","text":"[Preface] #Old names: 10.10.10.10 OLD-SRV-NAME-01 10.10.10.10 OLD-SRV-NAME-02 #New names: 10.10.10.10 NEW-SRV-NAME-01 10.10.10.10 NEW-SRV-NAME-02 [Preface] Stop all services which use GPFS [On each node] add new names to /etc/hosts (old ones keep too) 10.10.10.10 NEW-SRV-NAME-01 10.10.10.11 NEW-SRV-NAME-02 [On master node] Shut down GPFS-cluster mmshutdown -a [On master node] Run command for configuration changing # Change interface names to names placed after \"-N\" key mmchnode --admin-interface=OLD-SRV-NAME-01 --daemon-interface=prodctx1 -N NEW-SRV-NAME-01 mmchnode --admin-interface=OLD-SRV-NAME-01 --daemon-interface=prodctx2 -N NEW-SRV-NAME-02 [On master node] Start GPFS-cluster mmstartup -a [On master node] Check cluster details and make sure that names were changed mmlscluster mmgetstate -a [On each node] If everything right remove old records from /etc/hosts [On maser node] Recheck than everything still OK mmshutdown -a mmstartup -a mmlscluster mmgetstate -a","title":"Change hostname on GPFS nodes"},{"location":"Tech/Storage_and_filesystems/HDD/","text":"Hot addition hdd # Run rescan for devices under root (sodo doesn't work) echo \"- - -\" > /sys/class/scsi_host/host0/scan echo \"- - -\" > /sys/class/scsi_host/host1/scan echo \"- - -\" > /sys/class/scsi_host/host2/scan echo \"- - -\" > /sys/class/scsi_host/hostX/scan","title":"HDD"},{"location":"Tech/Storage_and_filesystems/HDD/#hot-addition-hdd","text":"# Run rescan for devices under root (sodo doesn't work) echo \"- - -\" > /sys/class/scsi_host/host0/scan echo \"- - -\" > /sys/class/scsi_host/host1/scan echo \"- - -\" > /sys/class/scsi_host/host2/scan echo \"- - -\" > /sys/class/scsi_host/hostX/scan","title":"Hot addition hdd"},{"location":"Tech/Storage_and_filesystems/LVM/","text":"Info #PV pvdisplay pvs #VG vgdisplay vgs #LV lvdisplay lvs Phisical volumes(PV) # Scan devices lvmdiskscan # Create PV on phisical device pvcreate <device> # Extend PV size after you add space to hdd pvresize <phisical_device> # Reduce PV space pvresize --setphysicalvolumesize <new_size> <phisical_device> # Move contents to another device pvmove <device_from> <device_to> # Remove PV from LVM pvremove <phisical_device> Volume groups(VG) # Create VG on the PV vgcreate <vg_name> <pv_name> # Add PV to volume VG vgextend <vg_name> <pv_name> # Scan system for volume groups and activate vgscan vgchange -ay # Remove PV from VG vgreduce <vg_name> <pv_name> Logical volume(LV) # Create LV on VG lvcreate -L <size> <vg_name> -n <lv_name> [phisical_device_to_store_data] # Extend LV lvextend -L [+]<size> <vg_name>/<lv_name> # Resise EXT4 resize2fs [-M] <vg_name>/<lv_name> [new_size] # Resize XFS xfs_growfs <mount_point> # Resize JFS mount -o remount,resize[=<number_of_blocks>] <mount_point> # Reduce size of LV #!!! Note that not all filesystems support reducing (for example xfs not), so check it additionally lvreduce -L [-]<size> <vg_name>/<lv_name> # Remove LV lvremove <vg_name>/<lv_name>","title":"LVM"},{"location":"Tech/Storage_and_filesystems/LVM/#info","text":"#PV pvdisplay pvs #VG vgdisplay vgs #LV lvdisplay lvs","title":"Info"},{"location":"Tech/Storage_and_filesystems/LVM/#phisical-volumespv","text":"# Scan devices lvmdiskscan # Create PV on phisical device pvcreate <device> # Extend PV size after you add space to hdd pvresize <phisical_device> # Reduce PV space pvresize --setphysicalvolumesize <new_size> <phisical_device> # Move contents to another device pvmove <device_from> <device_to> # Remove PV from LVM pvremove <phisical_device>","title":"Phisical volumes(PV)"},{"location":"Tech/Storage_and_filesystems/LVM/#volume-groupsvg","text":"# Create VG on the PV vgcreate <vg_name> <pv_name> # Add PV to volume VG vgextend <vg_name> <pv_name> # Scan system for volume groups and activate vgscan vgchange -ay # Remove PV from VG vgreduce <vg_name> <pv_name>","title":"Volume groups(VG)"},{"location":"Tech/Storage_and_filesystems/LVM/#logical-volumelv","text":"# Create LV on VG lvcreate -L <size> <vg_name> -n <lv_name> [phisical_device_to_store_data] # Extend LV lvextend -L [+]<size> <vg_name>/<lv_name> # Resise EXT4 resize2fs [-M] <vg_name>/<lv_name> [new_size] # Resize XFS xfs_growfs <mount_point> # Resize JFS mount -o remount,resize[=<number_of_blocks>] <mount_point> # Reduce size of LV #!!! Note that not all filesystems support reducing (for example xfs not), so check it additionally lvreduce -L [-]<size> <vg_name>/<lv_name> # Remove LV lvremove <vg_name>/<lv_name>","title":"Logical volume(LV)"},{"location":"Tech/Storage_and_filesystems/Links/","text":"Find all broken links find /path -type l | while read link; do [ -e `readlink $link` ] || echo $link; done","title":"Links"},{"location":"Tech/Storage_and_filesystems/Links/#find-all-broken-links","text":"find /path -type l | while read link; do [ -e `readlink $link` ] || echo $link; done","title":"Find all broken links"},{"location":"Tech/Storage_and_filesystems/Map_Disks_in_Windows/","text":"Map local folder to drive letter subst <drive_letter:> <path_to_local_folder> #subst U: d:\\AdminTools Map reemote folder within domain net use <DriveLetter>: \\\\Server\\SharedFolder /USER:<username>@<domain> * /PERSISTENT:YES # net use U: \\\\FileServer\\HomeFolder /USER:Administrator@example.ru * /PERSISTENT:YES","title":"Map Disks in Windows"},{"location":"Tech/Storage_and_filesystems/Map_Disks_in_Windows/#map-local-folder-to-drive-letter","text":"subst <drive_letter:> <path_to_local_folder> #subst U: d:\\AdminTools","title":"Map local folder to drive letter"},{"location":"Tech/Storage_and_filesystems/Map_Disks_in_Windows/#map-reemote-folder-within-domain","text":"net use <DriveLetter>: \\\\Server\\SharedFolder /USER:<username>@<domain> * /PERSISTENT:YES # net use U: \\\\FileServer\\HomeFolder /USER:Administrator@example.ru * /PERSISTENT:YES","title":"Map reemote folder within domain"},{"location":"Tech/Storage_and_filesystems/SAN/","text":"Scan fiber channel: for host in `ls /sys/class/fc_host`; do echo \"- - -\" > /sys/class/scsi_host/${HOST}/scan done Fetch device vendor and model cat /sys/block/sda/device/vendor cat /sys/block/sda/device/model Scan multipath multipath List luns ls -ltra /dev/mapper List drives associated with luns multipath -ll multipath -l <mpathalias> Flush multipath multipath -F Delete the drives. echo 1 > /sys/block/sdX/device/delete","title":"SAN"},{"location":"Tech/Storage_and_filesystems/SAN/#scan-fiber-channel","text":"for host in `ls /sys/class/fc_host`; do echo \"- - -\" > /sys/class/scsi_host/${HOST}/scan done","title":"Scan fiber channel:"},{"location":"Tech/Storage_and_filesystems/SAN/#fetch-device-vendor-and-model","text":"cat /sys/block/sda/device/vendor cat /sys/block/sda/device/model","title":"Fetch device vendor and model"},{"location":"Tech/Storage_and_filesystems/SAN/#scan-multipath","text":"multipath","title":"Scan multipath"},{"location":"Tech/Storage_and_filesystems/SAN/#list-luns","text":"ls -ltra /dev/mapper","title":"List luns"},{"location":"Tech/Storage_and_filesystems/SAN/#list-drives-associated-with-luns","text":"multipath -ll multipath -l <mpathalias>","title":"List drives associated with luns"},{"location":"Tech/Storage_and_filesystems/SAN/#flush-multipath","text":"multipath -F","title":"Flush multipath"},{"location":"Tech/Storage_and_filesystems/SAN/#delete-the-drives","text":"echo 1 > /sys/block/sdX/device/delete","title":"Delete the drives."},{"location":"Tech/Storage_and_filesystems/mdadm/","text":"Raid1 fdisk /dev/<disk1> fdisk /dev/<disk2> mdadm --zero-superblock /dev/<disk1> /dev/<disk2> mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/<disk1_partition> /dev/<disk2_partition> mkfs.ext4 /dev/md0 mount /dev/md0 /<moutn_point> echo \"/dev/md0 /<mount_point> ext4 noatime,rw 0 0\" >> /etc/fstab # To show raid creation process watch -n 2 cat /proc/mdstat tail -f /proc/mdstat # Array info mdadm --query /dev/md0","title":"Mdadm"},{"location":"Tech/Storage_and_filesystems/mdadm/#raid1","text":"fdisk /dev/<disk1> fdisk /dev/<disk2> mdadm --zero-superblock /dev/<disk1> /dev/<disk2> mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/<disk1_partition> /dev/<disk2_partition> mkfs.ext4 /dev/md0 mount /dev/md0 /<moutn_point> echo \"/dev/md0 /<mount_point> ext4 noatime,rw 0 0\" >> /etc/fstab # To show raid creation process watch -n 2 cat /proc/mdstat tail -f /proc/mdstat # Array info mdadm --query /dev/md0","title":"Raid1"},{"location":"Tech/Users/Rename_User/","text":"Change username usermod -l <new_name> <old_name> Change username and home directory usermod -l <New_Name> -m -d /home/<new_dir> <old_name> Change the name of the group associated with the user groupmod -n <new_group_name> <old_group_name>","title":"Rename User"},{"location":"Tech/Users/Rename_User/#change-username","text":"usermod -l <new_name> <old_name>","title":"Change username"},{"location":"Tech/Users/Rename_User/#change-username-and-home-directory","text":"usermod -l <New_Name> -m -d /home/<new_dir> <old_name>","title":"Change username and home directory"},{"location":"Tech/Users/Rename_User/#change-the-name-of-the-group-associated-with-the-user","text":"groupmod -n <new_group_name> <old_group_name>","title":"Change the name of the group associated with the user"},{"location":"Tech/Virtual/Docker/","text":"Login to container with root user docker exec -u 0 -it <container_name> <command> Check linux kernel exec /usr/share/docker/contrib/check-config.sh Run docker conainer sudo docker run --name mysql-nx -e MYSQL_ROOT_PASSWORD=password -d -p 127.0.0.1:3306:3306 mysql:latest Execute in-docker console sudo docker exec -it <container> bash Create JSON with container settings docker inspect -f '{{ json .NetworkSettings }}' <container_id> | python -mjson.tool Delete containers by date docker ps -a | grep 'weeks ago' | awk '{print $1}' | xargs --no-run-if-empty docker rm Delete all containers: docker stop $(docker ps -a -q) docker rm $(docker ps -a -q) Use Docker registry mkdir /etc/systemd/system/docker.service.d/ touch /etc/systemd/system/docker.service.d/docker_opts.conf nano /etc/systemd/system/docker.service.d/docker_opts.conf # --- [Service] ExecStart= ExecStart=/usr/bin/docker -d -H fd:// --insecure-registry docker-registry.keepbot.github.io --registry-mirror https://doker-registry-mirror.keepbot.github.io # --- systemctl daemon-reload service docker restart Delete obsolete containers # You can add all of this to cron daily #!/bin/sh docker rm $(docker ps -aqf status=exited) docker rmi $(docker images -qf dangling=true) docker volume rm $(docker volume ls -qf dangling=true) docker run --rm -e GRACE_PERIOD_SECONDS=86400 -e FORCE_IMAGE_REMOVAL=1 -v /var/run/docker.sock:/var/run/docker.sock spotify/docker-gc Docker on windows # Docker on windows doesn't support fsync() so it makes impossible to use shared volumes with databases like MondoDB or PostgesSQL","title":"Docker"},{"location":"Tech/Virtual/Docker/#login-to-container-with-root-user","text":"docker exec -u 0 -it <container_name> <command>","title":"Login to container with root user"},{"location":"Tech/Virtual/Docker/#check-linux-kernel","text":"exec /usr/share/docker/contrib/check-config.sh","title":"Check linux kernel"},{"location":"Tech/Virtual/Docker/#run-docker-conainer","text":"sudo docker run --name mysql-nx -e MYSQL_ROOT_PASSWORD=password -d -p 127.0.0.1:3306:3306 mysql:latest","title":"Run docker conainer"},{"location":"Tech/Virtual/Docker/#execute-in-docker-console","text":"sudo docker exec -it <container> bash","title":"Execute in-docker console"},{"location":"Tech/Virtual/Docker/#create-json-with-container-settings","text":"docker inspect -f '{{ json .NetworkSettings }}' <container_id> | python -mjson.tool","title":"Create JSON with container settings"},{"location":"Tech/Virtual/Docker/#delete-containers-by-date","text":"docker ps -a | grep 'weeks ago' | awk '{print $1}' | xargs --no-run-if-empty docker rm","title":"Delete containers by date"},{"location":"Tech/Virtual/Docker/#delete-all-containers","text":"docker stop $(docker ps -a -q) docker rm $(docker ps -a -q)","title":"Delete all containers:"},{"location":"Tech/Virtual/Docker/#use-docker-registry","text":"mkdir /etc/systemd/system/docker.service.d/ touch /etc/systemd/system/docker.service.d/docker_opts.conf nano /etc/systemd/system/docker.service.d/docker_opts.conf # --- [Service] ExecStart= ExecStart=/usr/bin/docker -d -H fd:// --insecure-registry docker-registry.keepbot.github.io --registry-mirror https://doker-registry-mirror.keepbot.github.io # --- systemctl daemon-reload service docker restart","title":"Use Docker registry"},{"location":"Tech/Virtual/Docker/#delete-obsolete-containers","text":"# You can add all of this to cron daily #!/bin/sh docker rm $(docker ps -aqf status=exited) docker rmi $(docker images -qf dangling=true) docker volume rm $(docker volume ls -qf dangling=true) docker run --rm -e GRACE_PERIOD_SECONDS=86400 -e FORCE_IMAGE_REMOVAL=1 -v /var/run/docker.sock:/var/run/docker.sock spotify/docker-gc","title":"Delete obsolete containers"},{"location":"Tech/Virtual/Docker/#docker-on-windows","text":"# Docker on windows doesn't support fsync() so it makes impossible to use shared volumes with databases like MondoDB or PostgesSQL","title":"Docker on windows"},{"location":"Tech/Virtual/Hyper-V/","text":"Create NATted local vSwitch # Opent PowerShell console: powershell # Create simple internal vSwitch: New-VMSwitch -SwitchName \"NAT\" -SwitchType Internal # Write down index of network adapter: Get-NetAdapter # Set network addresses: New-NetIPAddress -IPAddress <NAT Gateway IP> -PrefixLength <NAT Subnet Prefix Length> -InterfaceIndex <ifIndex> # New-NetIPAddress -IPAddress 172.188.188.1 -PrefixLength 24 -InterfaceIndex 46 New-NetNat -Name <NAT_NetworkName> -InternalIPInterfaceAddressPrefix <NAT_Subnet/prefix> # New-NetNat -Name LocalNatNetwork -InternalIPInterfaceAddressPrefix 172.188.188.0/24 # Diagnostic Get-NetNat Get-VMSwitch # Removing NAT network Get-NetNat | Remove-NetNat # Removing vSwitch Get-NetIPAddress -InterfaceAlias \"vEthernet(<name of vSwitch>)\" Remove-NetIPAddress -InterfaceAlias \"vEthernet(<name of vSwitch>)\" -IPAddress <IPAddress>","title":"Hyper V"},{"location":"Tech/Virtual/Hyper-V/#create-natted-local-vswitch","text":"# Opent PowerShell console: powershell # Create simple internal vSwitch: New-VMSwitch -SwitchName \"NAT\" -SwitchType Internal # Write down index of network adapter: Get-NetAdapter # Set network addresses: New-NetIPAddress -IPAddress <NAT Gateway IP> -PrefixLength <NAT Subnet Prefix Length> -InterfaceIndex <ifIndex> # New-NetIPAddress -IPAddress 172.188.188.1 -PrefixLength 24 -InterfaceIndex 46 New-NetNat -Name <NAT_NetworkName> -InternalIPInterfaceAddressPrefix <NAT_Subnet/prefix> # New-NetNat -Name LocalNatNetwork -InternalIPInterfaceAddressPrefix 172.188.188.0/24 # Diagnostic Get-NetNat Get-VMSwitch # Removing NAT network Get-NetNat | Remove-NetNat # Removing vSwitch Get-NetIPAddress -InterfaceAlias \"vEthernet(<name of vSwitch>)\" Remove-NetIPAddress -InterfaceAlias \"vEthernet(<name of vSwitch>)\" -IPAddress <IPAddress>","title":"Create NATted local vSwitch"},{"location":"Tech/Virtual/KVM/","text":"Create virtual hdd image qemu-img create -o preallocation=metadata -f qcow2 qcow2.img 20G Start installation of virtual machine with virtual image qemu-system-x86_64 -hda vdisk.img -cdrom /path/to/boot-media.iso -boot d -m 384 Run virtual machine qemu-system-x86_64 vdisk.img -m 384 Increase image # Stop virtual machine qemu-img resize <path_to_vm_disk).img +<SIZE>G # Start virtual machine Windows 10 with UEFI # Installing qemu-system-x86_64 -bios /usr/share/ovmf/ovmf_x64.bin -enable-kvm -cpu host -smp 4 -m 2048 -cdrom ~/Downloads/Win10_English_x64.iso -net nic,model=virtio -net user -drive file=~/vm/win10.hd.img.raw,format=raw,if=virtio -vga qxl -drive file=~/Downloads/virtio-win-0.1.105.iso,index=1,media=cdrom # Running qemu-system-x86_64 -bios /usr/share/ovmf/ovmf_x64.bin -enable-kvm -cpu host -smp 4 -m 4096 -net nic,model=virtio -net user -drive file=~/vm/win10.hd.img.raw,format=raw,if=virtio -vga qxl -usbdevice tablet -rtc base=utc Open Virtual Machine Firmware (OVMF) OVMF Whitepaper Fedora OVMF","title":"KVM"},{"location":"Tech/Virtual/KVM/#create-virtual-hdd-image","text":"qemu-img create -o preallocation=metadata -f qcow2 qcow2.img 20G","title":"Create virtual hdd image"},{"location":"Tech/Virtual/KVM/#start-installation-of-virtual-machine-with-virtual-image","text":"qemu-system-x86_64 -hda vdisk.img -cdrom /path/to/boot-media.iso -boot d -m 384","title":"Start installation of virtual machine with virtual image"},{"location":"Tech/Virtual/KVM/#run-virtual-machine","text":"qemu-system-x86_64 vdisk.img -m 384","title":"Run virtual machine"},{"location":"Tech/Virtual/KVM/#increase-image","text":"# Stop virtual machine qemu-img resize <path_to_vm_disk).img +<SIZE>G # Start virtual machine","title":"Increase image"},{"location":"Tech/Virtual/KVM/#windows-10-with-uefi","text":"# Installing qemu-system-x86_64 -bios /usr/share/ovmf/ovmf_x64.bin -enable-kvm -cpu host -smp 4 -m 2048 -cdrom ~/Downloads/Win10_English_x64.iso -net nic,model=virtio -net user -drive file=~/vm/win10.hd.img.raw,format=raw,if=virtio -vga qxl -drive file=~/Downloads/virtio-win-0.1.105.iso,index=1,media=cdrom # Running qemu-system-x86_64 -bios /usr/share/ovmf/ovmf_x64.bin -enable-kvm -cpu host -smp 4 -m 4096 -net nic,model=virtio -net user -drive file=~/vm/win10.hd.img.raw,format=raw,if=virtio -vga qxl -usbdevice tablet -rtc base=utc","title":"Windows 10 with UEFI"},{"location":"Tech/Virtual/KVM/#open-virtual-machine-firmware-ovmf","text":"OVMF Whitepaper Fedora OVMF","title":"Open Virtual Machine Firmware (OVMF)"},{"location":"Tech/Web/Curl/","text":"Cool console weather curl http://wttr.in/moscow GET example curl -k -X GET -u <user>:<password> https://<address>/<method>?<params>","title":"Curl"},{"location":"Tech/Web/Curl/#cool-console-weather","text":"curl http://wttr.in/moscow","title":"Cool console weather"},{"location":"Tech/Web/Curl/#get-example","text":"curl -k -X GET -u <user>:<password> https://<address>/<method>?<params>","title":"GET example"},{"location":"Tech/Web/IIS/","text":"Place for Log Files # First one: Default place to keep Site's logs (But it can be changed in IIS Manager) %SystemDrive%\\inetpub\\logs\\LogFiles # HTTP Error logs: %SystemDrive%\\Windows\\System32\\LogFiles\\HTTPERR # If you cann't find log you should be sure that they are enabled: # * Go to \"Programs and Features\" # * Click on \"Turn Windows features on or off\"(on the left side) # * Select \"Internet Information Services\\World Wide Web Services\\Health and Diagnostics\\HTTP Logging\"","title":"IIS"},{"location":"Tech/Web/IIS/#place-for-log-files","text":"# First one: Default place to keep Site's logs (But it can be changed in IIS Manager) %SystemDrive%\\inetpub\\logs\\LogFiles # HTTP Error logs: %SystemDrive%\\Windows\\System32\\LogFiles\\HTTPERR # If you cann't find log you should be sure that they are enabled: # * Go to \"Programs and Features\" # * Click on \"Turn Windows features on or off\"(on the left side) # * Select \"Internet Information Services\\World Wide Web Services\\Health and Diagnostics\\HTTP Logging\"","title":"Place for Log Files"},{"location":"Tech/Web/Tomcat/","text":"Delay for apps deployment Subject: TC7 very slow SessionIdGenerator SecureRandom initialization From list: tomcat-user TC7+ can often take a long time to start up due to slow initialization of the SessionIdGenerator - it can take up to nearly 2-3 minutes. TC7+ uses secure randomizer /dev/urandom to generate Session ID but JRE uses /dev/random instead for \"Oracle security reasons\" so it causes some intitialisation delays when random generator waits to sufficient amount entropy. There is some issues about it: JDK-6521844 , JDK-6521844. To view amount of available entropy: cat /proc/sys/kernel/random/entropy_avail To avoid this behaviour you need to set JAVA_OPTS manually like bellow: JAVA_OPTS=\"-Djava.security.egd=file:/dev/./urandom\" /opt/apache-tomcat-7.0.70/bin/startup.sh","title":"Tomcat"},{"location":"Tech/Web/Tomcat/#delay-for-apps-deployment","text":"Subject: TC7 very slow SessionIdGenerator SecureRandom initialization From list: tomcat-user TC7+ can often take a long time to start up due to slow initialization of the SessionIdGenerator - it can take up to nearly 2-3 minutes. TC7+ uses secure randomizer /dev/urandom to generate Session ID but JRE uses /dev/random instead for \"Oracle security reasons\" so it causes some intitialisation delays when random generator waits to sufficient amount entropy. There is some issues about it: JDK-6521844 , JDK-6521844. To view amount of available entropy: cat /proc/sys/kernel/random/entropy_avail To avoid this behaviour you need to set JAVA_OPTS manually like bellow: JAVA_OPTS=\"-Djava.security.egd=file:/dev/./urandom\" /opt/apache-tomcat-7.0.70/bin/startup.sh","title":"Delay for apps deployment"},{"location":"UX/Edittors/My_Sublime_Text_config/","text":"My Sublime Text config { // Autocomplete \"auto_complete\": true, \"auto_complete_commit_on_tab\": true, \"auto_complete_with_fields\": true, \"tab_completion\": false, // Common \"font_size\": 10, \"margin\": 2, \"tab_size\": 2, \"translate_tabs_to_spaces\": true, \"word_wrap\": true, \"default_encoding\": \"UTF-8\", \"dpi_scale\": 2.0, \"default_line_ending\": \"unix\", // Ignored Packages \"ignored_packages\": [ // \"Vintage\", // \"GutGutter, // \"ColorPick\", // \"ColorPicker\", // \"JavaScript Completions\" // \"markupsafe\" // \"mdpopups\" // \"nginx\" // \"PowerShell\" // \"pygments\" // \"python-jinja2\" // \"python-markdown\" // \"python-markdown\" // \"Terminal\" // \"Terminality\" // \"VBScript\" ], // Gruvbox \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Hard) NDC.tmTheme\", \"theme\": \"gruvbox (Dark) (Hard).sublime-theme\", \"gruvbox_command_palette_cramped\": true, \"gruvbox_disable_faded_file_icons\": true, \"gruvbox_highlight_active_tree_row\": true, \"gruvbox_scrollbar_width_xs\": true, \"gruvbox_sidebar_cramped\": true, \"gruvbox_sidebar_font_size_11\": true, \"gruvbox_statusbar_button_xxs\": true, \"gruvbox_statusbar_font_size_11\": true, \"gruvbox_statusbar_xxs\": true, \"gruvbox_tabs_autowidth\": true, \"gruvbox_tabs_font_size_11\": true, \"gruvbox_tabs_xxs\": true, \"gruvbox_underline_modified_tabs\": true, // Style // \u201csmooth\u201d, \u201cphase\u201d, \u201cblink\u201d, \u201cwide\u201d and \u201csolid\u201d \"caret_style\": \"blink\", \"highlight_line\": true, \"line_padding_bottom\": 0, \"line_padding_top\": 0, \"fade_fold_buttons\": false, \"bold_folder_labels\": false, \"caret_extra_width\": 1, // Other \"spell_check\": false, } /* // gruvbox Dark Hard Contrast { \"theme\": \"gruvbox (Dark) (Hard).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Hard).tmTheme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Hard) NDC.tmTheme\", } // gruvbox Dark Medium Contrast { \"theme\": \"gruvbox (Dark) (Medium).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Medium).tmTheme\", } // gruvbox Dark Soft Contrast { \"theme\": \"gruvbox (Dark) (Soft).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Soft).tmTheme\", } // gruvbox Light Hard Contrast { \"theme\": \"gruvbox (Light) (Hard).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Light) (Hard).tmTheme\", } // gruvbox Light Medium Contrast { \"theme\": \"gruvbox (Light) (Medium).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Light) (Medium).tmTheme\", } // gruvbox Light Soft Contrast { \"theme\": \"gruvbox (Light) (Soft).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Light) (Soft).tmTheme\", } */","title":"My Sublime Text config"},{"location":"UX/Edittors/My_Sublime_Text_config/#my-sublime-text-config","text":"{ // Autocomplete \"auto_complete\": true, \"auto_complete_commit_on_tab\": true, \"auto_complete_with_fields\": true, \"tab_completion\": false, // Common \"font_size\": 10, \"margin\": 2, \"tab_size\": 2, \"translate_tabs_to_spaces\": true, \"word_wrap\": true, \"default_encoding\": \"UTF-8\", \"dpi_scale\": 2.0, \"default_line_ending\": \"unix\", // Ignored Packages \"ignored_packages\": [ // \"Vintage\", // \"GutGutter, // \"ColorPick\", // \"ColorPicker\", // \"JavaScript Completions\" // \"markupsafe\" // \"mdpopups\" // \"nginx\" // \"PowerShell\" // \"pygments\" // \"python-jinja2\" // \"python-markdown\" // \"python-markdown\" // \"Terminal\" // \"Terminality\" // \"VBScript\" ], // Gruvbox \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Hard) NDC.tmTheme\", \"theme\": \"gruvbox (Dark) (Hard).sublime-theme\", \"gruvbox_command_palette_cramped\": true, \"gruvbox_disable_faded_file_icons\": true, \"gruvbox_highlight_active_tree_row\": true, \"gruvbox_scrollbar_width_xs\": true, \"gruvbox_sidebar_cramped\": true, \"gruvbox_sidebar_font_size_11\": true, \"gruvbox_statusbar_button_xxs\": true, \"gruvbox_statusbar_font_size_11\": true, \"gruvbox_statusbar_xxs\": true, \"gruvbox_tabs_autowidth\": true, \"gruvbox_tabs_font_size_11\": true, \"gruvbox_tabs_xxs\": true, \"gruvbox_underline_modified_tabs\": true, // Style // \u201csmooth\u201d, \u201cphase\u201d, \u201cblink\u201d, \u201cwide\u201d and \u201csolid\u201d \"caret_style\": \"blink\", \"highlight_line\": true, \"line_padding_bottom\": 0, \"line_padding_top\": 0, \"fade_fold_buttons\": false, \"bold_folder_labels\": false, \"caret_extra_width\": 1, // Other \"spell_check\": false, } /* // gruvbox Dark Hard Contrast { \"theme\": \"gruvbox (Dark) (Hard).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Hard).tmTheme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Hard) NDC.tmTheme\", } // gruvbox Dark Medium Contrast { \"theme\": \"gruvbox (Dark) (Medium).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Medium).tmTheme\", } // gruvbox Dark Soft Contrast { \"theme\": \"gruvbox (Dark) (Soft).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Dark) (Soft).tmTheme\", } // gruvbox Light Hard Contrast { \"theme\": \"gruvbox (Light) (Hard).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Light) (Hard).tmTheme\", } // gruvbox Light Medium Contrast { \"theme\": \"gruvbox (Light) (Medium).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Light) (Medium).tmTheme\", } // gruvbox Light Soft Contrast { \"theme\": \"gruvbox (Light) (Soft).sublime-theme\", \"color_scheme\": \"Packages/gruvbox/gruvbox (Light) (Soft).tmTheme\", } */","title":"My Sublime Text config"},{"location":"UX/Edittors/VSCode/","text":"Install on ubuntu # Install key curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg # Install repo sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list' # Update apt-get sudo apt-get update # Install sudo apt-get install code # or code-insiders","title":"VSCode"},{"location":"UX/Edittors/VSCode/#install-on-ubuntu","text":"# Install key curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg # Install repo sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list' # Update apt-get sudo apt-get update # Install sudo apt-get install code # or code-insiders","title":"Install on ubuntu"},{"location":"UX/Edittors/Vim/","text":"Commnent bunch of lines Stand on a firs symbol of first line Ctrl+V Down_1 + Down_2 + .. + Down_n Ctrl+I \"#\" Chaeat Sheet Cursor movement h - move left j - move down k - move up l - move right w - jump by start of words (punctuation considered words) W - jump by words (spaces separate words) e - jump to end of words (punctuation considered words) E - jump to end of words (no punctuation) b - jump backward by words (punctuation considered words) B - jump backward by words (no punctuation) 0 - (zero) start of line ^ - first non-blank character of line $ - end of line G - Go To command (prefix with number - 5G goes to line 5) Note: Prefix a cursor movement command with a number to repeat it. For example, 4j moves down 4 lines. Insert Mode - Inserting/Appending text i - start insert mode at cursor I - insert at the beginning of the line a - append after the cursor A - append at the end of the line o - open (append) blank line below current line (no need to press return) O - open blank line above current line ea - append at end of word Esc - exit insert mode Editing r - replace a single character (does not use insert mode) J - join line below to the current one cc - change (replace) an entire line cw - change (replace) to the end of word c$ - change (replace) to the end of line s - delete character at cursor and subsitute text S - delete line at cursor and substitute text (same as cc) xp - transpose two letters (delete and paste, technically) u - undo . - repeat last command Marking text (visual mode) v - start visual mode, mark lines, then do command (such as y-yank) V - start Linewise visual mode o - move to other end of marked area Ctrl+v - start visual block mode O - move to Other corner of block aw - mark a word ab - a () block (with braces) aB - a {} block (with brackets) ib - inner () block iB - inner {} block Esc - exit visual mode Visual commands > - shift right < - shift left y - yank (copy) marked text d - delete marked text ~ - switch case Cut and Paste yy - yank (copy) a line 2yy - yank 2 lines yw - yank word y$ - yank to end of line p - put (paste) the clipboard after cursor P - put (paste) before cursor dd - delete (cut) a line dw - delete (cut) the current word x - delete (cut) current character Exiting :w - write (save) the file, but don't exit :wq - write (save) and quit :q - quit (fails if anything has changed) :q! - quit and throw away changes Search/Replace /pattern - search for pattern ?pattern - search backward for pattern n - repeat search in same direction N - repeat search in opposite direction :%s/old/new/g - replace all old with new throughout file :%s/old/new/gc - replace all old with new throughout file with confirmations Working with multiple files :e filename - Edit a file in a new buffer :bnext (or :bn) - go to next buffer :bprev (of :bp) - go to previous buffer :bd - delete a buffer (close a file) :sp filename - Open a file in a new buffer and split window ctrl+ws - Split windows ctrl+ww - switch between windows ctrl+wq - Quit a window ctrl+wv - Split windows vertically Another good vim commands cheatsheet and a vi introduction using the \"cheat sheet\" method","title":"Vim"},{"location":"UX/Edittors/Vim/#commnent-bunch-of-lines","text":"Stand on a firs symbol of first line Ctrl+V Down_1 + Down_2 + .. + Down_n Ctrl+I \"#\"","title":"Commnent bunch of lines"},{"location":"UX/Edittors/Vim/#chaeat-sheet","text":"Cursor movement h - move left j - move down k - move up l - move right w - jump by start of words (punctuation considered words) W - jump by words (spaces separate words) e - jump to end of words (punctuation considered words) E - jump to end of words (no punctuation) b - jump backward by words (punctuation considered words) B - jump backward by words (no punctuation) 0 - (zero) start of line ^ - first non-blank character of line $ - end of line G - Go To command (prefix with number - 5G goes to line 5) Note: Prefix a cursor movement command with a number to repeat it. For example, 4j moves down 4 lines. Insert Mode - Inserting/Appending text i - start insert mode at cursor I - insert at the beginning of the line a - append after the cursor A - append at the end of the line o - open (append) blank line below current line (no need to press return) O - open blank line above current line ea - append at end of word Esc - exit insert mode Editing r - replace a single character (does not use insert mode) J - join line below to the current one cc - change (replace) an entire line cw - change (replace) to the end of word c$ - change (replace) to the end of line s - delete character at cursor and subsitute text S - delete line at cursor and substitute text (same as cc) xp - transpose two letters (delete and paste, technically) u - undo . - repeat last command Marking text (visual mode) v - start visual mode, mark lines, then do command (such as y-yank) V - start Linewise visual mode o - move to other end of marked area Ctrl+v - start visual block mode O - move to Other corner of block aw - mark a word ab - a () block (with braces) aB - a {} block (with brackets) ib - inner () block iB - inner {} block Esc - exit visual mode Visual commands > - shift right < - shift left y - yank (copy) marked text d - delete marked text ~ - switch case Cut and Paste yy - yank (copy) a line 2yy - yank 2 lines yw - yank word y$ - yank to end of line p - put (paste) the clipboard after cursor P - put (paste) before cursor dd - delete (cut) a line dw - delete (cut) the current word x - delete (cut) current character Exiting :w - write (save) the file, but don't exit :wq - write (save) and quit :q - quit (fails if anything has changed) :q! - quit and throw away changes Search/Replace /pattern - search for pattern ?pattern - search backward for pattern n - repeat search in same direction N - repeat search in opposite direction :%s/old/new/g - replace all old with new throughout file :%s/old/new/gc - replace all old with new throughout file with confirmations Working with multiple files :e filename - Edit a file in a new buffer :bnext (or :bn) - go to next buffer :bprev (of :bp) - go to previous buffer :bd - delete a buffer (close a file) :sp filename - Open a file in a new buffer and split window ctrl+ws - Split windows ctrl+ww - switch between windows ctrl+wq - Quit a window ctrl+wv - Split windows vertically Another good vim commands cheatsheet and a vi introduction using the \"cheat sheet\" method","title":"Chaeat Sheet"},{"location":"UX/Hi_DPI/Awesome_VM/","text":"Problem description To improve my productivity I bought a 4K display and wanted to use it altogether with old 1K display. It turned out that mixing two different DPIs doesn't work out of the box so some hacks are needed. Solution 1. Set HiDPI as a default To set HiDPI as default please refer to https://wiki.archlinux.org/index.php/HiDPI#X_Resources 2. Prepare wrappers for popular programs to set lower DPI Example of /usr/bin/opera-ldpi: #!/usr/bin/bash OLDDPI=`xrdb -query | awk '/Xft.dpi/ {print $2}'` xrdb -merge <(echo \"Xft.dpi: 96\") opera --alt-high-dpi-setting=96 --system-dpi-setting=96 xrdb -merge <(echo \"Xft.dpi: $OLDDPI\") Example of /usr/bin/urxvt-ldpi #!/usr/bin/bash OLDDPI=`xrdb -query | awk '/Xft.dpi/ {print $2}'` xrdb -merge <(echo \"Xft.dpi: 96\") urxvt xrdb -merge <(echo \"Xft.dpi: $OLDDPI\") 3. Detect active screen and select proper launcher You need to modify you rc.lua. Example for terminal: terminal = \"urxvt\" terminal_ldpi = \"urxvt-ldpi\" awful.key({ modkey, }, \"Return\", function () if mouse.screen == 1 then awful.util.spawn(terminal_ldpi) else awful.util.spawn(terminal) end end), Limitations DPI is set for life-time of application. Your application will be ugly when you move it to another screen.","title":"Awesome VM"},{"location":"UX/Hi_DPI/Awesome_VM/#problem-description","text":"To improve my productivity I bought a 4K display and wanted to use it altogether with old 1K display. It turned out that mixing two different DPIs doesn't work out of the box so some hacks are needed.","title":"Problem description"},{"location":"UX/Hi_DPI/Awesome_VM/#solution","text":"","title":"Solution"},{"location":"UX/Hi_DPI/Awesome_VM/#1-set-hidpi-as-a-default","text":"To set HiDPI as default please refer to https://wiki.archlinux.org/index.php/HiDPI#X_Resources","title":"1. Set HiDPI as a default"},{"location":"UX/Hi_DPI/Awesome_VM/#2-prepare-wrappers-for-popular-programs-to-set-lower-dpi","text":"Example of /usr/bin/opera-ldpi: #!/usr/bin/bash OLDDPI=`xrdb -query | awk '/Xft.dpi/ {print $2}'` xrdb -merge <(echo \"Xft.dpi: 96\") opera --alt-high-dpi-setting=96 --system-dpi-setting=96 xrdb -merge <(echo \"Xft.dpi: $OLDDPI\") Example of /usr/bin/urxvt-ldpi #!/usr/bin/bash OLDDPI=`xrdb -query | awk '/Xft.dpi/ {print $2}'` xrdb -merge <(echo \"Xft.dpi: 96\") urxvt xrdb -merge <(echo \"Xft.dpi: $OLDDPI\")","title":"2. Prepare wrappers for popular programs to set lower DPI"},{"location":"UX/Hi_DPI/Awesome_VM/#3-detect-active-screen-and-select-proper-launcher","text":"You need to modify you rc.lua. Example for terminal: terminal = \"urxvt\" terminal_ldpi = \"urxvt-ldpi\" awful.key({ modkey, }, \"Return\", function () if mouse.screen == 1 then awful.util.spawn(terminal_ldpi) else awful.util.spawn(terminal) end end),","title":"3. Detect active screen and select proper launcher"},{"location":"UX/Hi_DPI/Awesome_VM/#limitations","text":"DPI is set for life-time of application. Your application will be ugly when you move it to another screen.","title":"Limitations"},{"location":"UX/Hi_DPI/Java/","text":"Enabling scaling in Windows # The problem here seems to be that Swing is by default claiming that it is DPI aware, so windows doesn't scale it. -Dsun.java2d.dpiaware=false","title":"Java"},{"location":"UX/Hi_DPI/Java/#enabling-scaling-in-windows","text":"# The problem here seems to be that Swing is by default claiming that it is DPI aware, so windows doesn't scale it. -Dsun.java2d.dpiaware=false","title":"Enabling scaling in Windows"},{"location":"UX/Images/Convert/","text":"Create gif from bunch of images # delay between frames in milliseconds, loop 0 = indefinitely convert -delay 50 -loop 0 *.png <output_file>.gif","title":"Convert"},{"location":"UX/Images/Convert/#create-gif-from-bunch-of-images","text":"# delay between frames in milliseconds, loop 0 = indefinitely convert -delay 50 -loop 0 *.png <output_file>.gif","title":"Create gif from bunch of images"},{"location":"UX/MacOS/Root/","text":"Activate root Press Command + Shift + G and enter /System/Library/CoreServices/ Inside launch Directory Utility Unlock utility by clicking on padlock icon Click on menu Edit -> Enable Root User Enter and confirm root password to enable root account","title":"Root"},{"location":"UX/MacOS/Root/#activate-root","text":"Press Command + Shift + G and enter /System/Library/CoreServices/ Inside launch Directory Utility Unlock utility by clicking on padlock icon Click on menu Edit -> Enable Root User Enter and confirm root password to enable root account","title":"Activate root"},{"location":"UX/Messengers/Skype/","text":"Unable to receive group messages After struggling a bit, I found some useful commands: /dumpmsnp - show details about your connection /showplaces - show where you are currently connected You can execute them in any chat window. */dumpmsnp* command was showing \"LoggedOut\", but I was online and talking almost normally (except group chats). System: MSNP: Connection Data: * Status: LoggedOut A lot of people are/were suffering from this problem. To solve this \"LoggedOut\" issue, try this on any chat window: /msnp24 and restart your Skype. After restarting, /dumpmsnp output shows the following status: System: MSNP: Connection Data (MSNP24): * Status: LoggedIn I don't know exactly why, but the /msnp24 command kinds of converted my account to this protocol and now everything works perfectly.","title":"Skype"},{"location":"UX/Messengers/Skype/#unable-to-receive-group-messages","text":"After struggling a bit, I found some useful commands: /dumpmsnp - show details about your connection /showplaces - show where you are currently connected You can execute them in any chat window. */dumpmsnp* command was showing \"LoggedOut\", but I was online and talking almost normally (except group chats). System: MSNP: Connection Data: * Status: LoggedOut A lot of people are/were suffering from this problem. To solve this \"LoggedOut\" issue, try this on any chat window: /msnp24 and restart your Skype. After restarting, /dumpmsnp output shows the following status: System: MSNP: Connection Data (MSNP24): * Status: LoggedIn I don't know exactly why, but the /msnp24 command kinds of converted my account to this protocol and now everything works perfectly.","title":"Unable to receive group messages"},{"location":"UX/Network/Windows_refresh_DNS/","text":"Re-register computer in domain DNS server: # Open an elevated command prompt (cmd). # Type ipconfig /all and verify that the correct DNS servers are listed. A domain controller, like any other domain-joined machine, should use only DNS servers that are inside the domain. ipconfig /flushdns ipconfig /registerdns # To register DC's SRV records, type: net stop netlogon net start netlogon","title":"Windows refresh DNS"},{"location":"UX/Network/Windows_refresh_DNS/#re-register-computer-in-domain-dns-server","text":"# Open an elevated command prompt (cmd). # Type ipconfig /all and verify that the correct DNS servers are listed. A domain controller, like any other domain-joined machine, should use only DNS servers that are inside the domain. ipconfig /flushdns ipconfig /registerdns # To register DC's SRV records, type: net stop netlogon net start netlogon","title":"Re-register computer in domain DNS server:"},{"location":"UX/Office/Outlook/","text":"Outlook blocked access to the following potentially unsafe attachments 1. Run regedit 2. Go to HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\{{9.0, 10.0, 11.0, 12.0, 14.0, 16.0}}\\Outlook\\Security 3. New \"String Value\" named \"Level1Remove\" 4. Modify 5. .exe;.com;.vbs;etc. 6. OK and restart Outlook","title":"Outlook"},{"location":"UX/Office/Outlook/#outlook-blocked-access-to-the-following-potentially-unsafe-attachments","text":"1. Run regedit 2. Go to HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\{{9.0, 10.0, 11.0, 12.0, 14.0, 16.0}}\\Outlook\\Security 3. New \"String Value\" named \"Level1Remove\" 4. Modify 5. .exe;.com;.vbs;etc. 6. OK and restart Outlook","title":"Outlook blocked access to the following potentially unsafe attachments"},{"location":"UX/Power_Management/Laptop_lid_linux/","text":"Disable suspend laptop on lid close sudo vim /etc/systemd/logind.conf # Add next line: HandleLidSwitch=ignore # Restart systemd-logind.service sudo systemctl restart systemd-logind.service","title":"Laptop lid linux"},{"location":"UX/Power_Management/Laptop_lid_linux/#disable-suspend-laptop-on-lid-close","text":"sudo vim /etc/systemd/logind.conf # Add next line: HandleLidSwitch=ignore # Restart systemd-logind.service sudo systemctl restart systemd-logind.service","title":"Disable suspend laptop on lid close"},{"location":"UX/Terminal/Tmux/","text":"TMUX tmux list-sessions tmux attach -t 2 sudo tmux -2 -S /tmp/tmux-<UID>/default TMUX cheat sheet ========================================== ========================================== TMUX COMMAND WINDOW (TAB) ========================================== ========================================== List tmux ls List ^b w New -s <session> Create ^b c Attach att -t <session> Rename ^b , <name> Rename rename-session -t <old> <new> Last ^b l (lower-L) Kill kill-session -t <session> Close ^b & ========================================== Goto # ^b <0-9> CONTROLS Next ^b n ========================================== Previous ^b p Choose ^b w <name> Detach ^b d List ^b = ========================================== Buffer ^b <PgUpDn> PANE (SPLIT WINDOW) Command ^b : <command> ========================================== Copy ^b [ ... <space> ... <enter> Show # ^b q Moving vim/emacs key bindings Split Horiz ^b \" -------- Start <space> Split Vert ^b % | Copy <enter> Pane->Window ^b ! Paste ^b ] Kill ^b x ========================================== Reorganize ^b <space> SESSION (Set of Windows) Expand ^b <alt><arrow> ========================================== Resize ^b ^<arrow> Resize x n ^b <n> <arrow> New ^b :new ^b :new -s <name> Rename ^b $ Select ^b <arrow> List ^b s Previous ^b { Next ^b ( Next ^b } Previous ^b ) Switch ^b o other Swap ^b ^o Last ^b ;","title":"Tmux"},{"location":"UX/Terminal/Tmux/#tmux","text":"tmux list-sessions tmux attach -t 2 sudo tmux -2 -S /tmp/tmux-<UID>/default","title":"TMUX"},{"location":"UX/Terminal/Tmux/#tmux-cheat-sheet","text":"========================================== ========================================== TMUX COMMAND WINDOW (TAB) ========================================== ========================================== List tmux ls List ^b w New -s <session> Create ^b c Attach att -t <session> Rename ^b , <name> Rename rename-session -t <old> <new> Last ^b l (lower-L) Kill kill-session -t <session> Close ^b & ========================================== Goto # ^b <0-9> CONTROLS Next ^b n ========================================== Previous ^b p Choose ^b w <name> Detach ^b d List ^b = ========================================== Buffer ^b <PgUpDn> PANE (SPLIT WINDOW) Command ^b : <command> ========================================== Copy ^b [ ... <space> ... <enter> Show # ^b q Moving vim/emacs key bindings Split Horiz ^b \" -------- Start <space> Split Vert ^b % | Copy <enter> Pane->Window ^b ! Paste ^b ] Kill ^b x ========================================== Reorganize ^b <space> SESSION (Set of Windows) Expand ^b <alt><arrow> ========================================== Resize ^b ^<arrow> Resize x n ^b <n> <arrow> New ^b :new ^b :new -s <name> Rename ^b $ Select ^b <arrow> List ^b s Previous ^b { Next ^b ( Next ^b } Previous ^b ) Switch ^b o other Swap ^b ^o Last ^b ;","title":"TMUX cheat sheet"},{"location":"UX/Terminal/cmd/","text":"Cmd Colours Default Windows Registry Editor Version 5.00 ; Default color scheme ; for Windows command prompt. ; Values stored as 00-BB-GG-RR [HKEY_CURRENT_USER\\Console] ; BLACK DGRAY \"ColorTable00\"=dword:00000000 \"ColorTable08\"=dword:00808080 ; BLUE LBLUE \"ColorTable01\"=dword:00800000 \"ColorTable09\"=dword:00ff0000 ; GREEN LGREEN \"ColorTable02\"=dword:00008000 \"ColorTable10\"=dword:0000ff00 ; CYAN LCYAN \"ColorTable03\"=dword:00808000 \"ColorTable11\"=dword:00ffff00 ; RED LRED \"ColorTable04\"=dword:00000080 \"ColorTable12\"=dword:000000ff ; MAGENTA LMAGENTA \"ColorTable05\"=dword:00800080 \"ColorTable13\"=dword:00ff00ff ; YELLOW LYELLOW \"ColorTable06\"=dword:00008080 \"ColorTable14\"=dword:0000ffff ; LGRAY WHITE \"ColorTable07\"=dword:00c0c0c0 \"ColorTable15\"=dword:00ffffff Monokai Windows Registry Editor Version 5.00 ; Monokai color theme for Windows command prompt. ; Values stored as 00-BB-GG-RR [HKEY_CURRENT_USER\\Console] ; BLACK DGRAY \"ColorTable00\"=dword:00222827 \"ColorTable08\"=dword:00414746 ; BLUE LBLUE \"ColorTable01\"=dword:00a64c1d \"ColorTable09\"=dword:00ef9566 ; GREEN LGREEN \"ColorTable02\"=dword:0000995d \"ColorTable10\"=dword:002ee2a6 ; CYAN LCYAN \"ColorTable03\"=dword:00746a31 \"ColorTable11\"=dword:00efd966 ; RED LRED \"ColorTable04\"=dword:002900b0 \"ColorTable12\"=dword:007226f9 ; MAGENTA LMAGENTA \"ColorTable05\"=dword:00b63865 \"ColorTable13\"=dword:00ff81ae ; YELLOW LYELLOW \"ColorTable06\"=dword:001f97fd \"ColorTable14\"=dword:0074dbe6 ; LGRAY WHITE \"ColorTable07\"=dword:008a908f \"ColorTable15\"=dword:00f2f8f8 Pastel Windows Registry Editor Version 5.00 ; Low-contrast, pastel color scheme ; for Windows command prompt. ; Values stored as 00-BB-GG-RR [HKEY_CURRENT_USER\\Console] ; BLACK DGRAY \"ColorTable00\"=dword:00222222 \"ColorTable08\"=dword:00454545 ; BLUE LBLUE \"ColorTable01\"=dword:00a69a7c \"ColorTable09\"=dword:00bfad8f ; GREEN LGREEN \"ColorTable02\"=dword:00557e6c \"ColorTable10\"=dword:007db37d ; CYAN LCYAN \"ColorTable03\"=dword:00a18e4c \"ColorTable11\"=dword:00d0c16b ; RED LRED \"ColorTable04\"=dword:0041569e \"ColorTable12\"=dword:006d89cc ; MAGENTA LMAGENTA \"ColorTable05\"=dword:009d6d95 \"ColorTable13\"=dword:00cb8fc1 ; YELLOW LYELLOW \"ColorTable06\"=dword:002bafca \"ColorTable14\"=dword:0056b5bf ; LGRAY WHITE \"ColorTable07\"=dword:00808080 \"ColorTable15\"=dword:00cdcdcd Zenburn Windows Registry Editor Version 5.00 ; Zenburn is a low-contrast color scheme ; for Windows command prompt. ; See : http://slinky.imukuppi.org/zenburnpage/ ; Values stored as 00-BB-GG-RR [HKEY_CURRENT_USER\\Console] ; BLACK DGRAY \"ColorTable00\"=dword:003f3f3f \"ColorTable08\"=dword:008080c0 ; BLUE LBLUE \"ColorTable01\"=dword:00af6464 \"ColorTable09\"=dword:00ffafaf ; GREEN LGREEN \"ColorTable02\"=dword:00008000 \"ColorTable10\"=dword:007f9f7f ; CYAN LCYAN \"ColorTable03\"=dword:00808000 \"ColorTable11\"=dword:00d3d08c ; RED LRED \"ColorTable04\"=dword:00232333 \"ColorTable12\"=dword:007071e3 ; MAGENTA LMAGENTA \"ColorTable05\"=dword:00aa50aa \"ColorTable13\"=dword:00c880c8 ; YELLOW LYELLOW \"ColorTable06\"=dword:0000dcdc \"ColorTable14\"=dword:00afdff0 ; LGRAY WHITE \"ColorTable07\"=dword:00ccdcdc \"ColorTable15\"=dword:00ffffff","title":"Cmd"},{"location":"UX/Terminal/cmd/#cmd-colours","text":"","title":"Cmd Colours"},{"location":"UX/Terminal/cmd/#default","text":"Windows Registry Editor Version 5.00 ; Default color scheme ; for Windows command prompt. ; Values stored as 00-BB-GG-RR [HKEY_CURRENT_USER\\Console] ; BLACK DGRAY \"ColorTable00\"=dword:00000000 \"ColorTable08\"=dword:00808080 ; BLUE LBLUE \"ColorTable01\"=dword:00800000 \"ColorTable09\"=dword:00ff0000 ; GREEN LGREEN \"ColorTable02\"=dword:00008000 \"ColorTable10\"=dword:0000ff00 ; CYAN LCYAN \"ColorTable03\"=dword:00808000 \"ColorTable11\"=dword:00ffff00 ; RED LRED \"ColorTable04\"=dword:00000080 \"ColorTable12\"=dword:000000ff ; MAGENTA LMAGENTA \"ColorTable05\"=dword:00800080 \"ColorTable13\"=dword:00ff00ff ; YELLOW LYELLOW \"ColorTable06\"=dword:00008080 \"ColorTable14\"=dword:0000ffff ; LGRAY WHITE \"ColorTable07\"=dword:00c0c0c0 \"ColorTable15\"=dword:00ffffff","title":"Default"},{"location":"UX/Terminal/cmd/#monokai","text":"Windows Registry Editor Version 5.00 ; Monokai color theme for Windows command prompt. ; Values stored as 00-BB-GG-RR [HKEY_CURRENT_USER\\Console] ; BLACK DGRAY \"ColorTable00\"=dword:00222827 \"ColorTable08\"=dword:00414746 ; BLUE LBLUE \"ColorTable01\"=dword:00a64c1d \"ColorTable09\"=dword:00ef9566 ; GREEN LGREEN \"ColorTable02\"=dword:0000995d \"ColorTable10\"=dword:002ee2a6 ; CYAN LCYAN \"ColorTable03\"=dword:00746a31 \"ColorTable11\"=dword:00efd966 ; RED LRED \"ColorTable04\"=dword:002900b0 \"ColorTable12\"=dword:007226f9 ; MAGENTA LMAGENTA \"ColorTable05\"=dword:00b63865 \"ColorTable13\"=dword:00ff81ae ; YELLOW LYELLOW \"ColorTable06\"=dword:001f97fd \"ColorTable14\"=dword:0074dbe6 ; LGRAY WHITE \"ColorTable07\"=dword:008a908f \"ColorTable15\"=dword:00f2f8f8","title":"Monokai"},{"location":"UX/Terminal/cmd/#pastel","text":"Windows Registry Editor Version 5.00 ; Low-contrast, pastel color scheme ; for Windows command prompt. ; Values stored as 00-BB-GG-RR [HKEY_CURRENT_USER\\Console] ; BLACK DGRAY \"ColorTable00\"=dword:00222222 \"ColorTable08\"=dword:00454545 ; BLUE LBLUE \"ColorTable01\"=dword:00a69a7c \"ColorTable09\"=dword:00bfad8f ; GREEN LGREEN \"ColorTable02\"=dword:00557e6c \"ColorTable10\"=dword:007db37d ; CYAN LCYAN \"ColorTable03\"=dword:00a18e4c \"ColorTable11\"=dword:00d0c16b ; RED LRED \"ColorTable04\"=dword:0041569e \"ColorTable12\"=dword:006d89cc ; MAGENTA LMAGENTA \"ColorTable05\"=dword:009d6d95 \"ColorTable13\"=dword:00cb8fc1 ; YELLOW LYELLOW \"ColorTable06\"=dword:002bafca \"ColorTable14\"=dword:0056b5bf ; LGRAY WHITE \"ColorTable07\"=dword:00808080 \"ColorTable15\"=dword:00cdcdcd","title":"Pastel"},{"location":"UX/Terminal/cmd/#zenburn","text":"Windows Registry Editor Version 5.00 ; Zenburn is a low-contrast color scheme ; for Windows command prompt. ; See : http://slinky.imukuppi.org/zenburnpage/ ; Values stored as 00-BB-GG-RR [HKEY_CURRENT_USER\\Console] ; BLACK DGRAY \"ColorTable00\"=dword:003f3f3f \"ColorTable08\"=dword:008080c0 ; BLUE LBLUE \"ColorTable01\"=dword:00af6464 \"ColorTable09\"=dword:00ffafaf ; GREEN LGREEN \"ColorTable02\"=dword:00008000 \"ColorTable10\"=dword:007f9f7f ; CYAN LCYAN \"ColorTable03\"=dword:00808000 \"ColorTable11\"=dword:00d3d08c ; RED LRED \"ColorTable04\"=dword:00232333 \"ColorTable12\"=dword:007071e3 ; MAGENTA LMAGENTA \"ColorTable05\"=dword:00aa50aa \"ColorTable13\"=dword:00c880c8 ; YELLOW LYELLOW \"ColorTable06\"=dword:0000dcdc \"ColorTable14\"=dword:00afdff0 ; LGRAY WHITE \"ColorTable07\"=dword:00ccdcdc \"ColorTable15\"=dword:00ffffff","title":"Zenburn"},{"location":"UX/Wine/Custom_prefix/","text":"Start WINEARCH=<wine32_or_wine64> WINEPREFIX=/home/wine/<custom_prefix> wine <path_to_executable>","title":"Custom prefix"},{"location":"UX/Wine/Custom_prefix/#start","text":"WINEARCH=<wine32_or_wine64> WINEPREFIX=/home/wine/<custom_prefix> wine <path_to_executable>","title":"Start"},{"location":"UX/Wine/curse_client_5/","text":"How to install curse client on Linux What works - Adding games. Well, at least World of Warcraft is recognized. - Installing, updating & deleting addons for WoW. Installed addons were automatically recognized. What was not tested - Premium features. - Anything not WoW related. Installastion steps As you can suspect from other tests, it doesn't really work out of the box. These are the steps I followed : Create a clean 32bits prefix. winetricks dotnet35sp1 winetricks windowscodecs winetricks wininet See https://github.com/Winetricks/winetricks/issues/600 for wininet install failures. Install the app here. Symlinked my wow folder from its prefix to this prefix. Reasons : The 32bits prefix is needed to install .NET 2.0 (does not work on 64bits). The installer tries to install .NET profile and will fail if .NET 3.5sp1 is not installed. The app will crash right after login if you don't install windowscodecs. The debug logs were full of \"fixme\" about wincodecs. The app buttons will be unclickable and you can't even go past the 1st screen if you don't install wininet. Here is a command line to start the app which you might not need, depends where you install it : - WINEPREFIX=/home/wine/curse wine explorer \"file:///c:/users/USER/Start Menu/Programs/Curse/Curse Client.appref-ms\" Credit to https://archimedesden.wordpress.com/2013/05/11/running-rebtel-one-click-application-in-wine/ for the explorer trick.","title":"Curse client 5"},{"location":"UX/Wine/curse_client_5/#how-to-install-curse-client-on-linux","text":"","title":"How to install curse client on Linux"},{"location":"UX/Wine/curse_client_5/#what-works","text":"- Adding games. Well, at least World of Warcraft is recognized. - Installing, updating & deleting addons for WoW. Installed addons were automatically recognized.","title":"What works"},{"location":"UX/Wine/curse_client_5/#what-was-not-tested","text":"- Premium features. - Anything not WoW related.","title":"What was not tested"},{"location":"UX/Wine/curse_client_5/#installastion-steps","text":"As you can suspect from other tests, it doesn't really work out of the box. These are the steps I followed : Create a clean 32bits prefix. winetricks dotnet35sp1 winetricks windowscodecs winetricks wininet See https://github.com/Winetricks/winetricks/issues/600 for wininet install failures. Install the app here. Symlinked my wow folder from its prefix to this prefix. Reasons : The 32bits prefix is needed to install .NET 2.0 (does not work on 64bits). The installer tries to install .NET profile and will fail if .NET 3.5sp1 is not installed. The app will crash right after login if you don't install windowscodecs. The debug logs were full of \"fixme\" about wincodecs. The app buttons will be unclickable and you can't even go past the 1st screen if you don't install wininet. Here is a command line to start the app which you might not need, depends where you install it : - WINEPREFIX=/home/wine/curse wine explorer \"file:///c:/users/USER/Start Menu/Programs/Curse/Curse Client.appref-ms\" Credit to https://archimedesden.wordpress.com/2013/05/11/running-rebtel-one-click-application-in-wine/ for the explorer trick.","title":"Installastion steps"},{"location":"UX/X-Window/Common/","text":"Start full-screen application in different X server /usr/bin/xinit <path_to_fullscreen_application> -- :1 Export X display to current ssh connection export DISPLAY=\"${SSH_CLIENT%% *}\" Keyboard layouts man xkeyboard-config Show window properties xprop Xpdf Warning: Cannot convert string xxx to type FontStruct pacman -S xord xset +fp /usr/share/fonts/75dpi/ xset +fp /usr/share/fonts/100dpi/ Filed to load .Xresources with GDM vim /etc/gdm/Xsession if [ -f \"$userresources\" ]; then #xrdb -nocpp -merge \"$userresources\" <<<----- Comment this, and add new one, like below xrdb -merge \"$userresources\" fi","title":"Common"},{"location":"UX/X-Window/Common/#start-full-screen-application-in-different-x-server","text":"/usr/bin/xinit <path_to_fullscreen_application> -- :1","title":"Start full-screen application in different X server"},{"location":"UX/X-Window/Common/#export-x-display-to-current-ssh-connection","text":"export DISPLAY=\"${SSH_CLIENT%% *}\"","title":"Export X display to current ssh connection"},{"location":"UX/X-Window/Common/#keyboard-layouts","text":"man xkeyboard-config","title":"Keyboard layouts"},{"location":"UX/X-Window/Common/#show-window-properties","text":"xprop","title":"Show window properties"},{"location":"UX/X-Window/Common/#xpdf-warning-cannot-convert-string-xxx-to-type-fontstruct","text":"pacman -S xord xset +fp /usr/share/fonts/75dpi/ xset +fp /usr/share/fonts/100dpi/","title":"Xpdf Warning: Cannot convert string xxx to type FontStruct"},{"location":"UX/X-Window/Common/#filed-to-load-xresources-with-gdm","text":"vim /etc/gdm/Xsession if [ -f \"$userresources\" ]; then #xrdb -nocpp -merge \"$userresources\" <<<----- Comment this, and add new one, like below xrdb -merge \"$userresources\" fi","title":"Filed to load .Xresources with GDM"},{"location":"Vendors/Atlassian/Bitbucket/","text":"Bitbucket related things API Get information about repository # Get common repo info curl -G https://api.bitbucket.org/2.0/repositories/atlassian/atlassian-aws-deployment | jq . # API links curl -G https://api.bitbucket.org/2.0/repositories/atlassian/atlassian-aws-deployment | jq [.links] # Get list of branches curl -G https://api.bitbucket.org/2.0/repositories/atlassian/atlassian-aws-deployment/refs/branches | jq . Get SSH URLs of each user's or team's repo Curl curl -G -u XXX:XXX \"https://api.bitbucket.org/2.0/repositories/{user-or-team}?pagelen=100\" | jq '(.values[].links.clone[] | select(.name | contains(\\\"ssh\\\"))).href' | sort Posershell [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 $username = Read-Host 'What is your username?' $password = Read-Host 'What is your password?' -AsSecureString $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$password))) # Many repos (Invoke-RestMethod -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)} -Uri 'https://api.bitbucket.org/2.0/repositories/{user-or-team}?pagelen=100').values.links | %{Write-Host ($_.clone | Where name -eq ssh).href} # If only one repo there is second method (Invoke-WebRequest -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)} -Uri 'https://api.bitbucket.org/2.0/repositories/{user-or-team}?pagelen=1' | ConvertFrom-Json).values.links.clone | Where name -eq ssh | Select href","title":"Bitbucket related things"},{"location":"Vendors/Atlassian/Bitbucket/#bitbucket-related-things","text":"","title":"Bitbucket related things"},{"location":"Vendors/Atlassian/Bitbucket/#api","text":"","title":"API"},{"location":"Vendors/Atlassian/Bitbucket/#get-information-about-repository","text":"# Get common repo info curl -G https://api.bitbucket.org/2.0/repositories/atlassian/atlassian-aws-deployment | jq . # API links curl -G https://api.bitbucket.org/2.0/repositories/atlassian/atlassian-aws-deployment | jq [.links] # Get list of branches curl -G https://api.bitbucket.org/2.0/repositories/atlassian/atlassian-aws-deployment/refs/branches | jq .","title":"Get information about repository"},{"location":"Vendors/Atlassian/Bitbucket/#get-ssh-urls-of-each-users-or-teams-repo","text":"Curl curl -G -u XXX:XXX \"https://api.bitbucket.org/2.0/repositories/{user-or-team}?pagelen=100\" | jq '(.values[].links.clone[] | select(.name | contains(\\\"ssh\\\"))).href' | sort Posershell [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 $username = Read-Host 'What is your username?' $password = Read-Host 'What is your password?' -AsSecureString $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$password))) # Many repos (Invoke-RestMethod -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)} -Uri 'https://api.bitbucket.org/2.0/repositories/{user-or-team}?pagelen=100').values.links | %{Write-Host ($_.clone | Where name -eq ssh).href} # If only one repo there is second method (Invoke-WebRequest -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)} -Uri 'https://api.bitbucket.org/2.0/repositories/{user-or-team}?pagelen=1' | ConvertFrom-Json).values.links.clone | Where name -eq ssh | Select href","title":"Get SSH URLs of each user's or team's repo"}]}