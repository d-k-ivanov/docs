{
    "docs": [
        {
            "location": "/", 
            "text": "Command line examples\n\n\nInspired by \nJoshua Levy\n and his great \nThe-Art-Of-Command-Line\n\n\n\n\nIt's only my view on useful commands and this examples are useful for me in first place.\n\n\n\n\n\n\nAIX\n\n\nFiles and folders manipulation\n\n\nHardware\n\n\nNetwork\n\n\nPackage management\n\n\nRemote management\n\n\nSecurity\n\n\nVersion control\n\n\nVirtual and independent environment\n\n\nX Server\n\n\nMiscellaneous\n\n\n\n\nFiles and folders manipulation:\n\n\n\n\nChange permisions recursively or you can use a simple \nScript\n\n\n\n\nfind \npath_to_folder\n -type f -print -exec chmod 644 {} \\;\nfind \npath_to_folder\n -type d -print -exec chmod 755 {} \\;\n\n\n\n\n\n\nCount files\n\n\n\n\nfind . -type f | wc -l\nls | wc -l\n\n\n\n\n\n\nRemove file list\n\n\n\n\nls | xargs rm\n\n\n\n\n\n\nRemove file suffix \"filename\"+\"suffix\"\n\n\n\n\nfor i in `find . -type f -name \n*\nsuffix\n*\n`; do dst=`echo $i | sed s/\nsuffix\n//`;mv $i $dst; done\n\n\n\n\n\n\nMove all files in one level directory in certain folder to another\n\n\n\n\nfind /\npath_to_folder\n/* -prune -type f | xargs -I '{}' mv {} /\npath_to_destination_folder\n/archive/.\n\n\n\n\n\n\nSearch for certain file contents\n\n\n\n\nfind . -type f -name \n*conf\n -exec echo {} \\; -exec grep 192.168.0.1:3389 {} \\;\n\n\n\n\n\n\nShow directories content recursively\n\n\n\n\nls -R /path | awk '\n/:$/\nf{s=$0;f=0}\n/:$/\n!f{sub(/:$/,\n);s=$0;f=1;next}\nNF\nf{ print s\n/\n$0 }'\n\n\n\n\n\n\nMake dirs with indexes\n\n\n\n\nfor i in 0{1..9} {10..39}; do mkdir delete-$i; cd delete-$i; touch del-file-$i; cd ..; done\n\n\n\n\n\n\nCreate bunch of files from list in a file:\n\n\n\n\n# Predefined number of records\nhead -\nnumber_of_lines\n inventory | awk '{ print $1 }' | xargs -I '{}' \ndestination_folder\n/{}\n#E.g. head -10 inventory | awk '{ print $1 }' | xargs -I '{}' touch host_vars/{}\n\n# Whole list from file\ncat \nfilename\n | awk '{ print $1 }' | xargs -I '{}' \ndestination_folder\n/{}\n#E.g. cat inventory | awk '{ print $1 }' | xargs -I '{}' host_vars/{}\n\n\n\n\n\n\nMove bunch of folders:\n\n\n\n\nls -1d \nspace separeated folder list\n | xargs -I '{}' mv {} \ndestination\n\n#E.g. ls -1d command_line dotfiles-srv programmming-examples shell_scripts | xargs -I '{}' mv {} github/\n\n\n\n\nHardware:\n\n\n\n\nAll hardware \n\n\n\n\nhwinfo\n\n\n\n\n\n\nRAW Devices:\n\n\n\n\n# ISO to USB:\ndd bs=4M if=/path/to/\niso_image\n of=/dev/sdX \n sync\n\n\n\n\n\n\nCPU\n\n\n\n\nlscpu\ncat /proc/cpuinfo\n\n\n\n\n\n\nFilesystems:\n\n\n\n\n#Show information about mounted file systems with 'column' examples**\ndf -h | column -t\nmount -l | column -t\n\n\n\n\n\n\nRAM:\n\n\n\n\n# Basic commands:\nvmstat -s\ncat /proc/meminfo\nfree -m\n# Sum of used RAM\nps -eo rss,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(\n%13.2f Mb \n,hr) } { for ( x=4 ; x\n=NF ; x++ ) { printf(\n%s \n,$x) } print \n }' | awk '{print $1}' | paste -sd+ | bc\n# Clean RAM buffer and swap cache\nsync \n echo 3 \n /proc/sys/vm/drop_caches\n\n\n\n\nNetwork:\n\n\n\n\nTCPDUMP (with all commands use '| head' optionally)\n\n\n\n\n# Capture bunch of packets\ntcpdump -w capture.pcap\n# Show list of unique tcp or udp connections ip addresses\ntcpdump -nn -r capture.pcap 'tcp or udp' | cut -f 3 -d \n \n | cut -f 1-4 -d \n.\n | sort | uniq | sort -nr\n# Show list of unique destinations with SYN flag(\u2018tcp[13]=2\u2019)\ntcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 5 -d \n \n | sort | uniq -c | sort -nr\n# Show list of unique sources with SYN flag(\u2018tcp[13]=2\u2019)\ntcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 3 -d \n \n | cut -f 1-4 -d \n.\n | sort | uniq -c | sort -nr\n# Search for plain texts (-A)\ntcpdump -Ann -r capture.pcap 'dst port 25 or dst port 514 or dst port 110 or dst port 21 or dst port 53 or dst port 80'\n# Search for top level domains (optiolally for names only: | grep -E '[a-z]')\ntcpdump -nn -r capture.pcap 'port 53' | grep -Ev '(com|ru|net|org|gov|mil|arpa)' | cut -f 9 -d \n \n  \n# Investigate HTTP traffic\ntcpdump -Ann -r capture.pcap 'port 80' | grep 'HTTP' | grep -Ev '(GET|HEAD)'\n# Search HTTP traffic for user-agent list\ntcpdump -Ann -r capture.pcap 'port 80' | grep -Ei 'user-agent' | sort | uniq -c | sort -n\ntcpdump -Ann -r capture.pcap 'port 80' | sed -n '/Mozilla/,$p'\n# Pcap repository (-C filesize in MBytes, -W number of files, -G time in seconds, %s timestamp)\nsudo -b tcpdump -nn -i eth0 -w capture.pcap -C 1 -W 5         \nsudo -b tcpdump -nn -i eth0 -w capture-%s.pcap -G 600 -W 5    \n# Dealing with pcap files\nfor capfile in $(ls *.pcap); do tcpdump -nnr $capfile 'dst port 53'; done  \n\n\n\n\n\n\nNetworkManager: show connection info\n\n\n\n\nnmcli device show eth0\n\n\n\n\n\n\nCheck own IP address\n\n\n\n\ncurl -s checkip.dyndns.org\n\n\n\n\n\n\nShare current folder over HTTP\n\n\n\n\npython2 -m SimpleHTTPServer 8080\npython3 -mhttp.server 8080\n\n\n\n\nPackage management:\n\n\n\n\nApt:\n\n\n\n\n# Show installed packages\napt --installed list\n# Search for software\napt-cache search \npattern\n\n# Install package\napt-get install \npackage_name\n\n\n\n\n\n\n\nDpkg: \n\n\n\n\n# To get a list of packages installed locally do this in your terminal:\ndpkg --get-selections | grep -v deinstall\n# To get a list of a specific package installed:\ndpkg --get-selections | grep postgres\n# To save that list to a text file called packages on your desktop do this in your terminal:\ndpkg --get-selections | grep -v deinstall \n ~/Desktop/packages\n# Alternatively, simply use\ndpkg -l\n\n\n\n\n\n\nPacman:\n\n\n\n\n# Search for software\npacman -Ss \npattern\n\n# Install package\npacman -S \npackage_name\n\n# Update the system\npacman -Syu\n# Remove orphaned packages (Be careful, double check for list of deleted packages)\npacman -Rscn $(pacman -Qtdq)\npacman -Sc\npacman-optimize \n sync\n\n\n\n\n\n\nYum:\n\n\n\n\n# Search for software\nyum search \npattern\n\n# Install package\nyum install \npackage_name\n\n# Repair \nError: database disk image is malformed\n\nyum clean dbcache\n\n\n\n\nRemote management:\n\n\n\n\nXfreeRDP\n\n\n\n\nxfreerdp [+clipboard]/w:\nWIDTH\n /h:\nHEIGHT\n /drive:\ncuatom_drive_name\n,\npath_to_attach\n /v:\nip\n:\nport\n /u:\nuser_name\n\nxfreerdp +clipboard /w:1600 /h:900 /v:10.15.0.10:3389 /u:Administrator\nxfreerdp +clipboard /w:1800 /h:1000 /u:Adminitatrator /drive:hmc,/home/4T/IT/IBM/HMC/7.9_sp3 /v:10.15.0.10\n\n\n\n\nSecurity:\n\n\n\n\nIPTables\n\n\n\n\n# Show rules\niptables -nvL\niptable -t nat -nvL\n\n\n\n\n\n\nDisabling SELinux\n\n\n\n\nsed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux \n cat /etc/sysconfig/selinux\n\n\n\n\nVersion control:\n\n\n\n\nGit: Global settings\n\n\n\n\ngit config --global user.name \nYour Name\n\ngit config --global user.email your@e-mail.com\n\n\n\n\n\n\nGit: Create new repository\n\n\n\n\nmkdir -p \npath_to_repository\n\ncd \npath_to_repository\n\ngit add .\ngit commit -m \nInitialization\n\ngit remote add origin https://github.com/username/\nrepository\n.git\ngit push -u origin master\ngit checkout \n\n\n\n\n\n\nGit: New commit\n\n\n\n\n# Addition of new files with automatic staging of deleted and modified files\ngit add .\ngit commit -a -m \nnew commentary\n\ngit push -u origin master\n\n\n\n\n\n\nGit: update local reposytory from remote\n\n\n\n\n# Fentch + Merge\ngit pull\n# Fetch only\ngit fetch\n# Fetch changes from remote repository with modified local repository\ngit commit -a -m \nnew commentary\n\ngit pull rebase\n# pull remote with overwrite local changes\ngit fetch --all\ngit reset --hard origin/master\n\n\n\n\n\n\nGit: Working with bunch of  repositories\n\n\n\n\n# Last commits\nfor d in `ls`; do cd $d; git log --pretty=format:\n%h - %an, %ar : %s\n -1; cd ..; done\n# Mass checkout\nfor d in `ls`; do cd $d; git checkout; cd ..; done\n\n\n\n\n\n\nGitHub: Independent history catalogs of git repository\n\n\n\n\n# Makes a bunch of history folders formatted by the next way: \nrepository\n-\nnumber_of_commit\n-\ncommit_hash\n\n# Check commit_list.end for mistakes, you need simple list of commits\ngit clone \nrepository_url\n \nrepository\n\ncd \nrepository\n \n git log --pretty=format:\n%h\n \n ../commit_list \n cd ..\ntac commit_list \n commit_list.end \ni=1; for cid in `cat commit_list.end`; do cp -r \nrepository\n \nrepository\n-$i-$cid; cd \nrepository\n-$i-$cid; git checkout $cid; cd ..; ((i=i+1)); done\n\n\n\n\n\n\nGitHub: Clone all user's repository\n\n\n\n\n# Get complete list of user's repositories in JSON file\ncurl -s https://api.github.com/users/\nusername\n/repos?per_page=200 \n repo.list.json\npython -c \nimport json,sys,os;file = open('repo.list.json' ,'r');obj = json.load(file);obj_size = len(obj);cmd = 'git clone  ';[os.system(cmd + obj[x]['clone_url']) for x in range(0, obj_size)];file.close()\n\n# And dont forget about \nspace\n(%20, \n \n) in cmd = 'git clone ', it's completely nessesary\n# Another way to clone up to 200 user's repos(just in shell): \ncurl -s https://api.github.com/users/keepbot/repos?per_page=200 | jq '.[] | .\nclone_url\n' | xargs -I '{}' git clone {}\n\n\n\n\nVirtual and independent environment:\n\n\n\n\nDocker:\n\n\n\n\n# Execute in-docker console\nsudo docker exec -it \ncontainer\n bash\n# Create JSON with container settings\ndocker inspect -f '{{ json .NetworkSettings }}' \ncontainer_id\n | python -mjson.tool\n# Add custom docker registry\nmkdir /etc/systemd/system/docker.service.d/\ntouch /etc/systemd/system/docker.service.d/docker_opts.conf\nvi /etc/systemd/system/docker.service.d/docker_opts.conf\n# --- docker_opts.conf contents ---\n[Service]\nExecStart=\nExecStart=/usr/bin/docker -d -H fd:// --insecure-registry \ndocker_registry_url\n --registry-mirror \nmirror_url\n\n# ---------------------------------\nsystemctl daemon-reload\nservice docker restart\n\n\n\n\n\n\nWINE\n\n\n\n\nWINEARCH=\nwine32_or_wine64\n WINEPREFIX=/home/wine/\ncustom_prefix\n wine \npath_to_executable\n\n\n\n\n\nX Server:\n\n\n\n\nStart full-screen application in different X server\n\n\n\n\n/usr/bin/xinit \npath_to_fullscreen_application\n -- :1\n\n\n\n\n\n\nExport X display to current ssh connection\n\n\n\n\nexport DISPLAY=\n${SSH_CLIENT%% *}\n\n\n\n\n\nMiscellaneous:\n\n\n\n\nTMUX\n\n\n\n\ntmux list-sessions\ntmux attach -t 2\n\n\n\n\n\n\nCool weather\n\n\n\n\ncurl http://wttr.in/moscow\n\n\n\n\n\n\nKill all proesses with certain name\n\n\n\n\nps ax | grep http | awk '{print $1}' | xargs kill", 
            "title": "Home"
        }, 
        {
            "location": "/#command-line-examples", 
            "text": "Inspired by  Joshua Levy  and his great  The-Art-Of-Command-Line   It's only my view on useful commands and this examples are useful for me in first place.    AIX  Files and folders manipulation  Hardware  Network  Package management  Remote management  Security  Version control  Virtual and independent environment  X Server  Miscellaneous", 
            "title": "Command line examples"
        }, 
        {
            "location": "/#files-and-folders-manipulation", 
            "text": "Change permisions recursively or you can use a simple  Script   find  path_to_folder  -type f -print -exec chmod 644 {} \\;\nfind  path_to_folder  -type d -print -exec chmod 755 {} \\;   Count files   find . -type f | wc -l\nls | wc -l   Remove file list   ls | xargs rm   Remove file suffix \"filename\"+\"suffix\"   for i in `find . -type f -name  * suffix * `; do dst=`echo $i | sed s/ suffix //`;mv $i $dst; done   Move all files in one level directory in certain folder to another   find / path_to_folder /* -prune -type f | xargs -I '{}' mv {} / path_to_destination_folder /archive/.   Search for certain file contents   find . -type f -name  *conf  -exec echo {} \\; -exec grep 192.168.0.1:3389 {} \\;   Show directories content recursively   ls -R /path | awk '\n/:$/ f{s=$0;f=0}\n/:$/ !f{sub(/:$/, );s=$0;f=1;next}\nNF f{ print s / $0 }'   Make dirs with indexes   for i in 0{1..9} {10..39}; do mkdir delete-$i; cd delete-$i; touch del-file-$i; cd ..; done   Create bunch of files from list in a file:   # Predefined number of records\nhead - number_of_lines  inventory | awk '{ print $1 }' | xargs -I '{}'  destination_folder /{}\n#E.g. head -10 inventory | awk '{ print $1 }' | xargs -I '{}' touch host_vars/{}\n\n# Whole list from file\ncat  filename  | awk '{ print $1 }' | xargs -I '{}'  destination_folder /{}\n#E.g. cat inventory | awk '{ print $1 }' | xargs -I '{}' host_vars/{}   Move bunch of folders:   ls -1d  space separeated folder list  | xargs -I '{}' mv {}  destination \n#E.g. ls -1d command_line dotfiles-srv programmming-examples shell_scripts | xargs -I '{}' mv {} github/", 
            "title": "Files and folders manipulation:"
        }, 
        {
            "location": "/#hardware", 
            "text": "All hardware    hwinfo   RAW Devices:   # ISO to USB:\ndd bs=4M if=/path/to/ iso_image  of=/dev/sdX   sync   CPU   lscpu\ncat /proc/cpuinfo   Filesystems:   #Show information about mounted file systems with 'column' examples**\ndf -h | column -t\nmount -l | column -t   RAM:   # Basic commands:\nvmstat -s\ncat /proc/meminfo\nfree -m\n# Sum of used RAM\nps -eo rss,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf( %13.2f Mb  ,hr) } { for ( x=4 ; x =NF ; x++ ) { printf( %s  ,$x) } print   }' | awk '{print $1}' | paste -sd+ | bc\n# Clean RAM buffer and swap cache\nsync   echo 3   /proc/sys/vm/drop_caches", 
            "title": "Hardware:"
        }, 
        {
            "location": "/#network", 
            "text": "TCPDUMP (with all commands use '| head' optionally)   # Capture bunch of packets\ntcpdump -w capture.pcap\n# Show list of unique tcp or udp connections ip addresses\ntcpdump -nn -r capture.pcap 'tcp or udp' | cut -f 3 -d     | cut -f 1-4 -d  .  | sort | uniq | sort -nr\n# Show list of unique destinations with SYN flag(\u2018tcp[13]=2\u2019)\ntcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 5 -d     | sort | uniq -c | sort -nr\n# Show list of unique sources with SYN flag(\u2018tcp[13]=2\u2019)\ntcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 3 -d     | cut -f 1-4 -d  .  | sort | uniq -c | sort -nr\n# Search for plain texts (-A)\ntcpdump -Ann -r capture.pcap 'dst port 25 or dst port 514 or dst port 110 or dst port 21 or dst port 53 or dst port 80'\n# Search for top level domains (optiolally for names only: | grep -E '[a-z]')\ntcpdump -nn -r capture.pcap 'port 53' | grep -Ev '(com|ru|net|org|gov|mil|arpa)' | cut -f 9 -d      \n# Investigate HTTP traffic\ntcpdump -Ann -r capture.pcap 'port 80' | grep 'HTTP' | grep -Ev '(GET|HEAD)'\n# Search HTTP traffic for user-agent list\ntcpdump -Ann -r capture.pcap 'port 80' | grep -Ei 'user-agent' | sort | uniq -c | sort -n\ntcpdump -Ann -r capture.pcap 'port 80' | sed -n '/Mozilla/,$p'\n# Pcap repository (-C filesize in MBytes, -W number of files, -G time in seconds, %s timestamp)\nsudo -b tcpdump -nn -i eth0 -w capture.pcap -C 1 -W 5         \nsudo -b tcpdump -nn -i eth0 -w capture-%s.pcap -G 600 -W 5    \n# Dealing with pcap files\nfor capfile in $(ls *.pcap); do tcpdump -nnr $capfile 'dst port 53'; done     NetworkManager: show connection info   nmcli device show eth0   Check own IP address   curl -s checkip.dyndns.org   Share current folder over HTTP   python2 -m SimpleHTTPServer 8080\npython3 -mhttp.server 8080", 
            "title": "Network:"
        }, 
        {
            "location": "/#package-management", 
            "text": "Apt:   # Show installed packages\napt --installed list\n# Search for software\napt-cache search  pattern \n# Install package\napt-get install  package_name    Dpkg:    # To get a list of packages installed locally do this in your terminal:\ndpkg --get-selections | grep -v deinstall\n# To get a list of a specific package installed:\ndpkg --get-selections | grep postgres\n# To save that list to a text file called packages on your desktop do this in your terminal:\ndpkg --get-selections | grep -v deinstall   ~/Desktop/packages\n# Alternatively, simply use\ndpkg -l   Pacman:   # Search for software\npacman -Ss  pattern \n# Install package\npacman -S  package_name \n# Update the system\npacman -Syu\n# Remove orphaned packages (Be careful, double check for list of deleted packages)\npacman -Rscn $(pacman -Qtdq)\npacman -Sc\npacman-optimize   sync   Yum:   # Search for software\nyum search  pattern \n# Install package\nyum install  package_name \n# Repair  Error: database disk image is malformed \nyum clean dbcache", 
            "title": "Package management:"
        }, 
        {
            "location": "/#remote-management", 
            "text": "XfreeRDP   xfreerdp [+clipboard]/w: WIDTH  /h: HEIGHT  /drive: cuatom_drive_name , path_to_attach  /v: ip : port  /u: user_name \nxfreerdp +clipboard /w:1600 /h:900 /v:10.15.0.10:3389 /u:Administrator\nxfreerdp +clipboard /w:1800 /h:1000 /u:Adminitatrator /drive:hmc,/home/4T/IT/IBM/HMC/7.9_sp3 /v:10.15.0.10", 
            "title": "Remote management:"
        }, 
        {
            "location": "/#security", 
            "text": "IPTables   # Show rules\niptables -nvL\niptable -t nat -nvL   Disabling SELinux   sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux   cat /etc/sysconfig/selinux", 
            "title": "Security:"
        }, 
        {
            "location": "/#version-control", 
            "text": "Git: Global settings   git config --global user.name  Your Name \ngit config --global user.email your@e-mail.com   Git: Create new repository   mkdir -p  path_to_repository \ncd  path_to_repository \ngit add .\ngit commit -m  Initialization \ngit remote add origin https://github.com/username/ repository .git\ngit push -u origin master\ngit checkout    Git: New commit   # Addition of new files with automatic staging of deleted and modified files\ngit add .\ngit commit -a -m  new commentary \ngit push -u origin master   Git: update local reposytory from remote   # Fentch + Merge\ngit pull\n# Fetch only\ngit fetch\n# Fetch changes from remote repository with modified local repository\ngit commit -a -m  new commentary \ngit pull rebase\n# pull remote with overwrite local changes\ngit fetch --all\ngit reset --hard origin/master   Git: Working with bunch of  repositories   # Last commits\nfor d in `ls`; do cd $d; git log --pretty=format: %h - %an, %ar : %s  -1; cd ..; done\n# Mass checkout\nfor d in `ls`; do cd $d; git checkout; cd ..; done   GitHub: Independent history catalogs of git repository   # Makes a bunch of history folders formatted by the next way:  repository - number_of_commit - commit_hash \n# Check commit_list.end for mistakes, you need simple list of commits\ngit clone  repository_url   repository \ncd  repository    git log --pretty=format: %h    ../commit_list   cd ..\ntac commit_list   commit_list.end \ni=1; for cid in `cat commit_list.end`; do cp -r  repository   repository -$i-$cid; cd  repository -$i-$cid; git checkout $cid; cd ..; ((i=i+1)); done   GitHub: Clone all user's repository   # Get complete list of user's repositories in JSON file\ncurl -s https://api.github.com/users/ username /repos?per_page=200   repo.list.json\npython -c  import json,sys,os;file = open('repo.list.json' ,'r');obj = json.load(file);obj_size = len(obj);cmd = 'git clone  ';[os.system(cmd + obj[x]['clone_url']) for x in range(0, obj_size)];file.close() \n# And dont forget about  space (%20,    ) in cmd = 'git clone ', it's completely nessesary\n# Another way to clone up to 200 user's repos(just in shell): \ncurl -s https://api.github.com/users/keepbot/repos?per_page=200 | jq '.[] | . clone_url ' | xargs -I '{}' git clone {}", 
            "title": "Version control:"
        }, 
        {
            "location": "/#virtual-and-independent-environment", 
            "text": "Docker:   # Execute in-docker console\nsudo docker exec -it  container  bash\n# Create JSON with container settings\ndocker inspect -f '{{ json .NetworkSettings }}'  container_id  | python -mjson.tool\n# Add custom docker registry\nmkdir /etc/systemd/system/docker.service.d/\ntouch /etc/systemd/system/docker.service.d/docker_opts.conf\nvi /etc/systemd/system/docker.service.d/docker_opts.conf\n# --- docker_opts.conf contents ---\n[Service]\nExecStart=\nExecStart=/usr/bin/docker -d -H fd:// --insecure-registry  docker_registry_url  --registry-mirror  mirror_url \n# ---------------------------------\nsystemctl daemon-reload\nservice docker restart   WINE   WINEARCH= wine32_or_wine64  WINEPREFIX=/home/wine/ custom_prefix  wine  path_to_executable", 
            "title": "Virtual and independent environment:"
        }, 
        {
            "location": "/#x-server", 
            "text": "Start full-screen application in different X server   /usr/bin/xinit  path_to_fullscreen_application  -- :1   Export X display to current ssh connection   export DISPLAY= ${SSH_CLIENT%% *}", 
            "title": "X Server:"
        }, 
        {
            "location": "/#miscellaneous", 
            "text": "TMUX   tmux list-sessions\ntmux attach -t 2   Cool weather   curl http://wttr.in/moscow   Kill all proesses with certain name   ps ax | grep http | awk '{print $1}' | xargs kill", 
            "title": "Miscellaneous:"
        }, 
        {
            "location": "/AIX/", 
            "text": "IBM AIX and VIOS commands\n\n\nInspired by \nJoshua Levy\n and his great \nThe-Art-Of-Command-Line\n\n\n\n\nIt's only my view on useful commands and this examples are useful for me in first place.\n\n\n\n\n\n\nReturn to Command Line\n\n\nBasic commands\n\n\nGPFS\n\n\nNetwork\n\n\nHardware\n\n\nVirtual Devices\n\n\n\n\nBasic commands:\n\n\n\n\nManagement\n\n\n\n\n# Exit from basic VIOS console to common AIX ksh\noem_setup_env\n# Adminitration and configuration console\nsmit\n\n#If you want to use bash as a login shell, you first have to add it to the\n#list of shells in /etc/security/login.cfg. \n#Then use `chsh` to change your individual setting.\n\n\n\n\n\n\nSoftware installation:\n\n\n\n\ncd \npath_to_package\n\ninutoc .\ninstallp -aXY -d\npath_to_package\n all\n# Check if package is installed or not:\nlslpp -L \npackage_name\n\n\n\n\n\n\n\nMirroring rootvg:\n\n\n\n\nextendvg rootvg hdisk1\nmirrorvg rootvg\nbootlist -m normal hdisk0 hdisk1 \nbosboot -ad hdisk0\nbosboot -ad hdisk1\n# Checking\nbootlist -o -m normal\n\n\n\n\nGPFS:\n\n\n\n\nInstalaltion:\n\n\n\n\n# on each LPAR:\ncd /\npath_to_gpfs_base_package\n/base-3-5/\ninutoc .\ninstallp -aXY -d/\npath_to_gpfs_base_package\n/base-3-5 all\ncd /\npath_to_gpfs_fix_package\n/fix-3-5-10/\ninutoc .\ninstallp -aXY -d/\npath_to_gpfs_fix_package\n/fix-3-5-10 all\nlslpp -L gpfs.\\*\n\n\n\n\n\n\nCreating cluster:\n\n\n\n\n# You need to setup paswordless shh connection between nodes\n# Add this path to /etc/environment on each node\nexport PATH=$PATH:/usr/lpp/mmfs/bin\n\nmmcrcluster -N \nPRIMARY_NODE_HOSTNAME\n:manager-quorum -p PRIMARY_NODE_HOSTNAME -r /usr/bin/ssh -R /usr/bin/scp\nmmchlicense server --accept -N PRIMARY_NODE_HOSTNAME\nmmstartup -a\nmmaddnode -N \nSECONDARY_NODE_HOSTNAME\n\nmmaddnode -N \nTHIRDARY_NODE_HOSTNAME\n\nmmaddnode -N \nN-ARY_NODE_HOSTNAME\n\nmmchcluster -s \nSECONDARY_NODE_HOSTNAME\n\nmmchlicense server --accept -N \nSECONDARY_NODE_HOSTNAME\n\nmmchlicense server --accept -N \nTHIRDARY_NODE_HOSTNAME\n\nmmchlicense server --accept -N \nN-ARY_NODE_HOSTNAME\n\nmmstartup -N \nSECONDARY_NODE_HOSTNAME\n\nmmstartup -N \nTHIRDARY_NODE_HOSTNAME\n\nmmstartup -N \nN-ARY_NODE_HOSTNAME\n\nmmchnode --quorum --manager -N \nSECONDARY_NODE_HOSTNAME\n\n# To check status of cluster:\nmmlscluster\nmmgetstate -a\n\n\n\n\n\n\nCreate GPFS mirror partition:\n\n\n\n\n# On primary node:\nmkdir /etc/gpfs\nvi /etc/gpfs/diskdesk.txt\n### --insert in diskdesk.txt--\nhdiskX:::dataAndMetadata:1:nsd1:\nhdiskY:::dataAndMetadata:2:nsd2:\n### --end of insert--\n\nmmcrnsd -F /etc/gpfs/diskdesk.txt\nmmshutdown -a\nmmchconfig tiebreakerdisks=\nnsd1;nsd2\n\nmmstartup -a\nmmcrfs /mnt/gpfs gpfsfs -F /etc/gpfs/diskdesk.txt -A yes -B 512K -M2 -m2 -R2 -r2 -n 2 -N 50000\nmmlsconfig\nmmmount all -a\nmmchconfig minQuorumNodes=2\ndf -g\n\n\n\n\nNetwork:\n\n\nShared Ethernet adapter coming soon\n\n\n\n\nHardware:\n\n\n# Refresh hardware configuration(aix and vios respectively):\ncfgmgr\ncfgdev\n# Rename hard drive:\nrendev -l \nold_name\n -n \nnew_name\n\nrendev -l hdisk3 -n hdisk33\n# Enable PVID:\nchdev -l hdiskX -a pv=yes\n# Change reserve policy to hard drive\nchdev -l hdiskX -a reserve_policy=no_reserve\n# Clear the owning volume manager from a disk\nchpv -C hdiskX\n\n\n\n\nVirtual devices:\n\n\n# Checking all virtual mappings to particular vhost:\nlsmap -vadapter vhost\n# Make a virtual hard drive for particular vhost:\n# -f - flag to forcing device creation if you're making shared hard drive\nmkvdev [-f] -vdev hdiskX -vadapter vhostX -dev \nvirtual_device_name\n\n# Make a virtual cd-rom device for particular vhost:\nmkvdev -fbo -vadapter vhostX -dev \nvirtual_device_name", 
            "title": "AIX"
        }, 
        {
            "location": "/AIX/#ibm-aix-and-vios-commands", 
            "text": "Inspired by  Joshua Levy  and his great  The-Art-Of-Command-Line   It's only my view on useful commands and this examples are useful for me in first place.    Return to Command Line  Basic commands  GPFS  Network  Hardware  Virtual Devices", 
            "title": "IBM AIX and VIOS commands"
        }, 
        {
            "location": "/AIX/#basic-commands", 
            "text": "Management   # Exit from basic VIOS console to common AIX ksh\noem_setup_env\n# Adminitration and configuration console\nsmit\n\n#If you want to use bash as a login shell, you first have to add it to the\n#list of shells in /etc/security/login.cfg. \n#Then use `chsh` to change your individual setting.   Software installation:   cd  path_to_package \ninutoc .\ninstallp -aXY -d path_to_package  all\n# Check if package is installed or not:\nlslpp -L  package_name    Mirroring rootvg:   extendvg rootvg hdisk1\nmirrorvg rootvg\nbootlist -m normal hdisk0 hdisk1 \nbosboot -ad hdisk0\nbosboot -ad hdisk1\n# Checking\nbootlist -o -m normal", 
            "title": "Basic commands:"
        }, 
        {
            "location": "/AIX/#gpfs", 
            "text": "Instalaltion:   # on each LPAR:\ncd / path_to_gpfs_base_package /base-3-5/\ninutoc .\ninstallp -aXY -d/ path_to_gpfs_base_package /base-3-5 all\ncd / path_to_gpfs_fix_package /fix-3-5-10/\ninutoc .\ninstallp -aXY -d/ path_to_gpfs_fix_package /fix-3-5-10 all\nlslpp -L gpfs.\\*   Creating cluster:   # You need to setup paswordless shh connection between nodes\n# Add this path to /etc/environment on each node\nexport PATH=$PATH:/usr/lpp/mmfs/bin\n\nmmcrcluster -N  PRIMARY_NODE_HOSTNAME :manager-quorum -p PRIMARY_NODE_HOSTNAME -r /usr/bin/ssh -R /usr/bin/scp\nmmchlicense server --accept -N PRIMARY_NODE_HOSTNAME\nmmstartup -a\nmmaddnode -N  SECONDARY_NODE_HOSTNAME \nmmaddnode -N  THIRDARY_NODE_HOSTNAME \nmmaddnode -N  N-ARY_NODE_HOSTNAME \nmmchcluster -s  SECONDARY_NODE_HOSTNAME \nmmchlicense server --accept -N  SECONDARY_NODE_HOSTNAME \nmmchlicense server --accept -N  THIRDARY_NODE_HOSTNAME \nmmchlicense server --accept -N  N-ARY_NODE_HOSTNAME \nmmstartup -N  SECONDARY_NODE_HOSTNAME \nmmstartup -N  THIRDARY_NODE_HOSTNAME \nmmstartup -N  N-ARY_NODE_HOSTNAME \nmmchnode --quorum --manager -N  SECONDARY_NODE_HOSTNAME \n# To check status of cluster:\nmmlscluster\nmmgetstate -a   Create GPFS mirror partition:   # On primary node:\nmkdir /etc/gpfs\nvi /etc/gpfs/diskdesk.txt\n### --insert in diskdesk.txt--\nhdiskX:::dataAndMetadata:1:nsd1:\nhdiskY:::dataAndMetadata:2:nsd2:\n### --end of insert--\n\nmmcrnsd -F /etc/gpfs/diskdesk.txt\nmmshutdown -a\nmmchconfig tiebreakerdisks= nsd1;nsd2 \nmmstartup -a\nmmcrfs /mnt/gpfs gpfsfs -F /etc/gpfs/diskdesk.txt -A yes -B 512K -M2 -m2 -R2 -r2 -n 2 -N 50000\nmmlsconfig\nmmmount all -a\nmmchconfig minQuorumNodes=2\ndf -g", 
            "title": "GPFS:"
        }, 
        {
            "location": "/AIX/#network", 
            "text": "Shared Ethernet adapter coming soon", 
            "title": "Network:"
        }, 
        {
            "location": "/AIX/#hardware", 
            "text": "# Refresh hardware configuration(aix and vios respectively):\ncfgmgr\ncfgdev\n# Rename hard drive:\nrendev -l  old_name  -n  new_name \nrendev -l hdisk3 -n hdisk33\n# Enable PVID:\nchdev -l hdiskX -a pv=yes\n# Change reserve policy to hard drive\nchdev -l hdiskX -a reserve_policy=no_reserve\n# Clear the owning volume manager from a disk\nchpv -C hdiskX", 
            "title": "Hardware:"
        }, 
        {
            "location": "/AIX/#virtual-devices", 
            "text": "# Checking all virtual mappings to particular vhost:\nlsmap -vadapter vhost\n# Make a virtual hard drive for particular vhost:\n# -f - flag to forcing device creation if you're making shared hard drive\nmkvdev [-f] -vdev hdiskX -vadapter vhostX -dev  virtual_device_name \n# Make a virtual cd-rom device for particular vhost:\nmkvdev -fbo -vadapter vhostX -dev  virtual_device_name", 
            "title": "Virtual devices:"
        }, 
        {
            "location": "/Tech/Aix_OS/", 
            "text": "IBM AIX and VIOS commands\n\n\nInspired by \nJoshua Levy\n and his great \nThe-Art-Of-Command-Line\n\n\n\n\nIt's only my view on useful commands and this examples are useful for me in first place.\n\n\n\n\n\n\nReturn to Command Line\n\n\nBasic commands\n\n\nGPFS\n\n\nNetwork\n\n\nHardware\n\n\nVirtual Devices\n\n\n\n\nBasic commands:\n\n\n\n\nManagement\n\n\n\n\n# Exit from basic VIOS console to common AIX ksh\noem_setup_env\n# Adminitration and configuration console\nsmit\n\n#If you want to use bash as a login shell, you first have to add it to the\n#list of shells in /etc/security/login.cfg. \n#Then use `chsh` to change your individual setting.\n\n\n\n\n\n\nSoftware installation:\n\n\n\n\ncd \npath_to_package\n\ninutoc .\ninstallp -aXY -d\npath_to_package\n all\n# Check if package is installed or not:\nlslpp -L \npackage_name\n\n\n\n\n\n\n\nMirroring rootvg:\n\n\n\n\nextendvg rootvg hdisk1\nmirrorvg rootvg\nbootlist -m normal hdisk0 hdisk1 \nbosboot -ad hdisk0\nbosboot -ad hdisk1\n# Checking\nbootlist -o -m normal\n\n\n\n\nGPFS:\n\n\n\n\nInstalaltion:\n\n\n\n\n# on each LPAR:\ncd /\npath_to_gpfs_base_package\n/base-3-5/\ninutoc .\ninstallp -aXY -d/\npath_to_gpfs_base_package\n/base-3-5 all\ncd /\npath_to_gpfs_fix_package\n/fix-3-5-10/\ninutoc .\ninstallp -aXY -d/\npath_to_gpfs_fix_package\n/fix-3-5-10 all\nlslpp -L gpfs.\\*\n\n\n\n\n\n\nCreating cluster:\n\n\n\n\n# You need to setup paswordless shh connection between nodes\n# Add this path to /etc/environment on each node\nexport PATH=$PATH:/usr/lpp/mmfs/bin\n\nmmcrcluster -N \nPRIMARY_NODE_HOSTNAME\n:manager-quorum -p PRIMARY_NODE_HOSTNAME -r /usr/bin/ssh -R /usr/bin/scp\nmmchlicense server --accept -N PRIMARY_NODE_HOSTNAME\nmmstartup -a\nmmaddnode -N \nSECONDARY_NODE_HOSTNAME\n\nmmaddnode -N \nTHIRDARY_NODE_HOSTNAME\n\nmmaddnode -N \nN-ARY_NODE_HOSTNAME\n\nmmchcluster -s \nSECONDARY_NODE_HOSTNAME\n\nmmchlicense server --accept -N \nSECONDARY_NODE_HOSTNAME\n\nmmchlicense server --accept -N \nTHIRDARY_NODE_HOSTNAME\n\nmmchlicense server --accept -N \nN-ARY_NODE_HOSTNAME\n\nmmstartup -N \nSECONDARY_NODE_HOSTNAME\n\nmmstartup -N \nTHIRDARY_NODE_HOSTNAME\n\nmmstartup -N \nN-ARY_NODE_HOSTNAME\n\nmmchnode --quorum --manager -N \nSECONDARY_NODE_HOSTNAME\n\n# To check status of cluster:\nmmlscluster\nmmgetstate -a\n\n\n\n\n\n\nCreate GPFS mirror partition:\n\n\n\n\n# On primary node:\nmkdir /etc/gpfs\nvi /etc/gpfs/diskdesk.txt\n### --insert in diskdesk.txt--\nhdiskX:::dataAndMetadata:1:nsd1:\nhdiskY:::dataAndMetadata:2:nsd2:\n### --end of insert--\n\nmmcrnsd -F /etc/gpfs/diskdesk.txt\nmmshutdown -a\nmmchconfig tiebreakerdisks=\nnsd1;nsd2\n\nmmstartup -a\nmmcrfs /mnt/gpfs gpfsfs -F /etc/gpfs/diskdesk.txt -A yes -B 512K -M2 -m2 -R2 -r2 -n 2 -N 50000\nmmlsconfig\nmmmount all -a\nmmchconfig minQuorumNodes=2\ndf -g\n\n\n\n\nNetwork:\n\n\nShared Ethernet adapter coming soon\n\n\n\n\nHardware:\n\n\n# Refresh hardware configuration(aix and vios respectively):\ncfgmgr\ncfgdev\n# Rename hard drive:\nrendev -l \nold_name\n -n \nnew_name\n\nrendev -l hdisk3 -n hdisk33\n# Enable PVID:\nchdev -l hdiskX -a pv=yes\n# Change reserve policy to hard drive\nchdev -l hdiskX -a reserve_policy=no_reserve\n# Clear the owning volume manager from a disk\nchpv -C hdiskX\n\n\n\n\nVirtual devices:\n\n\n# Checking all virtual mappings to particular vhost:\nlsmap -vadapter vhost\n# Make a virtual hard drive for particular vhost:\n# -f - flag to forcing device creation if you're making shared hard drive\nmkvdev [-f] -vdev hdiskX -vadapter vhostX -dev \nvirtual_device_name\n\n# Make a virtual cd-rom device for particular vhost:\nmkvdev -fbo -vadapter vhostX -dev \nvirtual_device_name", 
            "title": "Aix OS"
        }, 
        {
            "location": "/Tech/Aix_OS/#ibm-aix-and-vios-commands", 
            "text": "Inspired by  Joshua Levy  and his great  The-Art-Of-Command-Line   It's only my view on useful commands and this examples are useful for me in first place.    Return to Command Line  Basic commands  GPFS  Network  Hardware  Virtual Devices", 
            "title": "IBM AIX and VIOS commands"
        }, 
        {
            "location": "/Tech/Aix_OS/#basic-commands", 
            "text": "Management   # Exit from basic VIOS console to common AIX ksh\noem_setup_env\n# Adminitration and configuration console\nsmit\n\n#If you want to use bash as a login shell, you first have to add it to the\n#list of shells in /etc/security/login.cfg. \n#Then use `chsh` to change your individual setting.   Software installation:   cd  path_to_package \ninutoc .\ninstallp -aXY -d path_to_package  all\n# Check if package is installed or not:\nlslpp -L  package_name    Mirroring rootvg:   extendvg rootvg hdisk1\nmirrorvg rootvg\nbootlist -m normal hdisk0 hdisk1 \nbosboot -ad hdisk0\nbosboot -ad hdisk1\n# Checking\nbootlist -o -m normal", 
            "title": "Basic commands:"
        }, 
        {
            "location": "/Tech/Aix_OS/#gpfs", 
            "text": "Instalaltion:   # on each LPAR:\ncd / path_to_gpfs_base_package /base-3-5/\ninutoc .\ninstallp -aXY -d/ path_to_gpfs_base_package /base-3-5 all\ncd / path_to_gpfs_fix_package /fix-3-5-10/\ninutoc .\ninstallp -aXY -d/ path_to_gpfs_fix_package /fix-3-5-10 all\nlslpp -L gpfs.\\*   Creating cluster:   # You need to setup paswordless shh connection between nodes\n# Add this path to /etc/environment on each node\nexport PATH=$PATH:/usr/lpp/mmfs/bin\n\nmmcrcluster -N  PRIMARY_NODE_HOSTNAME :manager-quorum -p PRIMARY_NODE_HOSTNAME -r /usr/bin/ssh -R /usr/bin/scp\nmmchlicense server --accept -N PRIMARY_NODE_HOSTNAME\nmmstartup -a\nmmaddnode -N  SECONDARY_NODE_HOSTNAME \nmmaddnode -N  THIRDARY_NODE_HOSTNAME \nmmaddnode -N  N-ARY_NODE_HOSTNAME \nmmchcluster -s  SECONDARY_NODE_HOSTNAME \nmmchlicense server --accept -N  SECONDARY_NODE_HOSTNAME \nmmchlicense server --accept -N  THIRDARY_NODE_HOSTNAME \nmmchlicense server --accept -N  N-ARY_NODE_HOSTNAME \nmmstartup -N  SECONDARY_NODE_HOSTNAME \nmmstartup -N  THIRDARY_NODE_HOSTNAME \nmmstartup -N  N-ARY_NODE_HOSTNAME \nmmchnode --quorum --manager -N  SECONDARY_NODE_HOSTNAME \n# To check status of cluster:\nmmlscluster\nmmgetstate -a   Create GPFS mirror partition:   # On primary node:\nmkdir /etc/gpfs\nvi /etc/gpfs/diskdesk.txt\n### --insert in diskdesk.txt--\nhdiskX:::dataAndMetadata:1:nsd1:\nhdiskY:::dataAndMetadata:2:nsd2:\n### --end of insert--\n\nmmcrnsd -F /etc/gpfs/diskdesk.txt\nmmshutdown -a\nmmchconfig tiebreakerdisks= nsd1;nsd2 \nmmstartup -a\nmmcrfs /mnt/gpfs gpfsfs -F /etc/gpfs/diskdesk.txt -A yes -B 512K -M2 -m2 -R2 -r2 -n 2 -N 50000\nmmlsconfig\nmmmount all -a\nmmchconfig minQuorumNodes=2\ndf -g", 
            "title": "GPFS:"
        }, 
        {
            "location": "/Tech/Aix_OS/#network", 
            "text": "Shared Ethernet adapter coming soon", 
            "title": "Network:"
        }, 
        {
            "location": "/Tech/Aix_OS/#hardware", 
            "text": "# Refresh hardware configuration(aix and vios respectively):\ncfgmgr\ncfgdev\n# Rename hard drive:\nrendev -l  old_name  -n  new_name \nrendev -l hdisk3 -n hdisk33\n# Enable PVID:\nchdev -l hdiskX -a pv=yes\n# Change reserve policy to hard drive\nchdev -l hdiskX -a reserve_policy=no_reserve\n# Clear the owning volume manager from a disk\nchpv -C hdiskX", 
            "title": "Hardware:"
        }, 
        {
            "location": "/Tech/Aix_OS/#virtual-devices", 
            "text": "# Checking all virtual mappings to particular vhost:\nlsmap -vadapter vhost\n# Make a virtual hard drive for particular vhost:\n# -f - flag to forcing device creation if you're making shared hard drive\nmkvdev [-f] -vdev hdiskX -vadapter vhostX -dev  virtual_device_name \n# Make a virtual cd-rom device for particular vhost:\nmkvdev -fbo -vadapter vhostX -dev  virtual_device_name", 
            "title": "Virtual devices:"
        }, 
        {
            "location": "/Tech/Commands/", 
            "text": "Command line examples\n\n\nInspired by \nJoshua Levy\n and his great \nThe-Art-Of-Command-Line\n\n\n\n\nIt's only my view on useful commands and this examples are useful for me in first place.\n\n\n\n\n\n\nAIX\n\n\nFiles and folders manipulation\n\n\nHardware\n\n\nNetwork\n\n\nPackage management\n\n\nRemote management\n\n\nSecurity\n\n\nVersion control\n\n\nVirtual and independent environment\n\n\nX Server\n\n\nMiscellaneous\n\n\n\n\nFiles and folders manipulation:\n\n\n\n\nChange permisions recursively or you can use a simple \nScript\n\n\n\n\nfind \npath_to_folder\n -type f -print -exec chmod 644 {} \\;\nfind \npath_to_folder\n -type d -print -exec chmod 755 {} \\;\n\n\n\n\n\n\nCount files\n\n\n\n\nfind . -type f | wc -l\nls | wc -l\n\n\n\n\n\n\nRemove file list\n\n\n\n\nls | xargs rm\n\n\n\n\n\n\nRemove file suffix \"filename\"+\"suffix\"\n\n\n\n\nfor i in `find . -type f -name \n*\nsuffix\n*\n`; do dst=`echo $i | sed s/\nsuffix\n//`;mv $i $dst; done\n\n\n\n\n\n\nMove all files in one level directory in certain folder to another\n\n\n\n\nfind /\npath_to_folder\n/* -prune -type f | xargs -I '{}' mv {} /\npath_to_destination_folder\n/archive/.\n\n\n\n\n\n\nSearch for certain file contents\n\n\n\n\nfind . -type f -name \n*conf\n -exec echo {} \\; -exec grep 192.168.0.1:3389 {} \\;\n\n\n\n\n\n\nShow directories content recursively\n\n\n\n\nls -R /path | awk '\n/:$/\nf{s=$0;f=0}\n/:$/\n!f{sub(/:$/,\n);s=$0;f=1;next}\nNF\nf{ print s\n/\n$0 }'\n\n\n\n\n\n\nMake dirs with indexes\n\n\n\n\nfor i in 0{1..9} {10..39}; do mkdir delete-$i; cd delete-$i; touch del-file-$i; cd ..; done\n\n\n\n\n\n\nCreate bunch of files from list in a file:\n\n\n\n\n# Predefined number of records\nhead -\nnumber_of_lines\n inventory | awk '{ print $1 }' | xargs -I '{}' \ndestination_folder\n/{}\n#E.g. head -10 inventory | awk '{ print $1 }' | xargs -I '{}' touch host_vars/{}\n\n# Whole list from file\ncat \nfilename\n | awk '{ print $1 }' | xargs -I '{}' \ndestination_folder\n/{}\n#E.g. cat inventory | awk '{ print $1 }' | xargs -I '{}' host_vars/{}\n\n\n\n\n\n\nMove bunch of folders:\n\n\n\n\nls -1d \nspace separeated folder list\n | xargs -I '{}' mv {} \ndestination\n\n#E.g. ls -1d command_line dotfiles-srv programmming-examples shell_scripts | xargs -I '{}' mv {} github/\n\n\n\n\nHardware:\n\n\n\n\nAll hardware \n\n\n\n\nhwinfo\n\n\n\n\n\n\nRAW Devices:\n\n\n\n\n# ISO to USB:\ndd bs=4M if=/path/to/\niso_image\n of=/dev/sdX \n sync\n\n\n\n\n\n\nCPU\n\n\n\n\nlscpu\ncat /proc/cpuinfo\n\n\n\n\n\n\nFilesystems:\n\n\n\n\n#Show information about mounted file systems with 'column' examples**\ndf -h | column -t\nmount -l | column -t\n\n\n\n\n\n\nRAM:\n\n\n\n\n# Basic commands:\nvmstat -s\ncat /proc/meminfo\nfree -m\n# Sum of used RAM\nps -eo rss,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(\n%13.2f Mb \n,hr) } { for ( x=4 ; x\n=NF ; x++ ) { printf(\n%s \n,$x) } print \n }' | awk '{print $1}' | paste -sd+ | bc\n# Clean RAM buffer and swap cache\nsync \n echo 3 \n /proc/sys/vm/drop_caches\n\n\n\n\nNetwork:\n\n\n\n\nTCPDUMP (with all commands use '| head' optionally)\n\n\n\n\n# Capture bunch of packets\ntcpdump -w capture.pcap\n# Show list of unique tcp or udp connections ip addresses\ntcpdump -nn -r capture.pcap 'tcp or udp' | cut -f 3 -d \n \n | cut -f 1-4 -d \n.\n | sort | uniq | sort -nr\n# Show list of unique destinations with SYN flag(\u2018tcp[13]=2\u2019)\ntcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 5 -d \n \n | sort | uniq -c | sort -nr\n# Show list of unique sources with SYN flag(\u2018tcp[13]=2\u2019)\ntcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 3 -d \n \n | cut -f 1-4 -d \n.\n | sort | uniq -c | sort -nr\n# Search for plain texts (-A)\ntcpdump -Ann -r capture.pcap 'dst port 25 or dst port 514 or dst port 110 or dst port 21 or dst port 53 or dst port 80'\n# Search for top level domains (optiolally for names only: | grep -E '[a-z]')\ntcpdump -nn -r capture.pcap 'port 53' | grep -Ev '(com|ru|net|org|gov|mil|arpa)' | cut -f 9 -d \n \n  \n# Investigate HTTP traffic\ntcpdump -Ann -r capture.pcap 'port 80' | grep 'HTTP' | grep -Ev '(GET|HEAD)'\n# Search HTTP traffic for user-agent list\ntcpdump -Ann -r capture.pcap 'port 80' | grep -Ei 'user-agent' | sort | uniq -c | sort -n\ntcpdump -Ann -r capture.pcap 'port 80' | sed -n '/Mozilla/,$p'\n# Pcap repository (-C filesize in MBytes, -W number of files, -G time in seconds, %s timestamp)\nsudo -b tcpdump -nn -i eth0 -w capture.pcap -C 1 -W 5         \nsudo -b tcpdump -nn -i eth0 -w capture-%s.pcap -G 600 -W 5    \n# Dealing with pcap files\nfor capfile in $(ls *.pcap); do tcpdump -nnr $capfile 'dst port 53'; done  \n\n\n\n\n\n\nNetworkManager: show connection info\n\n\n\n\nnmcli device show eth0\n\n\n\n\n\n\nCheck own IP address\n\n\n\n\ncurl -s checkip.dyndns.org\n\n\n\n\n\n\nShare current folder over HTTP\n\n\n\n\npython2 -m SimpleHTTPServer 8080\npython3 -mhttp.server 8080\n\n\n\n\nPackage management:\n\n\n\n\nApt:\n\n\n\n\n# Show installed packages\napt --installed list\n# Search for software\napt-cache search \npattern\n\n# Install package\napt-get install \npackage_name\n\n\n\n\n\n\n\nDpkg: \n\n\n\n\n# To get a list of packages installed locally do this in your terminal:\ndpkg --get-selections | grep -v deinstall\n# To get a list of a specific package installed:\ndpkg --get-selections | grep postgres\n# To save that list to a text file called packages on your desktop do this in your terminal:\ndpkg --get-selections | grep -v deinstall \n ~/Desktop/packages\n# Alternatively, simply use\ndpkg -l\n\n\n\n\n\n\nPacman:\n\n\n\n\n# Search for software\npacman -Ss \npattern\n\n# Install package\npacman -S \npackage_name\n\n# Update the system\npacman -Syu\n# Remove orphaned packages (Be careful, double check for list of deleted packages)\npacman -Rscn $(pacman -Qtdq)\npacman -Sc\npacman-optimize \n sync\n\n\n\n\n\n\nYum:\n\n\n\n\n# Search for software\nyum search \npattern\n\n# Install package\nyum install \npackage_name\n\n# Repair \nError: database disk image is malformed\n\nyum clean dbcache\n\n\n\n\nRemote management:\n\n\n\n\nXfreeRDP\n\n\n\n\nxfreerdp [+clipboard]/w:\nWIDTH\n /h:\nHEIGHT\n /drive:\ncuatom_drive_name\n,\npath_to_attach\n /v:\nip\n:\nport\n /u:\nuser_name\n\nxfreerdp +clipboard /w:1600 /h:900 /v:10.15.0.10:3389 /u:Administrator\nxfreerdp +clipboard /w:1800 /h:1000 /u:Adminitatrator /drive:hmc,/home/4T/IT/IBM/HMC/7.9_sp3 /v:10.15.0.10\n\n\n\n\nSecurity:\n\n\n\n\nIPTables\n\n\n\n\n# Show rules\niptables -nvL\niptable -t nat -nvL\n\n\n\n\n\n\nDisabling SELinux\n\n\n\n\nsed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux \n cat /etc/sysconfig/selinux\n\n\n\n\nVersion control:\n\n\n\n\nGit: Global settings\n\n\n\n\ngit config --global user.name \nYour Name\n\ngit config --global user.email your@e-mail.com\n\n\n\n\n\n\nGit: Create new repository\n\n\n\n\nmkdir -p \npath_to_repository\n\ncd \npath_to_repository\n\ngit add .\ngit commit -m \nInitialization\n\ngit remote add origin https://github.com/username/\nrepository\n.git\ngit push -u origin master\ngit checkout \n\n\n\n\n\n\nGit: New commit\n\n\n\n\n# Addition of new files with automatic staging of deleted and modified files\ngit add .\ngit commit -a -m \nnew commentary\n\ngit push -u origin master\n\n\n\n\n\n\nGit: update local reposytory from remote\n\n\n\n\n# Fentch + Merge\ngit pull\n# Fetch only\ngit fetch\n# Fetch changes from remote repository with modified local repository\ngit commit -a -m \nnew commentary\n\ngit pull rebase\n# pull remote with overwrite local changes\ngit fetch --all\ngit reset --hard origin/master\n\n\n\n\n\n\nGit: Working with bunch of  repositories\n\n\n\n\n# Last commits\nfor d in `ls`; do cd $d; git log --pretty=format:\n%h - %an, %ar : %s\n -1; cd ..; done\n# Mass checkout\nfor d in `ls`; do cd $d; git checkout; cd ..; done\n\n\n\n\n\n\nGitHub: Independent history catalogs of git repository\n\n\n\n\n# Makes a bunch of history folders formatted by the next way: \nrepository\n-\nnumber_of_commit\n-\ncommit_hash\n\n# Check commit_list.end for mistakes, you need simple list of commits\ngit clone \nrepository_url\n \nrepository\n\ncd \nrepository\n \n git log --pretty=format:\n%h\n \n ../commit_list \n cd ..\ntac commit_list \n commit_list.end \ni=1; for cid in `cat commit_list.end`; do cp -r \nrepository\n \nrepository\n-$i-$cid; cd \nrepository\n-$i-$cid; git checkout $cid; cd ..; ((i=i+1)); done\n\n\n\n\n\n\nGitHub: Clone all user's repository\n\n\n\n\n# Get complete list of user's repositories in JSON file\ncurl -s https://api.github.com/users/\nusername\n/repos?per_page=200 \n repo.list.json\npython -c \nimport json,sys,os;file = open('repo.list.json' ,'r');obj = json.load(file);obj_size = len(obj);cmd = 'git clone  ';[os.system(cmd + obj[x]['clone_url']) for x in range(0, obj_size)];file.close()\n\n# And dont forget about \nspace\n(%20, \n \n) in cmd = 'git clone ', it's completely nessesary\n# Another way to clone up to 200 user's repos(just in shell): \ncurl -s https://api.github.com/users/keepbot/repos?per_page=200 | jq '.[] | .\nclone_url\n' | xargs -I '{}' git clone {}\n\n\n\n\nVirtual and independent environment:\n\n\n\n\nDocker:\n\n\n\n\n# Execute in-docker console\nsudo docker exec -it \ncontainer\n bash\n# Create JSON with container settings\ndocker inspect -f '{{ json .NetworkSettings }}' \ncontainer_id\n | python -mjson.tool\n# Add custom docker registry\nmkdir /etc/systemd/system/docker.service.d/\ntouch /etc/systemd/system/docker.service.d/docker_opts.conf\nvi /etc/systemd/system/docker.service.d/docker_opts.conf\n# --- docker_opts.conf contents ---\n[Service]\nExecStart=\nExecStart=/usr/bin/docker -d -H fd:// --insecure-registry \ndocker_registry_url\n --registry-mirror \nmirror_url\n\n# ---------------------------------\nsystemctl daemon-reload\nservice docker restart\n\n\n\n\n\n\nWINE\n\n\n\n\nWINEARCH=\nwine32_or_wine64\n WINEPREFIX=/home/wine/\ncustom_prefix\n wine \npath_to_executable\n\n\n\n\n\nX Server:\n\n\n\n\nStart full-screen application in different X server\n\n\n\n\n/usr/bin/xinit \npath_to_fullscreen_application\n -- :1\n\n\n\n\n\n\nExport X display to current ssh connection\n\n\n\n\nexport DISPLAY=\n${SSH_CLIENT%% *}\n\n\n\n\n\nMiscellaneous:\n\n\n\n\nTMUX\n\n\n\n\ntmux list-sessions\ntmux attach -t 2\n\n\n\n\n\n\nCool weather\n\n\n\n\ncurl http://wttr.in/moscow\n\n\n\n\n\n\nKill all proesses with certain name\n\n\n\n\nps ax | grep http | awk '{print $1}' | xargs kill", 
            "title": "Commands"
        }, 
        {
            "location": "/Tech/Commands/#command-line-examples", 
            "text": "Inspired by  Joshua Levy  and his great  The-Art-Of-Command-Line   It's only my view on useful commands and this examples are useful for me in first place.    AIX  Files and folders manipulation  Hardware  Network  Package management  Remote management  Security  Version control  Virtual and independent environment  X Server  Miscellaneous", 
            "title": "Command line examples"
        }, 
        {
            "location": "/Tech/Commands/#files-and-folders-manipulation", 
            "text": "Change permisions recursively or you can use a simple  Script   find  path_to_folder  -type f -print -exec chmod 644 {} \\;\nfind  path_to_folder  -type d -print -exec chmod 755 {} \\;   Count files   find . -type f | wc -l\nls | wc -l   Remove file list   ls | xargs rm   Remove file suffix \"filename\"+\"suffix\"   for i in `find . -type f -name  * suffix * `; do dst=`echo $i | sed s/ suffix //`;mv $i $dst; done   Move all files in one level directory in certain folder to another   find / path_to_folder /* -prune -type f | xargs -I '{}' mv {} / path_to_destination_folder /archive/.   Search for certain file contents   find . -type f -name  *conf  -exec echo {} \\; -exec grep 192.168.0.1:3389 {} \\;   Show directories content recursively   ls -R /path | awk '\n/:$/ f{s=$0;f=0}\n/:$/ !f{sub(/:$/, );s=$0;f=1;next}\nNF f{ print s / $0 }'   Make dirs with indexes   for i in 0{1..9} {10..39}; do mkdir delete-$i; cd delete-$i; touch del-file-$i; cd ..; done   Create bunch of files from list in a file:   # Predefined number of records\nhead - number_of_lines  inventory | awk '{ print $1 }' | xargs -I '{}'  destination_folder /{}\n#E.g. head -10 inventory | awk '{ print $1 }' | xargs -I '{}' touch host_vars/{}\n\n# Whole list from file\ncat  filename  | awk '{ print $1 }' | xargs -I '{}'  destination_folder /{}\n#E.g. cat inventory | awk '{ print $1 }' | xargs -I '{}' host_vars/{}   Move bunch of folders:   ls -1d  space separeated folder list  | xargs -I '{}' mv {}  destination \n#E.g. ls -1d command_line dotfiles-srv programmming-examples shell_scripts | xargs -I '{}' mv {} github/", 
            "title": "Files and folders manipulation:"
        }, 
        {
            "location": "/Tech/Commands/#hardware", 
            "text": "All hardware    hwinfo   RAW Devices:   # ISO to USB:\ndd bs=4M if=/path/to/ iso_image  of=/dev/sdX   sync   CPU   lscpu\ncat /proc/cpuinfo   Filesystems:   #Show information about mounted file systems with 'column' examples**\ndf -h | column -t\nmount -l | column -t   RAM:   # Basic commands:\nvmstat -s\ncat /proc/meminfo\nfree -m\n# Sum of used RAM\nps -eo rss,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf( %13.2f Mb  ,hr) } { for ( x=4 ; x =NF ; x++ ) { printf( %s  ,$x) } print   }' | awk '{print $1}' | paste -sd+ | bc\n# Clean RAM buffer and swap cache\nsync   echo 3   /proc/sys/vm/drop_caches", 
            "title": "Hardware:"
        }, 
        {
            "location": "/Tech/Commands/#network", 
            "text": "TCPDUMP (with all commands use '| head' optionally)   # Capture bunch of packets\ntcpdump -w capture.pcap\n# Show list of unique tcp or udp connections ip addresses\ntcpdump -nn -r capture.pcap 'tcp or udp' | cut -f 3 -d     | cut -f 1-4 -d  .  | sort | uniq | sort -nr\n# Show list of unique destinations with SYN flag(\u2018tcp[13]=2\u2019)\ntcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 5 -d     | sort | uniq -c | sort -nr\n# Show list of unique sources with SYN flag(\u2018tcp[13]=2\u2019)\ntcpdump -nn -r capture.pcap 'tcp[13]=2' | cut -f 3 -d     | cut -f 1-4 -d  .  | sort | uniq -c | sort -nr\n# Search for plain texts (-A)\ntcpdump -Ann -r capture.pcap 'dst port 25 or dst port 514 or dst port 110 or dst port 21 or dst port 53 or dst port 80'\n# Search for top level domains (optiolally for names only: | grep -E '[a-z]')\ntcpdump -nn -r capture.pcap 'port 53' | grep -Ev '(com|ru|net|org|gov|mil|arpa)' | cut -f 9 -d      \n# Investigate HTTP traffic\ntcpdump -Ann -r capture.pcap 'port 80' | grep 'HTTP' | grep -Ev '(GET|HEAD)'\n# Search HTTP traffic for user-agent list\ntcpdump -Ann -r capture.pcap 'port 80' | grep -Ei 'user-agent' | sort | uniq -c | sort -n\ntcpdump -Ann -r capture.pcap 'port 80' | sed -n '/Mozilla/,$p'\n# Pcap repository (-C filesize in MBytes, -W number of files, -G time in seconds, %s timestamp)\nsudo -b tcpdump -nn -i eth0 -w capture.pcap -C 1 -W 5         \nsudo -b tcpdump -nn -i eth0 -w capture-%s.pcap -G 600 -W 5    \n# Dealing with pcap files\nfor capfile in $(ls *.pcap); do tcpdump -nnr $capfile 'dst port 53'; done     NetworkManager: show connection info   nmcli device show eth0   Check own IP address   curl -s checkip.dyndns.org   Share current folder over HTTP   python2 -m SimpleHTTPServer 8080\npython3 -mhttp.server 8080", 
            "title": "Network:"
        }, 
        {
            "location": "/Tech/Commands/#package-management", 
            "text": "Apt:   # Show installed packages\napt --installed list\n# Search for software\napt-cache search  pattern \n# Install package\napt-get install  package_name    Dpkg:    # To get a list of packages installed locally do this in your terminal:\ndpkg --get-selections | grep -v deinstall\n# To get a list of a specific package installed:\ndpkg --get-selections | grep postgres\n# To save that list to a text file called packages on your desktop do this in your terminal:\ndpkg --get-selections | grep -v deinstall   ~/Desktop/packages\n# Alternatively, simply use\ndpkg -l   Pacman:   # Search for software\npacman -Ss  pattern \n# Install package\npacman -S  package_name \n# Update the system\npacman -Syu\n# Remove orphaned packages (Be careful, double check for list of deleted packages)\npacman -Rscn $(pacman -Qtdq)\npacman -Sc\npacman-optimize   sync   Yum:   # Search for software\nyum search  pattern \n# Install package\nyum install  package_name \n# Repair  Error: database disk image is malformed \nyum clean dbcache", 
            "title": "Package management:"
        }, 
        {
            "location": "/Tech/Commands/#remote-management", 
            "text": "XfreeRDP   xfreerdp [+clipboard]/w: WIDTH  /h: HEIGHT  /drive: cuatom_drive_name , path_to_attach  /v: ip : port  /u: user_name \nxfreerdp +clipboard /w:1600 /h:900 /v:10.15.0.10:3389 /u:Administrator\nxfreerdp +clipboard /w:1800 /h:1000 /u:Adminitatrator /drive:hmc,/home/4T/IT/IBM/HMC/7.9_sp3 /v:10.15.0.10", 
            "title": "Remote management:"
        }, 
        {
            "location": "/Tech/Commands/#security", 
            "text": "IPTables   # Show rules\niptables -nvL\niptable -t nat -nvL   Disabling SELinux   sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux   cat /etc/sysconfig/selinux", 
            "title": "Security:"
        }, 
        {
            "location": "/Tech/Commands/#version-control", 
            "text": "Git: Global settings   git config --global user.name  Your Name \ngit config --global user.email your@e-mail.com   Git: Create new repository   mkdir -p  path_to_repository \ncd  path_to_repository \ngit add .\ngit commit -m  Initialization \ngit remote add origin https://github.com/username/ repository .git\ngit push -u origin master\ngit checkout    Git: New commit   # Addition of new files with automatic staging of deleted and modified files\ngit add .\ngit commit -a -m  new commentary \ngit push -u origin master   Git: update local reposytory from remote   # Fentch + Merge\ngit pull\n# Fetch only\ngit fetch\n# Fetch changes from remote repository with modified local repository\ngit commit -a -m  new commentary \ngit pull rebase\n# pull remote with overwrite local changes\ngit fetch --all\ngit reset --hard origin/master   Git: Working with bunch of  repositories   # Last commits\nfor d in `ls`; do cd $d; git log --pretty=format: %h - %an, %ar : %s  -1; cd ..; done\n# Mass checkout\nfor d in `ls`; do cd $d; git checkout; cd ..; done   GitHub: Independent history catalogs of git repository   # Makes a bunch of history folders formatted by the next way:  repository - number_of_commit - commit_hash \n# Check commit_list.end for mistakes, you need simple list of commits\ngit clone  repository_url   repository \ncd  repository    git log --pretty=format: %h    ../commit_list   cd ..\ntac commit_list   commit_list.end \ni=1; for cid in `cat commit_list.end`; do cp -r  repository   repository -$i-$cid; cd  repository -$i-$cid; git checkout $cid; cd ..; ((i=i+1)); done   GitHub: Clone all user's repository   # Get complete list of user's repositories in JSON file\ncurl -s https://api.github.com/users/ username /repos?per_page=200   repo.list.json\npython -c  import json,sys,os;file = open('repo.list.json' ,'r');obj = json.load(file);obj_size = len(obj);cmd = 'git clone  ';[os.system(cmd + obj[x]['clone_url']) for x in range(0, obj_size)];file.close() \n# And dont forget about  space (%20,    ) in cmd = 'git clone ', it's completely nessesary\n# Another way to clone up to 200 user's repos(just in shell): \ncurl -s https://api.github.com/users/keepbot/repos?per_page=200 | jq '.[] | . clone_url ' | xargs -I '{}' git clone {}", 
            "title": "Version control:"
        }, 
        {
            "location": "/Tech/Commands/#virtual-and-independent-environment", 
            "text": "Docker:   # Execute in-docker console\nsudo docker exec -it  container  bash\n# Create JSON with container settings\ndocker inspect -f '{{ json .NetworkSettings }}'  container_id  | python -mjson.tool\n# Add custom docker registry\nmkdir /etc/systemd/system/docker.service.d/\ntouch /etc/systemd/system/docker.service.d/docker_opts.conf\nvi /etc/systemd/system/docker.service.d/docker_opts.conf\n# --- docker_opts.conf contents ---\n[Service]\nExecStart=\nExecStart=/usr/bin/docker -d -H fd:// --insecure-registry  docker_registry_url  --registry-mirror  mirror_url \n# ---------------------------------\nsystemctl daemon-reload\nservice docker restart   WINE   WINEARCH= wine32_or_wine64  WINEPREFIX=/home/wine/ custom_prefix  wine  path_to_executable", 
            "title": "Virtual and independent environment:"
        }, 
        {
            "location": "/Tech/Commands/#x-server", 
            "text": "Start full-screen application in different X server   /usr/bin/xinit  path_to_fullscreen_application  -- :1   Export X display to current ssh connection   export DISPLAY= ${SSH_CLIENT%% *}", 
            "title": "X Server:"
        }, 
        {
            "location": "/Tech/Commands/#miscellaneous", 
            "text": "TMUX   tmux list-sessions\ntmux attach -t 2   Cool weather   curl http://wttr.in/moscow   Kill all proesses with certain name   ps ax | grep http | awk '{print $1}' | xargs kill", 
            "title": "Miscellaneous:"
        }
    ]
}